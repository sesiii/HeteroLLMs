[
    {
        "task_id": "CODE_10000832",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void main(String[] args) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void main(String[] args) {\n        LogFrame.getInstance();\n        for (int i = 0; i < args.length; i++) {\n            String arg = args[i];\n            if (arg.trim().startsWith(DEBUG_PARAMETER_NAME + \"=\")) {\n                properties.put(DEBUG_PARAMETER_NAME, arg.trim().substring(DEBUG_PARAMETER_NAME.length() + 1).trim());\n                if (properties.getProperty(DEBUG_PARAMETER_NAME).toLowerCase().equals(DEBUG_TRUE)) {\n                    DEBUG = true;\n                }\n            } else if (arg.trim().startsWith(MODE_PARAMETER_NAME + \"=\")) {\n                properties.put(MODE_PARAMETER_NAME, arg.trim().substring(MODE_PARAMETER_NAME.length() + 1).trim());\n            } else if (arg.trim().startsWith(AUTOCONNECT_PARAMETER_NAME + \"=\")) {\n                properties.put(AUTOCONNECT_PARAMETER_NAME, arg.trim().substring(AUTOCONNECT_PARAMETER_NAME.length() + 1).trim());\n            } else if (arg.trim().startsWith(SITE_CONFIG_URL_PARAMETER_NAME + \"=\")) {\n                properties.put(SITE_CONFIG_URL_PARAMETER_NAME, arg.trim().substring(SITE_CONFIG_URL_PARAMETER_NAME.length() + 1).trim());\n            } else if (arg.trim().startsWith(LOAD_PLUGINS_PARAMETER_NAME + \"=\")) {\n                properties.put(LOAD_PLUGINS_PARAMETER_NAME, arg.trim().substring(LOAD_PLUGINS_PARAMETER_NAME.length() + 1).trim());\n            } else if (arg.trim().startsWith(ONTOLOGY_URL_PARAMETER_NAME + \"=\")) {\n                properties.put(ONTOLOGY_URL_PARAMETER_NAME, arg.trim().substring(ONTOLOGY_URL_PARAMETER_NAME.length() + 1).trim());\n            } else if (arg.trim().startsWith(REPOSITORY_PARAMETER_NAME + \"=\")) {\n                properties.put(REPOSITORY_PARAMETER_NAME, arg.trim().substring(REPOSITORY_PARAMETER_NAME.length() + 1).trim());\n            } else if (arg.trim().startsWith(ONTOLOGY_TYPE_PARAMETER_NAME + \"=\")) {\n                properties.put(ONTOLOGY_TYPE_PARAMETER_NAME, arg.trim().substring(ONTOLOGY_TYPE_PARAMETER_NAME.length() + 1).trim());\n                if (!(properties.getProperty(ONTOLOGY_TYPE_PARAMETER_NAME).equals(ONTOLOGY_TYPE_RDFXML) || properties.getProperty(ONTOLOGY_TYPE_PARAMETER_NAME).equals(ONTOLOGY_TYPE_TURTLE) || properties.getProperty(ONTOLOGY_TYPE_PARAMETER_NAME).equals(ONTOLOGY_TYPE_NTRIPPLES))) System.out.println(\"WARNING! Unknown ontology type: '\" + properties.getProperty(ONTOLOGY_TYPE_PARAMETER_NAME) + \"' (Known types are: '\" + ONTOLOGY_TYPE_RDFXML + \"', '\" + ONTOLOGY_TYPE_TURTLE + \"', '\" + ONTOLOGY_TYPE_NTRIPPLES + \"')\");\n            } else if (arg.trim().startsWith(OWLIMSERVICE_URL_PARAMETER_NAME + \"=\")) {\n                properties.put(OWLIMSERVICE_URL_PARAMETER_NAME, arg.trim().substring(OWLIMSERVICE_URL_PARAMETER_NAME.length() + 1).trim());\n            } else if (arg.trim().startsWith(DOCSERVICE_URL_PARAMETER_NAME + \"=\")) {\n                properties.put(DOCSERVICE_URL_PARAMETER_NAME, arg.trim().substring(DOCSERVICE_URL_PARAMETER_NAME.length() + 1).trim());\n            } else if (arg.trim().startsWith(DOC_ID_PARAMETER_NAME + \"=\")) {\n                properties.put(DOC_ID_PARAMETER_NAME, arg.trim().substring(DOC_ID_PARAMETER_NAME.length() + 1).trim());\n            } else if (arg.trim().startsWith(ANNSET_NAME_PARAMETER_NAME + \"=\")) {\n                properties.put(ANNSET_NAME_PARAMETER_NAME, arg.trim().substring(ANNSET_NAME_PARAMETER_NAME.length() + 1).trim());\n            } else if (arg.trim().startsWith(EXECUTIVE_SERVICE_URL_PARAMETER_NAME + \"=\")) {\n                properties.put(EXECUTIVE_SERVICE_URL_PARAMETER_NAME, arg.trim().substring(EXECUTIVE_SERVICE_URL_PARAMETER_NAME.length() + 1).trim());\n            } else if (arg.trim().startsWith(USER_ID_PARAMETER_NAME + \"=\")) {\n                properties.put(USER_ID_PARAMETER_NAME, arg.trim().substring(USER_ID_PARAMETER_NAME.length() + 1).trim());\n            } else if (arg.trim().startsWith(USER_PASSWORD_PARAMETER_NAME + \"=\")) {\n                properties.put(USER_PASSWORD_PARAMETER_NAME, arg.trim().substring(USER_PASSWORD_PARAMETER_NAME.length() + 1).trim());\n            } else if (arg.trim().startsWith(EXECUTIVE_PROXY_FACTORY_PARAMETER_NAME + \"=\")) {\n                properties.put(EXECUTIVE_PROXY_FACTORY_PARAMETER_NAME, arg.trim().substring(EXECUTIVE_PROXY_FACTORY_PARAMETER_NAME.length() + 1).trim());\n            } else if (arg.trim().startsWith(DOCSERVICE_PROXY_FACTORY_PARAMETER_NAME + \"=\")) {\n                properties.put(DOCSERVICE_PROXY_FACTORY_PARAMETER_NAME, arg.trim().substring(DOCSERVICE_PROXY_FACTORY_PARAMETER_NAME.length() + 1).trim());\n                RichUIUtils.setDocServiceProxyFactoryClassname(properties.getProperty(DOCSERVICE_PROXY_FACTORY_PARAMETER_NAME));\n            } else if (arg.trim().startsWith(LOAD_ANN_SCHEMAS_NAME + \"=\")) {\n                properties.put(LOAD_ANN_SCHEMAS_NAME, arg.trim().substring(LOAD_ANN_SCHEMAS_NAME.length() + 1).trim());\n            } else if (arg.trim().startsWith(SELECT_AS_PARAMETER_NAME + \"=\")) {\n                properties.put(SELECT_AS_PARAMETER_NAME, arg.trim().substring(SELECT_AS_PARAMETER_NAME.length() + 1).trim());\n            } else if (arg.trim().startsWith(SELECT_ANN_TYPES_PARAMETER_NAME + \"=\")) {\n                properties.put(SELECT_ANN_TYPES_PARAMETER_NAME, arg.trim().substring(SELECT_ANN_TYPES_PARAMETER_NAME.length() + 1).trim());\n            } else if (arg.trim().startsWith(ENABLE_ONTOLOGY_EDITOR_PARAMETER_NAME + \"=\")) {\n                properties.put(ENABLE_ONTOLOGY_EDITOR_PARAMETER_NAME, arg.trim().substring(ENABLE_ONTOLOGY_EDITOR_PARAMETER_NAME.length() + 1).trim());\n            } else if (arg.trim().startsWith(CLASSES_TO_HIDE_PARAMETER_NAME + \"=\")) {\n                properties.put(CLASSES_TO_HIDE_PARAMETER_NAME, arg.trim().substring(CLASSES_TO_HIDE_PARAMETER_NAME.length() + 1).trim());\n            } else if (arg.trim().startsWith(CLASSES_TO_SHOW_PARAMETER_NAME + \"=\")) {\n                properties.put(CLASSES_TO_SHOW_PARAMETER_NAME, arg.trim().substring(CLASSES_TO_SHOW_PARAMETER_NAME.length() + 1).trim());\n            } else if (arg.trim().startsWith(ENABLE_APPLICATION_LOG_PARAMETER_NAME + \"=\")) {\n                properties.put(ENABLE_APPLICATION_LOG_PARAMETER_NAME, arg.trim().substring(ENABLE_APPLICATION_LOG_PARAMETER_NAME.length() + 1).trim());\n            } else {\n                System.out.println(\"WARNING! Unknown or undefined parameter: '\" + arg.trim() + \"'\");\n            }\n        }\n        System.out.println(startupParamsToString());\n        if (properties.getProperty(MODE_PARAMETER_NAME) == null || (!(properties.getProperty(MODE_PARAMETER_NAME).toLowerCase().equals(POOL_MODE)) && !(properties.getProperty(MODE_PARAMETER_NAME).toLowerCase().equals(DIRECT_MODE)))) {\n            String err = \"Mandatory parameter '\" + MODE_PARAMETER_NAME + \"' must be defined and must have a value either '\" + POOL_MODE + \"' or '\" + DIRECT_MODE + \"'.\\n\\nApplication will exit.\";\n            System.out.println(err);\n            JOptionPane.showMessageDialog(new JFrame(), err, \"Error!\", JOptionPane.ERROR_MESSAGE);\n            System.exit(-1);\n        }\n        if (properties.getProperty(SITE_CONFIG_URL_PARAMETER_NAME) == null || properties.getProperty(SITE_CONFIG_URL_PARAMETER_NAME).length() == 0) {\n            String err = \"Mandatory parameter '\" + SITE_CONFIG_URL_PARAMETER_NAME + \"' is missing.\\n\\nApplication will exit.\";\n            System.out.println(err);\n            JOptionPane.showMessageDialog(new JFrame(), err, \"Error!\", JOptionPane.ERROR_MESSAGE);\n            System.exit(-1);\n        }\n        try {\n            String context = System.getProperty(CONTEXT);\n            if (context == null || \"\".equals(context)) {\n                context = DEFAULT_CONTEXT;\n            }\n            String s = System.getProperty(GateConstants.GATE_HOME_PROPERTY_NAME);\n            if (s == null || s.length() == 0) {\n                File f = File.createTempFile(\"foo\", \"\");\n                String gateHome = f.getParent().toString() + context;\n                f.delete();\n                System.setProperty(GateConstants.GATE_HOME_PROPERTY_NAME, gateHome);\n                f = new File(System.getProperty(GateConstants.GATE_HOME_PROPERTY_NAME));\n                if (!f.exists()) {\n                    f.mkdirs();\n                }\n            }\n            s = System.getProperty(GateConstants.PLUGINS_HOME_PROPERTY_NAME);\n            if (s == null || s.length() == 0) {\n                System.setProperty(GateConstants.PLUGINS_HOME_PROPERTY_NAME, System.getProperty(GateConstants.GATE_HOME_PROPERTY_NAME) + \"/plugins\");\n                File f = new File(System.getProperty(GateConstants.PLUGINS_HOME_PROPERTY_NAME));\n                if (!f.exists()) {\n                    f.mkdirs();\n                }\n            }\n            s = System.getProperty(GateConstants.GATE_SITE_CONFIG_PROPERTY_NAME);\n            if (s == null || s.length() == 0) {\n                System.setProperty(GateConstants.GATE_SITE_CONFIG_PROPERTY_NAME, System.getProperty(GateConstants.GATE_HOME_PROPERTY_NAME) + \"/gate.xml\");\n            }\n            if (properties.getProperty(SITE_CONFIG_URL_PARAMETER_NAME) != null && properties.getProperty(SITE_CONFIG_URL_PARAMETER_NAME).length() > 0) {\n                File f = new File(System.getProperty(GateConstants.GATE_SITE_CONFIG_PROPERTY_NAME));\n                if (f.exists()) {\n                    f.delete();\n                }\n                f.getParentFile().mkdirs();\n                f.createNewFile();\n                URL url = new URL(properties.getProperty(SITE_CONFIG_URL_PARAMETER_NAME));\n                InputStream is = url.openStream();\n                FileOutputStream fos = new FileOutputStream(f);\n                int i = is.read();\n                while (i != -1) {\n                    fos.write(i);\n                    i = is.read();\n                }\n                fos.close();\n                is.close();\n            }\n            try {\n                Gate.init();\n                gate.Main.applyUserPreferences();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n            s = BASE_PLUGIN_NAME + \",\" + properties.getProperty(LOAD_PLUGINS_PARAMETER_NAME);\n            System.out.println(\"Loading plugins: \" + s);\n            loadPlugins(s, true);\n            loadAnnotationSchemas(properties.getProperty(LOAD_ANN_SCHEMAS_NAME), true);\n        } catch (Throwable e) {\n            e.printStackTrace();\n        }\n        MainFrame.getInstance().setVisible(true);\n        MainFrame.getInstance().pack();\n        if (properties.getProperty(MODE_PARAMETER_NAME).toLowerCase().equals(DIRECT_MODE)) {\n            if (properties.getProperty(AUTOCONNECT_PARAMETER_NAME, \"\").toLowerCase().equals(AUTOCONNECT_TRUE)) {\n                if (properties.getProperty(DOC_ID_PARAMETER_NAME) == null || properties.getProperty(DOC_ID_PARAMETER_NAME).length() == 0) {\n                    String err = \"Can't autoconnect. A parameter '\" + DOC_ID_PARAMETER_NAME + \"' is missing.\";\n                    System.out.println(err);\n                    JOptionPane.showMessageDialog(MainFrame.getInstance(), err, \"Error!\", JOptionPane.ERROR_MESSAGE);\n                    ActionShowDocserviceConnectDialog.getInstance().actionPerformed(null);\n                } else {\n                    ActionConnectToDocservice.getInstance().actionPerformed(null);\n                }\n            } else {\n                ActionShowDocserviceConnectDialog.getInstance().actionPerformed(null);\n            }\n        } else {\n            if (properties.getProperty(AUTOCONNECT_PARAMETER_NAME, \"\").toLowerCase().equals(AUTOCONNECT_TRUE)) {\n                if (properties.getProperty(USER_ID_PARAMETER_NAME) == null || properties.getProperty(USER_ID_PARAMETER_NAME).length() == 0) {\n                    String err = \"Can't autoconnect. A parameter '\" + USER_ID_PARAMETER_NAME + \"' is missing.\";\n                    System.out.println(err);\n                    JOptionPane.showMessageDialog(MainFrame.getInstance(), err, \"Error!\", JOptionPane.ERROR_MESSAGE);\n                    ActionShowExecutiveConnectDialog.getInstance().actionPerformed(null);\n                } else {\n                    ActionConnectToExecutive.getInstance().actionPerformed(null);\n                }\n            } else {\n                ActionShowExecutiveConnectDialog.getInstance().actionPerformed(null);\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10005623",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic synchronized String getSerialNumber() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public synchronized String getSerialNumber() {\n        if (serialNum != null) return serialNum;\n        final StringBuffer buf = new StringBuffer();\n        Iterator it = classpath.iterator();\n        while (it.hasNext()) {\n            ClassPathEntry entry = (ClassPathEntry) it.next();\n            buf.append(entry.getResourceURL().toString());\n            buf.append(\":\");\n        }\n        serialNum = (String) AccessController.doPrivileged(new PrivilegedAction() {\n\n            public Object run() {\n                try {\n                    MessageDigest digest = MessageDigest.getInstance(\"SHA\");\n                    digest.update(buf.toString().getBytes());\n                    byte[] data = digest.digest();\n                    serialNum = new BASE64Encoder().encode(data);\n                    return serialNum;\n                } catch (NoSuchAlgorithmException exp) {\n                    BootSecurityManager.securityLogger.log(Level.SEVERE, exp.getMessage(), exp);\n                    return buf.toString();\n                }\n            }\n        });\n        return serialNum;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10005624",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic Object run() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public Object run() {\n                try {\n                    MessageDigest digest = MessageDigest.getInstance(\"SHA\");\n                    digest.update(buf.toString().getBytes());\n                    byte[] data = digest.digest();\n                    serialNum = new BASE64Encoder().encode(data);\n                    return serialNum;\n                } catch (NoSuchAlgorithmException exp) {\n                    BootSecurityManager.securityLogger.log(Level.SEVERE, exp.getMessage(), exp);\n                    return buf.toString();\n                }\n            }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10005674",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic String post() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public String post() {\n        if (content == null || content.equals(\"\")) return \"Type something to publish!!\";\n        OutputStreamWriter wr = null;\n        BufferedReader rd = null;\n        try {\n            String data = URLEncoder.encode(\"api\", \"UTF-8\") + \"=\" + URLEncoder.encode(apiKey, \"UTF-8\");\n            data += \"&\" + URLEncoder.encode(\"content\", \"UTF-8\") + \"=\" + URLEncoder.encode(content, \"UTF-8\");\n            data += \"&\" + URLEncoder.encode(\"description\", \"UTF-8\") + \"=\" + URLEncoder.encode(descriptionTextArea.getText() + description_suffix, \"UTF-8\");\n            data += \"&\" + URLEncoder.encode(\"expiry\", \"UTF-8\") + \"=\" + URLEncoder.encode((String) expiryComboBox.getSelectedItem(), \"UTF-8\");\n            data += \"&\" + URLEncoder.encode(\"type\", \"UTF-8\") + \"=\" + URLEncoder.encode(type, \"UTF-8\");\n            data += \"&\" + URLEncoder.encode(\"name\", \"UTF-8\") + \"=\" + URLEncoder.encode(nameTextBox.getText(), \"UTF-8\");\n            URL url = new URL(\"http://pastebin.ca/quiet-paste.php\");\n            URLConnection conn = url.openConnection();\n            conn.setDoOutput(true);\n            wr = new OutputStreamWriter(conn.getOutputStream());\n            wr.write(data);\n            wr.flush();\n            rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n            String line;\n            line = rd.readLine();\n            if (line == null || line.length() < 8 || !line.substring(0, 8).equals(\"SUCCESS:\")) return \"Unknown error in publishing the post\"; else return \"*Publish successful.! The link to your post is.: \" + \"http://pastebin.ca/\" + line.substring(8);\n        } catch (IOException ex) {\n            return \"Unable to connect to http://pastebin.ca/\\nPlease check your internet connection\";\n        } finally {\n            try {\n                if (wr != null) wr.close();\n                if (rd != null) rd.close();\n            } catch (IOException ex) {\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10005879",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void onCreate(Bundle savedInstanceState) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        TextView tv = new TextView(this);\n        HttpClient client = new DefaultHttpClient();\n        HttpGet httpGetRequest = new HttpGet(\"http://www.google.com/\");\n        String line = \"\", responseString = \"\";\n        try {\n            HttpResponse response = client.execute(httpGetRequest);\n            if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                BufferedReader br = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));\n                while ((line = br.readLine()) != null) {\n                    responseString += line;\n                }\n                br.close();\n            }\n        } catch (ClientProtocolException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        tv.setText(responseString);\n        setContentView(tv);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10006171",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "byte[] makeIDPFXORMask() {\n        if (idpfMask == null) {\n            try {\n                MessageDigest sha = MessageDigest.getInstance(\"SHA-1\");\n                String temp = strip(getPrimaryIdentifier());\n                sha.update(temp.getBytes(\"UTF-8\"), 0, temp.length());\n                idpfMask = sha.digest();\n            } catch (NoSuchAlgorithmException e) {\n                System.err.println(\"No such Algorithm (really, did I misspell SHA-1?\");\n                System.err.println(e.toString());\n                return null;\n            } catch (IOException e) {\n                System.err.println(\"IO Exception. check out mask.write...\");\n                System.err.println(e.toString());\n                return null;\n            }\n        }\n        return idpfMask;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10006681",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copyFile(File src, File dest, int bufSize, boolean force) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copyFile(File src, File dest, int bufSize, boolean force) throws IOException {\n        if (dest.exists()) {\n            if (force) {\n                dest.delete();\n            } else {\n                throw new IOException(\"Cannot overwrite existing file: \" + dest.getName());\n            }\n        }\n        byte[] buffer = new byte[bufSize];\n        int read = 0;\n        InputStream in = null;\n        OutputStream out = null;\n        try {\n            in = new FileInputStream(src);\n            out = new FileOutputStream(dest);\n            while (true) {\n                read = in.read(buffer);\n                if (read == -1) {\n                    break;\n                }\n                out.write(buffer, 0, read);\n            }\n        } finally {\n            if (in != null) {\n                try {\n                    in.close();\n                } finally {\n                    if (out != null) {\n                        out.close();\n                    }\n                }\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10009723",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic File fetchHSMFile(String fsID, String filePath) throws HSMException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n    public File fetchHSMFile(String fsID, String filePath) throws HSMException {\n        log.debug(\"fetchHSMFile called with fsID=\" + fsID + \", filePath=\" + filePath);\n        if (absIncomingDir.mkdirs()) {\n            log.info(\"M-WRITE \" + absIncomingDir);\n        }\n        File tarFile;\n        try {\n            tarFile = File.createTempFile(\"hsm_\", \".tar\", absIncomingDir);\n        } catch (IOException x) {\n            throw new HSMException(\"Failed to create temp file in \" + absIncomingDir, x);\n        }\n        log.info(\"Fetching \" + filePath + \" from cloud storage\");\n        FileOutputStream fos = null;\n        try {\n            if (s3 == null) createClient();\n            S3Object object = s3.getObject(new GetObjectRequest(bucketName, filePath));\n            fos = new FileOutputStream(tarFile);\n            IOUtils.copy(object.getObjectContent(), fos);\n        } catch (AmazonClientException ace) {\n            s3 = null;\n            throw new HSMException(\"Could not list objects for: \" + filePath, ace);\n        } catch (Exception x) {\n            throw new HSMException(\"Failed to retrieve \" + filePath, x);\n        } finally {\n            if (fos != null) {\n                try {\n                    fos.close();\n                } catch (IOException e) {\n                    log.error(\"Couldn't close output stream for: \" + tarFile);\n                }\n            }\n        }\n        return tarFile;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10010443",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private final Vector<Class<?>> findSubclasses(URL location, String packageName, Class<?> superClass) {\n        synchronized (results) {\n            Map<Class<?>, URL> thisResult = new TreeMap<Class<?>, URL>(CLASS_COMPARATOR);\n            Vector<Class<?>> v = new Vector<Class<?>>();\n            String fqcn = searchClass.getName();\n            List<URL> knownLocations = new ArrayList<URL>();\n            knownLocations.add(location);\n            for (int loc = 0; loc < knownLocations.size(); loc++) {\n                URL url = knownLocations.get(loc);\n                File directory = new File(url.getFile());\n                if (directory.exists()) {\n                    String[] files = directory.list();\n                    for (int i = 0; i < files.length; i++) {\n                        if (files[i].endsWith(\".class\")) {\n                            String classname = files[i].substring(0, files[i].length() - 6);\n                            try {\n                                Class<?> c = Class.forName(packageName + \".\" + classname);\n                                if (superClass.isAssignableFrom(c) && !fqcn.equals(packageName + \".\" + classname)) {\n                                    thisResult.put(c, url);\n                                }\n                            } catch (ClassNotFoundException cnfex) {\n                                if (debug) {\n                                    errors.add(cnfex);\n                                }\n                            } catch (Exception ex) {\n                                if (debug) {\n                                    errors.add(ex);\n                                }\n                            } catch (NoClassDefFoundError ncdfe) {\n                                if (debug) {\n                                    errors.add(ncdfe);\n                                }\n                            }\n                        }\n                    }\n                } else {\n                    try {\n                        JarURLConnection conn = (JarURLConnection) url.openConnection();\n                        JarFile jarFile = conn.getJarFile();\n                        Enumeration<JarEntry> e = jarFile.entries();\n                        while (e.hasMoreElements()) {\n                            JarEntry entry = e.nextElement();\n                            String entryname = entry.getName();\n                            if (!entry.isDirectory() && entryname.endsWith(\".class\")) {\n                                String classname = entryname.substring(0, entryname.length() - 6);\n                                if (classname.startsWith(\"/\")) classname = classname.substring(1);\n                                classname = classname.replace('/', '.');\n                                try {\n                                    Class c = Class.forName(classname);\n                                    if (superClass.isAssignableFrom(c) && !fqcn.equals(classname)) {\n                                        thisResult.put(c, url);\n                                    }\n                                } catch (ClassNotFoundException cnfex) {\n                                    errors.add(cnfex);\n                                } catch (NoClassDefFoundError ncdfe) {\n                                    errors.add(ncdfe);\n                                } catch (UnsatisfiedLinkError ule) {\n                                    errors.add(ule);\n                                } catch (Exception exception) {\n                                    errors.add(exception);\n                                } catch (Error error) {\n                                    errors.add(error);\n                                }\n                            }\n                        }\n                    } catch (IOException ioex) {\n                        errors.add(ioex);\n                    }\n                }\n            }\n            results.putAll(thisResult);\n            Iterator<Class<?>> it = thisResult.keySet().iterator();\n            while (it.hasNext()) {\n                v.add(it.next());\n            }\n            return v;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01001152",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void doOp(String urlString) {\n        URL url = null;\n        try {\n            url = new URL(urlString);\n        } catch (MalformedURLException e) {\n            e.printStackTrace();\n            return;\n        }\n        URLConnection conn = null;\n        try {\n            conn = url.openConnection();\n            conn.setRequestProperty(\"Authorization\", \"Basic \" + (new BASE64Encoder()).encode((System.getProperty(\"fedoragsearch.fgsUserName\") + \":\" + System.getProperty(\"fedoragsearch.fgsPassword\")).getBytes()));\n            conn.connect();\n        } catch (IOException e) {\n            e.printStackTrace();\n            return;\n        }\n        content = null;\n        try {\n            content = conn.getContent();\n        } catch (IOException e) {\n            e.printStackTrace();\n            return;\n        }\n        String line;\n        BufferedReader br = new BufferedReader(new InputStreamReader((InputStream) content));\n        try {\n            while ((line = br.readLine()) != null) System.out.println(line);\n        } catch (IOException e1) {\n            e1.printStackTrace();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10013939",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic Object execute(ExecutionEvent event) throws ExecutionException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public Object execute(ExecutionEvent event) throws ExecutionException {\n        try {\n            Shell shell = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();\n            QuizTreeView view = (QuizTreeView) PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(\"org.rcpquizengine.views.quizzes\");\n            Folder rootFolder = view.getRootFolder();\n            if (!rootFolder.isEncrypted()) {\n                PasswordDialog dialog = new PasswordDialog(shell);\n                if (dialog.open() == Window.OK) {\n                    String password = dialog.getPassword();\n                    if (!password.equals(\"\")) {\n                        String md5 = \"\";\n                        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n                        md.update(password.getBytes());\n                        md5 = new BigInteger(md.digest()).toString();\n                        rootFolder.setMd5Digest(md5);\n                        rootFolder.setEncrypted(true);\n                        MessageDialog.openInformation(shell, \"Quiz bank locked\", \"The current quiz bank has been locked\");\n                        password = \"\";\n                        md5 = \"\";\n                    }\n                }\n            } else {\n                MessageDialog.openError(shell, \"Error locking quiz bank\", \"Quiz bank already locked\");\n            }\n        } catch (PartInitException e) {\n            e.printStackTrace();\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01002618",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void run() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void run() {\n        if (withlinlyn == true) {\n            try {\n                xlin.erase(file);\n            } catch (Exception e) {\n                System.out.println(\"Error erasing\");\n            }\n        } else if (as_php) {\n            try {\n                URL url = new URL(http + \"REM:\" + pservname);\n                BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));\n                System.out.println(\"Response from REMOVE:\");\n                String s;\n                while ((s = br.readLine()) != null) {\n                    System.out.println(s);\n                }\n                br.close();\n            } catch (Exception e) {\n                System.out.println(\"Error erasing/php!\");\n            }\n        }\n        try {\n            InetAddress ia = InetAddress.getLocalHost();\n            ss = new ServerSocket(0, 50, ia);\n            startserv = System.currentTimeMillis();\n            ss.setSoTimeout(0);\n            String svname = ia.getHostAddress();\n            System.out.println(svname + \":sv\");\n            String mssg = \"<SERVER><IP>\" + svname + \"</IP><PORT>\" + ss.getLocalPort() + \"</PORT></SERVER>\";\n            if (withlinlyn == true) {\n                try {\n                    xlin.replace(file, mssg);\n                    System.out.println(\"mssg:\" + mssg + \", sent\");\n                } catch (Exception e) {\n                    System.out.println(\"Error posting address\");\n                    return;\n                }\n            } else if (as_php) {\n                try {\n                    URL url = new URL(http + \"ADD:\" + svname + \":\" + ss.getLocalPort() + \":\" + pservname);\n                    BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));\n                    String response = \"\";\n                    String s;\n                    while ((s = br.readLine()) != null) {\n                        response = response + s + System.getProperty(\"line.separator\");\n                    }\n                    br.close();\n                    String resp = new xLineSplit().ssplit(\"REPLY\", response);\n                    if (!resp.equalsIgnoreCase(\"ADDED\")) {\n                        System.out.println(\"potential error posting via php:\\nReponse was:\\n\" + response);\n                    }\n                } catch (Exception e) {\n                    System.out.println(\"Error in posting php:\" + e.toString());\n                }\n            }\n            xsl.regserver(svname, new String(\"\" + ss.getLocalPort()));\n            Socket server = null;\n            listening = true;\n            while (listening) {\n                server = ss.accept();\n                if (server != null) {\n                    xsl.add(server);\n                    System.out.println(\"added connect\");\n                } else {\n                    System.out.println(\"Received null socket\");\n                }\n                server = null;\n                listening = control_listening;\n            }\n            finserv = System.currentTimeMillis();\n            long l = finserv - startserv;\n            long m = l / 1000;\n            System.err.println(\"Server socket has closed, time elapsed:\" + m);\n            System.out.println(\"Server socket has closed, time elapsed:\" + m);\n        } catch (Exception e) {\n            System.out.println(e.toString());\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10041453",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void printResource(OutputStream os, String resourceName) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void printResource(OutputStream os, String resourceName) throws IOException {\n        InputStream is = null;\n        try {\n            is = ResourceLoader.loadResource(resourceName);\n            if (is == null) {\n                throw new IOException(\"Given resource not found!\");\n            }\n            IOUtils.copy(is, os);\n        } finally {\n            IOUtils.closeQuietly(is);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10047344",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void main(String[] args) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void main(String[] args) {\n        LogFrame.getInstance();\n        for (int i = 0; i < args.length; i++) {\n            String arg = args[i];\n            if (arg.trim().startsWith(DEBUG_PARAMETER_NAME + \"=\")) {\n                properties.put(DEBUG_PARAMETER_NAME, arg.trim().substring(DEBUG_PARAMETER_NAME.length() + 1).trim());\n                if (properties.getProperty(DEBUG_PARAMETER_NAME).toLowerCase().equals(DEBUG_TRUE)) {\n                    DEBUG = true;\n                }\n            } else if (arg.trim().startsWith(AUTOCONNECT_PARAMETER_NAME + \"=\")) {\n                properties.put(AUTOCONNECT_PARAMETER_NAME, arg.trim().substring(AUTOCONNECT_PARAMETER_NAME.length() + 1).trim());\n            } else if (arg.trim().startsWith(SITE_CONFIG_URL_PARAMETER_NAME + \"=\")) {\n                properties.put(SITE_CONFIG_URL_PARAMETER_NAME, arg.trim().substring(SITE_CONFIG_URL_PARAMETER_NAME.length() + 1).trim());\n            } else if (arg.trim().startsWith(DOCSERVICE_URL_PARAMETER_NAME + \"=\")) {\n                properties.put(DOCSERVICE_URL_PARAMETER_NAME, arg.trim().substring(DOCSERVICE_URL_PARAMETER_NAME.length() + 1).trim());\n            } else if (arg.trim().startsWith(DOC_ID_PARAMETER_NAME + \"=\")) {\n                properties.put(DOC_ID_PARAMETER_NAME, arg.trim().substring(DOC_ID_PARAMETER_NAME.length() + 1).trim());\n            } else if (arg.trim().startsWith(DOCSERVICE_PROXY_FACTORY_PARAMETER_NAME + \"=\")) {\n                properties.put(DOCSERVICE_PROXY_FACTORY_PARAMETER_NAME, arg.trim().substring(DOCSERVICE_PROXY_FACTORY_PARAMETER_NAME.length() + 1).trim());\n                RichUIUtils.setDocServiceProxyFactoryClassname(properties.getProperty(DOCSERVICE_PROXY_FACTORY_PARAMETER_NAME));\n            } else {\n                System.out.println(\"WARNING! Unknown or undefined parameter: '\" + arg.trim() + \"'\");\n            }\n        }\n        System.out.println(\"Annotation Diff GUI startup parameters:\");\n        System.out.println(\"------------------------------\");\n        for (Object propName : properties.keySet()) {\n            System.out.println(propName.toString() + \"=\" + properties.getProperty((String) propName));\n        }\n        System.out.println(\"------------------------------\");\n        if (properties.getProperty(SITE_CONFIG_URL_PARAMETER_NAME) == null || properties.getProperty(SITE_CONFIG_URL_PARAMETER_NAME).length() == 0) {\n            String err = \"Mandatory parameter '\" + SITE_CONFIG_URL_PARAMETER_NAME + \"' is missing.\\n\\nApplication will exit.\";\n            System.out.println(err);\n            JOptionPane.showMessageDialog(new JFrame(), err, \"Error!\", JOptionPane.ERROR_MESSAGE);\n            System.exit(-1);\n        }\n        try {\n            String context = System.getProperty(CONTEXT);\n            if (context == null || \"\".equals(context)) {\n                context = DEFAULT_CONTEXT;\n            }\n            String s = System.getProperty(GateConstants.GATE_HOME_PROPERTY_NAME);\n            if (s == null || s.length() == 0) {\n                File f = File.createTempFile(\"foo\", \"\");\n                String gateHome = f.getParent().toString() + context;\n                f.delete();\n                System.setProperty(GateConstants.GATE_HOME_PROPERTY_NAME, gateHome);\n                f = new File(System.getProperty(GateConstants.GATE_HOME_PROPERTY_NAME));\n                if (!f.exists()) {\n                    f.mkdirs();\n                }\n            }\n            s = System.getProperty(GateConstants.PLUGINS_HOME_PROPERTY_NAME);\n            if (s == null || s.length() == 0) {\n                System.setProperty(GateConstants.PLUGINS_HOME_PROPERTY_NAME, System.getProperty(GateConstants.GATE_HOME_PROPERTY_NAME) + \"/plugins\");\n                File f = new File(System.getProperty(GateConstants.PLUGINS_HOME_PROPERTY_NAME));\n                if (!f.exists()) {\n                    f.mkdirs();\n                }\n            }\n            s = System.getProperty(GateConstants.GATE_SITE_CONFIG_PROPERTY_NAME);\n            if (s == null || s.length() == 0) {\n                System.setProperty(GateConstants.GATE_SITE_CONFIG_PROPERTY_NAME, System.getProperty(GateConstants.GATE_HOME_PROPERTY_NAME) + \"/gate.xml\");\n            }\n            if (properties.getProperty(SITE_CONFIG_URL_PARAMETER_NAME) != null && properties.getProperty(SITE_CONFIG_URL_PARAMETER_NAME).length() > 0) {\n                File f = new File(System.getProperty(GateConstants.GATE_SITE_CONFIG_PROPERTY_NAME));\n                if (f.exists()) {\n                    f.delete();\n                }\n                f.getParentFile().mkdirs();\n                f.createNewFile();\n                URL url = new URL(properties.getProperty(SITE_CONFIG_URL_PARAMETER_NAME));\n                InputStream is = url.openStream();\n                FileOutputStream fos = new FileOutputStream(f);\n                int i = is.read();\n                while (i != -1) {\n                    fos.write(i);\n                    i = is.read();\n                }\n                fos.close();\n                is.close();\n            }\n            try {\n                Gate.init();\n                gate.Main.applyUserPreferences();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        } catch (Throwable e) {\n            e.printStackTrace();\n        }\n        MainFrame.getInstance().setVisible(true);\n        MainFrame.getInstance().pack();\n        if (properties.getProperty(AUTOCONNECT_PARAMETER_NAME, \"\").toLowerCase().equals(AUTOCONNECT_TRUE)) {\n            if (properties.getProperty(DOC_ID_PARAMETER_NAME) == null || properties.getProperty(DOC_ID_PARAMETER_NAME).length() == 0) {\n                String err = \"Can't autoconnect. A parameter '\" + DOC_ID_PARAMETER_NAME + \"' is missing.\";\n                System.out.println(err);\n                JOptionPane.showMessageDialog(new JFrame(), err, \"Error!\", JOptionPane.ERROR_MESSAGE);\n                ActionShowAnnDiffConnectDialog.getInstance().actionPerformed(null);\n            } else {\n                ActionConnectToAnnDiffGUI.getInstance().actionPerformed(null);\n            }\n        } else {\n            ActionShowAnnDiffConnectDialog.getInstance().actionPerformed(null);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01005107",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void googleImageSearch() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void googleImageSearch() {\n        if (artist.compareToIgnoreCase(previousArtist) != 0) {\n            MusicBoxView.googleImageLocation = 0;\n            try {\n                String u = \"http://images.google.com/images?q=\" + currentTrack.getArtist() + \" - \" + currentTrack.getAlbum() + \"&sa=N&start=0&ndsp=21\";\n                if (u.contains(\" \")) {\n                    u = u.replace(\" \", \"+\");\n                }\n                URL url = new URL(u);\n                HttpURLConnection httpcon = (HttpURLConnection) url.openConnection();\n                httpcon.addRequestProperty(\"User-Agent\", \"Mozilla/4.76\");\n                BufferedReader readIn = new BufferedReader(new InputStreamReader(httpcon.getInputStream()));\n                String text = \"\";\n                String lin = \"\";\n                while ((lin = readIn.readLine()) != null) {\n                    text += lin;\n                }\n                readIn.close();\n                if (text.contains(\"\\n\")) {\n                    text = text.replace(\"\\n\", \"\");\n                }\n                String[] array = text.split(\"\\\\Qhref=\\\"/imgres?imgurl=\\\\E\");\n                for (String s : array) {\n                    if (s.startsWith(\"http://\") || s.startsWith(\"https://\") && s.contains(\"&amp;\")) {\n                        String s1 = s.substring(0, s.indexOf(\"&amp;\"));\n                        googleImages.add(s1);\n                    }\n                }\n            } catch (Exception ex4) {\n                MusicBoxView.showErrorDialog(ex4);\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01005108",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void googleImageSearch(String search, String start) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void googleImageSearch(String search, String start) {\n        try {\n            String u = \"http://images.google.com/images?q=\" + search + start;\n            if (u.contains(\" \")) {\n                u = u.replace(\" \", \"+\");\n            }\n            URL url = new URL(u);\n            HttpURLConnection httpcon = (HttpURLConnection) url.openConnection();\n            httpcon.addRequestProperty(\"User-Agent\", \"Mozilla/4.76\");\n            BufferedReader readIn = new BufferedReader(new InputStreamReader(httpcon.getInputStream()));\n            googleImages.clear();\n            String text = \"\";\n            String lin = \"\";\n            while ((lin = readIn.readLine()) != null) {\n                text += lin;\n            }\n            readIn.close();\n            if (text.contains(\"\\n\")) {\n                text = text.replace(\"\\n\", \"\");\n            }\n            String[] array = text.split(\"\\\\Qhref=\\\"/imgres?imgurl=\\\\E\");\n            for (String s : array) {\n                if (s.startsWith(\"http://\") || s.startsWith(\"https://\") && s.contains(\"&amp;\")) {\n                    String s1 = s.substring(0, s.indexOf(\"&amp;\"));\n                    googleImages.add(s1);\n                }\n            }\n        } catch (Exception ex4) {\n            MusicBoxView.showErrorDialog(ex4);\n        }\n        MusicBoxView.jButton7.setEnabled(true);\n        ImageIcon icon;\n        try {\n            icon = new ImageIcon(new URL(googleImages.elementAt(MusicBoxView.googleImageLocation)));\n            ImageIcon ico = new ImageIcon(icon.getImage().getScaledInstance(100, 100, Image.SCALE_SMOOTH));\n            MusicBoxView.albumArtLabel.setIcon(ico);\n        } catch (MalformedURLException ex1) {\n            MusicBoxView.showErrorDialog(ex1);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10053153",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void run() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n        public void run() {\n            log.debug(\"Now running....\");\n            log.debug(\"Current env. variables:\");\n            try {\n                this.infoNotifiers(\"Environment parameters after modifications:\");\n                this.logEnvironment();\n                this.infoNotifiers(\"Dump thread will now run...\");\n                this.endNotifiers();\n                this.process = this.pb.start();\n                this.process.waitFor();\n                if (this.process.exitValue() != 0) {\n                    this.startNotifiers();\n                    this.infoNotifiers(\"Dump Failed. Return status: \" + this.process.exitValue());\n                    this.endNotifiers();\n                    return;\n                }\n                List<String> cmd = new LinkedList<String>();\n                cmd.add(\"gzip\");\n                cmd.add(info.getDumpFileName());\n                File basePath = this.pb.directory();\n                this.pb = new ProcessBuilder(cmd);\n                this.pb.directory(basePath);\n                log.debug(\"Executing: \" + StringUtils.join(cmd.iterator(), ' '));\n                this.process = this.pb.start();\n                this.process.waitFor();\n                if (this.process.exitValue() != 0) {\n                    this.startNotifiers();\n                    this.infoNotifiers(\"Dump GZip Failed. Return status: \" + this.process.exitValue());\n                    this.endNotifiers();\n                    return;\n                }\n                info.setDumpFileName(info.getDumpFileName() + \".gz\");\n                info.setMD5SumFileName(info.getDumpFileName() + \".md5sum\");\n                cmd = new LinkedList<String>();\n                cmd.add(\"md5sum\");\n                cmd.add(\"-b\");\n                cmd.add(info.getDumpFileName());\n                log.debug(\"Executing: \" + StringUtils.join(cmd.iterator(), ' '));\n                this.pb = new ProcessBuilder(cmd);\n                this.pb.directory(basePath);\n                this.process = this.pb.start();\n                BufferedOutputStream md5sumFileOut = new BufferedOutputStream(new FileOutputStream(basePath.getAbsolutePath() + File.separatorChar + info.getMD5SumFileName()));\n                IOUtils.copy(this.process.getInputStream(), md5sumFileOut);\n                this.process.waitFor();\n                md5sumFileOut.flush();\n                md5sumFileOut.close();\n                if (this.process.exitValue() != 0) {\n                    this.startNotifiers();\n                    this.infoNotifiers(\"Dump GZip MD5Sum Failed. Return status: \" + this.process.exitValue());\n                    this.endNotifiers();\n                    return;\n                } else {\n                    this.startNotifiers();\n                    this.infoNotifiers(\"Dump, gzip and md5sum sucessfuly completed.\");\n                    this.endNotifiers();\n                }\n            } catch (IOException e) {\n                String message = \"IOException launching command: \" + e.getMessage();\n                log.error(message, e);\n                throw new IllegalStateException(message, e);\n            } catch (InterruptedException e) {\n                String message = \"InterruptedException launching command: \" + e.getMessage();\n                log.error(message, e);\n                throw new IllegalStateException(message, e);\n            } catch (IntegrationException e) {\n                String message = \"IntegrationException launching command: \" + e.getMessage();\n                log.error(message, e);\n                throw new IllegalStateException(message, e);\n            }\n        }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10055931",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static Vector<String> getIgnoreList() {\n        try {\n            URL url = DeclarationTranslation.class.getClassLoader().getResource(\"ignorelist\");\n            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(url.openStream()));\n            Vector<String> ret = new Vector<String>();\n            String line = null;\n            while ((line = bufferedReader.readLine()) != null) {\n                ret.add(line);\n            }\n            return ret;\n        } catch (Exception e) {\n            return null;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10056705",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic long saveDB(Connection con, long id, boolean commit) throws SQLException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public long saveDB(Connection con, long id, boolean commit) throws SQLException {\n        StringBuffer SQL = null;\n        Statement statement = null;\n        ResultSet result_set = null;\n        try {\n            statement = con.createStatement();\n            if (id < 0) {\n                id = QueryUtils.sequenceGetNextID(con, \"PATTERN_OUTLINE\");\n            } else {\n                deleteDB(con, id);\n            }\n            SQL = new StringBuffer(\"insert into \");\n            SQL.append(\"PATTERN_OUTLINE values (\");\n            SQL.append(id);\n            SQL.append(\",\");\n            SQL.append(XColor.toInt(pattern.getPatternColor()));\n            SQL.append(\",\");\n            SQL.append(pattern.getPatternStyle());\n            SQL.append(\",\");\n            SQL.append(pattern.getPatternDensity());\n            SQL.append(\",\");\n            SQL.append(XColor.toInt(pattern.getBackgroundColor()));\n            SQL.append(\",\");\n            SQL.append(XColor.toInt(outline.getColor()));\n            SQL.append(\",\");\n            SQL.append(outline.getStyle());\n            SQL.append(\",\");\n            SQL.append(outline.getWidth());\n            SQL.append(\")\");\n            statement.executeUpdate(new String(SQL));\n            SQL = null;\n            if (commit) {\n                con.commit();\n            }\n        } catch (SQLException e) {\n            System.err.println(getClass().getName() + \":\" + e + \" SQL:=\" + SQL);\n            if (commit) {\n                con.rollback();\n            }\n            throw e;\n        } finally {\n            if (statement != null) {\n                try {\n                    statement.close();\n                } \n\t\tcatch (SQLException e) {\n\t\t\n\t\t}\n            }\n\t}\n\treturn saveDB(con, id, false);\n}",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10057850",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic BasicTraceImpl() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public BasicTraceImpl() {\n        out = System.out;\n        traceEnable = new HashMap();\n        URL url = Hive.getURL(\"trace.cfg\");\n        if (url != null) try {\n            InputStream input = url.openStream();\n            BufferedReader in = new BufferedReader(new InputStreamReader(input));\n            String line;\n            for (line = line = in.readLine(); line != null; line = in.readLine()) {\n                int i = line.indexOf(\"=\");\n                if (i > 0) {\n                    String name = line.substring(0, i).trim();\n                    String value = line.substring(i + 1).trim();\n                    traceEnable.put(name, Boolean.valueOf(value).booleanValue() ? ((Object) (Boolean.TRUE)) : ((Object) (Boolean.FALSE)));\n                }\n            }\n            input.close();\n        } catch (IOException io) {\n            System.out.println(io);\n        }\n        TRACE = getEnable(THIS);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10058360",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "void startzm() {\n        URL myzzurl;\n        InputStream myzstream;\n        byte zmemimage[];\n        boolean joined;\n        zmemimage = null;\n        try {\n            System.err.println(zcodefile);\n            myzzurl = new URL(zcodefile);\n            myzstream = myzzurl.openStream();\n            zmemimage = suckstream(myzstream);\n        } catch (MalformedURLException booga) {\n            try {\n                myzstream = new FileInputStream(zcodefile);\n                zmemimage = suckstream(myzstream);\n            } catch (IOException booga2) {\n                add(\"North\", new Label(\"Malformed URL\"));\n                failed = true;\n            }\n        } catch (IOException booga) {\n            add(\"North\", new Label(\"I/O Error\"));\n        }\n        if (zmemimage != null) {\n            switch(zmemimage[0]) {\n                case 3:\n                    zm = new ZMachine3(screen, status_line, zmemimage);\n                    break;\n                case 5:\n                    remove(status_line);\n                    zm = new ZMachine5(screen, zmemimage);\n                    break;\n                case 8:\n                    remove(status_line);\n                    zm = new ZMachine8(screen, zmemimage);\n                    break;\n                default:\n                    add(\"North\", new Label(\"Not a valid V3,V5, or V8 story file\"));\n            }\n            if (zm != null) zm.start();\n        }\n        joined = false;\n        if (zmemimage != null) {\n            while (!joined) {\n                try {\n                    zm.join();\n                    joined = true;\n                } catch (InterruptedException booga) {\n                }\n            }\n        }\n        System.exit(0);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10062074",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private long generateUnixInstallShell(File unixShellFile, String instTemplate, File instClassFile) throws IOException {\n        FileOutputStream byteWriter = new FileOutputStream(unixShellFile);\n        InputStream is = getClass().getResourceAsStream(\"/\" + instTemplate);\n        InputStreamReader isr = new InputStreamReader(is);\n        LineNumberReader reader = new LineNumberReader(isr);\n        String content = \"\";\n        String installClassStartStr = \"000000000000\";\n        NumberFormat nf = NumberFormat.getInstance(Locale.US);\n        nf.setGroupingUsed(false);\n        nf.setMinimumIntegerDigits(installClassStartStr.length());\n        int installClassStartPos = 0;\n        long installClassOffset = 0;\n        System.out.println(VAGlobals.i18n(\"VAArchiver_GenerateInstallShell\"));\n        String line = reader.readLine();\n        while ((line != null) && (!line.startsWith(\"# InstallClassStart\"))) {\n            content += line + \"\\n\";\n            line = reader.readLine();\n        }\n        content += \"InstallClassStart=\" + installClassStartStr + \"\\n\";\n        installClassStartPos = content.length() - 1 - 1 - installClassStartStr.length();\n        line = reader.readLine();\n        while ((line != null) && (!line.startsWith(\"# InstallClassSize\"))) {\n            content += line + \"\\n\";\n            line = reader.readLine();\n        }\n        content += new String(\"InstallClassSize=\" + instClassFile.length() + \"\\n\");\n        line = reader.readLine();\n        while ((line != null) && (!line.startsWith(\"# InstallClassName\"))) {\n            content += line + \"\\n\";\n            line = reader.readLine();\n        }\n        content += new String(\"InstallClassName=\" + instClassName_ + \"\\n\");\n        line = reader.readLine();\n        while ((line != null) && (!line.startsWith(\"# Install class\"))) {\n            content += line + \"\\n\";\n            line = reader.readLine();\n        }\n        if (line != null) content += line + \"\\n\";\n        byteWriter.write(content.substring(0, installClassStartPos + 1).getBytes());\n        byteWriter.write(nf.format(content.length()).getBytes());\n        byteWriter.write(content.substring(installClassStartPos + 1 + installClassStartStr.length()).getBytes());\n        installClassOffset = content.length();\n        content = null;\n        FileInputStream classStream = new FileInputStream(instClassFile);\n        byte[] buf = new byte[2048];\n        int read = classStream.read(buf);\n        while (read > 0) {\n            byteWriter.write(buf, 0, read);\n            read = classStream.read(buf);\n        }\n        classStream.close();\n        reader.close();\n        byteWriter.close();\n        return installClassOffset;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10062076",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private long generateNativeInstallExe(File nativeInstallFile, String instTemplate, File instClassFile) throws IOException {\n        InputStream reader = getClass().getResourceAsStream(\"/\" + instTemplate);\n        ByteArrayOutputStream content = new ByteArrayOutputStream();\n        String installClassVarStr = \"000000000000\";\n        byte[] buf = new byte[installClassVarStr.length()];\n        NumberFormat nf = NumberFormat.getInstance(Locale.US);\n        nf.setGroupingUsed(false);\n        nf.setMinimumIntegerDigits(installClassVarStr.length());\n        int installClassStopPos = 0;\n        long installClassOffset = reader.available();\n        int position = 0;\n        System.out.println(VAGlobals.i18n(\"VAArchiver_GenerateInstallExe\"));\n        reader.read(buf, 0, buf.length);\n        position = 1;\n        for (int n = 0; n < 3; n++) {\n            while ((!new String(buf).equals(\"clname_here_\")) && (!new String(buf).equals(\"clstart_here\")) && (!new String(buf).equals(\"clstop_here_\"))) {\n                content.write(buf[0]);\n                int nextb = reader.read();\n                position++;\n                shiftArray(buf);\n                buf[buf.length - 1] = (byte) nextb;\n            }\n            if (new String(buf).equals(\"clname_here_\")) {\n                VAGlobals.printDebug(\"  clname_here_ found at \" + (position - 1));\n                StringBuffer clnameBuffer = new StringBuffer(64);\n                clnameBuffer.append(instClassName_);\n                for (int i = clnameBuffer.length() - 1; i < 64; i++) {\n                    clnameBuffer.append('.');\n                }\n                byte[] clnameBytes = clnameBuffer.toString().getBytes();\n                for (int i = 0; i < 64; i++) {\n                    content.write(clnameBytes[i]);\n                    position++;\n                }\n                reader.skip(64 - buf.length);\n                reader.read(buf, 0, buf.length);\n            } else if (new String(buf).equals(\"clstart_here\")) {\n                VAGlobals.printDebug(\"  clstart_here found at \" + (position - 1));\n                buf = nf.format(installClassOffset).getBytes();\n                for (int i = 0; i < buf.length; i++) {\n                    content.write(buf[i]);\n                    position++;\n                }\n                reader.read(buf, 0, buf.length);\n            } else if (new String(buf).equals(\"clstop_here_\")) {\n                VAGlobals.printDebug(\"  clstop_here_ found at \" + (position - 1));\n                installClassStopPos = position - 1;\n                content.write(buf);\n                position += 12;\n                reader.read(buf, 0, buf.length);\n            }\n        }\n        content.write(buf);\n        buf = new byte[2048];\n        int read = reader.read(buf);\n        while (read > 0) {\n            content.write(buf, 0, read);\n            read = reader.read(buf);\n        }\n        reader.close();\n        FileInputStream classStream = new FileInputStream(instClassFile);\n        read = classStream.read(buf);\n        while (read > 0) {\n            content.write(buf, 0, read);\n            read = classStream.read(buf);\n        }\n        classStream.close();\n        content.close();\n        byte[] contentBytes = content.toByteArray();\n        installClassVarStr = nf.format(contentBytes.length);\n        byte[] installClassVarBytes = installClassVarStr.getBytes();\n        for (int i = 0; i < installClassVarBytes.length; i++) {\n            contentBytes[installClassStopPos + i] = installClassVarBytes[i];\n        }\n        FileOutputStream out = new FileOutputStream(nativeInstallFile);\n        out.write(contentBytes);\n        out.close();\n        return installClassOffset;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10062077",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void appendArchive(File instClass) throws IOException {\n        FileOutputStream out = new FileOutputStream(instClass.getName(), true);\n        FileInputStream zipStream = new FileInputStream(\"install.jar\");\n        byte[] buf = new byte[2048];\n        int read = zipStream.read(buf);\n        while (read > 0) {\n            out.write(buf, 0, read);\n            read = zipStream.read(buf);\n        }\n        zipStream.close();\n        out.close();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10062078",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void copy(File fin, File fout) throws IOException {\n        FileOutputStream out = null;\n        FileInputStream in = null;\n        try {\n            out = new FileOutputStream(fout);\n            in = new FileInputStream(fin);\n            byte[] buf = new byte[2048];\n            int read = in.read(buf);\n            while (read > 0) {\n                out.write(buf, 0, read);\n                read = in.read(buf);\n            }\n        } catch (IOException _e) {\n            throw _e;\n        } finally {\n            if (in != null) in.close();\n            if (out != null) out.close();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10067028",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copyFile(File source, File destination) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copyFile(File source, File destination) throws IOException {\n        FileChannel in = null;\n        FileChannel out = null;\n        try {\n            in = new FileInputStream(source).getChannel();\n            out = new FileOutputStream(destination).getChannel();\n            long size = in.size();\n            MappedByteBuffer buffer = in.map(FileChannel.MapMode.READ_ONLY, 0, size);\n            out.write(buffer);\n        } finally {\n            if (in != null) {\n                in.close();\n            }\n            if (out != null) {\n                out.close();\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10072636",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic Blowfish(String password) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public Blowfish(String password) {\n        MessageDigest digest = null;\n        try {\n            digest = MessageDigest.getInstance(\"SHA1\");\n            digest.update(password.getBytes());\n        } catch (Exception e) {\n            Log.error(e.getMessage(), e);\n        }\n        m_bfish = new BlowfishCBC(digest.digest(), 0);\n        digest.reset();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10073558",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void retrieveFiles() throws DataSyncException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void retrieveFiles() throws DataSyncException {\n        try {\n            ftp.connect(hostname, port);\n            boolean success = ftp.login(username, password);\n            log.info(\"FTP Login:\" + success);\n            if (success) {\n                System.out.println(directory);\n                ftp.changeWorkingDirectory(directory);\n                ftp.setFileType(FTP.ASCII_FILE_TYPE);\n                ftp.enterLocalPassiveMode();\n                ftp.setRemoteVerificationEnabled(false);\n                FTPFile[] files = ftp.listFiles();\n                for (FTPFile file : files) {\n                    ftp.setFileType(file.getType());\n                    log.debug(file.getName() + \",\" + file.getSize());\n                    FileOutputStream output = new FileOutputStream(localDirectory + file.getName());\n                    try {\n                        ftp.retrieveFile(file.getName(), output);\n                    } finally {\n                        IOUtils.closeQuietly(output);\n                    }\n                }\n            }\n        } catch (Exception e) {\n            throw new DataSyncException(e);\n        } finally {\n            try {\n                ftp.disconnect();\n            } catch (IOException e) {\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10076077",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void save(String arxivId, InputStream inputStream, String encoding) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n    public void save(String arxivId, InputStream inputStream, String encoding) {\n        String filename = StringUtil.arxivid2filename(arxivId, \"tex\");\n        try {\n            Writer writer = new OutputStreamWriter(new FileOutputStream(String.format(\"%s/%s\", LATEX_DOCUMENT_DIR, filename)), encoding);\n            IOUtils.copy(inputStream, writer, encoding);\n            writer.flush();\n            writer.close();\n            inputStream.close();\n        } catch (IOException e) {\n            logger.error(\"Failed to save the Latex source with id='{}'\", arxivId, e);\n            throw new RuntimeException(e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_00100791",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void convert(File src, File dest) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void convert(File src, File dest) throws IOException {\n        InputStream in = new BufferedInputStream(new FileInputStream(src));\n        DcmParser p = pfact.newDcmParser(in);\n        Dataset ds = fact.newDataset();\n        p.setDcmHandler(ds.getDcmHandler());\n        try {\n            FileFormat format = p.detectFileFormat();\n            if (format != FileFormat.ACRNEMA_STREAM) {\n                System.out.println(\"\\n\" + src + \": not an ACRNEMA stream!\");\n                return;\n            }\n            p.parseDcmFile(format, Tags.PixelData);\n            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n                System.out.println(\"\\n\" + src + \": contains UIDs!\" + \" => probable already DICOM - do not convert\");\n                return;\n            }\n            boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n            int pxlen = p.getReadLength();\n            if (hasPixelData) {\n                if (inflate) {\n                    ds.putUS(Tags.BitsAllocated, 16);\n                    pxlen = pxlen * 4 / 3;\n                }\n                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n                    System.out.println(\"\\n\" + src + \": mismatch pixel data length!\" + \" => do not convert\");\n                    return;\n                }\n            }\n            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n            ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n            ds.putUI(Tags.SOPClassUID, classUID);\n            if (!ds.contains(Tags.NumberOfSamples)) {\n                ds.putUS(Tags.NumberOfSamples, 1);\n            }\n            if (!ds.contains(Tags.PhotometricInterpretation)) {\n                ds.putCS(Tags.PhotometricInterpretation, \"MONOCHROME2\");\n            }\n            if (fmi) {\n                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n            }\n            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n            try {\n            } finally {\n                ds.writeFile(out, encodeParam());\n                if (hasPixelData) {\n                    if (!skipGroupLen) {\n                        out.write(PXDATA_GROUPLEN);\n                        int grlen = pxlen + 8;\n                        out.write((byte) grlen);\n                        out.write((byte) (grlen >> 8));\n                        out.write((byte) (grlen >> 16));\n                        out.write((byte) (grlen >> 24));\n                    }\n                    out.write(PXDATA_TAG);\n                    out.write((byte) pxlen);\n                    out.write((byte) (pxlen >> 8));\n                    out.write((byte) (pxlen >> 16));\n                    out.write((byte) (pxlen >> 24));\n                }\n                if (inflate) {\n                    int b2, b3;\n                    for (; pxlen > 0; pxlen -= 3) {\n                        out.write(in.read());\n                        b2 = in.read();\n                        b3 = in.read();\n                        out.write(b2 & 0x0f);\n                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n                        out.write(b3 >> 4);\n                    }\n                } else {\n                    for (; pxlen > 0; --pxlen) {\n                        out.write(in.read());\n                    }\n                }\n                out.close();\n            }\n            System.out.print('.');\n        } finally {\n            in.close();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10079611",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copy(File source, File sink) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copy(File source, File sink) throws IOException {\n        if (source == null) throw new NullPointerException(\"Source file must not be null\");\n        if (sink == null) throw new NullPointerException(\"Target file must not be null\");\n        if (!source.exists()) throw new IOException(\"Source file \" + source.getPath() + \" does not exist\");\n        if (!source.isFile()) throw new IOException(\"Source file \" + source.getPath() + \" is not a regular file\");\n        if (!source.canRead()) throw new IOException(\"Source file \" + source.getPath() + \" can not be read (missing acces right)\");\n        if (!sink.exists()) throw new IOException(\"Target file \" + sink.getPath() + \" does not exist\");\n        if (!sink.isFile()) throw new IOException(\"Target file \" + sink.getPath() + \" is not a regular file\");\n        if (!sink.canWrite()) throw new IOException(\"Target file \" + sink.getPath() + \" is write protected\");\n        InputStream input = null;\n        OutputStream output = null;\n        try {\n            input = new FileInputStream(source);\n            output = new FileOutputStream(sink);\n            byte[] buffer = new byte[1024];\n            while (input.available() > 0) {\n                int bread = input.read(buffer);\n                if (bread > 0) output.write(buffer, 0, bread);\n            }\n        } finally {\n            if (input != null) try {\n                input.close();\n            } catch (IOException x) {\n            }\n            if (output != null) try {\n                output.close();\n            } catch (IOException x) {\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01008324",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void copyHashAllFilesToDirectory(String baseDirStr, Hashtable newNamesTable, String destDirStr) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void copyHashAllFilesToDirectory(String baseDirStr, Hashtable newNamesTable, String destDirStr) throws Exception {\n        if (baseDirStr.endsWith(sep)) {\n            baseDirStr = baseDirStr.substring(0, baseDirStr.length() - 1);\n        }\n        if (destDirStr.endsWith(sep)) {\n            destDirStr = destDirStr.substring(0, destDirStr.length() - 1);\n        }\n        FileUtils.getInstance().createDirectory(baseDirStr);\n        if (null == newNamesTable) {\n            newNamesTable = new Hashtable();\n        }\n        BufferedInputStream in = null;\n        BufferedOutputStream out = null;\n        byte dataBuff[] = new byte[bufferSize];\n        File baseDir = new File(baseDirStr);\n        baseDir.mkdirs();\n        if ((baseDir.exists()) && (baseDir.isDirectory())) {\n            if (!newNamesTable.isEmpty()) {\n                Enumeration enumFiles = newNamesTable.keys();\n                while (enumFiles.hasMoreElements()) {\n                    String newName = (String) enumFiles.nextElement();\n                    String oldPathName = (String) newNamesTable.get(newName);\n                    if ((newName != null) && (!\"\".equals(newName)) && (oldPathName != null) && (!\"\".equals(oldPathName))) {\n                        String newPathFileName = destDirStr + sep + newName;\n                        String oldPathFileName = baseDirStr + sep + oldPathName;\n                        if (oldPathName.startsWith(sep)) {\n                            oldPathFileName = baseDirStr + oldPathName;\n                        }\n                        File f = new File(oldPathFileName);\n                        if ((f.exists()) && (f.isFile())) {\n                            in = new BufferedInputStream(new FileInputStream(oldPathFileName), bufferSize);\n                            out = new BufferedOutputStream(new FileOutputStream(newPathFileName), bufferSize);\n                            int readLen;\n                            while ((readLen = in.read(dataBuff)) > 0) {\n                                out.write(dataBuff, 0, readLen);\n                            }\n                            out.flush();\n                            in.close();\n                            out.close();\n                        } else {\n                        }\n                    }\n                }\n            } else {\n            }\n        } else {\n            throw new Exception(\"Base (baseDirStr) dir not exist !\");\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01008325",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic long copyDirAllFilesToDirectory(String baseDirStr, String destDirStr) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public long copyDirAllFilesToDirectory(String baseDirStr, String destDirStr) throws Exception {\n        long plussQuotaSize = 0;\n        if (baseDirStr.endsWith(sep)) {\n            baseDirStr = baseDirStr.substring(0, baseDirStr.length() - 1);\n        }\n        if (destDirStr.endsWith(sep)) {\n            destDirStr = destDirStr.substring(0, destDirStr.length() - 1);\n        }\n        FileUtils.getInstance().createDirectory(destDirStr);\n        BufferedInputStream in = null;\n        BufferedOutputStream out = null;\n        byte dataBuff[] = new byte[bufferSize];\n        File baseDir = new File(baseDirStr);\n        baseDir.mkdirs();\n        if (!baseDir.exists()) {\n            createDirectory(baseDirStr);\n        }\n        if ((baseDir.exists()) && (baseDir.isDirectory())) {\n            String[] entryList = baseDir.list();\n            if (entryList.length > 0) {\n                for (int pos = 0; pos < entryList.length; pos++) {\n                    String entryName = entryList[pos];\n                    String oldPathFileName = baseDirStr + sep + entryName;\n                    File entryFile = new File(oldPathFileName);\n                    if (entryFile.isFile()) {\n                        String newPathFileName = destDirStr + sep + entryName;\n                        File newFile = new File(newPathFileName);\n                        if (newFile.exists()) {\n                            plussQuotaSize -= newFile.length();\n                            newFile.delete();\n                        }\n                        in = new BufferedInputStream(new FileInputStream(oldPathFileName), bufferSize);\n                        out = new BufferedOutputStream(new FileOutputStream(newPathFileName), bufferSize);\n                        int readLen;\n                        while ((readLen = in.read(dataBuff)) > 0) {\n                            out.write(dataBuff, 0, readLen);\n                            plussQuotaSize += readLen;\n                        }\n                        out.flush();\n                        in.close();\n                        out.close();\n                    }\n                }\n            }\n        } else {\n            throw new Exception(\"Base dir not exist ! baseDirStr = (\" + baseDirStr + \")\");\n        }\n        return plussQuotaSize;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01008326",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic long copyDirAllFilesToDirectoryRecursive(String baseDirStr, String destDirStr, boolean copyOutputsRtIDsDirs) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public long copyDirAllFilesToDirectoryRecursive(String baseDirStr, String destDirStr, boolean copyOutputsRtIDsDirs) throws Exception {\n        long plussQuotaSize = 0;\n        if (baseDirStr.endsWith(sep)) {\n            baseDirStr = baseDirStr.substring(0, baseDirStr.length() - 1);\n        }\n        if (destDirStr.endsWith(sep)) {\n            destDirStr = destDirStr.substring(0, destDirStr.length() - 1);\n        }\n        FileUtils.getInstance().createDirectory(destDirStr);\n        BufferedInputStream in = null;\n        BufferedOutputStream out = null;\n        byte dataBuff[] = new byte[bufferSize];\n        File baseDir = new File(baseDirStr);\n        baseDir.mkdirs();\n        if (!baseDir.exists()) {\n            createDirectory(baseDirStr);\n        }\n        if ((baseDir.exists()) && (baseDir.isDirectory())) {\n            String[] entryList = baseDir.list();\n            if (entryList.length > 0) {\n                for (int pos = 0; pos < entryList.length; pos++) {\n                    String entryName = entryList[pos];\n                    String oldPathFileName = baseDirStr + sep + entryName;\n                    File entryFile = new File(oldPathFileName);\n                    if (entryFile.isFile()) {\n                        String newPathFileName = destDirStr + sep + entryName;\n                        File newFile = new File(newPathFileName);\n                        if (newFile.exists()) {\n                            plussQuotaSize -= newFile.length();\n                            newFile.delete();\n                        }\n                        in = new BufferedInputStream(new FileInputStream(oldPathFileName), bufferSize);\n                        out = new BufferedOutputStream(new FileOutputStream(newPathFileName), bufferSize);\n                        int readLen;\n                        while ((readLen = in.read(dataBuff)) > 0) {\n                            out.write(dataBuff, 0, readLen);\n                            plussQuotaSize += readLen;\n                        }\n                        out.flush();\n                        in.close();\n                        out.close();\n                    }\n                    if (entryFile.isDirectory()) {\n                        boolean enableCopyDir = false;\n                        if (copyOutputsRtIDsDirs) {\n                            enableCopyDir = true;\n                        } else {\n                            if (entryFile.getParentFile().getName().equals(\"outputs\")) {\n                                enableCopyDir = false;\n                            } else {\n                                enableCopyDir = true;\n                            }\n                        }\n                        if (enableCopyDir) {\n                            plussQuotaSize += this.copyDirAllFilesToDirectoryRecursive(baseDirStr + sep + entryName, destDirStr + sep + entryName, copyOutputsRtIDsDirs);\n                        }\n                    }\n                }\n            }\n        } else {\n            throw new Exception(\"Base dir not exist ! baseDirStr = (\" + baseDirStr + \")\");\n        }\n        return plussQuotaSize;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01008329",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic long copyFile(String baseDirStr, String fileName, String file2FullPath) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public long copyFile(String baseDirStr, String fileName, String file2FullPath) throws Exception {\n        long plussQuotaSize = 0;\n        if (!baseDirStr.endsWith(sep)) {\n            baseDirStr += sep;\n        }\n        BufferedInputStream in = null;\n        BufferedOutputStream out = null;\n        byte dataBuff[] = new byte[bufferSize];\n        String file1FullPath = new String(baseDirStr + fileName);\n        if (!file1FullPath.equalsIgnoreCase(file2FullPath)) {\n            File file1 = new File(file1FullPath);\n            if (file1.exists() && (file1.isFile())) {\n                File file2 = new File(file2FullPath);\n                if (file2.exists()) {\n                    plussQuotaSize -= file2.length();\n                    file2.delete();\n                }\n                FileUtils.getInstance().createDirectory(file2.getParent());\n                in = new BufferedInputStream(new FileInputStream(file1FullPath), bufferSize);\n                out = new BufferedOutputStream(new FileOutputStream(file2FullPath), bufferSize);\n                int readLen;\n                while ((readLen = in.read(dataBuff)) > 0) {\n                    out.write(dataBuff, 0, readLen);\n                    plussQuotaSize += readLen;\n                }\n                out.flush();\n                in.close();\n                out.close();\n            } else {\n                throw new Exception(\"Source file not exist ! file1FullPath = (\" + file1FullPath + \")\");\n            }\n        }\n        return plussQuotaSize;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01008331",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic long copyFileWithPaths(String userBaseDir, String sourcePath, String destinPath) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public long copyFileWithPaths(String userBaseDir, String sourcePath, String destinPath) throws Exception {\n        if (userBaseDir.endsWith(sep)) {\n            userBaseDir = userBaseDir.substring(0, userBaseDir.length() - sep.length());\n        }\n        String file1FullPath = new String();\n        if (sourcePath.startsWith(sep)) {\n            file1FullPath = new String(userBaseDir + sourcePath);\n        } else {\n            file1FullPath = new String(userBaseDir + sep + sourcePath);\n        }\n        String file2FullPath = new String();\n        if (destinPath.startsWith(sep)) {\n            file2FullPath = new String(userBaseDir + destinPath);\n        } else {\n            file2FullPath = new String(userBaseDir + sep + destinPath);\n        }\n        long plussQuotaSize = 0;\n        BufferedInputStream in = null;\n        BufferedOutputStream out = null;\n        byte dataBuff[] = new byte[bufferSize];\n        File fileordir = new File(file1FullPath);\n        if (fileordir.exists()) {\n            if (fileordir.isFile()) {\n                File file2 = new File(file2FullPath);\n                if (file2.exists()) {\n                    plussQuotaSize -= file2.length();\n                    file2.delete();\n                }\n                FileUtils.getInstance().createDirectory(file2.getParent());\n                in = new BufferedInputStream(new FileInputStream(file1FullPath), bufferSize);\n                out = new BufferedOutputStream(new FileOutputStream(file2FullPath), bufferSize);\n                int readLen;\n                while ((readLen = in.read(dataBuff)) > 0) {\n                    out.write(dataBuff, 0, readLen);\n                    plussQuotaSize += readLen;\n                }\n                out.flush();\n                in.close();\n                out.close();\n            }\n            if (fileordir.isDirectory()) {\n                String[] entryList = fileordir.list();\n                if (entryList.length > 0) {\n                    for (int pos = 0; pos < entryList.length; pos++) {\n                        String entryName = entryList[pos];\n                        String file1FullPathEntry = new String(file1FullPath.concat(entryList[pos]));\n                        String file2FullPathEntry = new String(file2FullPath.concat(entryList[pos]));\n                        File file2 = new File(file2FullPathEntry);\n                        if (file2.exists()) {\n                            plussQuotaSize -= file2.length();\n                            file2.delete();\n                        }\n                        FileUtils.getInstance().createDirectory(file2.getParent());\n                        in = new BufferedInputStream(new FileInputStream(file1FullPathEntry), bufferSize);\n                        out = new BufferedOutputStream(new FileOutputStream(file2FullPathEntry), bufferSize);\n                        int readLen;\n                        while ((readLen = in.read(dataBuff)) > 0) {\n                            out.write(dataBuff, 0, readLen);\n                            plussQuotaSize += readLen;\n                        }\n                        out.flush();\n                        in.close();\n                        out.close();\n                    }\n                }\n            }\n        } else {\n            throw new Exception(\"Source file or dir not exist ! file1FullPath = (\" + file1FullPath + \")\");\n        }\n        return plussQuotaSize;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01008332",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void copyFileToFileWithPaths(String sourcePath, String destinPath) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void copyFileToFileWithPaths(String sourcePath, String destinPath) throws Exception {\n        BufferedInputStream in = null;\n        BufferedOutputStream out = null;\n        byte dataBuff[] = new byte[bufferSize];\n        File file1 = new File(sourcePath);\n        if (file1.exists() && (file1.isFile())) {\n            File file2 = new File(destinPath);\n            if (file2.exists()) {\n                file2.delete();\n            }\n            FileUtils.getInstance().createDirectory(file2.getParent());\n            in = new BufferedInputStream(new FileInputStream(sourcePath), bufferSize);\n            out = new BufferedOutputStream(new FileOutputStream(destinPath), bufferSize);\n            int readLen;\n            while ((readLen = in.read(dataBuff)) > 0) {\n                out.write(dataBuff, 0, readLen);\n            }\n            out.flush();\n            in.close();\n            out.close();\n        } else {\n            throw new Exception(\"Source file not exist ! sourcePath = (\" + sourcePath + \")\");\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10084530",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private InputStream urlToInputStream(URL url) throws IOException {\n        URLConnection conn = url.openConnection();\n        conn.setRequestProperty(\"User-Agent\", IE);\n        conn.setRequestProperty(\"Accept-Encoding\", \"gzip, deflate\");\n        conn.connect();\n        String encoding = conn.getContentEncoding();\n        if ((encoding != null) && encoding.equalsIgnoreCase(\"gzip\")) return new GZIPInputStream(conn.getInputStream()); else if ((encoding != null) && encoding.equalsIgnoreCase(\"deflate\")) return new InflaterInputStream(conn.getInputStream(), new Inflater(true)); else return conn.getInputStream();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10085826",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void doConvert(HttpServletResponse response, ConversionRequestResolver rr, EGE ege, ConversionsPath cpath) throws FileUploadException, IOException, RequestResolvingException, EGEException, FileNotFoundException, ConverterException, ZipException {\n        InputStream is = null;\n        OutputStream os = null;\n        if (ServletFileUpload.isMultipartContent(rr.getRequest())) {\n            ServletFileUpload upload = new ServletFileUpload();\n            FileItemIterator iter = upload.getItemIterator(rr.getRequest());\n            while (iter.hasNext()) {\n                FileItemStream item = iter.next();\n                if (!item.isFormField()) {\n                    is = item.openStream();\n                    applyConversionsProperties(rr.getConversionProperties(), cpath);\n                    DataBuffer buffer = new DataBuffer(0, EGEConstants.BUFFER_TEMP_PATH);\n                    String alloc = buffer.allocate(is);\n                    InputStream ins = buffer.getDataAsStream(alloc);\n                    is.close();\n                    try {\n                        ValidationResult vRes = ege.performValidation(ins, cpath.getInputDataType());\n                        if (vRes.getStatus().equals(ValidationResult.Status.FATAL)) {\n                            ValidationServlet valServ = new ValidationServlet();\n                            valServ.printValidationResult(response, vRes);\n                            try {\n                                ins.close();\n                            } finally {\n                                buffer.removeData(alloc, true);\n                            }\n                            return;\n                        }\n                    } catch (ValidatorException vex) {\n                        LOGGER.warn(vex.getMessage());\n                    } finally {\n                        try {\n                            ins.close();\n                        } catch (Exception ex) {\n                        }\n                    }\n                    File zipFile = null;\n                    FileOutputStream fos = null;\n                    String newTemp = UUID.randomUUID().toString();\n                    IOResolver ior = EGEConfigurationManager.getInstance().getStandardIOResolver();\n                    File buffDir = new File(buffer.getDataDir(alloc));\n                    zipFile = new File(EGEConstants.BUFFER_TEMP_PATH + File.separator + newTemp + EZP_EXT);\n                    fos = new FileOutputStream(zipFile);\n                    ior.compressData(buffDir, fos);\n                    ins = new FileInputStream(zipFile);\n                    File szipFile = new File(EGEConstants.BUFFER_TEMP_PATH + File.separator + newTemp + ZIP_EXT);\n                    fos = new FileOutputStream(szipFile);\n                    try {\n                        try {\n                            ege.performConversion(ins, fos, cpath);\n                        } finally {\n                            fos.close();\n                        }\n                        boolean isComplex = EGEIOUtils.isComplexZip(szipFile);\n                        response.setContentType(APPLICATION_OCTET_STREAM);\n                        String fN = item.getName().substring(0, item.getName().lastIndexOf(\".\"));\n                        if (isComplex) {\n                            String fileExt;\n                            if (cpath.getOutputDataType().getMimeType().equals(APPLICATION_MSWORD)) {\n                                fileExt = DOCX_EXT;\n                            } else {\n                                fileExt = ZIP_EXT;\n                            }\n                            response.setHeader(\"Content-Disposition\", \"attachment; filename=\\\"\" + fN + fileExt + \"\\\"\");\n                            FileInputStream fis = new FileInputStream(szipFile);\n                            os = response.getOutputStream();\n                            try {\n                                EGEIOUtils.copyStream(fis, os);\n                            } finally {\n                                fis.close();\n                            }\n                        } else {\n                            String fileExt = getMimeExtensionProvider().getFileExtension(cpath.getOutputDataType().getMimeType());\n                            response.setHeader(\"Content-Disposition\", \"attachment; filename=\\\"\" + fN + fileExt + \"\\\"\");\n                            os = response.getOutputStream();\n                            EGEIOUtils.unzipSingleFile(new ZipFile(szipFile), os);\n                        }\n                    } finally {\n                        ins.close();\n                        if (os != null) {\n                            os.flush();\n                            os.close();\n                        }\n                        buffer.clear(true);\n                        szipFile.delete();\n                        if (zipFile != null) {\n                            zipFile.delete();\n                        }\n                    }\n                }\n            }\n        } else {\n            response.sendError(HttpServletResponse.SC_BAD_REQUEST);\n            return;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10086563",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void loadProfilefromConfig(String filename, P xslProfileClass, String profileTag) throws ParserConfigurationException, SAXException, IOException, XPathExpressionException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void loadProfilefromConfig(String filename, P xslProfileClass, String profileTag) throws ParserConfigurationException, SAXException, IOException, XPathExpressionException {\n        if (Val.chkStr(profileTag).equals(\"\")) {\n            profileTag = \"Profile\";\n        }\n        String configuration_folder_path = this.getConfigurationFolderPath();\n        if (configuration_folder_path == null || configuration_folder_path.length() == 0) {\n            Properties properties = new Properties();\n            final URL url = CswProfiles.class.getResource(\"CswCommon.properties\");\n            properties.load(url.openStream());\n            configuration_folder_path = properties.getProperty(\"DEFAULT_CONFIGURATION_FOLDER_PATH\");\n        }\n        DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n        ResourcePath rscPath = new ResourcePath();\n        InputSource configFile = rscPath.makeInputSource(configuration_folder_path + filename);\n        if (configFile == null) {\n            configFile = rscPath.makeInputSource(\"/\" + configuration_folder_path + filename);\n        }\n        Document doc = builder.parse(configFile);\n        NodeList profileNodes = doc.getElementsByTagName(profileTag);\n        for (int i = 0; i < profileNodes.getLength(); i++) {\n            Node currProfile = profileNodes.item(i);\n            XPath xpath = XPathFactory.newInstance().newXPath();\n            String id = Val.chkStr(xpath.evaluate(\"ID\", currProfile));\n            String name = Val.chkStr(xpath.evaluate(\"Name\", currProfile));\n            String description = Val.chkStr(xpath.evaluate(\"Description\", currProfile));\n            String requestXslt = Val.chkStr(xpath.evaluate(\"GetRecords/XSLTransformations/Request\", currProfile));\n            String expectedGptXmlOutput = Val.chkStr(xpath.evaluate(\"GetRecords/XSLTransformations/Request/@expectedGptXmlOutput\", currProfile));\n            if (expectedGptXmlOutput.equals(\"\")) {\n                expectedGptXmlOutput = FORMAT_SEARCH_TO_XSL.MINIMAL_LEGACY_CSWCLIENT.toString();\n            }\n            String responseXslt = Val.chkStr(xpath.evaluate(\"GetRecords/XSLTransformations/Response\", currProfile));\n            String requestKVPs = Val.chkStr(xpath.evaluate(\"GetRecordByID/RequestKVPs\", currProfile));\n            String metadataXslt = Val.chkStr(xpath.evaluate(\"GetRecordByID/XSLTransformations/Response\", currProfile));\n            boolean extentSearch = Boolean.parseBoolean(Val.chkStr(xpath.evaluate(\"SupportSpatialQuery\", currProfile)));\n            boolean liveDataMaps = Boolean.parseBoolean(Val.chkStr(xpath.evaluate(\"SupportContentTypeQuery\", currProfile)));\n            boolean extentDisplay = Boolean.parseBoolean(Val.chkStr(xpath.evaluate(\"SupportSpatialBoundary\", currProfile)));\n            boolean harvestable = Boolean.parseBoolean(Val.chkStr(xpath.evaluate(\"Harvestable\", currProfile)));\n            requestXslt = configuration_folder_path + requestXslt;\n            responseXslt = configuration_folder_path + responseXslt;\n            metadataXslt = configuration_folder_path + metadataXslt;\n            SearchXslProfile profile = null;\n            try {\n                profile = xslProfileClass.getClass().newInstance();\n                profile.setId(id);\n                profile.setName(name);\n                profile.setDescription(description);\n                profile.setRequestxslt(requestXslt);\n                profile.setResponsexslt(responseXslt);\n                profile.setMetadataxslt(metadataXslt);\n                profile.setSupportsContentTypeQuery(liveDataMaps);\n                profile.setSupportsSpatialBoundary(extentDisplay);\n                profile.setSupportsSpatialQuery(extentSearch);\n                profile.setKvp(requestKVPs);\n                profile.setHarvestable(harvestable);\n                profile.setFormatRequestToXsl(SearchXslProfile.FORMAT_SEARCH_TO_XSL.valueOf(expectedGptXmlOutput));\n                profile.setFilter_extentsearch(extentSearch);\n                profile.setFilter_livedatamap(liveDataMaps);\n                addProfile((P) profile);\n            } catch (InstantiationException e) {\n                throw new IOException(\"Could not instantiate profile class\" + e.getMessage());\n            } catch (IllegalAccessException e) {\n                throw new IOException(\"Could not instantiate profile class\" + e.getMessage());\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10088166",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void testTrim() throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Test\n    public void testTrim() throws Exception {\n        TreeNode ast = TestUtil.readFileInAST(\"resources/SimpleTestFile.java\");\n        DecoratorSelection ds = new DecoratorSelection();\n        XmlFileSystemRepository rep = new XmlFileSystemRepository();\n        XmlToFormatContentConverter converter = new XmlToFormatContentConverter(rep);\n        URI url = new File(\"resources/javaDefaultFormats.xml\").toURI();\n        InputStream is = url.toURL().openStream();\n        converter.convert(is);\n        File f = new File(\"resources/javaDefaultFormats.xml\").getAbsoluteFile();\n        converter.convert(f);\n        String string = new File(\"resources/query.xml\").getAbsolutePath();\n        Document qDoc = XmlUtil.loadXmlFromFile(string);\n        Query query = new Query(qDoc);\n        Format format = XfsrFormatManager.getInstance().getFormats(\"java\", \"signature only\");\n        TokenAutoTrimmer.create(\"Java\", \"resources/java.autotrim\");\n        Document doc = rep.getXmlContentTree(ast, query, format, ds).getOwnerDocument();\n        String expected = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"no\\\"?><sourcecode>main(String[])</sourcecode>\";\n        ByteArrayOutputStream bout = new ByteArrayOutputStream();\n        XmlUtil.outputXml(doc, bout);\n        String actual = bout.toString();\n        assertEquals(expected, actual);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10089329",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copy(File inputFile, File target) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copy(File inputFile, File target) throws IOException {\n        if (!inputFile.exists()) return;\n        OutputStream output = new FileOutputStream(target);\n        InputStream input = new BufferedInputStream(new FileInputStream(inputFile));\n        int b;\n        while ((b = input.read()) != -1) output.write(b);\n        output.close();\n        input.close();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10091126",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void sendLargePostRequest(final int size) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void sendLargePostRequest(final int size) throws IOException {\n        String encodedData = URLEncoder.encode(\"test\", WebCastellumParameter.DEFAULT_CHARACTER_ENCODING.getValue()) + \"=\" + URLEncoder.encode(\"this is just a mass test\", WebCastellumParameter.DEFAULT_CHARACTER_ENCODING.getValue());\n        encodedData += \"&\" + URLEncoder.encode(\"payload\", WebCastellumParameter.DEFAULT_CHARACTER_ENCODING.getValue()) + \"=\" + createTestdata(size);\n        final long start = System.currentTimeMillis();\n        final long end;\n        HttpURLConnection connection = (HttpURLConnection) this.url.openConnection();\n        connection.setDoOutput(true);\n        connection.setDoInput(true);\n        connection.setUseCaches(false);\n        connection.setFollowRedirects(true);\n        connection.setInstanceFollowRedirects(true);\n        connection.setRequestMethod(\"POST\");\n        connection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n        connection.setRequestProperty(\"Content-Length\", \"\" + encodedData.length());\n        DataOutputStream output = null;\n        BufferedReader reader = null;\n        try {\n            output = new DataOutputStream(connection.getOutputStream());\n            output.writeBytes(encodedData);\n            output.flush();\n            reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));\n            String line;\n            while ((line = reader.readLine()) != null) {\n            }\n            end = System.currentTimeMillis();\n        } finally {\n            if (output != null) {\n                try {\n                    output.close();\n                } catch (IOException ignored) {\n                }\n            }\n            if (reader != null) {\n                try {\n                    reader.close();\n                } catch (IOException ignored) {\n                }\n            }\n        }\n        System.out.println(\"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\");\n        System.out.println(\"Duration: \" + (end - start) + \" ms\");\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10093209",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic InitResult init(String name) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n    public InitResult init(String name) {\n        this.urlString = name;\n        URL url;\n        URLConnection con;\n        try {\n            url = new URL(urlString);\n            con = url.openConnection();\n            int size = con.getContentLength();\n            char[] characters = new char[size];\n            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n            in.read(characters);\n            in.close();\n            return new InitResult(0, size, characters);\n        } catch (Exception e) {\n            throw new ParserException(e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10095726",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void addApplication(Application app) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n    public void addApplication(Application app) {\n        logger.info(\"Adding a new application \" + app.getName() + \" by \" + app.getOrganisation() + \" (\" + app.getEmail() + \") \");\n        app.setRegtime(new Timestamp(new Date().getTime()));\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n            md.update((app.getName() + app.getEmail() + app.getRegtime()).getBytes());\n            byte byteData[] = md.digest();\n            StringBuffer sb = new StringBuffer();\n            for (int i = 0; i < byteData.length; i++) {\n                sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));\n            }\n            app.setAppid(sb.toString());\n        } catch (NoSuchAlgorithmException ex) {\n            java.util.logging.Logger.getLogger(ApplicationDAOImpl.class.getName()).log(Level.SEVERE, null, ex);\n        }\n        System.out.println(app.toString());\n        SqlParameterSource parameters = new BeanPropertySqlParameterSource(app);\n        Number appUid = insertApplication.executeAndReturnKey(parameters);\n        app.setId(appUid.longValue());\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10095821",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void download() throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Test(dependsOnMethods = { \"getSize\" })\n    public void download() throws IOException {\n        FileObject typica = fsManager.resolveFile(\"s3://\" + bucketName + \"/jonny.zip\");\n        File localCache = File.createTempFile(\"vfs.\", \".s3-test\");\n        FileOutputStream out = new FileOutputStream(localCache);\n        IOUtils.copy(typica.getContent().getInputStream(), out);\n        Assert.assertEquals(localCache.length(), typica.getContent().getSize());\n        localCache.delete();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10095870",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic String getMD5String(String par1Str) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public String getMD5String(String par1Str) {\n        try {\n            String s = (new StringBuilder()).append(field_27370_a).append(par1Str).toString();\n            MessageDigest messagedigest = MessageDigest.getInstance(\"MD5\");\n            messagedigest.update(s.getBytes(), 0, s.length());\n            return (new BigInteger(1, messagedigest.digest())).toString(16);\n        } catch (NoSuchAlgorithmException nosuchalgorithmexception) {\n            throw new RuntimeException(nosuchalgorithmexception);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10104168",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String calculateHash(String data, String algorithm) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String calculateHash(String data, String algorithm) {\n        if (data == null) {\n            return null;\n        }\n        algorithm = (algorithm == null ? INTERNAL : algorithm.toUpperCase());\n        if (algorithm.equals(PLAIN)) {\n            return data;\n        }\n        if (algorithm.startsWith(\"{RSA}\")) {\n            return encode(data, algorithm.substring(5), \"RSA\");\n        }\n        try {\n            MessageDigest md = MessageDigest.getInstance(algorithm);\n            md.update(data.getBytes(\"UTF-8\"));\n            return getHashString(md.digest());\n        } catch (UnsupportedEncodingException e) {\n            logger.error(e.getMessage());\n            return null;\n        } catch (NoSuchAlgorithmException nsae) {\n            logger.error(nsae.getMessage());\n            return null;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10106324",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String md5Encode(String s) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String md5Encode(String s) {\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            md.update(s.getBytes());\n            return toHexString(md.digest());\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n            return s;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10106969",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String md5(String value) throws NoSuchAlgorithmException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String md5(String value) throws NoSuchAlgorithmException {\n        MessageDigest messageDigest = MessageDigest.getInstance(\"MD5\");\n        try {\n            messageDigest.update(value.getBytes(\"UTF-8\"));\n        } catch (UnsupportedEncodingException e) {\n            messageDigest.update(value.getBytes());\n        }\n        byte[] bytes = messageDigest.digest();\n        return byteArrayToHexString(bytes);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10107377",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static Collection<SearchKeyResult> searchKey(String iText, String iKeyServer) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Deprecated\n    public static Collection<SearchKeyResult> searchKey(String iText, String iKeyServer) throws Exception {\n        List<SearchKeyResult> outVec = new ArrayList<SearchKeyResult>();\n        String uri = iKeyServer + \"/pks/lookup?search=\" + URLEncoder.encode(iText, UTF8);\n        URL url = new URL(uri);\n        BufferedReader input = new BufferedReader(new InputStreamReader(url.openStream()));\n        Pattern regex = Pattern.compile(\"pub.*?<a\\\\s+href\\\\s*=\\\"(.*?)\\\".*?>\\\\s*(\\\\w+)\\\\s*</a>.*?(\\\\d+-\\\\d+-\\\\d+).*?<a\\\\s+href\\\\s*=\\\".*?\\\".*?>\\\\s*(.+?)\\\\s*</a>\", Pattern.CANON_EQ);\n        String line;\n        while ((line = input.readLine()) != null) {\n            Matcher regexMatcher = regex.matcher(line);\n            while (regexMatcher.find()) {\n                String id = regexMatcher.group(2);\n                String downUrl = iKeyServer + regexMatcher.group(1);\n                String downDate = regexMatcher.group(3);\n                String name = decodeHTML(regexMatcher.group(4));\n                outVec.add(new SearchKeyResult(id, name, downDate, downUrl));\n            }\n        }\n        IOUtils.closeQuietly(input);\n        return outVec;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01010770",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static boolean urlStrIsDir(String urlStr) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static boolean urlStrIsDir(String urlStr) {\n        if (urlStr.endsWith(\"/\")) return true;\n        int lastSlash = urlStr.lastIndexOf('/');\n        int lastPeriod = urlStr.lastIndexOf('.');\n        if (lastPeriod != -1 && (lastSlash == -1 || lastPeriod > lastSlash)) return false;\n        String urlStrWithSlash = urlStr + \"/\";\n        try {\n            URL url = new URL(urlStrWithSlash);\n            InputStream f = url.openStream();\n            f.close();\n            return true;\n        } catch (Exception e) {\n            return false;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10109343",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void readData() throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void readData() throws IOException {\n        i = 0;\n        j = 0;\n        URL url = getClass().getResource(\"resources/tuneGridMaster.dat\");\n        InputStream is = url.openStream();\n        InputStreamReader isr = new InputStreamReader(is);\n        BufferedReader br = new BufferedReader(isr);\n        s = br.readLine();\n        StringTokenizer st = new StringTokenizer(s);\n        tune_x[i][j] = Double.parseDouble(st.nextToken());\n        gridmin = tune_x[i][j];\n        temp_prev = tune_x[i][j];\n        tune_y[i][j] = Double.parseDouble(st.nextToken());\n        kd[i][j] = Double.parseDouble(st.nextToken());\n        kfs[i][j] = Double.parseDouble(st.nextToken());\n        kfl[i][j] = Double.parseDouble(st.nextToken());\n        kdee[i][j] = Double.parseDouble(st.nextToken());\n        kdc[i][j] = Double.parseDouble(st.nextToken());\n        kfc[i][j] = Double.parseDouble(st.nextToken());\n        j++;\n        int k = 0;\n        while ((s = br.readLine()) != null) {\n            st = new StringTokenizer(s);\n            temp_new = Double.parseDouble(st.nextToken());\n            if (temp_new != temp_prev) {\n                temp_prev = temp_new;\n                i++;\n                j = 0;\n            }\n            tune_x[i][j] = temp_new;\n            tune_y[i][j] = Double.parseDouble(st.nextToken());\n            kd[i][j] = Double.parseDouble(st.nextToken());\n            kfs[i][j] = Double.parseDouble(st.nextToken());\n            kfl[i][j] = Double.parseDouble(st.nextToken());\n            kdee[i][j] = Double.parseDouble(st.nextToken());\n            kdc[i][j] = Double.parseDouble(st.nextToken());\n            kfc[i][j] = Double.parseDouble(st.nextToken());\n            imax = i;\n            jmax = j;\n            j++;\n            k++;\n        }\n        gridmax = tune_x[i][j - 1];\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10113882",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void createSaveServiceProps() throws MojoExecutionException {\n        saveServiceProps = new File(workDir, \"saveservice.properties\");\n        try {\n            FileWriter out = new FileWriter(saveServiceProps);\n            IOUtils.copy(Thread.currentThread().getContextClassLoader().getResourceAsStream(\"saveservice.properties\"), out);\n            out.flush();\n            out.close();\n            System.setProperty(\"saveservice_properties\", File.separator + \"target\" + File.separator + \"jmeter\" + File.separator + \"saveservice.properties\");\n        } catch (IOException e) {\n            throw new MojoExecutionException(\"Could not create temporary saveservice.properties\", e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10115624",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void registerSchema(String newSchemaName, String objectControlller, long boui, String expression, String schema) throws SQLException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void registerSchema(String newSchemaName, String objectControlller, long boui, String expression, String schema) throws SQLException {\n        Connection cndef = null;\n        PreparedStatement pstm = null;\n        try {\n            cndef = this.getRepositoryConnection(p_ctx.getApplication(), \"default\", 2);\n            String friendlyName = MessageLocalizer.getMessage(\"SCHEMA_CREATED_BY_OBJECT\") + \" [\" + objectControlller + \"] \" + MessageLocalizer.getMessage(\"WITH_BOUI\") + \" [\" + boui + \"]\";\n            pstm = cndef.prepareStatement(\"DELETE FROM NGTDIC WHERE TABLENAME=? and objecttype='S'\");\n            pstm.setString(1, newSchemaName);\n            pstm.executeUpdate();\n            pstm.close();\n            pstm = cndef.prepareStatement(\"INSERT INTO NGTDIC (SCHEMA,OBJECTNAME,OBJECTTYPE,TABLENAME, \" + \"FRIENDLYNAME, EXPRESSION) VALUES (\" + \"?,?,?,?,?,?)\");\n            pstm.setString(1, schema);\n            pstm.setString(2, newSchemaName);\n            pstm.setString(3, \"S\");\n            pstm.setString(4, newSchemaName);\n            pstm.setString(5, friendlyName);\n            pstm.setString(6, expression);\n            pstm.executeUpdate();\n            pstm.close();\n            cndef.commit();\n        } catch (Exception e) {\n            cndef.rollback();\n            e.printStackTrace();\n            throw new SQLException(e.getMessage());\n        } finally {\n            if (pstm != null) {\n                try {\n                    pstm.close();\n                } catch (Exception e) {\n                }\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10115630",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static boolean copyDataToNewTable(EboContext p_eboctx, String srcTableName, String destTableName, String where, boolean log, int mode) throws boRuntimeException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static boolean copyDataToNewTable(EboContext p_eboctx, String srcTableName, String destTableName, String where, boolean log, int mode) throws boRuntimeException {\n        srcTableName = srcTableName.toUpperCase();\n        destTableName = destTableName.toUpperCase();\n        Connection cn = null;\n        Connection cndef = null;\n        boolean ret = false;\n        try {\n            boolean srcexists = false;\n            boolean destexists = false;\n            final InitialContext ic = new InitialContext();\n            cn = p_eboctx.getConnectionData();\n            cndef = p_eboctx.getConnectionDef();\n            PreparedStatement pstm = cn.prepareStatement(\"SELECT TABLE_NAME FROM USER_TABLES WHERE TABLE_NAME=?\");\n            pstm.setString(1, srcTableName);\n            ResultSet rslt = pstm.executeQuery();\n            if (rslt.next()) {\n                srcexists = true;\n            }\n            rslt.close();\n            pstm.setString(1, destTableName);\n            rslt = pstm.executeQuery();\n            if (rslt.next()) {\n                destexists = true;\n            }\n            if (!destexists) {\n                rslt.close();\n                pstm.close();\n                pstm = cn.prepareStatement(\"SELECT VIEW_NAME FROM USER_VIEWS WHERE VIEW_NAME=?\");\n                pstm.setString(1, destTableName);\n                rslt = pstm.executeQuery();\n                if (rslt.next()) {\n                    CallableStatement cstm = cn.prepareCall(\"DROP VIEW \" + destTableName);\n                    cstm.execute();\n                    cstm.close();\n                }\n            }\n            rslt.close();\n            pstm.close();\n            if (srcexists && !destexists) {\n                if (log) {\n                    logger.finest(LoggerMessageLocalizer.getMessage(\"CREATING_AND_COPY_DATA_FROM\") + \" [\" + srcTableName + \"] \" + LoggerMessageLocalizer.getMessage(\"TO\") + \" [\" + destTableName + \"]\");\n                }\n                CallableStatement cstm = cn.prepareCall(\"CREATE TABLE \" + destTableName + \" AS SELECT * FROM \" + srcTableName + \" \" + (((where != null) && (where.length() > 0)) ? (\" WHERE \" + where) : \"\"));\n                cstm.execute();\n                cstm.close();\n                if (log) {\n                    logger.finest(LoggerMessageLocalizer.getMessage(\"UPDATING_NGTDIC\"));\n                }\n                cn.commit();\n                ret = true;\n            } else if (srcexists && destexists) {\n                if (log) {\n                    logger.finest(LoggerMessageLocalizer.getMessage(\"COPY_DATA_FROM\") + \" [\" + srcTableName + \"] \" + LoggerMessageLocalizer.getMessage(\"TO\") + \"  [\" + destTableName + \"]\");\n                }\n                PreparedStatement pstm2 = cn.prepareStatement(\"SELECT COLUMN_NAME FROM USER_TAB_COLUMNS WHERE TABLE_NAME = ? \");\n                pstm2.setString(1, destTableName);\n                ResultSet rslt2 = pstm2.executeQuery();\n                StringBuffer fields = new StringBuffer();\n                PreparedStatement pstm3 = cn.prepareStatement(\"SELECT COLUMN_NAME FROM USER_TAB_COLUMNS WHERE TABLE_NAME = ? and COLUMN_NAME=?\");\n                while (rslt2.next()) {\n                    pstm3.setString(1, srcTableName);\n                    pstm3.setString(2, rslt2.getString(1));\n                    ResultSet rslt3 = pstm3.executeQuery();\n                    if (rslt3.next()) {\n                        if (fields.length() > 0) {\n                            fields.append(',');\n                        }\n                        fields.append('\"').append(rslt2.getString(1)).append('\"');\n                    }\n                    rslt3.close();\n                }\n                pstm3.close();\n                rslt2.close();\n                pstm2.close();\n                CallableStatement cstm;\n                int recs = 0;\n                if ((mode == 0) || (mode == 1)) {\n                    cstm = cn.prepareCall(\"INSERT INTO \" + destTableName + \"( \" + fields.toString() + \" ) ( SELECT \" + fields.toString() + \" FROM \" + srcTableName + \" \" + (((where != null) && (where.length() > 0)) ? (\" WHERE \" + where) : \"\") + \")\");\n                    recs = cstm.executeUpdate();\n                    cstm.close();\n                    if (log) {\n                        logger.finest(LoggerMessageLocalizer.getMessage(\"DONE\") + \" [\" + recs + \"] \" + LoggerMessageLocalizer.getMessage(\"RECORDS_COPIED\"));\n                    }\n                }\n                cn.commit();\n                ret = true;\n            }\n        } catch (Exception e) {\n            try {\n                cn.rollback();\n            } catch (Exception z) {\n                throw new boRuntimeException(\"boBuildDB.moveTable\", \"BO-1304\", z);\n            }\n            throw new boRuntimeException(\"boBuildDB.moveTable\", \"BO-1304\", e);\n        } finally {\n            try {\n                cn.close();\n            } catch (Exception e) {\n            }\n            try {\n                cndef.close();\n            } catch (Exception e) {\n            }\n        }\n        return ret;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10118200",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static final boolean zipExtract(String zipfile, String name, String dest) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static final boolean zipExtract(String zipfile, String name, String dest) {\n        boolean f = false;\n        try {\n            InputStream in = new BufferedInputStream(new FileInputStream(zipfile));\n            ZipInputStream zin = new ZipInputStream(in);\n            ZipEntry e;\n            while ((e = zin.getNextEntry()) != null) {\n                if (e.getName().equals(name)) {\n                    FileOutputStream out = new FileOutputStream(dest);\n                    byte b[] = new byte[TEMP_FILE_BUFFER_SIZE];\n                    int len = 0;\n                    while ((len = zin.read(b)) != -1) out.write(b, 0, len);\n                    out.close();\n                    f = true;\n                    break;\n                }\n            }\n            zin.close();\n        } catch (FileNotFoundException e) {\n            MLUtil.runtimeError(e, \"extractZip \" + zipfile + \" \" + name);\n        } catch (IOException e) {\n            MLUtil.runtimeError(e, \"extractZip \" + zipfile + \" \" + name);\n        }\n        return (f);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10118207",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static final boolean zipUpdate(String zipfile, String name, String oldname, byte[] contents, boolean delete) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static final boolean zipUpdate(String zipfile, String name, String oldname, byte[] contents, boolean delete) {\n        try {\n            File temp = File.createTempFile(\"atf\", \".zip\");\n            InputStream in = new BufferedInputStream(new FileInputStream(zipfile));\n            OutputStream os = new BufferedOutputStream(new FileOutputStream(temp));\n            ZipInputStream zin = new ZipInputStream(in);\n            ZipOutputStream zout = new ZipOutputStream(os);\n            ZipEntry e;\n            ZipEntry e2;\n            byte buffer[] = new byte[TEMP_FILE_BUFFER_SIZE];\n            int bytesRead;\n            boolean found = false;\n            boolean rename = false;\n            String oname = name;\n            if (oldname != null) {\n                name = oldname;\n                rename = true;\n            }\n            while ((e = zin.getNextEntry()) != null) {\n                if (!e.isDirectory()) {\n                    String ename = e.getName();\n                    if (delete && ename.equals(name)) continue;\n                    e2 = new ZipEntry(rename ? oname : ename);\n                    zout.putNextEntry(e2);\n                    if (ename.equals(name)) {\n                        found = true;\n                        zout.write(contents);\n                    } else {\n                        while ((bytesRead = zin.read(buffer)) != -1) zout.write(buffer, 0, bytesRead);\n                    }\n                    zout.closeEntry();\n                }\n            }\n            if (!found && !delete) {\n                e = new ZipEntry(name);\n                zout.putNextEntry(e);\n                zout.write(contents);\n                zout.closeEntry();\n            }\n            zin.close();\n            zout.close();\n            File fp = new File(zipfile);\n            fp.delete();\n            MLUtil.copyFile(temp, fp);\n            temp.delete();\n            return (true);\n        } catch (FileNotFoundException e) {\n            MLUtil.runtimeError(e, \"updateZip \" + zipfile + \" \" + name);\n        } catch (IOException e) {\n            MLUtil.runtimeError(e, \"updateZip \" + zipfile + \" \" + name);\n        }\n        return (false);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10118785",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void download(String remoteFilePath, String localFilePath) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n    public void download(String remoteFilePath, String localFilePath) {\n        InputStream remoteStream = null;\n        try {\n            remoteStream = client.get(remoteFilePath);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        OutputStream localStream = null;\n        try {\n            localStream = new FileOutputStream(new File(localFilePath));\n        } catch (FileNotFoundException e1) {\n            e1.printStackTrace();\n        }\n        try {\n            IOUtils.copy(remoteStream, localStream);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10126016",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic T08OTSDTMInterpositionUnitTestCase(String name) throws java.io.IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public T08OTSDTMInterpositionUnitTestCase(String name) throws java.io.IOException {\n        super(name);\n        java.net.URL url = ClassLoader.getSystemResource(\"host0.cosnaming.jndi.properties\");\n        jndiProps = new java.util.Properties();\n        jndiProps.load(url.openStream());\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10131427",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copyFile(File in, File out) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copyFile(File in, File out) throws IOException {\n        FileChannel sourceChannel = new FileInputStream(in).getChannel();\n        FileChannel destinationChannel = new FileOutputStream(out).getChannel();\n        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\n        sourceChannel.close();\n        destinationChannel.close();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10135488",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void run() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n    public void run() {\n        try {\n            long pos = begin;\n            byte[] buf = new byte[1024];\n            URLConnection cn = url.openConnection();\n            Utils.setHeader(cn);\n            cn.setRequestProperty(\"Range\", \"bytes=\" + begin + \"-\" + end);\n            BufferedInputStream bis = new BufferedInputStream(cn.getInputStream());\n            int len;\n            while ((len = bis.read(buf)) > 0) {\n                synchronized (file) {\n                    file.seek(pos);\n                    file.write(buf, 0, len);\n                }\n                pos += len;\n                Statics.getInstance().addComleted(len);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        latch.countDown();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10140251",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "protected String contentString() {\n        String result = null;\n        URL url;\n        String encoding = null;\n        try {\n            url = url();\n            URLConnection connection = url.openConnection();\n            connection.setDoInput(true);\n            connection.setDoOutput(false);\n            connection.setUseCaches(false);\n            for (Enumeration e = bindingKeys().objectEnumerator(); e.hasMoreElements(); ) {\n                String key = (String) e.nextElement();\n                if (key.startsWith(\"?\")) {\n                    connection.setRequestProperty(key.substring(1), valueForBinding(key).toString());\n                }\n            }\n            if (connection.getContentEncoding() != null) {\n                encoding = connection.getContentEncoding();\n            }\n            if (encoding == null) {\n                encoding = (String) valueForBinding(\"encoding\");\n            }\n            if (encoding == null) {\n                encoding = \"UTF-8\";\n            }\n            InputStream stream = connection.getInputStream();\n            byte bytes[] = ERXFileUtilities.bytesFromInputStream(stream);\n            stream.close();\n            result = new String(bytes, encoding);\n        } catch (IOException ex) {\n            throw NSForwardException._runtimeExceptionForThrowable(ex);\n        }\n        return result;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10140299",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "protected static byte[] hashPassword(byte[] saltBytes, String plaintextPassword) throws AssertionError {\n        MessageDigest digest;\n        try {\n            digest = MessageDigest.getInstance(\"MD5\");\n        } catch (NoSuchAlgorithmException ex) {\n            throw (AssertionError) new AssertionError(\"No MD5 message digest supported.\").initCause(ex);\n        }\n        digest.update(saltBytes);\n        try {\n            digest.update(plaintextPassword.getBytes(\"utf-8\"));\n        } catch (UnsupportedEncodingException ex) {\n            throw (AssertionError) new AssertionError(\"No UTF-8 encoding supported.\").initCause(ex);\n        }\n        byte[] passwordBytes = digest.digest();\n        return passwordBytes;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10142186",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String getMD5Str(String str) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String getMD5Str(String str) {\n        MessageDigest messageDigest = null;\n        try {\n            messageDigest = MessageDigest.getInstance(\"MD5\");\n            messageDigest.reset();\n            messageDigest.update(str.getBytes(\"UTF-8\"));\n        } catch (NoSuchAlgorithmException e) {\n            System.out.println(\"NoSuchAlgorithmException caught!\");\n            System.exit(-1);\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n        byte[] byteArray = messageDigest.digest();\n        StringBuffer md5StrBuff = new StringBuffer();\n        for (int i = 0; i < byteArray.length; i++) {\n            if (Integer.toHexString(0xFF & byteArray[i]).length() == 1) md5StrBuff.append(\"0\").append(Integer.toHexString(0xFF & byteArray[i])); else md5StrBuff.append(Integer.toHexString(0xFF & byteArray[i]));\n        }\n        return md5StrBuff.toString();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01014829",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic int readRaw(byte[] buffer, int offset, int length) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public int readRaw(byte[] buffer, int offset, int length) throws IOException {\n        if (offset < 0 || length < 0 || (offset + length) > buffer.length) {\n            throw new IndexOutOfBoundsException();\n        }\n        HttpURLConnection connection = null;\n        InputStream is = null;\n        int n = 0;\n        try {\n            connection = (HttpURLConnection) url.openConnection();\n            String byteRange = \"bytes=\" + position + \"-\" + (position + length - 1);\n            connection.setRequestProperty(\"Range\", byteRange);\n            is = connection.getInputStream();\n            while (n < length) {\n                int count = is.read(buffer, offset + n, length - n);\n                if (count < 0) {\n                    throw new EOFException();\n                }\n                n += count;\n            }\n            position += n;\n            return n;\n        } catch (EOFException e) {\n            return n;\n        } catch (IOException e) {\n            e.printStackTrace();\n            System.out.println(\"We're screwed...\");\n            System.out.println(n);\n            if (e.getMessage().contains(\"response code: 416\")) {\n                System.out.println(\"Trying to be mister nice guy, returning \" + n);\n                return n;\n            } else {\n                throw e;\n            }\n        } finally {\n            if (is != null) {\n                is.close();\n            }\n            if (connection != null) {\n                connection.disconnect();\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10151252",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void upload(FTPDetails ftpDetails) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void upload(FTPDetails ftpDetails) {\n        FTPClient ftp = new FTPClient();\n        try {\n            String host = ftpDetails.getHost();\n            logger.info(\"Connecting to ftp host: \" + host);\n            ftp.connect(host);\n            logger.info(\"Received reply from ftp :\" + ftp.getReplyString());\n            ftp.login(ftpDetails.getUserName(), ftpDetails.getPassword());\n            ftp.setFileType(FTP.BINARY_FILE_TYPE);\n            ftp.makeDirectory(ftpDetails.getRemoterDirectory());\n            logger.info(\"Created directory :\" + ftpDetails.getRemoterDirectory());\n            ftp.changeWorkingDirectory(ftpDetails.getRemoterDirectory());\n            BufferedInputStream ftpInput = new BufferedInputStream(new FileInputStream(new File(ftpDetails.getLocalFilePath())));\n            OutputStream storeFileStream = ftp.storeFileStream(ftpDetails.getRemoteFileName());\n            IOUtils.copy(ftpInput, storeFileStream);\n            logger.info(\"Copied file : \" + ftpDetails.getLocalFilePath() + \" >>> \" + host + \":/\" + ftpDetails.getRemoterDirectory() + \"/\" + ftpDetails.getRemoteFileName());\n            ftpInput.close();\n            storeFileStream.close();\n            ftp.logout();\n            ftp.disconnect();\n            logger.info(\"Logged out. \");\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10151623",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void signAndSend() throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void signAndSend() throws Exception {\n        SSLContext sslContext = null;\n        try {\n            sslContext = SSLContext.getInstance(\"TLS\");\n            X509TrustManager[] xtmArray = new X509TrustManager[] { xtm };\n            sslContext.init(null, xtmArray, new java.security.SecureRandom());\n        } catch (GeneralSecurityException gse) {\n            this.addException(\"GeneralSecurityException\", gse);\n        }\n        if (sslContext != null) {\n            HttpsURLConnection.setDefaultSSLSocketFactory(sslContext.getSocketFactory());\n        }\n        HttpsURLConnection.setDefaultHostnameVerifier(hnv);\n        String providerName = System.getProperty(\"jsr105Provider\", \"org.jcp.xml.dsig.internal.dom.XMLDSigRI\");\n        XMLSignatureFactory fac = XMLSignatureFactory.getInstance(\"DOM\", (Provider) Class.forName(providerName).newInstance());\n        DigestMethod dm = fac.newDigestMethod(DigestMethod.SHA1, null);\n        List transforms = new Vector(2);\n        transforms.add(fac.newTransform(\"http://www.w3.org/2000/09/xmldsig#enveloped-signature\", (TransformParameterSpec) null));\n        List prefixlist = new Vector(1);\n        prefixlist.add(\"xsd\");\n        transforms.add(fac.newTransform(\"http://www.w3.org/2001/10/xml-exc-c14n#\", new ExcC14NParameterSpec(prefixlist)));\n        Random randgen = new Random();\n        byte[] rand_bytes = new byte[20];\n        randgen.nextBytes(rand_bytes);\n        String assertion_id_str = \"i\" + new String(Hex.encodeHex(rand_bytes));\n        Reference ref = fac.newReference(\"#\" + assertion_id_str, dm, transforms, null, null);\n        CanonicalizationMethod cm = fac.newCanonicalizationMethod(CanonicalizationMethod.EXCLUSIVE, (C14NMethodParameterSpec) null);\n        SignatureMethod sm = fac.newSignatureMethod(SignatureMethod.RSA_SHA1, null);\n        SignedInfo si = fac.newSignedInfo(cm, sm, Collections.singletonList(ref));\n        KeyStore ks = KeyStore.getInstance(\"JKS\");\n        FileInputStream fis = null;\n        if (TEST_SIGNED_WITH_WRONG_CERT == testNumber) {\n            fis = new FileInputStream(resourceFolder + \"z-xtra-sign.jks\");\n        } else {\n            fis = new FileInputStream(resourceFolder + \"z-idp-sign.jks\");\n        }\n        ks.load(fis, \"changeit\".toCharArray());\n        {\n            Enumeration aliases = ks.aliases();\n            for (; aliases.hasMoreElements(); ) {\n                String alias = (String) aliases.nextElement();\n                boolean b = ks.isKeyEntry(alias);\n                b = ks.isCertificateEntry(alias);\n                System.out.println(b + \" \" + alias);\n            }\n        }\n        PrivateKey privateKey = (PrivateKey) ks.getKey(\"tomcat\", \"changeit\".toCharArray());\n        XMLSignature signature = fac.newXMLSignature(si, null);\n        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n        dbf.setNamespaceAware(true);\n        DocumentBuilder db = dbf.newDocumentBuilder();\n        File docFile = new File(resourceFolder + \"BaseRequest.xml\");\n        Document doc = db.parse(docFile);\n        Element root = doc.getDocumentElement();\n        NamedNodeMap root_atts = root.getAttributes();\n        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\");\n        sdf.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n        GregorianCalendar right_now = new GregorianCalendar();\n        if (TEST_NOT_ON_OR_AFTER_EXPIRED == testNumber) {\n            right_now.add(Calendar.MINUTE, alterNowDateBy);\n        }\n        Date issue_date = right_now.getTime();\n        right_now.add(Calendar.MINUTE, -10);\n        Date auth_instant_date = right_now.getTime();\n        right_now.add(Calendar.MINUTE, 20);\n        Date not_on_or_after_date = right_now.getTime();\n        System.out.println(\"Not on or after 1: \" + sdf.format(right_now.getTime()));\n        Node response_id = root_atts.getNamedItem(\"ID\");\n        randgen.nextBytes(rand_bytes);\n        response_id.setNodeValue(\"i\" + new String(Hex.encodeHex(rand_bytes)));\n        Node response_issue_instant = root_atts.getNamedItem(\"IssueInstant\");\n        response_issue_instant.setNodeValue(sdf.format(issue_date));\n        NodeList tmp_nlist = root.getElementsByTagNameNS(\"urn:oasis:names:tc:SAML:2.0:assertion\", \"Assertion\");\n        Element assertion_node = (Element) tmp_nlist.item(0);\n        NamedNodeMap ass_node_atts = assertion_node.getAttributes();\n        Node assertion_id = ass_node_atts.getNamedItem(\"ID\");\n        assertion_id.setNodeValue(assertion_id_str);\n        Node assertion_issue_instant = ass_node_atts.getNamedItem(\"IssueInstant\");\n        assertion_issue_instant.setNodeValue(sdf.format(issue_date));\n        tmp_nlist = assertion_node.getElementsByTagNameNS(\"urn:oasis:names:tc:SAML:2.0:assertion\", \"Subject\");\n        Element subject_node = (Element) tmp_nlist.item(0);\n        if (TEST_UNKNOWN_CONFIRMATION == testNumber) {\n            tmp_nlist = subject_node.getElementsByTagNameNS(\"urn:oasis:names:tc:SAML:2.0:assertion\", \"SubjectConfirmation\");\n            Element subj_conf_node = (Element) tmp_nlist.item(0);\n            NamedNodeMap subj_conf_node_atts = subj_conf_node.getAttributes();\n            Node method_node = subj_conf_node_atts.getNamedItem(\"Method\");\n            method_node.setNodeValue(badConfirmationMethod);\n        }\n        tmp_nlist = subject_node.getElementsByTagNameNS(\"urn:oasis:names:tc:SAML:2.0:assertion\", \"NameID\");\n        Element name_id_node = (Element) tmp_nlist.item(0);\n        NamedNodeMap name_id_node_atts = name_id_node.getAttributes();\n        Node sp_name_qualifier = name_id_node_atts.getNamedItem(\"SPNameQualifier\");\n        sp_name_qualifier.setNodeValue(sPEntityId);\n        Node name_id_value = name_id_node.getFirstChild();\n        randgen.nextBytes(rand_bytes);\n        name_id_value.setNodeValue(new String(Hex.encodeHex(rand_bytes)));\n        tmp_nlist = subject_node.getElementsByTagNameNS(\"urn:oasis:names:tc:SAML:2.0:assertion\", \"SubjectConfirmationData\");\n        Element subj_conf_data_node = (Element) tmp_nlist.item(0);\n        NamedNodeMap subj_conf_data_node_atts = subj_conf_data_node.getAttributes();\n        Node not_on_or_after_node = subj_conf_data_node_atts.getNamedItem(\"NotOnOrAfter\");\n        not_on_or_after_node.setNodeValue(sdf.format(not_on_or_after_date));\n        Node recipient_node = subj_conf_data_node_atts.getNamedItem(\"Recipient\");\n        if (TEST_WRONG_RECIPIENT == testNumber) {\n            recipient_node.setNodeValue(badRecipientValue);\n        } else {\n            recipient_node.setNodeValue(sPAssertionConsumerService);\n        }\n        tmp_nlist = assertion_node.getElementsByTagNameNS(\"urn:oasis:names:tc:SAML:2.0:assertion\", \"Audience\");\n        Element audience_node = (Element) tmp_nlist.item(0);\n        Node audience_value = audience_node.getFirstChild();\n        if (TEST_WRONG_AUDIENCE == testNumber) {\n            audience_value.setNodeValue(badAudienceValue);\n        } else {\n            audience_value.setNodeValue(sPEntityId);\n        }\n        tmp_nlist = assertion_node.getElementsByTagNameNS(\"urn:oasis:names:tc:SAML:2.0:assertion\", \"AuthnStatement\");\n        Element authn_statement_node = (Element) tmp_nlist.item(0);\n        NamedNodeMap authn_statement_node_atts = authn_statement_node.getAttributes();\n        Node authn_instant_node = authn_statement_node_atts.getNamedItem(\"AuthnInstant\");\n        authn_instant_node.setNodeValue(sdf.format(auth_instant_date));\n        Node sess_idx_node = authn_statement_node_atts.getNamedItem(\"SessionIndex\");\n        sess_idx_node.setNodeValue(assertion_id_str);\n        DOMSignContext signContext = new DOMSignContext(privateKey, assertion_node, subject_node);\n        signContext.putNamespacePrefix(\"http://www.w3.org/2000/09/xmldsig#\", \"ds\");\n        signContext.putNamespacePrefix(\"http://www.w3.org/2001/10/xml-exc-c14n#\", \"ec\");\n        signature.sign(signContext);\n        TransformerFactory tf = TransformerFactory.newInstance();\n        Transformer trans;\n        if (TEST_DATA_ALTERED_AFTER_SIG == testNumber) {\n            right_now.add(Calendar.MINUTE, 10);\n            System.out.println(\"Not on or after: \" + sdf.format(right_now.getTime()));\n            not_on_or_after_node.setNodeValue(sdf.format(right_now.getTime()));\n        }\n        trans = tf.newTransformer();\n        StringWriter sw = new StringWriter();\n        PrintWriter pw = new PrintWriter(sw);\n        trans.transform(new DOMSource(doc), new StreamResult(pw));\n        if (useJavaPOST) {\n            try {\n                URL url = new URL(sPAssertionConsumerService);\n                HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n                conn.setDoOutput(true);\n                conn.setDoInput(true);\n                conn.setRequestMethod(\"POST\");\n                conn.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n                conn.setInstanceFollowRedirects(false);\n                conn.setUseCaches(false);\n                String base64ofDoc = Base64.encode(sw.toString().getBytes());\n                DataOutputStream printout = new DataOutputStream(conn.getOutputStream());\n                String content = \"SAMLResponse=\" + URLEncoder.encode(base64ofDoc, \"UTF-8\");\n                printout.writeBytes(content);\n                printout.flush();\n                printout.close();\n                if (TEST_GOOD_REPLAY == testNumber) {\n                    base64Assertion = Base64.encode(sw.toString().getBytes());\n                    replay = true;\n                }\n                BufferedReader input = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n                String redirect = conn.getHeaderField(\"Location\");\n                if (redirect != null) {\n                    input.close();\n                    URL url2 = new URL(redirect);\n                    URLConnection conn2 = url2.openConnection();\n                    String cookie = conn.getHeaderField(\"Set-Cookie\");\n                    if (cookie != null) {\n                        int index = cookie.indexOf(\";\");\n                        if (index >= 0) cookie = cookie.substring(0, index);\n                        conn2.setRequestProperty(\"Cookie\", cookie);\n                    }\n                    input = new BufferedReader(new InputStreamReader(conn2.getInputStream()));\n                }\n                StringBuffer buff = new StringBuffer();\n                String str2;\n                while (null != ((str2 = input.readLine()))) {\n                    buff.append(str2);\n                }\n                input.close();\n                result = buff.toString();\n                success = true;\n            } catch (MalformedURLException me) {\n                this.addException(\"MalformedURLException\", me);\n            } catch (IOException ioe) {\n                this.addException(\"IOException\", ioe);\n            }\n        } else {\n            base64Assertion = Base64.encode(sw.toString().getBytes());\n            Transformer transPretty = tf.newTransformer(new StreamSource(resourceFolder + \"PrettyPrint.xslt\"));\n            StringWriter swPretty = new StringWriter();\n            PrintWriter pwPretty = new PrintWriter(sw);\n            trans.transform(new DOMSource(doc), new StreamResult(pwPretty));\n            prettyAssertion = sw.toString();\n            System.out.println(XMLHelper.prettyPrintXML(doc.getFirstChild()));\n            success = true;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01015744",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copyFile(File in, File out) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copyFile(File in, File out) throws IOException {\n        FileChannel sourceChannel = new FileInputStream(in).getChannel();\n        try {\n            FileChannel destinationChannel = new FileOutputStream(out).getChannel();\n            try {\n                sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\n            } finally {\n                destinationChannel.close();\n            }\n        } finally {\n            sourceChannel.close();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10158738",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void add(String language, String tag, String root, String surface) throws FidoDatabaseException, MorphologyTagNotFoundException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void add(String language, String tag, String root, String surface) throws FidoDatabaseException, MorphologyTagNotFoundException {\n        try {\n            Connection conn = null;\n            Statement stmt = null;\n            try {\n                conn = FidoDataSource.getConnection();\n                conn.setAutoCommit(false);\n                stmt = conn.createStatement();\n                if (containsTag(stmt, tag) == false) throw new MorphologyTagNotFoundException(tag);\n                if (isRuleUnique(stmt, language, tag, root, surface) == false) return;\n                int row;\n                if (root.equals(\"*\") == true) row = getAppendRowForTag(stmt, language, tag); else if (root.indexOf('*') == -1) row = getFirstRowForTag(stmt, language, tag); else row = getFirstRegularFormForTag(stmt, language, tag);\n                boolean use = determineRecognitionUse(root, surface);\n                bumpAllRowsDown(stmt, language, tag, row);\n                String sql = \"insert into LanguageMorphologies (LanguageName, Rank, Root, Surface, MorphologyTag, Used) \" + \"values ('\" + language + \"', \" + row + \", '\" + root + \"', '\" + surface + \"', '\" + tag + \"', \";\n                if (use == true) sql = sql + \"TRUE)\"; else sql = sql + \"FALSE)\";\n                stmt.executeUpdate(sql);\n                conn.commit();\n            } catch (SQLException e) {\n                if (conn != null) conn.rollback();\n                throw e;\n            } finally {\n                if (stmt != null) stmt.close();\n                if (conn != null) conn.close();\n            }\n        } catch (SQLException e) {\n            throw new FidoDatabaseException(e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10158740",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void delete(String language, String tag, int row) throws FidoDatabaseException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void delete(String language, String tag, int row) throws FidoDatabaseException {\n        try {\n            Connection conn = null;\n            Statement stmt = null;\n            try {\n                String sql = \"delete from LanguageMorphologies \" + \"where LanguageName = '\" + language + \"' and MorphologyTag = '\" + tag + \"' and \" + \"      Rank = \" + row;\n                conn = fido.util.FidoDataSource.getConnection();\n                conn.setAutoCommit(false);\n                stmt = conn.createStatement();\n                stmt.executeUpdate(sql);\n                bumpAllRowsUp(stmt, language, tag, row);\n                conn.commit();\n            } catch (SQLException e) {\n                if (conn != null) conn.rollback();\n                throw e;\n            } finally {\n                if (stmt != null) stmt.close();\n                if (conn != null) conn.close();\n            }\n        } catch (SQLException e) {\n            throw new FidoDatabaseException(e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10158741",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void moveRuleUp(String language, String tag, int row) throws FidoDatabaseException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void moveRuleUp(String language, String tag, int row) throws FidoDatabaseException {\n        try {\n            Connection conn = null;\n            Statement stmt = null;\n            try {\n                conn = fido.util.FidoDataSource.getConnection();\n                conn.setAutoCommit(false);\n                stmt = conn.createStatement();\n                int max = findMaxRank(stmt, language, tag);\n                if ((row < 2) || (row > max)) throw new IllegalArgumentException(\"Row number (\" + row + \") was not between 2 and \" + max);\n                stmt.executeUpdate(\"update LanguageMorphologies set Rank = -1 \" + \"where Rank = \" + row + \" and MorphologyTag = '\" + tag + \"' and \" + \"      LanguageName = '\" + language + \"'\");\n                stmt.executeUpdate(\"update LanguageMorphologies set Rank = \" + row + \"where Rank = \" + (row - 1) + \" and MorphologyTag = '\" + tag + \"' and \" + \"      LanguageName = '\" + language + \"'\");\n                stmt.executeUpdate(\"update LanguageMorphologies set Rank = \" + (row - 1) + \"where Rank = -1 and MorphologyTag = '\" + tag + \"' and \" + \"      LanguageName = '\" + language + \"'\");\n                conn.commit();\n            } catch (SQLException e) {\n                if (conn != null) conn.rollback();\n                throw e;\n            } finally {\n                if (stmt != null) stmt.close();\n                if (conn != null) conn.close();\n            }\n        } catch (SQLException e) {\n            throw new FidoDatabaseException(e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10158742",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void moveRuleDown(String language, String tag, int row) throws FidoDatabaseException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void moveRuleDown(String language, String tag, int row) throws FidoDatabaseException {\n        try {\n            Connection conn = null;\n            Statement stmt = null;\n            try {\n                conn = fido.util.FidoDataSource.getConnection();\n                conn.setAutoCommit(false);\n                stmt = conn.createStatement();\n                int max = findMaxRank(stmt, language, tag);\n                if ((row < 1) || (row > (max - 1))) throw new IllegalArgumentException(\"Row number (\" + row + \") was not between 1 and \" + (max - 1));\n                stmt.executeUpdate(\"update LanguageMorphologies set Rank = -1 \" + \"where Rank = \" + row + \" and MorphologyTag = '\" + tag + \"' and \" + \"      LanguageName = '\" + language + \"'\");\n                stmt.executeUpdate(\"update LanguageMorphologies set Rank = \" + row + \"where Rank = \" + (row + 1) + \" and MorphologyTag = '\" + tag + \"' and \" + \"      LanguageName = '\" + language + \"'\");\n                stmt.executeUpdate(\"update LanguageMorphologies set Rank = \" + (row + 1) + \"where Rank = -1 and MorphologyTag = '\" + tag + \"' and \" + \"      LanguageName = '\" + language + \"'\");\n                conn.commit();\n            } catch (SQLException e) {\n                if (conn != null) conn.rollback();\n                throw e;\n            } finally {\n                if (stmt != null) stmt.close();\n                if (conn != null) conn.close();\n            }\n        } catch (SQLException e) {\n            throw new FidoDatabaseException(e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10161744",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void checkSites() {\n            Log.d(LOG_TAG, \"Updating sites: \" + sitesToCheck.keySet().toString());\n            for (Map.Entry<Site, Item> entry : sitesToCheck.entrySet()) {\n                final Site site = entry.getKey();\n                final Item oldItem = entry.getValue();\n                try {\n                    final HttpGet req = new HttpGet(site.getUrl().toURI());\n                    req.addHeader(\"Cache-Control\", \"no-cache\");\n                    req.addHeader(\"Pragma\", \"no-cache\");\n                    if (oldItem != null) {\n                        final Date lastModified = oldItem.getTimestamp();\n                        if (lastModified != null) {\n                            req.addHeader(\"If-Modified-Since\", Utils.formatRFC822Date(lastModified));\n                        }\n                    }\n                    final HttpResponse response = httpClient.execute(req);\n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        final FeedHandler handler = site.getHandler().newInstance();\n                        final InputStream in = response.getEntity().getContent();\n                        Xml.parse(in, site.getEncoding(), handler);\n                        in.close();\n                        notify(site, handler.getCurrentItem());\n                    } else if (response.getStatusLine().getStatusCode() != 304) {\n                        Log.e(LOG_TAG, \"HTTP request for \" + site.name() + \" failed: \" + response.getStatusLine().toString());\n                    }\n                } catch (Throwable e) {\n                    Log.e(LOG_TAG, e.getMessage(), e);\n                }\n            }\n        }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10168255",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic Parser getParser() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void extractByParsingHtml(String refererURL, String requestURL) throws MalformedURLException, IOException {\n        URL url = new URL(refererURL);\n        InputStream is = url.openStream();\n        mRefererURL = refererURL;\n        if (requestURL.startsWith(\"http://www.\")) {\n            mRequestURLWWW = requestURL;\n            mRequestURL = \"http://\" + mRequestURLWWW.substring(11);\n        } else {\n            mRequestURL = requestURL;\n            mRequestURLWWW = \"http://www.\" + mRequestURL.substring(7);\n        }\n        Parser parser = (new HTMLEditorKit() {\n\n            public Parser getParser() {\n                return super.getParser();\n            }\n        }).getParser();\n        StringBuffer sb = new StringBuffer();\n        InputStreamReader isr = new InputStreamReader(is);\n        BufferedReader br = new BufferedReader(isr);\n        try {\n            String line = null;\n            while ((line = br.readLine()) != null) {\n                sb.append(line);\n            }\n        } finally {\n            br.close();\n        }\n        StringReader sr = new StringReader(sb.toString());\n        parser.parse(sr, new LinkbackCallback(), true);\n        if (mStart != 0 && mEnd != 0 && mEnd > mStart) {\n            mExcerpt = sb.toString().substring(mStart, mEnd);\n            mExcerpt = Utilities.removeHTML(mExcerpt);\n            if (mExcerpt.length() > mMaxExcerpt) {\n                mExcerpt = mExcerpt.substring(0, mMaxExcerpt) + \"...\";\n            }\n        }\n        if (mTitle.startsWith(\">\") && mTitle.length() > 1) {\n            mTitle = mTitle.substring(1);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10169905",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void copy(File s, File t) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void copy(File s, File t) throws IOException {\n            FileChannel in = (new FileInputStream(s)).getChannel();\n            FileChannel out = (new FileOutputStream(t)).getChannel();\n            in.transferTo(0, s.length(), out);\n            in.close();\n            out.close();\n        }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10171842",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic String upload() throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public String upload() throws IOException {\n        int idx = docIndex.incrementAndGet();\n        String tmpName = \"namefinder/doc_\" + idx + \"__\" + fileFileName;\n        File tmpFile = tmpFile(tmpName);\n        if (tmpFile.exists()) {\n            org.apache.commons.io.FileUtils.deleteQuietly(tmpFile);\n        }\n        org.apache.commons.io.FileUtils.touch(tmpFile);\n        InputStream fileStream = new FileInputStream(file);\n        OutputStream bos = new FileOutputStream(tmpFile);\n        IOUtils.copy(fileStream, bos);\n        bos.close();\n        fileStream.close();\n        return tmpUrl(tmpName);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10173088",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void main(String[] args) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void main(String[] args) {\n        try {\n            MessageDigest sha1 = MessageDigest.getInstance(\"SHA1\");\n            sha1.update(\"Test\".getBytes());\n            byte[] digest = sha1.digest();\n            for (int i = 0; i < digest.length; i++) {\n                System.err.print(Integer.toHexString(0xFF & digest[i]));\n            }\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10174077",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String MD5(String text) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String MD5(String text) {\n        MessageDigest md;\n        try {\n            md = MessageDigest.getInstance(\"MD5\");\n            byte[] md5hash = new byte[32];\n            md.update(text.getBytes(\"iso-8859-1\"), 0, text.length());\n            md5hash = md.digest();\n            return convertToHex(md5hash);\n        } catch (NoSuchAlgorithmException ex) {\n            ex.printStackTrace();\n            return text;\n        } catch (UnsupportedEncodingException ex) {\n            ex.printStackTrace();\n            return text;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10174628",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic T[] sort(T[] values) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n    public T[] sort(T[] values) {\n        super.compareTimes = 0;\n        for (int i = 0; i < values.length; i++) {\n            for (int j = 0; j < values.length - i - 1; j++) {\n                super.compareTimes++;\n                if (values[j].compareTo(values[j + 1]) > 0) {\n                    T temp = values[j];\n                    values[j] = values[j + 1];\n                    values[j + 1] = temp;\n                }\n            }\n        }\n        return values;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10174803",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@SuppressWarnings({ \"serial\", \"unchecked\" })\n    private static IProject createCopyProject(IProject project, String pName, IWorkspace ws, IProgressMonitor pm) throws Exception {\n        pm.beginTask(\"Creating temp project\", 1);\n        final IPath destination = new Path(pName);\n        final IJavaProject oldJavaproj = JavaCore.create(project);\n        final IClasspathEntry[] classPath = oldJavaproj.getRawClasspath();\n        final IProject newProject = ResourcesPlugin.getWorkspace().getRoot().getProject(pName);\n        newProject.create(null);\n        newProject.open(null);\n        final IProjectDescription desc = newProject.getDescription();\n        desc.setNatureIds(new String[] { JavaCore.NATURE_ID });\n        newProject.setDescription(desc, null);\n        final List<IClasspathEntry> newClassPath = new ArrayList<IClasspathEntry>();\n        for (final IClasspathEntry cEntry : classPath) {\n            switch(cEntry.getEntryKind()) {\n                case IClasspathEntry.CPE_SOURCE:\n                    System.out.println(\"Source folder \" + cEntry.getPath());\n                    newClassPath.add(copySourceFolder(project, newProject, cEntry, destination));\n                    break;\n                case IClasspathEntry.CPE_LIBRARY:\n                    System.out.println(\"library folder \" + cEntry.getPath());\n                    newClassPath.add(cEntry);\n                    break;\n                case IClasspathEntry.CPE_PROJECT:\n                    System.out.println(\"project folder \" + cEntry.getPath());\n                    newClassPath.add(cEntry);\n                    break;\n                case IClasspathEntry.CPE_VARIABLE:\n                    System.out.println(\"variable folder \" + cEntry.getPath());\n                    newClassPath.add(cEntry);\n                    break;\n                default:\n                    System.out.println(\"container folder \" + cEntry.getPath());\n                    newClassPath.add(cEntry);\n            }\n        }\n        copyDir(project.getLocation().toString(), \"/translator\", newProject.getLocation().toString(), \"\", new ArrayList<String>() {\n\n            {\n                add(\"generated\");\n                add(\"classes\");\n                add(\".svn\");\n            }\n        });\n        newProject.refreshLocal(IResource.DEPTH_INFINITE, pm);\n        newProject.build(IncrementalProjectBuilder.AUTO_BUILD, pm);\n        newProject.touch(pm);\n        final IJavaProject javaproj = JavaCore.create(newProject);\n        javaproj.setOutputLocation(new Path(\"/\" + newProject.getName() + \"/classes/bin\"), null);\n        javaproj.setRawClasspath(newClassPath.toArray(new IClasspathEntry[newClassPath.size()]), pm);\n        final Map opts = oldJavaproj.getOptions(true);\n        javaproj.setOptions(opts);\n        javaproj.makeConsistent(pm);\n        javaproj.save(pm, true);\n        return newProject;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10176678",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void testLoadHttpGzipped() throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Test\n    public void testLoadHttpGzipped() throws Exception {\n        String url = HTTP_GZIPPED;\n        LoadingInfo loadingInfo = Utils.openFileObject(fsManager.resolveFile(url));\n        InputStream contentInputStream = loadingInfo.getContentInputStream();\n        byte[] actual = IOUtils.toByteArray(contentInputStream);\n        byte[] expected = IOUtils.toByteArray(new GZIPInputStream(new URL(url).openStream()));\n        assertEquals(expected.length, actual.length);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10176882",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@SuppressWarnings(\"unchecked\")\n    protected void processDownloadAction(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        File transformationFile = new File(xslBase, \"file-info.xsl\");\n        HashMap<String, Object> params = new HashMap<String, Object>();\n        params.putAll(request.getParameterMap());\n        params.put(\"{\" + Definitions.CONFIGURATION_NAMESPACE + \"}configuration\", configuration);\n        params.put(\"{\" + Definitions.REQUEST_NAMESPACE + \"}request\", request);\n        params.put(\"{\" + Definitions.RESPONSE_NAMESPACE + \"}response\", response);\n        params.put(\"{\" + Definitions.SESSION_NAMESPACE + \"}session\", request.getSession());\n        params.put(\"{\" + Definitions.INFOFUZE_NAMESPACE + \"}development-mode\", new Boolean(Config.getInstance().isDevelopmentMode()));\n        Transformer transformer = new Transformer();\n        transformer.setTransformationFile(transformationFile);\n        transformer.setParams(params);\n        transformer.setTransformMode(TransformMode.NORMAL);\n        transformer.setConfiguration(configuration);\n        transformer.setErrorListener(new TransformationErrorListener(response));\n        transformer.setLogInfo(false);\n        DataSourceIf dataSource = new NullSource();\n        Document fileInfoDoc = XmlUtils.getEmptyDOM();\n        DOMResult result = new DOMResult(fileInfoDoc);\n        transformer.transform((Source) dataSource, result);\n        Element documentElement = fileInfoDoc.getDocumentElement();\n        if (documentElement.getLocalName().equals(\"null\")) {\n            response.sendError(HttpServletResponse.SC_UNAUTHORIZED);\n            return;\n        }\n        InputStream is = null;\n        try {\n            XPath xpath = XPathFactory.newInstance().newXPath();\n            String sourceType = XPathUtils.getStringValue(xpath, \"source-type\", documentElement, null);\n            String location = XPathUtils.getStringValue(xpath, \"location\", documentElement, null);\n            String fileName = XPathUtils.getStringValue(xpath, \"file-name\", documentElement, null);\n            String mimeType = XPathUtils.getStringValue(xpath, \"mime-type\", documentElement, null);\n            String encoding = XPathUtils.getStringValue(xpath, \"encoding\", documentElement, null);\n            if (StringUtils.equals(sourceType, \"cifsSource\")) {\n                String domain = XPathUtils.getStringValue(xpath, \"domain\", documentElement, null);\n                String userName = XPathUtils.getStringValue(xpath, \"username\", documentElement, null);\n                String password = XPathUtils.getStringValue(xpath, \"password\", documentElement, null);\n                URI uri = new URI(location);\n                if (StringUtils.isNotBlank(userName)) {\n                    String userInfo = \"\";\n                    if (StringUtils.isNotBlank(domain)) {\n                        userInfo = userInfo + domain + \";\";\n                    }\n                    userInfo = userInfo + userName;\n                    if (StringUtils.isNotBlank(password)) {\n                        userInfo = userInfo + \":\" + password;\n                    }\n                    uri = new URI(uri.getScheme(), userInfo, uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), uri.getFragment());\n                }\n                SmbFile smbFile = new SmbFile(uri.toURL());\n                is = new SmbFileInputStream(smbFile);\n            } else if (StringUtils.equals(sourceType, \"localFileSystemSource\")) {\n                File file = new File(location);\n                is = new FileInputStream(file);\n            } else {\n                logger.error(\"Source type \\\"\" + ((sourceType != null) ? sourceType : \"\") + \"\\\" not supported\");\n                response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n                return;\n            }\n            if (StringUtils.isBlank(mimeType) && StringUtils.isBlank(encoding)) {\n                response.setContentType(Definitions.MIMETYPE_BINARY);\n            } else if (StringUtils.isBlank(encoding)) {\n                response.setContentType(mimeType);\n            } else {\n                response.setContentType(mimeType + \";charset=\" + encoding);\n            }\n            if (request.getParameterMap().containsKey(Definitions.REQUEST_PARAMNAME_DOWNLOAD)) {\n                response.setHeader(\"Content-Disposition\", \"attachment; filename=\" + fileName);\n            }\n            IOUtils.copy(new BufferedInputStream(is), response.getOutputStream());\n        } finally {\n            if (is != null) {\n                is.close();\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10177034",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static synchronized BaseFont getL2BaseFont() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static synchronized BaseFont getL2BaseFont() {\n        if (l2baseFont == null) {\n            final ConfigProvider conf = ConfigProvider.getInstance();\n            try {\n                final ByteArrayOutputStream tmpBaos = new ByteArrayOutputStream();\n                String fontPath = conf.getNotEmptyProperty(\"font.path\", null);\n                String fontName;\n                String fontEncoding;\n                InputStream tmpIs;\n                if (fontPath != null) {\n                    fontName = conf.getNotEmptyProperty(\"font.name\", null);\n                    if (fontName == null) {\n                        fontName = new File(fontPath).getName();\n                    }\n                    fontEncoding = conf.getNotEmptyProperty(\"font.encoding\", null);\n                    if (fontEncoding == null) {\n                        fontEncoding = BaseFont.WINANSI;\n                    }\n                    tmpIs = new FileInputStream(fontPath);\n                } else {\n                    fontName = Constants.L2TEXT_FONT_NAME;\n                    fontEncoding = BaseFont.IDENTITY_H;\n                    tmpIs = FontUtils.class.getResourceAsStream(Constants.L2TEXT_FONT_PATH);\n                }\n                IOUtils.copy(tmpIs, tmpBaos);\n                tmpIs.close();\n                tmpBaos.close();\n                l2baseFont = BaseFont.createFont(fontName, fontEncoding, BaseFont.EMBEDDED, BaseFont.CACHED, tmpBaos.toByteArray(), null);\n            } catch (Exception e) {\n                e.printStackTrace();\n                try {\n                    l2baseFont = BaseFont.createFont(BaseFont.HELVETICA, BaseFont.WINANSI, BaseFont.EMBEDDED);\n                } catch (Exception ex) {\n                }\n            }\n        }\n        return l2baseFont;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10177661",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "protected File extractArchive(File archive) {\n        byte buf[] = new byte[BUF_SIZE];\n        ZipInputStream zis = null;\n        File archiveDirectory = null;\n        FileOutputStream fos;\n        ZipEntry entry;\n        File curEntry;\n        int n;\n        try {\n            zis = new ZipInputStream(new FileInputStream(archive));\n            while ((entry = zis.getNextEntry()) != null) {\n                curEntry = new File(workingDir, entry.getName());\n                if (entry.isDirectory()) {\n                    getLogger().info(\"skip directory: \" + entry.getName());\n                    if (archiveDirectory == null) archiveDirectory = curEntry;\n                    continue;\n                }\n                getLogger().info(\"zip-entry (file): \" + entry.getName() + \" ==> real path: \" + curEntry.getAbsolutePath());\n                if (!curEntry.getParentFile().exists()) curEntry.getParentFile().mkdirs();\n                fos = new FileOutputStream(curEntry);\n                while ((n = zis.read(buf, 0, buf.length)) > -1) fos.write(buf, 0, n);\n                fos.close();\n                zis.closeEntry();\n            }\n        } catch (Throwable t) {\n            t.printStackTrace();\n        } finally {\n            try {\n                if (zis != null) zis.close();\n            } catch (Throwable t) {\n            }\n        }\n        return archiveDirectory;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10177738",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic HttpURLConnection getURLConnection() throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public HttpURLConnection getURLConnection() throws IOException {\n        String url_str = getServerURL();\n        URL url = new URL(url_str);\n        HttpURLConnection urlConnection;\n        if (url_str.toLowerCase().startsWith(\"https\")) {\n            HttpsURLConnection urlSConnection = (HttpsURLConnection) url.openConnection();\n            urlSConnection.setHostnameVerifier(new HostnameVerifier() {\n\n                public boolean verify(String hostname, SSLSession session) {\n                    return true;\n                }\n            });\n            urlConnection = urlSConnection;\n        } else urlConnection = (HttpURLConnection) url.openConnection();\n        urlConnection.setRequestMethod(\"POST\");\n        if (useHTTPProxy && getProxyLogin() != null) {\n            String authString = getProxyLogin() + \":\" + getProxyPassword();\n            String auth = \"Basic \" + new sun.misc.BASE64Encoder().encode(authString.getBytes());\n            urlConnection.setRequestProperty(\"Proxy-Authorization\", auth);\n        }\n        urlConnection.setDoOutput(true);\n        if (useHTTPProxy) {\n            System.getProperties().put(\"proxySet\", \"true\");\n            System.getProperties().put(\"proxyHost\", proxyHost);\n            System.getProperties().put(\"proxyPort\", String.valueOf(proxyPort));\n        }\n        return urlConnection;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10178421",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void run() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n    public void run() {\n        File file;\n        try {\n            file = new File(filePath);\n            if (!file.canWrite()) {\n                Thread.sleep(5000);\n                if (!file.canWrite()) {\n                    logger.error(\"Filed to gain write access to file:\" + filePath);\n                    exitState = false;\n                    return;\n                }\n            }\n            fis = new BufferedInputStream(new FileInputStream(filePath));\n        } catch (FileNotFoundException e) {\n            logger.error(\"File not found:\" + filePath);\n            exitState = false;\n            return;\n        } catch (java.lang.InterruptedException ie) {\n            logger.error(\"Upload thread halted or interrupted on file:\" + filePath);\n            exitState = false;\n            return;\n        }\n        ftp = new FTPClient();\n        ftp.setDefaultTimeout(20 * 1000);\n        boolean uploadSuccessful = false;\n        try {\n            ftp.enterLocalPassiveMode();\n            ftp.connect(ftpHostname);\n            ftp.login(username, password);\n            logger.trace(\"FTP Logged In and connected\");\n            if (!FTPReply.isPositiveCompletion(ftp.getReplyCode())) {\n                exitState = false;\n                return;\n            }\n            ftp.setFileType(FTPClient.BINARY_FILE_TYPE);\n            logger.trace(\"FTP Timeout Set and File Type Set\");\n            ftp.changeWorkingDirectory(serverDirectory);\n            ftp.storeUniqueFile(file.getName(), fis);\n            logger.trace(\"File Uploaded\");\n            if (FTPReply.isPositiveIntermediate(ftp.getReplyCode())) {\n                System.out.println(\"Completing pending command\");\n                ftp.completePendingCommand();\n            }\n            uploadSuccessful = true;\n        } catch (Exception e) {\n            try {\n                ftp.disconnect();\n            } catch (Exception de) {\n                e.printStackTrace();\n            }\n            logger.error(\"Error uploading file:\", e);\n        } finally {\n            try {\n                fis.close();\n                logger.trace(\"File closed\");\n                ftp.logout();\n                logger.trace(\"FTP Logged Out\");\n                ftp.disconnect();\n                logger.trace(\"FTP Disconnected\");\n                if (uploadSuccessful) {\n                    logger.info(\"Deleting file:\" + new File(filePath).getName());\n                    if (!(new File(filePath)).delete()) {\n                        logger.error(\"Can't delete file for some reason\");\n                    }\n                    Thread.sleep(1000);\n                    exitState = true;\n                    return;\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception on file upload cleanup:\", e);\n                exitState = false;\n                return;\n            }\n        }\n        exitState = false;\n        return;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10178498",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static IChemModel readInChI(URL url) throws CDKException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static IChemModel readInChI(URL url) throws CDKException {\n        IChemModel chemModel = new ChemModel();\n        try {\n            IMoleculeSet moleculeSet = new MoleculeSet();\n            chemModel.setMoleculeSet(moleculeSet);\n            StdInChIParser parser = new StdInChIParser();\n            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n            String line;\n            while ((line = in.readLine()) != null) {\n                if (line.toLowerCase().startsWith(\"inchi=\")) {\n                    IAtomContainer atc = parser.parseInchi(line);\n                    moleculeSet.addAtomContainer(atc);\n                }\n            }\n            in.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n            throw new CDKException(e.getMessage());\n        }\n        return chemModel;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10178931",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic String encrypt(String plaintext) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public String encrypt(String plaintext) throws Exception {\n        MessageDigest md = null;\n        try {\n            md = MessageDigest.getInstance(\"SHA\");\n        } catch (NoSuchAlgorithmException e) {\n            throw new Exception(e.getMessage());\n        }\n        try {\n            md.update(plaintext.getBytes(\"UTF-8\"));\n        } catch (UnsupportedEncodingException e) {\n            throw new Exception(e.getMessage());\n        }\n        byte raw[] = md.digest();\n        String hash = (new BASE64Encoder()).encode(raw);\n        return hash;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_00101811",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void bubbleSort(int[] arr) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void bubbleSort(int[] arr) {\n        boolean swapped = true;\n        int j = 0;\n        int tmp;\n        while (swapped) {\n            swapped = false;\n            j++;\n            for (int i = 0; i < arr.length - j; i++) {\n                if (arr[i] > arr[i + 1]) {\n                    tmp = arr[i];\n                    arr[i] = arr[i + 1];\n                    arr[i + 1] = tmp;\n                    swapped = true;\n                }\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10182360",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void getDownloadInfo(String _url) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void getDownloadInfo(String _url) throws Exception {\n        cl = new FTPClient();\n        Authentication auth = new FTPAuthentication();\n        cl.connect(getHostName());\n        while (!cl.login(auth.getUser(), auth.getPassword())) {\n            log.debug(\"getDownloadInfo() - login error state: \" + Arrays.asList(cl.getReplyStrings()));\n            ap.setSite(getSite());\n            auth = ap.promptAuthentication();\n            if (auth == null) throw new Exception(\"User Cancelled Auth Operation\");\n        }\n        AuthManager.putAuth(getSite(), auth);\n        cl.enterLocalPassiveMode();\n        FTPFile file = cl.listFiles(new URL(_url).getFile())[0];\n        setURL(_url);\n        setLastModified(file.getTimestamp().getTimeInMillis());\n        setSize(file.getSize());\n        setResumable(cl.rest(\"0\") == 350);\n        setRangeEnd(getSize() - 1);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10182363",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void initGet() throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void initGet() throws Exception {\n        cl = new FTPClient();\n        cl.connect(getHostName());\n        Authentication auth = AuthManager.getAuth(getSite());\n        if (auth == null) auth = new FTPAuthentication(getSite());\n        while (!cl.login(auth.getUser(), auth.getPassword())) {\n            ap.setSite(getSite());\n            auth = ap.promptAuthentication();\n            if (auth == null) throw new Exception(\"User Cancelled Auth Operation\");\n        }\n        cl.connect(getHostName());\n        cl.login(auth.getUser(), auth.getPassword());\n        cl.enterLocalPassiveMode();\n        cl.setFileType(FTP.BINARY_FILE_TYPE);\n        cl.setRestartOffset(getPosition());\n        setInputStream(cl.retrieveFileStream(new URL(getURL()).getFile()));\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10192340",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@SuppressWarnings(\"unchecked\")\n    private void process(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        printAccess(request, false);\n        try {\n            response.setContentType(\"application/json\");\n            String position = request.getParameter(\"pos\");\n            if (position == null || position.length() == 0) {\n                reportJsonError(request, response, \"Missing position parameter\");\n            } else {\n                PositionParser pp;\n                pp = new PositionParser(position);\n                String url = \"http://simbad.u-strasbg.fr/simbad/sim-script?submit=submit+script&script=\";\n                url += URLEncoder.encode(\"format object \\\"%IDLIST[%-30*]|-%COO(A)|%COO(D)|%OTYPELIST(S)\\\"\\n\" + pp.getPosition() + \" radius=1m\", \"ISO-8859-1\");\n                System.out.println(url);\n                URL simurl = new URL(url);\n                BufferedReader in = new BufferedReader(new InputStreamReader(simurl.openStream()));\n                String boeuf;\n                boolean data_found = false;\n                JSONObject retour = new JSONObject();\n                JSONArray dataarray = new JSONArray();\n                JSONArray colarray = new JSONArray();\n                JSONObject jsloc = new JSONObject();\n                jsloc.put(\"sTitle\", \"ID\");\n                colarray.add(jsloc);\n                jsloc = new JSONObject();\n                jsloc.put(\"sTitle\", \"Position\");\n                colarray.add(jsloc);\n                jsloc = new JSONObject();\n                jsloc.put(\"sTitle\", \"Type\");\n                colarray.add(jsloc);\n                retour.put(\"aoColumns\", colarray);\n                int datasize = 0;\n                while ((boeuf = in.readLine()) != null) {\n                    if (data_found) {\n                        String[] fields = boeuf.trim().split(\"\\\\|\", -1);\n                        int pos = fields.length - 1;\n                        if (pos >= 3) {\n                            String type = fields[pos];\n                            pos--;\n                            String dec = fields[pos];\n                            pos--;\n                            String ra = fields[pos];\n                            String id = fields[0].split(\"\\\\s{2,}\")[0].trim();\n                            JSONArray darray = new JSONArray();\n                            darray.add(id.trim());\n                            darray.add(ra + \" \" + dec);\n                            darray.add(type.trim());\n                            dataarray.add(darray);\n                            datasize++;\n                            if (datasize >= 15) {\n                                darray = new JSONArray();\n                                darray.add(\"truncated to 15\");\n                                darray.add(\"\");\n                                darray.add(\"\");\n                                dataarray.add(darray);\n                                datasize++;\n                            }\n                        }\n                    } else if (boeuf.startsWith(\"::data\")) {\n                        data_found = true;\n                    }\n                }\n                in.close();\n                retour.put(\"aaData\", dataarray);\n                retour.put(\"iTotalRecords\", datasize);\n                retour.put(\"iTotalDisplayRecords\", datasize);\n                JsonUtils.teePrint(response.getOutputStream(), retour.toJSONString());\n            }\n        } catch (QueryException e) {\n            reportJsonError(request, response, e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10192341",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void main(String[] args) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@SuppressWarnings(\"unchecked\")\n    public static void main(String[] args) throws Exception {\n        PositionParser pp;\n        Database.init(\"XIDResult\");\n        pp = new PositionParser(\"01:33:50.904+30:39:35.79\");\n        String url = \"http://simbad.u-strasbg.fr/simbad/sim-script?submit=submit+script&script=\";\n        String script = \"format object \\\"%IDLIST[%-30*]|-%COO(A)|%COO(D)|%OTYPELIST(S)\\\"\\n\";\n        String tmp = \"\";\n        script += pp.getPosition() + \" radius=1m\";\n        url += URLEncoder.encode(script, \"ISO-8859-1\");\n        URL simurl = new URL(url);\n        BufferedReader in = new BufferedReader(new InputStreamReader(simurl.openStream()));\n        String boeuf;\n        boolean data_found = false;\n        JSONObject retour = new JSONObject();\n        JSONArray dataarray = new JSONArray();\n        JSONArray colarray = new JSONArray();\n        JSONObject jsloc = new JSONObject();\n        jsloc.put(\"sTitle\", \"ID\");\n        colarray.add(jsloc);\n        jsloc = new JSONObject();\n        jsloc.put(\"sTitle\", \"Position\");\n        colarray.add(jsloc);\n        jsloc = new JSONObject();\n        jsloc.put(\"sTitle\", \"Type\");\n        colarray.add(jsloc);\n        retour.put(\"aoColumns\", colarray);\n        int datasize = 0;\n        while ((boeuf = in.readLine()) != null) {\n            if (data_found) {\n                String[] fields = boeuf.trim().split(\"\\\\|\", -1);\n                int pos = fields.length - 1;\n                if (pos >= 3) {\n                    String type = fields[pos];\n                    pos--;\n                    String dec = fields[pos];\n                    pos--;\n                    String ra = fields[pos];\n                    String id = \"\";\n                    for (int i = 0; i < pos; i++) {\n                        id += fields[i];\n                        if (i < (pos - 1)) {\n                            id += \"|\";\n                        }\n                    }\n                    if (id.length() <= 30) {\n                        JSONArray darray = new JSONArray();\n                        darray.add(id.trim());\n                        darray.add(ra + \" \" + dec);\n                        darray.add(type.trim());\n                        dataarray.add(darray);\n                        datasize++;\n                    }\n                }\n            } else if (boeuf.startsWith(\"::data\")) {\n                data_found = true;\n            }\n        }\n        retour.put(\"aaData\", dataarray);\n        retour.put(\"iTotalRecords\", datasize);\n        retour.put(\"iTotalDisplayRecords\", datasize);\n        System.out.println(retour.toJSONString());\n        in.close();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10193598",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String encodePassword(String password) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String encodePassword(String password) {\n        try {\n            MessageDigest messageDiegest = MessageDigest.getInstance(\"SHA-1\");\n            messageDiegest.update(password.getBytes(\"UTF-8\"));\n            return Base64.encodeToString(messageDiegest.digest(), false);\n        } catch (NoSuchAlgorithmException e) {\n            log.error(\"Exception while encoding password\");\n            throw new Error(e);\n        } catch (UnsupportedEncodingException e) {\n            log.error(\"Exception while encoding password\");\n            throw new Error(e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10194322",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void publish(String server, String id, String passwd, String path, String html) throws SocketException, IOException, LoginFailException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void publish(String server, String id, String passwd, String path, String html) throws SocketException, IOException, LoginFailException {\n        logger.info(\"Connect to FTP Server \" + server);\n        FTPClient f = new FTPClient();\n        f.connect(server);\n        if (f.login(id, passwd) == false) {\n            logger.info(\"Fail to login with id=\" + id);\n            throw new LoginFailException(id, passwd);\n        }\n        f.changeWorkingDirectory(path);\n        logger.info(\"Start to upload\");\n        f.storeFile(\"index.html\", new ByteArrayInputStream(html.getBytes(\"utf-8\")));\n        logger.info(\"Upload index.html\");\n        f.storeFile(\"main.css\", new FileInputStream(\"web/main.css\"));\n        logger.info(\"Upload main.css\");\n        f.storeFile(\"cafelibrary.js\", new FileInputStream(\"web/cafelibrary.js\"));\n        logger.info(\"Upload cafelibrary.js\");\n        f.makeDirectory(\"img\");\n        f.changeWorkingDirectory(\"img\");\n        for (int i = 0; i <= 5; i++) {\n            String fileName = \"favorite_star_\" + i + \".png\";\n            f.storeFile(fileName, new FileInputStream(\"web/img/\" + fileName));\n            logger.info(\"Upload \" + fileName);\n        }\n        f.logout();\n        f.disconnect();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10195219",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void configureKerberos(boolean overwriteExistingSetup) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void configureKerberos(boolean overwriteExistingSetup) throws Exception {\n        OutputStream keyTabOut = null;\n        InputStream keyTabIn = null;\n        OutputStream krb5ConfOut = null;\n        try {\n            keyTabIn = loadKeyTabResource(keyTabResource);\n            File file = new File(keyTabRepository + keyTabResource);\n            if (!file.exists() || overwriteExistingSetup) {\n                keyTabOut = new FileOutputStream(file, false);\n                if (logger.isDebugEnabled()) logger.debug(\"Installing keytab file to : \" + file.getAbsolutePath());\n                IOUtils.copy(keyTabIn, keyTabOut);\n            }\n            File krb5ConfFile = new File(System.getProperty(\"java.security.krb5.conf\", defaultKrb5Config));\n            if (logger.isDebugEnabled()) logger.debug(\"Using Kerberos config file : \" + krb5ConfFile.getAbsolutePath());\n            if (!krb5ConfFile.exists()) throw new Exception(\"Kerberos config file not found : \" + krb5ConfFile.getAbsolutePath());\n            FileInputStream fis = new FileInputStream(krb5ConfFile);\n            Wini krb5Conf = new Wini(KerberosConfigUtil.toIni(fis));\n            Ini.Section krb5Realms = krb5Conf.get(\"realms\");\n            String windowsDomainSetup = krb5Realms.get(kerberosRealm);\n            if (kerberosRealm == null || overwriteExistingSetup) {\n                windowsDomainSetup = \"{  kdc = \" + keyDistributionCenter + \":88 admin_server = \" + keyDistributionCenter + \":749  default_domain = \" + kerberosRealm.toLowerCase() + \"  }\";\n                krb5Realms.put(kerberosRealm, windowsDomainSetup);\n            }\n            Ini.Section krb5DomainRealms = krb5Conf.get(\"domain_realm\");\n            String domainRealmSetup = krb5DomainRealms.get(kerberosRealm.toLowerCase());\n            if (domainRealmSetup == null || overwriteExistingSetup) {\n                krb5DomainRealms.put(kerberosRealm.toLowerCase(), kerberosRealm);\n                krb5DomainRealms.put(\".\" + kerberosRealm.toLowerCase(), kerberosRealm);\n            }\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            krb5Conf.store(baos);\n            InputStream bios = new ByteArrayInputStream(baos.toByteArray());\n            bios = KerberosConfigUtil.toKrb5(bios);\n            krb5ConfOut = new FileOutputStream(krb5ConfFile, false);\n            IOUtils.copy(bios, krb5ConfOut);\n        } catch (Exception e) {\n            logger.error(\"Error while configuring Kerberos :\" + e.getMessage(), e);\n            throw e;\n        } finally {\n            IOUtils.closeQuietly(keyTabOut);\n            IOUtils.closeQuietly(keyTabIn);\n            IOUtils.closeQuietly(krb5ConfOut);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10195648",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void main(String[] args) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void main(String[] args) {\n        if (args.length != 3) {\n            System.out.println(\"Usage: HexStrToBin enc/dec <infileName> <outfilename>\");\n            System.exit(1);\n        }\n        try {\n            ByteArrayOutputStream os = new ByteArrayOutputStream();\n            InputStream in = new FileInputStream(args[1]);\n            int len = 0;\n            byte buf[] = new byte[1024];\n            while ((len = in.read(buf)) > 0) os.write(buf, 0, len);\n            in.close();\n            os.close();\n            byte[] data = null;\n            if (args[0].equals(\"dec\")) data = decode(os.toString()); else {\n                String strData = encode(os.toByteArray());\n                data = strData.getBytes();\n            }\n            FileOutputStream fos = new FileOutputStream(args[2]);\n            fos.write(data);\n            fos.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10205542",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String encrypt(String plaintext) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String encrypt(String plaintext) {\n        MessageDigest md = null;\n        try {\n            md = MessageDigest.getInstance(\"SHA-1\");\n        } catch (NoSuchAlgorithmException e) {\n            logger.error(\"NoSuchAlgorithmException:\" + e);\n        }\n        try {\n            md.update(plaintext.getBytes(\"UTF-8\"));\n        } catch (UnsupportedEncodingException e) {\n            logger.error(\"UnsupportedEncodingException:\" + e);\n        }\n        byte raw[] = md.digest();\n        String hash = (new BASE64Encoder()).encode(raw);\n        return hash;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10207808",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@SuppressWarnings(\"finally\")\n  private void compress(File src) throws IOException\n  {\n    if (this.switches.contains(Switch.test))\n      return;\n\n    checkSourceFile(src);\n    if (src.getPath().endsWith(\".bz2\"))\n    {\n      this.log.println(\"WARNING: skipping file because it already has .bz2 suffix:\").println(src);\n      return;\n    }\n\n    final File dst = new File(src.getPath() + \".bz2\").getAbsoluteFile();\n    if (!checkDestFile(dst))\n      return;\n\n    FileChannel       inChannel   = null;\n    FileChannel       outChannel  = null;\n    FileOutputStream  fileOut     = null;\n    BZip2OutputStream bzOut       = null;\n    FileLock          inLock      = null;\n    FileLock          outLock     = null;\n\n    try\n    {\n      inChannel = new FileInputStream(src).getChannel();\n      final long inSize = inChannel.size();\n      inLock = inChannel.tryLock(0, inSize, true);\n      if (inLock == null)\n        throw error(\"source file locked by another process: \" + src);\n\n      fileOut     = new FileOutputStream(dst);\n      outChannel  = fileOut.getChannel();\n      bzOut       = new BZip2OutputStream(\n        new BufferedXOutputStream(fileOut, 8192),\n        Math.min(\n          (this.blockSize == -1) ? BZip2OutputStream.MAX_BLOCK_SIZE : this.blockSize,\n          BZip2OutputStream.chooseBlockSize(inSize)\n        )\n      );\n\n      outLock = outChannel.tryLock();\n      if (outLock == null)\n        throw error(\"destination file locked by another process: \" + dst);\n\n      final boolean showProgress = this.switches.contains(Switch.showProgress);\n      long pos = 0;\n      int progress = 0;\n\n      if (showProgress || this.verbose)\n      {\n        this.log.print(\"source: \" + src).print(\": size=\").println(inSize);\n        this.log.println(\"target: \" + dst);\n      }\n\n      while (true)\n      {\n        final long maxStep = showProgress ? Math.max(8192, (inSize - pos) / MAX_PROGRESS) : (inSize - pos);\n        if (maxStep <= 0)\n        {\n          if (showProgress)\n          {\n            for (int i = progress; i < MAX_PROGRESS; i++)\n              this.log.print('#');\n            this.log.println(\" done\");\n          }\n          break;\n        }\n        else\n        {\n          final long step = inChannel.transferTo(pos, maxStep, bzOut);\n          if ((step == 0) && (inChannel.size() != inSize))\n            throw error(\"file \" + src + \" has been modified concurrently by another process\");\n\n          pos += step;\n          if (showProgress)\n          {\n            final double  p           = (double) pos / (double) inSize;\n            final int     newProgress = (int) (MAX_PROGRESS * p);\n            for (int i = progress; i < newProgress; i++)\n              this.log.print('#');\n            progress = newProgress;\n          }\n        }\n      }\n\n      inLock.release();\n      inChannel.close();\n      bzOut.closeInstance();\n      final long outSize = outChannel.position();\n      outChannel.truncate(outSize);\n      outLock.release();\n      fileOut.close();\n\n      if (this.verbose)\n      {\n        final double ratio = (inSize == 0) ? (outSize * 100) : ((double) outSize / (double) inSize);\n        this.log.print(\"raw size: \").print(inSize)\n          .print(\"; compressed size: \").print(outSize)\n          .print(\"; compression ratio: \").print(ratio).println('%');\n      }\n\n      if (!this.switches.contains(Switch.keep))\n      {\n        if (!src.delete())\n          throw error(\"unable to delete sourcefile: \" + src);\n      }\n    }\n    catch (final IOException ex)\n    {\n      IO.tryClose(inChannel);\n      IO.tryClose(bzOut);\n      IO.tryClose(fileOut);\n      IO.tryRelease(inLock);\n      IO.tryRelease(outLock);\n      try\n      {\n        this.log.println();\n      }\n      finally\n      {\n        throw ex;\n      }\n    }\n  }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10207809",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@SuppressWarnings(\"finally\")\n  private void decompress(final File src) throws IOException\n  {\n    final String srcPath = src.getPath();\n    checkSourceFile(src);\n    final boolean test = this.switches.contains(Switch.test);\n\n    final File dst;\n    if (test)\n      dst = File.createTempFile(\"jaxlib-bzip\", null);\n    else\n    {\n      if (srcPath.endsWith(\".bz2\"))\n        dst = new File(srcPath.substring(0, srcPath.length() - 4));\n      else\n      {\n        this.log.println(\"WARNING: Can't guess original name, using extension \\\".out\\\":\").println(srcPath);\n        dst = new File(srcPath + \".out\");\n      }\n    }\n    if (!checkDestFile(dst))\n      return;\n\n    final boolean showProgress = this.switches.contains(Switch.showProgress);\n\n    BZip2InputStream  in          = null;\n    FileOutputStream  out         = null;\n    FileChannel       outChannel  = null;\n    FileLock          inLock      = null;\n    FileLock          outLock     = null;\n\n    try\n    {\n      final FileInputStream in0       = new FileInputStream(src);\n      final FileChannel     inChannel = in0.getChannel();\n      final long            inSize    = inChannel.size();\n\n      inLock = inChannel.tryLock(0, inSize, true);\n      if (inLock == null)\n        throw error(\"source file locked by another process: \" + src);\n\n      in          = new BZip2InputStream(new BufferedXInputStream(in0, 8192));\n      out         = new FileOutputStream(dst);\n      outChannel  = out.getChannel();\n\n      outLock = outChannel.tryLock();\n      if (outLock == null)\n        throw error(\"destination file locked by another process: \" + dst);\n\n      if (showProgress || this.verbose)\n      {\n        this.log.print(\"source: \" + src).print(\": size=\").println(inSize);\n        this.log.println(\"target: \" + dst);\n      }\n\n      long  pos       = 0;\n      int   progress  = 0;\n      final long maxStep = showProgress ? Math.max(8192, inSize / MAX_PROGRESS) : Integer.MAX_VALUE;\n\n      while (true)\n      {\n        final long step = outChannel.transferFrom(in, pos, maxStep);\n        if (step <= 0)\n        {\n          final long a = inChannel.size();\n          if (a != inSize)\n            throw error(\"file \" + src + \" has been modified concurrently by another process\");\n\n          if (inChannel.position() >= inSize)\n          {\n            if (showProgress)\n            {\n              for (int i = progress; i < MAX_PROGRESS; i++)\n                this.log.print('#');\n              this.log.println(\" done\");\n            }\n            break;\n          }\n        }\n        else\n        {\n          pos += step;\n          if (showProgress)\n          {\n            final double  p           = (double) inChannel.position() / (double) inSize;\n            final int     newProgress = (int) (MAX_PROGRESS * p);\n            for (int i = progress; i < newProgress; i++)\n              this.log.print('#');\n            progress = newProgress;\n          }\n        }\n      }\n\n      final long outSize = outChannel.size();\n      in.close();\n      out.close();\n\n      if (this.verbose)\n      {\n        final double ratio = (outSize == 0) ? (inSize * 100) : ((double) inSize / (double) outSize);\n        this.log.print(\"compressed size: \").print(inSize)\n          .print(\"; decompressed size: \").print(outSize)\n          .print(\"; compression ratio: \").print(ratio).println('%');\n      }\n\n      if (!test && !this.switches.contains(Switch.keep))\n      {\n        if (!src.delete())\n          throw error(\"unable to delete sourcefile: \" + src);\n      }\n\n      if (test && !dst.delete())\n        throw error(\"unable to delete testfile: \" + dst);\n    }\n    catch (final IOException ex)\n    {\n      IO.tryClose(in);\n      IO.tryClose(out);\n      IO.tryRelease(inLock);\n      IO.tryRelease(outLock);\n      try\n      {\n        this.log.println();\n      }\n      finally\n      {\n        throw ex;\n      }\n    }\n\n  }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10212189",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic String getXML(String servletURL, String request) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public String getXML(String servletURL, String request) {\n        StringBuffer stringBuffer = new StringBuffer();\n        try {\n            String encodedRequest = URLEncoder.encode(request, \"UTF-8\");\n            URL url = new URL(servletURL + request);\n            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n            String inputLine;\n            while ((inputLine = in.readLine()) != null) {\n                stringBuffer.append(inputLine);\n            }\n            in.close();\n        } catch (MalformedURLException ex) {\n            return null;\n        } catch (UnsupportedEncodingException ex) {\n            return null;\n        } catch (IOException ex) {\n            return null;\n        }\n        return stringBuffer.toString();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10214218",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic synchronized String encrypt(String plaintext) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public synchronized String encrypt(String plaintext) {\n        MessageDigest md = null;\n        try {\n            md = MessageDigest.getInstance(\"MD5\");\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n        try {\n            md.update(plaintext.getBytes(\"UTF-8\"));\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n        byte raw[] = md.digest();\n        String hash = (new BASE64Encoder()).encode(raw);\n        return hash;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10218878",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void DecodeMapFile(String mapFile, String outputFile) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void DecodeMapFile(String mapFile, String outputFile) throws Exception {\n        byte magicKey = 0;\n        byte[] buffer = new byte[2048];\n        int nread;\n        InputStream map;\n        OutputStream output;\n        try {\n            map = new FileInputStream(mapFile);\n        } catch (Exception e) {\n            throw new Exception(\"Map file error\", e);\n        }\n        try {\n            output = new FileOutputStream(outputFile);\n        } catch (Exception e) {\n            throw new Exception(\"Map file error\", e);\n        }\n        while ((nread = map.read(buffer, 0, 2048)) != 0) {\n            for (int i = 0; i < nread; ++i) {\n                buffer[i] ^= magicKey;\n                magicKey += 43;\n            }\n            output.write(buffer, 0, nread);\n        }\n        map.close();\n        output.close();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10220823",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void testCopy() throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Test\n    public void testCopy() throws IOException {\n        final byte[] input = { 0x00, 0x01, 0x7F, 0x03, 0x40 };\n        final byte[] verification = input.clone();\n        Assert.assertNotSame(\"Expecting verification to be a new array.\", input, verification);\n        final ByteArrayInputStream in = new ByteArrayInputStream(input);\n        final ByteArrayOutputStream out = new ByteArrayOutputStream();\n        IOUtils.copy(in, out);\n        final byte[] output = out.toByteArray();\n        Assert.assertTrue(\"Expecting input to be unchanged.\", Arrays.equals(verification, input));\n        Assert.assertTrue(\"Expecting output to be like input.\", Arrays.equals(verification, output));\n        Assert.assertNotSame(\"Expecting output to be a new array.\", input, output);\n        Assert.assertNotSame(\"Expecting output to be a new array.\", verification, output);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10222828",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String getMD5Hash(String data) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String getMD5Hash(String data) {\n        MessageDigest digest;\n        try {\n            digest = java.security.MessageDigest.getInstance(\"MD5\");\n            digest.update(data.getBytes());\n            byte[] hash = digest.digest();\n            StringBuffer hexString = new StringBuffer();\n            String hexChar = \"\";\n            for (int i = 0; i < hash.length; i++) {\n                hexChar = Integer.toHexString(0xFF & hash[i]);\n                if (hexChar.length() < 2) {\n                    hexChar = \"0\" + hexChar;\n                }\n                hexString.append(hexChar);\n            }\n            return hexString.toString();\n        } catch (NoSuchAlgorithmException ex) {\n            return null;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01022820",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static final String computeHash(String stringToCompile) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static final String computeHash(String stringToCompile) {\n        String retVal = null;\n        try {\n            MessageDigest md5 = MessageDigest.getInstance(\"MD5\");\n            md5.reset();\n            md5.update(stringToCompile.getBytes());\n            byte[] result = md5.digest();\n            StringBuffer hexString = new StringBuffer();\n            for (int i = 0; i < result.length; i++) {\n                hexString.append(Integer.toHexString(0xFF & result[i]));\n            }\n            retVal = hexString.toString();\n            if (log.isDebugEnabled()) log.debug(\"MD5 hash for \\\"\" + stringToCompile + \"\\\" is: \" + retVal);\n        } catch (Exception exe) {\n            log.error(exe.getMessage(), exe);\n        }\n        return retVal;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10228411",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic File createReadmeFile(File dir, MavenProject mavenProject) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public File createReadmeFile(File dir, MavenProject mavenProject) throws IOException {\n        InputStream is = getClass().getResourceAsStream(\"README.template\");\n        StringWriter sw = new StringWriter();\n        IOUtils.copy(is, sw);\n        String content = sw.getBuffer().toString();\n        content = StringUtils.replace(content, \"{project_name}\", mavenProject.getArtifactId());\n        File readme = new File(dir, \"README.TXT\");\n        FileUtils.writeStringToFile(readme, content);\n        return readme;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10231476",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "protected Document SendRequest(Document request) throws WsmanException {\n        HttpURLConnection conn = null;\n        Document response = null;\n        stampRequest(request);\n        boolean printDebug = System.getProperty(\"intel.management.wsman.debug\", \"false\").equals(\"true\");\n        int retry = 2;\n        while (retry > 0) {\n            try {\n                if (conn != null) {\n                    conn.disconnect();\n                }\n                URL url = new URL((String) properties.get(\"Address\"));\n                Proxy proxy = (Proxy) properties.get(\"HttpProxy\");\n                if (proxy != null) conn = (HttpURLConnection) url.openConnection(proxy); else conn = (HttpURLConnection) url.openConnection();\n                if (conn instanceof HttpsURLConnection) {\n                    HttpsURLConnection sslConn = (HttpsURLConnection) conn;\n                    SSLSocketFactory factory = (SSLSocketFactory) properties.get(\"SSLSocketFactory\");\n                    X509TrustManager tm = (X509TrustManager) properties.get(\"X509TrustManager\");\n                    HostnameVerifier verifier = (HostnameVerifier) properties.get(\"HostnameVerifier\");\n                    X509KeyManager km = (X509KeyManager) properties.get(\"X509KeyManager\");\n                    if (factory == null && (km != null || tm != null)) {\n                        X509KeyManager[] keys = null;\n                        X509TrustManager[] trusts = null;\n                        SSLContext sc = SSLContext.getInstance(\"SSL\");\n                        if (km != null) {\n                            keys = new X509KeyManager[1];\n                            keys[0] = km;\n                        }\n                        if (tm != null) {\n                            trusts = new X509TrustManager[1];\n                            trusts[0] = tm;\n                        }\n                        sc.init(keys, trusts, null);\n                        factory = sc.getSocketFactory();\n                        properties.put(\"SSLSocketFactory\", factory);\n                    }\n                    if (factory != null) sslConn.setSSLSocketFactory(factory);\n                    if (verifier != null) sslConn.setHostnameVerifier(verifier);\n                }\n                Object auth = properties.get(\"AuthScheme\");\n                if (auth != null && auth.equals(\"kerberos\")) {\n                    Oid spnegoMecOid = new Oid(\"1.3.6.1.5.5.2\");\n                    GSSManager manager = org.ietf.jgss.GSSManager.getInstance();\n                    String spnName = \"HTTP/\" + url.getHost();\n                    int spnPort = url.getPort();\n                    if (spnPort == 16992 || spnPort == 16993 || spnPort == 623 || spnPort == 624) {\n                        spnName = spnName + \":\" + Integer.toString(spnPort);\n                    }\n                    GSSName gssName = manager.createName(spnName, null);\n                    GSSContext context = manager.createContext(gssName, spnegoMecOid, null, GSSCredential.DEFAULT_LIFETIME);\n                    context.requestCredDeleg(true);\n                    byte[] token = new byte[0];\n                    token = context.initSecContext(token, 0, token.length);\n                    String tokenStr = WsmanUtils.getBase64String(token);\n                    conn.addRequestProperty(\"Authorization\", \"Negotiate \" + tokenStr);\n                } else if (auth != null && auth.equals(\"basic\")) {\n                    java.net.Authenticator.requestPasswordAuthentication(url.getHost(), null, url.getPort(), url.getProtocol(), \"\", \"basic\");\n                    String tokenStr = \"\";\n                    conn.addRequestProperty(\"Authorization\", \"Basic \" + tokenStr);\n                }\n                conn.setRequestMethod(\"POST\");\n                conn.addRequestProperty(\"Content-Type\", \"application/soap+xml;charset=UTF-8\");\n                conn.setDoOutput(true);\n                if (printDebug) System.out.println(getXmlLoader().formatDocument(request));\n                getXmlLoader().saveDocument(request, conn.getOutputStream());\n                InputStream s = conn.getInputStream();\n                response = getXmlLoader().loadDocument(s);\n                if (printDebug) {\n                    System.out.println(getXmlLoader().formatDocument(response));\n                }\n                conn.getResponseCode();\n                retry = 0;\n                conn.disconnect();\n                conn = null;\n            } catch (IOException ioException) {\n                retry--;\n                int max = conn.getHeaderFields().size();\n                for (int i = 0; i < max; i++) {\n                    String t = conn.getHeaderField(i);\n                    t.toString();\n                }\n                conn.getRequestProperty(\"Authorization\");\n                conn.getHeaderField(\"Authorization\");\n                Object errObj = getResponse(conn);\n                if (errObj != null && errObj instanceof Document) {\n                    response = (Document) errObj;\n                    retry = 0;\n                    throw new WsmanException(this, response);\n                } else if (errObj != null) throw new WsmanException(ioException);\n                if (retry == 0) throw new WsmanException(ioException);\n            } catch (Exception exception) {\n                retry = 0;\n                throw new WsmanException(exception);\n            }\n        }\n        return response;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01023289",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String MD5(String s) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String MD5(String s) {\n        try {\n            MessageDigest m = MessageDigest.getInstance(\"MD5\");\n            m.update(s.getBytes(), 0, s.length());\n            return new BigInteger(1, m.digest()).toString(16);\n        } catch (NoSuchAlgorithmException ex) {\n            return \"\";\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01023350",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void download(URL url, File file, String userAgent) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void download(URL url, File file, String userAgent) throws IOException {\n        URLConnection conn = url.openConnection();\n        if (userAgent != null) {\n            conn.setRequestProperty(\"User-Agent\", userAgent);\n        }\n        InputStream in = conn.getInputStream();\n        FileOutputStream out = new FileOutputStream(file);\n        StreamUtil.copyThenClose(in, out);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01023562",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void downloadXrefTask(String url, String file) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void downloadXrefTask(String url, String file) {\n        int n, progressi, progressn;\n        if (debug) System.err.println(\"Downloading \" + url + \" into \" + file);\n        Progress progress = Progress.crNew(null, \"Downloading xref task\");\n        FileOutputStream oo = null;\n        InputStream ii = null;\n        try {\n            URLConnection con = new URL(url).openConnection();\n            ii = con.getInputStream();\n            File of = new File(file);\n            if (!of.getParentFile().exists()) {\n                of.getParentFile().mkdir();\n            }\n            oo = new FileOutputStream(of);\n            byte buffer[] = new byte[XREF_DOWNLOAD_BUFFER_SIZE];\n            progressi = 0;\n            progressn = con.getContentLength();\n            n = 1;\n            while (n >= 0) {\n                n = ii.read(buffer, 0, XREF_DOWNLOAD_BUFFER_SIZE);\n                if (n > 0) {\n                    oo.write(buffer, 0, n);\n                    progressi += n;\n                }\n                if (!progress.setProgress(progressi * 100 / progressn)) {\n                    n = -2;\n                }\n            }\n            ii.close();\n            oo.close();\n            fileSetExecPermission(file);\n            if (n == -2) {\n                of.delete();\n            }\n        } catch (Exception e) {\n            try {\n                if (oo != null) {\n                    oo.close();\n                    new File(file).delete();\n                }\n                if (ii != null) ii.close();\n            } catch (Exception ee) {\n            }\n            progress.setVisible(false);\n            JOptionPane.showMessageDialog(null, e.toString() + \"\\nWhile downloading \" + url + \".\\nMaybe wrong proxy configuration?\", \"Xrefactory Error\", JOptionPane.ERROR_MESSAGE);\n        }\n        progress.setVisible(false);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10236283",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic MultiValueMap<String> queryResource(String resourceName) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public MultiValueMap<String> queryResource(String resourceName) {\n        if (resourceName.startsWith(\"http://dbpedia.org/resource/\")) {\n            resourceName = resourceName.substring(28);\n        }\n        try {\n            resourceName = resourceName.replace(' ', '_');\n            resourceName = URLEncoder.encode(resourceName, \"UTF-8\");\n        } catch (UnsupportedEncodingException exc) {\n        }\n        String select = prefix + \" SELECT ?property ?hasValue WHERE { { \" + \"<http://dbpedia.org/resource/\" + resourceName + \"> ?property ?hasValue  } FILTER (lang(?hasValue) = \\\"\" + lang + \"\\\" || !isLiteral(?hasValue))}\";\n        System.out.println(select);\n        MultiValueMap<String> resourceMap = new MultiValueMap<String>();\n        try {\n            URL url = new URL(queryBase + URLEncoder.encode(select, \"UTF-8\"));\n            InputStream inStream = url.openStream();\n            Document doc = docBuild.parse(inStream);\n            Element table = doc.getDocumentElement();\n            NodeList rows = table.getElementsByTagName(\"tr\");\n            for (int i = 0; i < rows.getLength(); i++) {\n                Element row = (Element) rows.item(i);\n                NodeList cols = row.getElementsByTagName(\"td\");\n                if (cols.getLength() > 1) {\n                    Element propElem = (Element) cols.item(0);\n                    Element valElem = (Element) cols.item(1);\n                    String property = ((Text) propElem.getFirstChild()).getData();\n                    if (property.startsWith(\"http://dbpedia.org/property/\")) {\n                        property = property.substring(28);\n                    } else {\n                        int inx = property.indexOf('#');\n                        if (inx == -1) {\n                            inx = property.lastIndexOf('/');\n                        }\n                        property = property.substring(inx + 1);\n                    }\n                    String value = ((Text) valElem.getFirstChild()).getData();\n                    if (value.startsWith(\"http://dbpedia.org/resource/\")) {\n                        value = value.substring(28).replaceAll(\"_\", \" \");\n                    }\n                    resourceMap.addFieldValue(property, value);\n                }\n            }\n        } catch (UnsupportedEncodingException exc) {\n            exc.printStackTrace();\n        } catch (IOException exc) {\n            System.err.println(\"Cannot retrieve record for \" + resourceName);\n        } catch (SAXException exc) {\n            System.err.println(\"Cannot parse record for \" + resourceName);\n        }\n        return resourceMap;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10236284",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic HashSet<String> queryResource(String resourceName, String propertyName) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public HashSet<String> queryResource(String resourceName, String propertyName) {\n        if (resourceName.startsWith(\"http://dbpedia.org/resource/\")) {\n            resourceName = resourceName.substring(28);\n        }\n        try {\n            resourceName = resourceName.trim().replace(' ', '_');\n            resourceName = URLEncoder.encode(resourceName, \"UTF-8\");\n        } catch (UnsupportedEncodingException exc) {\n        }\n        String select = prefix + \" SELECT ?hasValue WHERE { { \" + \"<http://dbpedia.org/resource/\" + resourceName + \"> \" + propertyName + \" ?hasValue  } FILTER (lang(?hasValue) = \\\"\" + lang + \"\\\" || !isLiteral(?hasValue))}\";\n        System.out.println(select);\n        HashSet<String> values = new HashSet<String>();\n        try {\n            URL url = new URL(queryBase + URLEncoder.encode(select, \"UTF-8\"));\n            InputStream inStream = url.openStream();\n            Document doc = docBuild.parse(inStream);\n            Element table = doc.getDocumentElement();\n            NodeList rows = table.getElementsByTagName(\"tr\");\n            for (int i = 0; i < rows.getLength(); i++) {\n                Element row = (Element) rows.item(i);\n                NodeList cols = row.getElementsByTagName(\"td\");\n                if (cols.getLength() > 0) {\n                    Element valElem = (Element) cols.item(0);\n                    String value = ((Text) valElem.getFirstChild()).getData();\n                    if (value.startsWith(\"http://dbpedia.org/resource/\")) {\n                        value = value.substring(28).replaceAll(\"_\", \" \");\n                    } else if (value.startsWith(\"http://dbpedia.org/ontology/\")) {\n                        value = value.substring(28).replaceAll(\"_\", \" \");\n                    } else if (value.startsWith(\"http://dbpedia.org/class/yago/\")) {\n                        value = value.substring(30);\n                        value = value.split(\"[\\\\d]+\")[0];\n                    }\n                    values.add(value);\n                }\n            }\n        } catch (UnsupportedEncodingException exc) {\n            exc.printStackTrace();\n        } catch (IOException exc) {\n            System.err.println(\"Cannot retrieve record for \" + resourceName);\n        } catch (SAXException exc) {\n            System.err.println(\"Cannot parse record for \" + resourceName);\n        }\n        return values;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10236285",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n    protected Set<DataRecord> retrieveRecords(DataTemplate template) {\n        String query = template.getQuery();\n        if (query == null) {\n            query = topic;\n        }\n        String select = prefix + \" SELECT ?resource WHERE { { ?resource rdf:type \" + \"<http://dbpedia.org/class/yago/\" + StringUtils.toCamelCase(query) + \"> } UNION { ?resource skos:subject <http://dbpedia.org/resource/Category:\" + query.replaceAll(\" \", \"_\") + \"> } }\";\n        Document doc = null;\n        HashSet<DataRecord> recs = new HashSet<DataRecord>();\n        try {\n            URL url = new URL(queryBase + URLEncoder.encode(select, \"UTF-8\"));\n            InputStream inStream = url.openStream();\n            doc = docBuild.parse(inStream);\n            HashSet<String> resourceNames = new HashSet<String>();\n            Element table = doc.getDocumentElement();\n            NodeList rows = table.getElementsByTagName(\"tr\");\n            for (int i = 0; i < rows.getLength(); i++) {\n                Element row = (Element) rows.item(i);\n                NodeList cols = row.getElementsByTagName(\"td\");\n                if (cols.getLength() > 0) {\n                    Element elem = (Element) cols.item(0);\n                    String resource = ((Text) elem.getFirstChild()).getData();\n                    resourceNames.add(resource);\n                }\n            }\n            inStream.close();\n            for (String resource : resourceNames) {\n                MultiValueMap<String> resRecord = queryResource(resource);\n                if (resource != null) {\n                    DataRecord rec = parseResource(resRecord, template);\n                    if (rec != null) {\n                        recs.add(rec);\n                    }\n                }\n            }\n        } catch (IOException exc) {\n            exc.printStackTrace();\n        } catch (SAXException exc) {\n            exc.printStackTrace();\n        }\n        return recs;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10242903",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private List<Feature> getFeatures(String source, EntryPoint e) throws MalformedURLException, SAXException, IOException, ParserConfigurationException, URISyntaxException {\n        SAXParser parser = SAXParserFactory.newInstance().newSAXParser();\n        FeatureParser featp = new FeatureParser();\n        parser.parse(URIFactory.url(serverPrefix + \"/das/\" + source + \"/features?segment=\" + e.id + \":\" + e.start + \",\" + e.stop).openStream(), featp);\n        return featp.list;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10246006",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static synchronized String getURLContent(URL url) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static synchronized String getURLContent(URL url) {\n        Log log = LogUtil.getLog(FileManager.class, \"getURLContent\");\n        if (url == null) {\n            throw new IllegalArgumentException(\"url shouldn't be null!\");\n        }\n        String content = (String) urlCache.get(url);\n        if (content != null) {\n            return content;\n        }\n        try {\n            InputStream is = null;\n            if (\"file\".equals(url.getProtocol())) {\n                is = new java.io.FileInputStream(url.getFile());\n            } else {\n                is = url.openStream();\n            }\n            ByteArrayOutputStream baos = new ByteArrayOutputStream(is.available());\n            pump(is, baos);\n            content = new String(baos.toByteArray());\n            urlCache.put(url, content);\n            return content;\n        } catch (FileNotFoundException e) {\n            return null;\n        } catch (Exception e) {\n            e.printStackTrace();\n            log.error(Translator.getString(XDocletMessages.class, XDocletUtilMessages.EXCEPTION_READING_MERGE_FILE, new String[] { e.toString() }));\n            return null;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10247943",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void sendContent(OutputStream out, Range range, Map<String, String> params, String contentType) throws IOException, NotAuthorizedException, BadRequestException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n    public void sendContent(OutputStream out, Range range, Map<String, String> params, String contentType) throws IOException, NotAuthorizedException, BadRequestException {\n        try {\n            if (vtf == null) {\n                LOG.debug(\"Serializing from database\");\n                existDocument.stream(out);\n            } else {\n                LOG.debug(\"Serializing from buffer\");\n                InputStream is = vtf.getByteStream();\n                IOUtils.copy(is, out);\n                out.flush();\n                IOUtils.closeQuietly(is);\n                vtf.delete();\n                vtf = null;\n            }\n        } catch (PermissionDeniedException e) {\n            LOG.debug(e.getMessage());\n            throw new NotAuthorizedException(this);\n        } finally {\n            IOUtils.closeQuietly(out);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01024884",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic int getResponseCode() throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n    protected URLConnection openConnection(URL url) throws IOException {\n        try {\n            final HttpServlet servlet;\n            String path = url.getPath();\n            if (path.matches(\"reg:.+\")) {\n                String registerName = path.replaceAll(\"reg:([^/]*)/.*\", \"$1\");\n                servlet = register.get(registerName);\n                if (servlet == null) throw new RuntimeException(\"No servlet registered with name \" + registerName);\n            } else {\n                String servletClassName = path.replaceAll(\"([^/]*)/.*\", \"$1\");\n                servlet = (HttpServlet) Class.forName(servletClassName).newInstance();\n            }\n            final MockHttpServletRequest req = new MockHttpServletRequest().setMethod(\"GET\");\n            final MockHttpServletResponse resp = new MockHttpServletResponse();\n            return new HttpURLConnection(url) {\n\n                @Override\n                public int getResponseCode() throws IOException {\n                    serviceIfNeeded();\n                    return resp.status;\n                }\n\n                @Override\n                public InputStream getInputStream() throws IOException {\n                    serviceIfNeeded();\n                    if (resp.status == 500) throw new IOException(\"Server responded with error 500\");\n                    byte[] array = resp.out.toByteArray();\n                    return new ByteArrayInputStream(array);\n                }\n\n                @Override\n                public InputStream getErrorStream() {\n                    try {\n                        serviceIfNeeded();\n                    } catch (IOException e) {\n                        throw new RuntimeException(e);\n                    }\n                    if (resp.status != 500) return null;\n                    return new ByteArrayInputStream(resp.out.toByteArray());\n                }\n\n                @Override\n                public OutputStream getOutputStream() throws IOException {\n                    return req.tmp;\n                }\n\n                @Override\n                public void addRequestProperty(String key, String value) {\n                    req.addHeader(key, value);\n                }\n\n                @Override\n                public void connect() throws IOException {\n                }\n\n                @Override\n                public boolean usingProxy() {\n                    return false;\n                }\n\n                @Override\n                public void disconnect() {\n                }\n\n                private boolean called;\n\n                private void serviceIfNeeded() throws IOException {\n                    try {\n                        if (!called) {\n                            called = true;\n                            req.setMethod(getRequestMethod());\n                            servlet.service(req, resp);\n                        }\n                    } catch (ServletException e) {\n                        throw new RuntimeException(e);\n                    }\n                }\n            };\n        } catch (InstantiationException e) {\n            throw new RuntimeException(e);\n        } catch (IllegalAccessException e) {\n            throw new RuntimeException(e);\n        } catch (ClassNotFoundException e) {\n            throw new RuntimeException(e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10249398",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        MessageDigest md;\n        md = MessageDigest.getInstance(\"SHA-1\");\n        byte[] sha1hash = new byte[40];\n        md.update(text.getBytes(\"iso-8859-1\"), 0, text.length());\n        sha1hash = md.digest();\n        return convertToHex(sha1hash);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10251387",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void close() throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n    public void close() throws IOException {\n        super.close();\n        byte[] signatureData = toByteArray();\n        ZipOutputStream zipOutputStream = new ZipOutputStream(this.targetOutputStream);\n        ZipInputStream zipInputStream = new ZipInputStream(new FileInputStream(this.originalZipFile));\n        ZipEntry zipEntry;\n        while (null != (zipEntry = zipInputStream.getNextEntry())) {\n            if (!zipEntry.getName().equals(ODFUtil.SIGNATURE_FILE)) {\n                ZipEntry newZipEntry = new ZipEntry(zipEntry.getName());\n                zipOutputStream.putNextEntry(newZipEntry);\n                LOG.debug(\"copying \" + zipEntry.getName());\n                IOUtils.copy(zipInputStream, zipOutputStream);\n            }\n        }\n        zipInputStream.close();\n        zipEntry = new ZipEntry(ODFUtil.SIGNATURE_FILE);\n        LOG.debug(\"writing \" + zipEntry.getName());\n        zipOutputStream.putNextEntry(zipEntry);\n        IOUtils.write(signatureData, zipOutputStream);\n        zipOutputStream.close();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10252056",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void updatePortletName(PortletName portletNameBean) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void updatePortletName(PortletName portletNameBean) {\n        DatabaseAdapter dbDyn = null;\n        PreparedStatement ps = null;\n        try {\n            dbDyn = DatabaseAdapter.getInstance();\n            String sql = \"update WM_PORTAL_PORTLET_NAME \" + \"set    TYPE=? \" + \"where  ID_SITE_CTX_TYPE=?\";\n            ps = dbDyn.prepareStatement(sql);\n            ps.setString(1, portletNameBean.getPortletName());\n            RsetTools.setLong(ps, 2, portletNameBean.getPortletId());\n            int i1 = ps.executeUpdate();\n            if (log.isDebugEnabled()) log.debug(\"Count of updated record - \" + i1);\n            dbDyn.commit();\n        } catch (Exception e) {\n            try {\n                if (dbDyn != null) dbDyn.rollback();\n            } catch (Exception e001) {\n            }\n            String es = \"Error save portlet name\";\n            log.error(es, e);\n            throw new IllegalStateException(es, e);\n        } finally {\n            DatabaseManager.close(dbDyn, ps);\n            dbDyn = null;\n            ps = null;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10252057",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void deletePortletName(PortletName portletNameBean) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void deletePortletName(PortletName portletNameBean) {\n        DatabaseAdapter dbDyn = null;\n        PreparedStatement ps = null;\n        try {\n            dbDyn = DatabaseAdapter.getInstance();\n            if (portletNameBean.getPortletId() == null) throw new IllegalArgumentException(\"portletNameId is null\");\n            String sql = \"delete from  WM_PORTAL_PORTLET_NAME \" + \"where  ID_SITE_CTX_TYPE=?\";\n            ps = dbDyn.prepareStatement(sql);\n            RsetTools.setLong(ps, 1, portletNameBean.getPortletId());\n            int i1 = ps.executeUpdate();\n            if (log.isDebugEnabled()) log.debug(\"Count of deleted records - \" + i1);\n            dbDyn.commit();\n        } catch (Exception e) {\n            try {\n                if (dbDyn != null) dbDyn.rollback();\n            } catch (Exception e001) {\n            }\n            String es = \"Error delete portlet name\";\n            log.error(es, e);\n            throw new IllegalStateException(es, e);\n        } finally {\n            DatabaseManager.close(dbDyn, ps);\n            dbDyn = null;\n            ps = null;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10254165",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void zipFile(String baseDir, String fileName, boolean encrypt) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void zipFile(String baseDir, String fileName, boolean encrypt) throws Exception {\n        List fileList = getSubFiles(new File(baseDir));\n        ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(fileName + \".temp\"));\n        ZipEntry ze = null;\n        byte[] buf = new byte[BUFFER];\n        byte[] encrypByte = new byte[encrypLength];\n        int readLen = 0;\n        for (int i = 0; i < fileList.size(); i++) {\n            if (stopZipFile) {\n                zos.close();\n                File zipFile = new File(fileName + \".temp\");\n                if (zipFile.exists()) zipFile.delete();\n                break;\n            }\n            File f = (File) fileList.get(i);\n            if (f.getAbsoluteFile().equals(fileName + \".temp\")) continue;\n            ze = new ZipEntry(getAbsFileName(baseDir, f));\n            ze.setSize(f.length());\n            ze.setTime(f.lastModified());\n            zos.putNextEntry(ze);\n            InputStream is = new BufferedInputStream(new FileInputStream(f));\n            readLen = is.read(buf, 0, BUFFER);\n            if (encrypt) {\n                if (readLen >= encrypLength) {\n                    System.arraycopy(buf, 0, encrypByte, 0, encrypLength);\n                } else if (readLen > 0) {\n                    Arrays.fill(encrypByte, (byte) 0);\n                    System.arraycopy(buf, 0, encrypByte, 0, readLen);\n                    readLen = encrypLength;\n                }\n                byte[] temp = CryptionControl.getInstance().encryptoECB(encrypByte, rootKey);\n                System.arraycopy(temp, 0, buf, 0, encrypLength);\n            }\n            while (readLen != -1) {\n                zos.write(buf, 0, readLen);\n                readLen = is.read(buf, 0, BUFFER);\n            }\n            is.close();\n        }\n        zos.close();\n        File zipFile = new File(fileName + \".temp\");\n        if (zipFile.exists()) zipFile.renameTo(new File(fileName + \".zip\"));\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01026385",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic String transmit(String input, String filePath) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public String transmit(String input, String filePath) throws Exception {\n        if (cookie == null || \"\".equals(urlString)) {\n            return null;\n        }\n        String txt = \"\";\n        StringBuffer returnMessage = new StringBuffer();\n        final String boundary = String.valueOf(System.currentTimeMillis());\n        URL url = null;\n        URLConnection conn = null;\n        BufferedReader br = null;\n        DataOutputStream dos = null;\n        try {\n            url = new URL(urlString);\n            conn = url.openConnection();\n            ((HttpURLConnection) conn).setRequestMethod(\"POST\");\n            conn.setDoInput(true);\n            conn.setDoOutput(true);\n            conn.setAllowUserInteraction(true);\n            conn.setUseCaches(false);\n            conn.setRequestProperty(HEADER_COOKIE, cookie);\n            if (input != null) {\n                String auth = \"Basic \" + new sun.misc.BASE64Encoder().encode(input.getBytes());\n                conn.setRequestProperty(\"Authorization\", auth);\n            }\n            dos = new DataOutputStream(conn.getOutputStream());\n            dos.write((starter + boundary + returnChar).getBytes());\n            for (int i = 0; i < txtList.size(); i++) {\n                HtmlFormText htmltext = (HtmlFormText) txtList.get(i);\n                dos.write(htmltext.getTranslated());\n                if (i + 1 < txtList.size()) {\n                    dos.write((starter + boundary + returnChar).getBytes());\n                } else if (fileList.size() > 0) {\n                    dos.write((starter + boundary + returnChar).getBytes());\n                }\n            }\n            for (int i = 0; i < fileList.size(); i++) {\n                HtmlFormFile htmlfile = (HtmlFormFile) fileList.get(i);\n                dos.write(htmlfile.getTranslated());\n                if (i + 1 < fileList.size()) {\n                    dos.write((starter + boundary + returnChar).getBytes());\n                }\n            }\n            dos.write((starter + boundary + \"--\" + returnChar).getBytes());\n            dos.flush();\n            br = new BufferedReader(new InputStreamReader(conn.getInputStream(), \"UTF-8\"));\n            txt = transactFormStr(br);\n            if (!\"\".equals(filePath) && !\"null\".equals(filePath)) {\n                RandomAccessFile raf = new RandomAccessFile(filePath, \"rw\");\n                raf.seek(raf.length());\n                raf.writeBytes(txt + \"\\n\");\n                raf.close();\n            }\n            txtList.clear();\n            fileList.clear();\n        } catch (Exception e) {\n            log.error(e, e);\n        } finally {\n            try {\n                dos.close();\n            } catch (Exception e) {\n            }\n            try {\n                br.close();\n            } catch (Exception e) {\n            }\n        }\n        return txt;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01026390",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic boolean login(String strUrl, String loginName, String loginPwd) throws ApplicationException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public boolean login(String strUrl, String loginName, String loginPwd) throws ApplicationException {\n        String starter = \"-----------------------------\";\n        String returnChar = \"\\r\\n\";\n        String lineEnd = \"--\";\n        String urlString = strUrl;\n        String input = null;\n        List txtList = new ArrayList();\n        List fileList = new ArrayList();\n        String targetFile = null;\n        String actionStatus = null;\n        StringBuffer returnMessage = new StringBuffer();\n        List head = new ArrayList();\n        final String boundary = String.valueOf(System.currentTimeMillis());\n        URL url = null;\n        URLConnection conn = null;\n        BufferedReader br = null;\n        DataOutputStream dos = null;\n        boolean isLogin = false;\n        txtList.add(new HtmlFormText(\"loginName\", loginName));\n        txtList.add(new HtmlFormText(\"loginPwd\", loginPwd));\n        txtList.add(new HtmlFormText(\"navMode\", \"I\"));\n        txtList.add(new HtmlFormText(\"action\", \"login\"));\n        try {\n            url = new URL(urlString);\n            conn = url.openConnection();\n            ((HttpURLConnection) conn).setRequestMethod(\"POST\");\n            conn.setDoInput(true);\n            conn.setDoOutput(true);\n            conn.setUseCaches(false);\n            conn.setRequestProperty(\"Content-Type\", \"multipart/form-data, boundary=\" + \"---------------------------\" + boundary);\n            if (input != null) {\n                String auth = \"Basic \" + new sun.misc.BASE64Encoder().encode(input.getBytes());\n                conn.setRequestProperty(\"Authorization\", auth);\n            }\n            dos = new DataOutputStream(conn.getOutputStream());\n            dos.write((starter + boundary + returnChar).getBytes());\n            for (int i = 0; i < txtList.size(); i++) {\n                HtmlFormText htmltext = (HtmlFormText) txtList.get(i);\n                dos.write(htmltext.getTranslated());\n                if (i + 1 < txtList.size()) {\n                    dos.write((starter + boundary + returnChar).getBytes());\n                } else if (fileList.size() > 0) {\n                    dos.write((starter + boundary + returnChar).getBytes());\n                }\n            }\n            dos.write((starter + boundary + \"--\" + returnChar).getBytes());\n            dos.flush();\n            br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n            String cookieVal = conn.getHeaderField(HEADER_SETCOOKIE);\n            if (cookieVal != null) {\n                cookie = cookieVal.substring(0, cookieVal.indexOf(\";\"));\n            }\n            String tempstr;\n            int line = 0;\n            while (null != ((tempstr = br.readLine()))) {\n                if (!tempstr.equals(\"\")) {\n                    if (\"window.location.replace(\\\"/Home.do\\\");\".indexOf(returnMessage.append(formatLine(tempstr)).toString()) != -1) {\n                        isLogin = true;\n                        break;\n                    }\n                    line++;\n                }\n            }\n            txtList.clear();\n            fileList.clear();\n        } catch (Exception e) {\n            log.error(e, e);\n            throw new ApplicationException(FormErrorConstant.DB_APP_BASE_URL_ERROR);\n        } finally {\n            try {\n                dos.close();\n            } catch (Exception e) {\n            }\n            try {\n                br.close();\n            } catch (Exception e) {\n            }\n        }\n        return isLogin;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01026391",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic ObjectInputStream getObjectInputStreamFromServlet(String strUrl) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public ObjectInputStream getObjectInputStreamFromServlet(String strUrl) throws Exception {\n        if (cookie == null) {\n            return null;\n        }\n        String starter = \"-----------------------------\";\n        String returnChar = \"\\r\\n\";\n        String lineEnd = \"--\";\n        String urlString = strUrl;\n        String input = null;\n        List txtList = new ArrayList();\n        List fileList = new ArrayList();\n        String targetFile = null;\n        String actionStatus = null;\n        StringBuffer returnMessage = new StringBuffer();\n        List head = new ArrayList();\n        final String boundary = String.valueOf(System.currentTimeMillis());\n        URL url = null;\n        URLConnection conn = null;\n        DataOutputStream dos = null;\n        ObjectInputStream inputFromServlet = null;\n        try {\n            url = new URL(urlString);\n            conn = url.openConnection();\n            ((HttpURLConnection) conn).setRequestMethod(\"POST\");\n            conn.setDoInput(true);\n            conn.setDoOutput(true);\n            conn.setUseCaches(false);\n            conn.setRequestProperty(\"Content-Type\", \"multipart/form-data, boundary=\" + \"---------------------------\" + boundary);\n            conn.setRequestProperty(HEADER_COOKIE, cookie);\n            if (input != null) {\n                String auth = \"Basic \" + new sun.misc.BASE64Encoder().encode(input.getBytes());\n                conn.setRequestProperty(\"Authorization\", auth);\n            }\n            dos = new DataOutputStream(conn.getOutputStream());\n            dos.flush();\n            inputFromServlet = new ObjectInputStream(conn.getInputStream());\n            txtList.clear();\n            fileList.clear();\n        } catch (Exception e) {\n            log.error(e, e);\n            return null;\n        } finally {\n            try {\n                dos.close();\n            } catch (Exception e) {\n            }\n        }\n        return inputFromServlet;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10264652",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "protected void truncate(File file) {\n        LogLog.debug(\"Compression of file: \" + file.getAbsolutePath() + \" started.\");\n        if (FileUtils.isFileOlder(file, ManagementFactory.getRuntimeMXBean().getStartTime())) {\n            File backupRoot = new File(getBackupDir());\n            if (!backupRoot.exists() && !backupRoot.mkdirs()) {\n                throw new AppenderInitializationError(\"Can't create backup dir for backup storage\");\n            }\n            SimpleDateFormat df;\n            try {\n                df = new SimpleDateFormat(getBackupDateFormat());\n            } catch (Exception e) {\n                throw new AppenderInitializationError(\"Invalid date formate for backup files: \" + getBackupDateFormat(), e);\n            }\n            String date = df.format(new Date(file.lastModified()));\n            File zipFile = new File(backupRoot, file.getName() + \".\" + date + \".zip\");\n            ZipOutputStream zos = null;\n            FileInputStream fis = null;\n            try {\n                zos = new ZipOutputStream(new FileOutputStream(zipFile));\n                ZipEntry entry = new ZipEntry(file.getName());\n                entry.setMethod(ZipEntry.DEFLATED);\n                entry.setCrc(FileUtils.checksumCRC32(file));\n                zos.putNextEntry(entry);\n                fis = FileUtils.openInputStream(file);\n                byte[] buffer = new byte[1024];\n                int readed;\n                while ((readed = fis.read(buffer)) != -1) {\n                    zos.write(buffer, 0, readed);\n                }\n            } catch (Exception e) {\n                throw new AppenderInitializationError(\"Can't create zip file\", e);\n            } finally {\n                if (zos != null) {\n                    try {\n                        zos.close();\n                    } catch (IOException e) {\n                        LogLog.warn(\"Can't close zip file\", e);\n                    }\n                }\n                if (fis != null) {\n                    try {\n                        fis.close();\n                    } catch (IOException e) {\n                        LogLog.warn(\"Can't close zipped file\", e);\n                    }\n                }\n            }\n            if (!file.delete()) {\n                throw new AppenderInitializationError(\"Can't delete old log file \" + file.getAbsolutePath());\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10264859",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic GeocodeResponse getGKCoordinateFromAddress(SearchAddressRequest searchAddressRequest) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public GeocodeResponse getGKCoordinateFromAddress(SearchAddressRequest searchAddressRequest) {\n        GeocodeResponse result = null;\n        String adress = null;\n        if (searchAddressRequest.getAdressTextField() != null) adress = searchAddressRequest.getAdressTextField().getText();\n        if (adress == null || adress.length() == 0) adress = \" \";\n        String postRequest = \"\";\n        postRequest = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> \\n\" + \"<xls:XLS xmlns:xls=\\\"http://www.opengis.net/xls\\\" xmlns:sch=\\\"http://www.ascc.net/xml/schematron\\\" xmlns:gml=\\\"http://www.opengis.net/gml\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://www.opengis.net/xls \\n\" + \"http://gdi3d.giub.uni-bonn.de:8080/openls-lus/schemas/LocationUtilityService.xsd\\\" version=\\\"1.1\\\"> \\n\" + \"\t<xls:RequestHeader srsName=\\\"EPSG:\" + Navigator.getEpsg_code() + \"\\\"/> \\n\" + \"\t<xls:Request methodName=\\\"GeocodeRequest\\\" requestID=\\\"123456789\\\" version=\\\"1.1\\\"> \\n\" + \"\t\t<xls:GeocodeRequest> \\n\" + \"\t\t\t<xls:Address countryCode=\\\"DE\\\"> \\n\" + \"\t\t\t\t<xls:freeFormAddress>\" + adress + \"</xls:freeFormAddress> \\n\" + \"\t\t\t</xls:Address> \\n\" + \"\t\t</xls:GeocodeRequest> \\n\" + \"\t</xls:Request> \\n\" + \"</xls:XLS> \\n\";\n        if (Navigator.isVerbose()) {\n            System.out.println(\"OpenLSGeocoder postRequest \" + postRequest);\n        }\n        String errorMessage = \"\";\n        try {\n            System.out.println(\"contacting \" + serviceEndPoint);\n            URL u = new URL(serviceEndPoint);\n            HttpURLConnection urlc = (HttpURLConnection) u.openConnection();\n            urlc.setReadTimeout(Navigator.TIME_OUT);\n            urlc.setAllowUserInteraction(false);\n            urlc.setRequestMethod(\"POST\");\n            urlc.setRequestProperty(\"Content-Type\", \"application/xml\");\n            urlc.setDoOutput(true);\n            urlc.setDoInput(true);\n            urlc.setUseCaches(false);\n            PrintWriter xmlOut = null;\n            xmlOut = new java.io.PrintWriter(urlc.getOutputStream());\n            xmlOut.write(postRequest);\n            xmlOut.flush();\n            xmlOut.close();\n            InputStream is = urlc.getInputStream();\n            result = new GeocodeResponse();\n            XLSDocument xlsResponse = XLSDocument.Factory.parse(is);\n            XLSType xlsTypeResponse = xlsResponse.getXLS();\n            Node node0 = xlsTypeResponse.getDomNode();\n            NodeList nodes1 = node0.getChildNodes();\n            for (int i = 0; i < nodes1.getLength(); i++) {\n                Node node1 = nodes1.item(i);\n                NodeList nodes2 = node1.getChildNodes();\n                for (int j = 0; j < nodes2.getLength(); j++) {\n                    Node node2 = nodes2.item(j);\n                    NodeList nodes3 = node2.getChildNodes();\n                    for (int k = 0; k < nodes3.getLength(); k++) {\n                        Node node3 = nodes3.item(k);\n                        String nodeName = node3.getNodeName();\n                        if (nodeName.equalsIgnoreCase(\"xls:GeocodeResponseList\")) {\n                            net.opengis.xls.GeocodeResponseListDocument gcrld = net.opengis.xls.GeocodeResponseListDocument.Factory.parse(node3);\n                            net.opengis.xls.GeocodeResponseListType geocodeResponseList = gcrld.getGeocodeResponseList();\n                            result.setGeocodeResponseList(geocodeResponseList);\n                        }\n                    }\n                }\n            }\n            is.close();\n        } catch (java.net.ConnectException ce) {\n            JOptionPane.showMessageDialog(null, \"no connection to geocoder\", \"Connection Error\", JOptionPane.ERROR_MESSAGE);\n        } catch (SocketTimeoutException ste) {\n            ste.printStackTrace();\n            errorMessage += \"<p>Time Out Exception, Server is not responding</p>\";\n        } catch (IOException ioe) {\n            ioe.printStackTrace();\n            errorMessage += \"<p>IO Exception</p>\";\n        } catch (XmlException xmle) {\n            xmle.printStackTrace();\n            errorMessage += \"<p>Error occured during parsing the XML response</p>\";\n        }\n        if (!errorMessage.equals(\"\")) {\n            System.out.println(\"\\nerrorMessage: \" + errorMessage + \"\\n\\n\");\n            JLabel label1 = new JLabel(\"<html><head><style type=\\\"text/css\\\"><!--.Stil2 {font-size: 10px;font-weight: bold;}--></style></head><body><span class=\\\"Stil2\\\">Geocoder Error</span></body></html>\");\n            JLabel label2 = new JLabel(\"<html><head><style type=\\\"text/css\\\"><!--.Stil2 {font-size: 10px;font-weight: normal;}--></style></head><body><span class=\\\"Stil2\\\">\" + \"<br>\" + errorMessage + \"<br>\" + \"<p>please check Java console. If problem persits, please report to system manager</p>\" + \"</span></body></html>\");\n            Object[] objects = { label1, label2 };\n            JOptionPane.showMessageDialog(null, objects, \"Error Message\", JOptionPane.ERROR_MESSAGE);\n            return null;\n        }\n        return result;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10264860",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic AddressType[] getAdressFromCRSCoordinate(Point3d crs_position) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public AddressType[] getAdressFromCRSCoordinate(Point3d crs_position) {\n        AddressType[] result = null;\n        String postRequest = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> \\n\" + \"<xls:XLS xmlns:xls=\\\"http://www.opengis.net/xls\\\" xmlns:sch=\\\"http://www.ascc.net/xml/schematron\\\" xmlns:gml=\\\"http://www.opengis.net/gml\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://www.opengis.net/xls \\n\" + \"\thttp://gdi3d.giub.uni-bonn.de/lus/schemas/LocationUtilityService.xsd\\\" version=\\\"1.1\\\"> \\n\" + \"\t<xls:RequestHeader srsName=\\\"EPSG:\" + Navigator.getEpsg_code() + \"\\\"/> \\n\" + \"\t<xls:Request methodName=\\\"ReverseGeocodeRequest\\\" requestID=\\\"123456789\\\" version=\\\"1.1\\\"> \\n\" + \"\t\t<xls:ReverseGeocodeRequest> \\n\" + \"\t\t\t<xls:Position> \\n\" + \"\t\t\t\t<gml:Point srsName=\\\"\" + Navigator.getEpsg_code() + \"\\\"> \\n\" + \"\t\t\t\t\t<gml:pos>\" + crs_position.x + \" \" + crs_position.y + \"</gml:pos> \\n\" + \"\t\t\t\t</gml:Point> \\n\" + \"\t\t\t</xls:Position> \\n\" + \"\t\t\t<xls:ReverseGeocodePreference>StreetAddress</xls:ReverseGeocodePreference> \\n\" + \"\t\t</xls:ReverseGeocodeRequest> \\n\" + \"\t</xls:Request> \\n\" + \"</xls:XLS> \\n\";\n        try {\n            if (Navigator.isVerbose()) {\n                System.out.println(\"contacting \" + serviceEndPoint + \":\\n\" + postRequest);\n            }\n            URL u = new URL(serviceEndPoint);\n            HttpURLConnection urlc = (HttpURLConnection) u.openConnection();\n            urlc.setReadTimeout(Navigator.TIME_OUT);\n            urlc.setAllowUserInteraction(false);\n            urlc.setRequestMethod(\"POST\");\n            urlc.setRequestProperty(\"Content-Type\", \"application/xml\");\n            urlc.setDoOutput(true);\n            urlc.setDoInput(true);\n            urlc.setUseCaches(false);\n            PrintWriter xmlOut = null;\n            xmlOut = new java.io.PrintWriter(urlc.getOutputStream());\n            xmlOut.write(postRequest);\n            xmlOut.flush();\n            xmlOut.close();\n            InputStream is = urlc.getInputStream();\n            XLSDocument xlsResponse = XLSDocument.Factory.parse(is);\n            is.close();\n            XLSType xlsTypeResponse = xlsResponse.getXLS();\n            AbstractBodyType abBodyResponse[] = xlsTypeResponse.getBodyArray();\n            ResponseType response = (ResponseType) abBodyResponse[0].changeType(ResponseType.type);\n            AbstractResponseParametersType respParam = response.getResponseParameters();\n            if (respParam == null) {\n                return null;\n            }\n            ReverseGeocodeResponseType drResp = (ReverseGeocodeResponseType) respParam.changeType(ReverseGeocodeResponseType.type);\n            net.opengis.xls.ReverseGeocodedLocationType[] types = drResp.getReverseGeocodedLocationArray();\n            int num = types.length;\n            if (num > 2) {\n                return null;\n            }\n            result = new AddressType[num];\n            for (int i = 0; i < num; i++) {\n                String addressDescription = \"<b>\";\n                net.opengis.xls.ReverseGeocodedLocationType type = types[i];\n                result[i] = type.getAddress();\n            }\n        } catch (java.net.ConnectException ce) {\n            JOptionPane.showMessageDialog(null, \"no connection to reverse geocoder\", \"Connection Error\", JOptionPane.ERROR_MESSAGE);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return result;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10265164",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic String getLatestVersion(String website) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public String getLatestVersion(String website) {\n        String latestVersion = \"\";\n        try {\n            URL url = new URL(website + \"/version\");\n            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(url.openStream()));\n            String string;\n            while ((string = bufferedReader.readLine()) != null) {\n                latestVersion = string;\n            }\n            bufferedReader.close();\n        } catch (MalformedURLException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n        }\n        return latestVersion;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10266116",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic InputStream retrieveStream(String url) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public InputStream retrieveStream(String url) {\n        HttpGet getRequest = new HttpGet(url);\n        try {\n            HttpResponse getResponse = getClient().execute(getRequest);\n            final int statusCode = getResponse.getStatusLine().getStatusCode();\n            if (statusCode != HttpStatus.SC_OK) {\n                Log.w(getClass().getSimpleName(), \"Error \" + statusCode + \" for URL \" + url);\n                return null;\n            }\n            HttpEntity getResponseEntity = getResponse.getEntity();\n            return getResponseEntity.getContent();\n        } catch (Exception e) {\n            getRequest.abort();\n            Log.w(getClass().getSimpleName(), \"Error for URL \" + url, e);\n        }\n        return null;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10270175",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void main(String[] args) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void main(String[] args) {\n        CookieManager cm = new CookieManager();\n        try {\n            URL url = new URL(\"http://www.hccp.org/test/cookieTest.jsp\");\n            URLConnection conn = url.openConnection();\n            conn.connect();\n            cm.storeCookies(conn);\n            cm.setCookies(url.openConnection());\n        } catch (IOException ioe) {\n            ioe.printStackTrace();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10271558",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void processBasicContent() {\n        String[] packageNames = sourceCollector.getPackageNames();\n        for (int i = 0; i < packageNames.length; i++) {\n            XdcSource[] sources = sourceCollector.getXdcSources(packageNames[i]);\n            File dir = new File(outputDir, packageNames[i]);\n            dir.mkdirs();\n            Set pkgDirs = new HashSet();\n            for (int j = 0; j < sources.length; j++) {\n                XdcSource source = sources[j];\n                Properties patterns = source.getPatterns();\n                if (patterns != null) {\n                    tables.put(\"patterns\", patterns);\n                }\n                pkgDirs.add(source.getFile().getParentFile());\n                DialectHandler dialectHandler = source.getDialectHandler();\n                Writer out = null;\n                try {\n                    String sourceFilePath = source.getFile().getAbsolutePath();\n                    source.setProcessingProperties(baseProperties, j > 0 ? sources[j - 1].getFileName() : null, j < sources.length - 1 ? sources[j + 1].getFileName() : null);\n                    String rootComment = XslUtils.transformToString(sourceFilePath, XSL_PKG + \"/source-header.xsl\", tables);\n                    source.setRootComment(rootComment);\n                    Document htmlDoc = XslUtils.transform(sourceFilePath, encoding, dialectHandler.getXslResourcePath(), tables);\n                    if (LOG.isInfoEnabled()) {\n                        LOG.info(\"Processing source file \" + sourceFilePath);\n                    }\n                    out = IOUtils.getWriter(new File(dir, source.getFile().getName() + \".html\"), docencoding);\n                    XmlUtils.printHtml(out, htmlDoc);\n                    if (sourceProcessor != null) {\n                        sourceProcessor.processSource(source, encoding, docencoding);\n                    }\n                    XdcSource.clearProcessingProperties(baseProperties);\n                } catch (XmlException e) {\n                    LOG.error(e.getMessage(), e);\n                } catch (IOException e) {\n                    LOG.error(e.getMessage(), e);\n                } finally {\n                    if (out != null) {\n                        try {\n                            out.close();\n                        } catch (IOException e) {\n                            LOG.error(e.getMessage(), e);\n                        }\n                    }\n                }\n            }\n            for (Iterator iter = pkgDirs.iterator(); iter.hasNext(); ) {\n                File docFilesDir = new File((File) iter.next(), \"xdc-doc-files\");\n                if (docFilesDir.exists() && docFilesDir.isDirectory()) {\n                    File targetDir = new File(dir, \"xdc-doc-files\");\n                    targetDir.mkdirs();\n                    try {\n                        IOUtils.copyTree(docFilesDir, targetDir);\n                    } catch (IOException e) {\n                        LOG.error(e.getMessage(), e);\n                    }\n                }\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10271560",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void processStylesheetFile() {\n        InputStream in = null;\n        OutputStream out = null;\n        try {\n            String filename;\n            if (line.hasOption(\"stylesheetfile\")) {\n                filename = line.getOptionValue(\"stylesheetfile\");\n                in = new FileInputStream(filename);\n                filename = filename.replace('\\\\', '/');\n                filename = filename.substring(filename.lastIndexOf('/') + 1);\n            } else {\n                ClassLoader cl = this.getClass().getClassLoader();\n                filename = \"stylesheet.css\";\n                in = cl.getResourceAsStream(RESOURCE_PKG + \"/stylesheet.css\");\n            }\n            baseProperties.setProperty(\"stylesheetfilename\", filename);\n            File outFile = new File(outputDir, filename);\n            if (LOG.isInfoEnabled()) {\n                LOG.info(\"Processing generated file \" + outFile.getAbsolutePath());\n            }\n            out = new FileOutputStream(outFile);\n            IOUtils.copy(in, out);\n        } catch (FileNotFoundException e) {\n            LOG.error(e.getMessage(), e);\n        } catch (IOException e) {\n            LOG.error(e.getMessage(), e);\n        } finally {\n            if (in != null) {\n                try {\n                    in.close();\n                } catch (IOException e) {\n                    LOG.error(e.getMessage(), e);\n                }\n            }\n            if (out != null) {\n                try {\n                    out.close();\n                } catch (IOException e) {\n                    LOG.error(e.getMessage(), e);\n                }\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10271561",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void processHelpFile() {\n        InputStream in = null;\n        if (line.hasOption(\"helpfile\")) {\n            OutputStream out = null;\n            try {\n                String filename = line.getOptionValue(\"helpfile\");\n                in = new FileInputStream(filename);\n                filename = filename.replace('\\\\', '/');\n                filename = filename.substring(filename.lastIndexOf('/') + 1);\n                File outFile = new File(outputDir, filename);\n                if (LOG.isInfoEnabled()) {\n                    LOG.info(\"Processing generated file \" + outFile.getAbsolutePath());\n                }\n                out = new FileOutputStream(outFile);\n                baseProperties.setProperty(\"helpfile\", filename);\n                IOUtils.copy(in, out);\n            } catch (FileNotFoundException e) {\n                LOG.error(e.getMessage(), e);\n            } catch (IOException e) {\n                LOG.error(e.getMessage(), e);\n            } finally {\n                if (in != null) {\n                    try {\n                        in.close();\n                    } catch (IOException e) {\n                        LOG.error(e.getMessage(), e);\n                    }\n                }\n                if (out != null) {\n                    try {\n                        out.close();\n                    } catch (IOException e) {\n                        LOG.error(e.getMessage(), e);\n                    }\n                }\n            }\n            return;\n        }\n        Properties props = new Properties(baseProperties);\n        ClassLoader cl = this.getClass().getClassLoader();\n        Document doc = null;\n        try {\n            in = cl.getResourceAsStream(RESOURCE_PKG + \"/help-doc.xml\");\n            doc = XmlUtils.parse(in);\n        } catch (XmlException e) {\n            LOG.error(e.getMessage(), e);\n        } finally {\n            if (in != null) {\n                try {\n                    in.close();\n                } catch (IOException e) {\n                    LOG.error(e.getMessage(), e);\n                }\n            }\n        }\n        transformResource(doc, \"help-doc.xsl\", props, \"help-doc.html\");\n        baseProperties.setProperty(\"helpfile\", \"help-doc.html\");\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10272772",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void getRandomGUID(boolean secure) {\n        MessageDigest md5 = null;\n        StringBuffer sbValueBeforeMD5 = new StringBuffer();\n        try {\n            md5 = MessageDigest.getInstance(\"MD5\");\n        } catch (NoSuchAlgorithmException e) {\n            System.out.println(\"Error: \" + e);\n        }\n        try {\n            long time = System.currentTimeMillis();\n            long rand = 0;\n            if (secure) {\n                rand = mySecureRand.nextLong();\n            } else {\n                rand = myRand.nextLong();\n            }\n            sbValueBeforeMD5.append(s_id);\n            sbValueBeforeMD5.append(\":\");\n            sbValueBeforeMD5.append(Long.toString(time));\n            sbValueBeforeMD5.append(\":\");\n            sbValueBeforeMD5.append(Long.toString(rand));\n            valueBeforeMD5 = sbValueBeforeMD5.toString();\n            md5.update(valueBeforeMD5.getBytes());\n            byte[] array = md5.digest();\n            StringBuffer sb = new StringBuffer();\n            for (int j = 0; j < array.length; ++j) {\n                int b = array[j] & 0xFF;\n                if (b < 0x10) {\n                    sb.append('0');\n                }\n                sb.append(Integer.toHexString(b));\n            }\n            valueAfterMD5 = sb.toString();\n        } catch (Exception e) {\n            System.out.println(\"Error:\" + e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10277293",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "byte[] calculateDigest(String value) {\n        try {\n            MessageDigest mg = MessageDigest.getInstance(\"SHA1\");\n            mg.update(value.getBytes());\n            return mg.digest();\n        } catch (Exception e) {\n            throw Bark.unchecker(e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10277959",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static String scramble(String text) {\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n            md.update(text.getBytes(\"UTF-8\"));\n            StringBuffer sb = new StringBuffer();\n            for (byte b : md.digest()) sb.append(Integer.toString(b & 0xFF, 16));\n            return sb.toString();\n        } catch (UnsupportedEncodingException e) {\n            return null;\n        } catch (NoSuchAlgorithmException e) {\n            return null;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10281203",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void makeRead(String user, long databaseID, long time) throws SQLException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void makeRead(String user, long databaseID, long time) throws SQLException {\n        String query = \"replace into fs.read_post (post, user, read_date) values (?, ?, ?)\";\n        ensureConnection();\n        PreparedStatement statement = m_connection.prepareStatement(query);\n        try {\n            statement.setLong(1, databaseID);\n            statement.setString(2, user);\n            statement.setTimestamp(3, new Timestamp(time));\n            int count = statement.executeUpdate();\n            if (0 == count) throw new SQLException(\"Nothing updated.\");\n            m_connection.commit();\n        } catch (SQLException e) {\n            m_connection.rollback();\n            throw e;\n        } finally {\n            statement.close();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10287986",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static boolean encodeFileToFile(String infile, String outfile) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static boolean encodeFileToFile(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] buffer = new byte[65536];\n            int read = -1;\n            while ((read = in.read(buffer)) >= 0) {\n                out.write(buffer, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10287987",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static boolean decodeFileToFile(String infile, String outfile) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static boolean decodeFileToFile(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] buffer = new byte[65536];\n            int read = -1;\n            while ((read = in.read(buffer)) >= 0) {\n                out.write(buffer, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10288282",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic String getMarketInfo() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public String getMarketInfo() {\n        try {\n            URL url = new URL(\"http://api.eve-central.com/api/evemon\");\n            BufferedReader s = new BufferedReader(new InputStreamReader(url.openStream()));\n            String line = \"\";\n            String xml = \"\";\n            while ((line = s.readLine()) != null) {\n                xml += line;\n            }\n            return xml;\n        } catch (IOException ex) {\n            ex.printStackTrace();\n        }\n        return null;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10288424",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String encrypt(String x) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String encrypt(String x) throws Exception {\n        MessageDigest mdEnc = MessageDigest.getInstance(\"SHA-1\");\n        mdEnc.update(x.getBytes(), 0, x.length());\n        String md5 = new BigInteger(1, mdEnc.digest()).toString(16);\n        return md5;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10293577",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void getRandomGUID(boolean secure) {\n        MessageDigest md5 = null;\n        StringBuffer sbValueBeforeMD5 = new StringBuffer();\n        try {\n            md5 = MessageDigest.getInstance(\"MD5\");\n        } catch (NoSuchAlgorithmException e) {\n        }\n        try {\n            long time = System.currentTimeMillis();\n            long rand = 0;\n            if (secure) {\n                rand = mySecureRand.nextLong();\n            } else {\n                rand = random.nextLong();\n            }\n            sbValueBeforeMD5.append(sid);\n            sbValueBeforeMD5.append(\":\");\n            sbValueBeforeMD5.append(Long.toString(time));\n            sbValueBeforeMD5.append(\":\");\n            sbValueBeforeMD5.append(Long.toString(rand));\n            valueBeforeMD5 = sbValueBeforeMD5.toString();\n            md5.update(valueBeforeMD5.getBytes());\n            byte[] array = md5.digest();\n            StringBuffer sb = new StringBuffer();\n            for (int j = 0; j < array.length; ++j) {\n                int b = array[j] & 0xFF;\n                if (b < 0x10) sb.append('0');\n                sb.append(Integer.toHexString(b));\n            }\n            valueAfterMD5 = sb.toString();\n        } catch (Exception e) {\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10294554",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static boolean downloadFile(String srcUri, String srcDest) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static boolean downloadFile(String srcUri, String srcDest) {\n        try {\n            URL url = new URL(srcUri);\n            InputStream is = url.openStream();\n            BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(srcDest));\n            byte[] buff = new byte[10000];\n            int b;\n            while ((b = is.read(buff)) > 0) bos.write(buff, 0, b);\n            is.close();\n            bos.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n        return true;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10295000",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String getByUrl(String urlStr, String para) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String getByUrl(String urlStr, String para) {\n        URL url;\n        StringBuffer html = new StringBuffer(\"\");\n        try {\n            url = new URL(urlStr);\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n            connection.setRequestMethod(\"POST\");\n            connection.setDoOutput(true);\n            OutputStreamWriter out = new OutputStreamWriter(connection.getOutputStream(), \"8859_1\");\n            out.write(para);\n            out.flush();\n            out.close();\n            System.out.println(\"para:\" + para);\n            InputStream is = url.openStream();\n            BufferedReader br = new BufferedReader(new InputStreamReader(is));\n            String line = \"\";\n            line = br.readLine();\n            while (line != null) {\n                html.append(line + \"\\n\");\n                line = br.readLine();\n            }\n        } catch (MalformedURLException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return html.toString();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10298327",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private String encode(String arg) {\n        try {\n            final MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n            digest.update(arg.getBytes());\n            byte[] md5sum = digest.digest();\n            final BigInteger bigInt = new BigInteger(1, md5sum);\n            final String output = bigInt.toString(16);\n            return output;\n        } catch (NoSuchAlgorithmException e) {\n            throw new IllegalStateException(\"MD5 required: \" + e.getMessage(), e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10298747",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void getRandomGUID(boolean secure) {\n        MessageDigest md5 = null;\n        StringBuffer sbValueBeforeMD5 = new StringBuffer();\n        try {\n            md5 = MessageDigest.getInstance(\"MD5\");\n        } catch (NoSuchAlgorithmException e) {\n            System.out.println(\"Error: \" + e);\n        }\n        try {\n            long time = System.currentTimeMillis();\n            long rand = 0;\n            if (secure) {\n                rand = mySecureRand.nextLong();\n            } else {\n                rand = myRand.nextLong();\n            }\n            sbValueBeforeMD5.append(s_id);\n            sbValueBeforeMD5.append(\":\");\n            sbValueBeforeMD5.append(Long.toString(time));\n            sbValueBeforeMD5.append(\":\");\n            sbValueBeforeMD5.append(Long.toString(rand));\n            valueBeforeMD5 = sbValueBeforeMD5.toString();\n            md5.update(valueBeforeMD5.getBytes());\n            byte[] array = md5.digest();\n            StringBuffer sb = new StringBuffer();\n            for (int j = 0; j < array.length; ++j) {\n                int b = array[j] & 0xFF;\n                if (b < 0x10) sb.append('0');\n                sb.append(Integer.toHexString(b));\n            }\n            valueAfterMD5 = sb.toString();\n        } catch (Exception e) {\n            System.out.println(\"Error:\" + e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10301544",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static Set<Class<?>> getClasses(String pack) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static Set<Class<?>> getClasses(String pack) {\n        Set<Class<?>> classes = new LinkedHashSet<Class<?>>();\n        boolean recursive = true;\n        String packageName = pack;\n        String packageDirName = packageName.replace('.', '/');\n        Enumeration<URL> dirs;\n        try {\n            dirs = Thread.currentThread().getContextClassLoader().getResources(packageDirName);\n            while (dirs.hasMoreElements()) {\n                URL url = dirs.nextElement();\n                String protocol = url.getProtocol();\n                if (\"file\".equals(protocol)) {\n                    String filePath = URLDecoder.decode(url.getFile(), \"UTF-8\");\n                    findAndAddClassesInPackageByFile(packageName, filePath, recursive, classes);\n                } else if (\"jar\".equals(protocol)) {\n                    JarFile jar;\n                    try {\n                        jar = ((JarURLConnection) url.openConnection()).getJarFile();\n                        Enumeration<JarEntry> entries = jar.entries();\n                        while (entries.hasMoreElements()) {\n                            JarEntry entry = entries.nextElement();\n                            String name = entry.getName();\n                            if (name.charAt(0) == '/') {\n                                name = name.substring(1);\n                            }\n                            if (name.startsWith(packageDirName)) {\n                                int idx = name.lastIndexOf('/');\n                                if (idx != -1) {\n                                    packageName = name.substring(0, idx).replace('/', '.');\n                                }\n                                if ((idx != -1) || recursive) {\n                                    if (name.endsWith(\".class\") && !entry.isDirectory()) {\n                                        String className = name.substring(packageName.length() + 1, name.length() - 6);\n                                        try {\n                                            classes.add(Class.forName(packageName + '.' + className));\n                                        } catch (ClassNotFoundException e) {\n                                            System.out.println(\"\u6dfb\u52a0\u7528\u6237\u81ea\u5b9a\u4e49\u89c6\u56fe\u7c7b\u9519\u8bef \u627e\u4e0d\u5230\u6b64\u7c7b\u7684.class\u6587\u4ef6\");\n                                            e.printStackTrace();\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    } catch (IOException e) {\n                        System.out.println(\"\u5728\u626b\u63cf\u7528\u6237\u5b9a\u4e49\u89c6\u56fe\u65f6\u4ecejar\u5305\u83b7\u53d6\u6587\u4ef6\u51fa\u9519\");\n                        e.printStackTrace();\n                    }\n                }\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return classes;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10303667",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void copy(final String fileName) throws FileIOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n    public void copy(final String fileName) throws FileIOException {\n        final long savedCurrentPositionInFile = currentPositionInFile;\n        if (opened) {\n            closeImpl();\n        }\n        final FileInputStream fis;\n        try {\n            fis = new FileInputStream(file);\n        } catch (FileNotFoundException exception) {\n            throw HELPER_FILE_UTIL.fileIOException(FAILED_OPEN + file, file, exception);\n        }\n        final File destinationFile = new File(fileName);\n        final FileOutputStream fos;\n        try {\n            fos = new FileOutputStream(destinationFile);\n        } catch (FileNotFoundException exception) {\n            throw HELPER_FILE_UTIL.fileIOException(FAILED_OPEN + destinationFile, destinationFile, exception);\n        }\n        try {\n            final byte[] buf = new byte[1024];\n            int readLength = 0;\n            while ((readLength = fis.read(buf)) != -1) {\n                fos.write(buf, 0, readLength);\n            }\n        } catch (IOException exception) {\n            throw HELPER_FILE_UTIL.fileIOException(\"failed copy from \" + file + \" to \" + destinationFile, null, exception);\n        } finally {\n            try {\n                if (fis != null) {\n                    fis.close();\n                }\n            } catch (Exception exception) {\n            }\n            try {\n                if (fos != null) {\n                    fos.close();\n                }\n            } catch (Exception exception) {\n            }\n        }\n        if (opened) {\n            openImpl();\n            seek(savedCurrentPositionInFile);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10310530",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "protected UnicodeList(URL url) {\n        try {\n            BufferedReader br = new BufferedReader(new InputStreamReader(new GZIPInputStream(url.openStream())));\n            String line;\n            line = br.readLine();\n            chars = new ArrayList();\n            while ((line = br.readLine()) != null) {\n                String[] parts = GUIHelper.split(line, \";\");\n                if (parts[0].length() >= 5) continue;\n                if (parts.length < 2 || parts[0].length() != 4) {\n                    System.out.println(\"Strange line: \" + line);\n                } else {\n                    if (parts.length > 10 && parts[1].equals(\"<control>\")) {\n                        parts[1] = parts[1] + \": \" + parts[10];\n                    }\n                    try {\n                        Integer.parseInt(parts[0], 16);\n                        chars.add(parts[0] + parts[1]);\n                    } catch (NumberFormatException ex) {\n                        System.out.println(\"No number: \" + line);\n                    }\n                }\n            }\n            br.close();\n        } catch (FileNotFoundException ex) {\n        } catch (IOException ex) {\n            ex.printStackTrace();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10313620",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void read(Model model, String url) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void read(Model model, String url) {\n        try {\n            URLConnection conn = new URL(url).openConnection();\n            String encoding = conn.getContentEncoding();\n            if (encoding == null) {\n                read(model, conn.getInputStream(), url);\n            } else {\n                read(model, new InputStreamReader(conn.getInputStream(), encoding), url);\n            }\n        } catch (IOException e) {\n            throw new JenaException(e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10313906",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private File copyFile(File file, String newName, File folder) {\n        File newFile = null;\n        if (!file.exists()) {\n            System.out.println(\"File \" + file + \" does not exist\");\n            return null;\n        }\n        if (file.isFile()) {\n            BufferedOutputStream out = null;\n            BufferedInputStream in = null;\n            try {\n                in = new BufferedInputStream(new FileInputStream(file));\n                newFile = new File(folder, newName);\n                if (!newFile.exists()) {\n                    newFile.createNewFile();\n                }\n                out = new BufferedOutputStream(new FileOutputStream(newFile));\n                int read;\n                byte[] buffer = new byte[8192];\n                while ((read = in.read(buffer)) != -1) {\n                    out.write(buffer, 0, read);\n                }\n                updateTreeUI();\n            } catch (IOException ex) {\n                Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);\n            } finally {\n                try {\n                    if (in != null) {\n                        in.close();\n                    }\n                    if (out != null) {\n                        out.close();\n                    }\n                } catch (IOException ex) {\n                    Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);\n                }\n            }\n        } else if (file.isDirectory()) {\n            newFile = new File(folder, newName);\n            if (!newFile.exists()) {\n                newFile.mkdir();\n            }\n            for (File f : file.listFiles()) {\n                copyFile(f, f.getName(), newFile);\n            }\n        }\n        return newFile;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10315160",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void saveSharedFiles(List<FrostSharedFileItem> sfFiles) throws SQLException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void saveSharedFiles(List<FrostSharedFileItem> sfFiles) throws SQLException {\n        Connection conn = AppLayerDatabase.getInstance().getPooledConnection();\n        try {\n            conn.setAutoCommit(false);\n            Statement s = conn.createStatement();\n            s.executeUpdate(\"DELETE FROM SHAREDFILES\");\n            s.close();\n            s = null;\n            PreparedStatement ps = conn.prepareStatement(\"INSERT INTO SHAREDFILES (\" + \"path,size,fnkey,sha,owner,comment,rating,keywords,\" + \"lastuploaded,uploadcount,reflastsent,requestlastreceived,requestsreceivedcount,lastmodified) \" + \"VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)\");\n            for (Iterator<FrostSharedFileItem> i = sfFiles.iterator(); i.hasNext(); ) {\n                FrostSharedFileItem sfItem = i.next();\n                int ix = 1;\n                ps.setString(ix++, sfItem.getFile().getPath());\n                ps.setLong(ix++, sfItem.getFileSize());\n                ps.setString(ix++, sfItem.getChkKey());\n                ps.setString(ix++, sfItem.getSha());\n                ps.setString(ix++, sfItem.getOwner());\n                ps.setString(ix++, sfItem.getComment());\n                ps.setInt(ix++, sfItem.getRating());\n                ps.setString(ix++, sfItem.getKeywords());\n                ps.setLong(ix++, sfItem.getLastUploaded());\n                ps.setInt(ix++, sfItem.getUploadCount());\n                ps.setLong(ix++, sfItem.getRefLastSent());\n                ps.setLong(ix++, sfItem.getRequestLastReceived());\n                ps.setInt(ix++, sfItem.getRequestsReceived());\n                ps.setLong(ix++, sfItem.getLastModified());\n                ps.executeUpdate();\n            }\n            ps.close();\n            conn.commit();\n            conn.setAutoCommit(true);\n        } catch (Throwable t) {\n            logger.log(Level.SEVERE, \"Exception during save\", t);\n            try {\n                conn.rollback();\n            } catch (Throwable t1) {\n                logger.log(Level.SEVERE, \"Exception during rollback\", t1);\n            }\n            try {\n                conn.setAutoCommit(true);\n            } catch (Throwable t1) {\n            }\n        } finally {\n            AppLayerDatabase.getInstance().givePooledConnection(conn);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10315215",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic final void testT4CClientWriter() throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public final void testT4CClientWriter() throws Exception {\n        InputStream is = ClassLoader.getSystemResourceAsStream(this.testFileName);\n        T4CClientReader reader = new T4CClientReader(is, rc);\n        File tmpFile = File.createTempFile(\"barde\", \".log\", this.tmpDir);\n        System.out.println(\"tmp=\" + tmpFile.getAbsolutePath());\n        T4CClientWriter writer = new T4CClientWriter(new FileOutputStream(tmpFile), rc);\n        for (Message m = reader.read(); m != null; m = reader.read()) writer.write(m);\n        writer.close();\n        InputStream fa = ClassLoader.getSystemResourceAsStream(this.testFileName);\n        FileInputStream fb = new FileInputStream(tmpFile);\n\t\tfor (int ba = fa.read(); ba != -1; ba = fa.read()) assertEquals(ba, fb.read());\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10318446",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copy(String sourceFile, String targetFile) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copy(String sourceFile, String targetFile) throws IOException {\n        FileChannel sourceChannel = new FileInputStream(sourceFile).getChannel();\n        FileChannel targetChannel = new FileOutputStream(targetFile).getChannel();\n        targetChannel.transferFrom(sourceChannel, 0, sourceChannel.size());\n        sourceChannel.close();\n        targetChannel.close();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10318835",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static synchronized String Encrypt(String plaintextPassword) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static synchronized String Encrypt(String plaintextPassword) throws Exception {\n        MessageDigest md = null;\n        try {\n            md = MessageDigest.getInstance(\"SHA\");\n        } catch (Exception error) {\n            throw new Exception(error.getMessage());\n        }\n        try {\n            md.update(plaintextPassword.getBytes(\"UTF-8\"));\n        } catch (Exception e) {\n            throw new Exception(e.getMessage());\n        }\n        byte raw[] = md.digest();\n        String hash = (new BASE64Encoder()).encode(raw);\n        return hash;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10329098",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void setPilot(PilotData pilotData) throws UsernameNotValidException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void setPilot(PilotData pilotData) throws UsernameNotValidException {\n        try {\n            if (pilotData.username.trim().equals(\"\") || pilotData.password.trim().equals(\"\")) throw new UsernameNotValidException(1, \"Username or password missing\");\n            PreparedStatement psta;\n            if (pilotData.id == 0) {\n                psta = jdbc.prepareStatement(\"INSERT INTO pilot \" + \"(name, address1, address2, zip, city, state, country, birthdate, \" + \"pft_theory, pft, medical, passenger, instructor, loc_language, \" + \"loc_country, loc_variant, username, password, id) \" + \"VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,nextval('pilot_id_seq'))\");\n            } else {\n                psta = jdbc.prepareStatement(\"UPDATE pilot SET \" + \"name = ?, address1 = ?, address2 = ?, \" + \"zip = ?, city = ?, state = ?, country = ?, birthdate = ?, pft_theory = ?,\" + \"pft = ?, medical = ?, passenger = ?, instructor = ?, loc_language = ?, \" + \"loc_country = ?, loc_variant = ?, username = ?, password = ? \" + \"WHERE id = ?\");\n            }\n            psta.setString(1, pilotData.name);\n            psta.setString(2, pilotData.address1);\n            psta.setString(3, pilotData.address2);\n            psta.setString(4, pilotData.zip);\n            psta.setString(5, pilotData.city);\n            psta.setString(6, pilotData.state);\n            psta.setString(7, pilotData.country);\n            if (pilotData.birthdate != null) psta.setLong(8, pilotData.birthdate.getTime()); else psta.setNull(8, java.sql.Types.INTEGER);\n            if (pilotData.pft_theory != null) psta.setLong(9, pilotData.pft_theory.getTime()); else psta.setNull(9, java.sql.Types.INTEGER);\n            if (pilotData.pft != null) psta.setLong(10, pilotData.pft.getTime()); else psta.setNull(10, java.sql.Types.INTEGER);\n            if (pilotData.medical != null) psta.setLong(11, pilotData.medical.getTime()); else psta.setNull(11, java.sql.Types.INTEGER);\n            if (pilotData.passenger) psta.setString(12, \"Y\"); else psta.setString(12, \"N\");\n            if (pilotData.instructor) psta.setString(13, \"Y\"); else psta.setString(13, \"N\");\n            psta.setString(14, pilotData.loc_language);\n            psta.setString(15, pilotData.loc_country);\n            psta.setString(16, pilotData.loc_variant);\n            psta.setString(17, pilotData.username);\n            psta.setString(18, pilotData.password);\n            if (pilotData.id != 0) {\n                psta.setInt(19, pilotData.id);\n            }\n            psta.executeUpdate();\n            jdbc.commit();\n        } catch (SQLException sql) {\n            jdbc.rollback();\n            sql.printStackTrace();\n            throw new UsernameNotValidException(2, \"Username allready exist\");\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10330323",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void getFile(String url, String filepath) throws BggException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void getFile(String url, String filepath) throws BggException {\n        System.out.println(url);\n        int retry = retryCount + 1;\n        lastURL = url;\n        for (retriedCount = 0; retriedCount < retry; retriedCount++) {\n            int responseCode = -1;\n            try {\n                HttpURLConnection con = null;\n                BufferedInputStream bis = null;\n                OutputStream osw = null;\n                try {\n                    con = (HttpURLConnection) new URL(url).openConnection();\n                    con.setDoInput(true);\n                    setHeaders(con);\n                    con.setRequestMethod(\"GET\");\n                    responseCode = con.getResponseCode();\n                    bis = new BufferedInputStream(con.getInputStream());\n                    int data;\n                    BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(filepath));\n                    while ((data = bis.read()) != -1) bos.write(data);\n                    bos.flush();\n                    bos.close();\n                    break;\n                } finally {\n                    try {\n                        bis.close();\n                    } catch (Exception ignore) {\n                    }\n                    try {\n                        osw.close();\n                    } catch (Exception ignore) {\n                    }\n                    try {\n                        con.disconnect();\n                    } catch (Exception ignore) {\n                    }\n                }\n            } catch (IOException ioe) {\n                if (responseCode == UNAUTHORIZED || responseCode == FORBIDDEN) {\n                    throw new BggException(ioe.getMessage(), responseCode);\n                }\n                if (retriedCount == retryCount) {\n                    throw new BggException(ioe.getMessage(), responseCode);\n                }\n            }\n            try {\n                Thread.sleep(retryIntervalMillis);\n            } catch (InterruptedException ignore) {\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10330324",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private Response httpRequest(String url, String charset) throws BggException {\n        int retry = retryCount + 1;\n        Response res = null;\n        lastURL = url;\n        for (retriedCount = 0; retriedCount < retry; retriedCount++) {\n            int responseCode = -1;\n            try {\n                HttpURLConnection con = null;\n                InputStream is = null;\n                OutputStream osw = null;\n                try {\n                    con = (HttpURLConnection) new URL(url).openConnection();\n                    con.setDoInput(true);\n                    setHeaders(con);\n                    con.setRequestMethod(\"GET\");\n                    responseCode = con.getResponseCode();\n                    is = con.getInputStream();\n                    if (charset != null) {\n                        res = new Response(con.getResponseCode(), is, charset);\n                    } else {\n                        res = new Response(con.getResponseCode(), is);\n                    }\n                    break;\n                } finally {\n                    try {\n                        is.close();\n                    } catch (Exception ignore) {\n                    }\n                    try {\n                        osw.close();\n                    } catch (Exception ignore) {\n                    }\n                    try {\n                        con.disconnect();\n                    } catch (Exception ignore) {\n                    }\n                }\n            } catch (IOException ioe) {\n                if (responseCode == UNAUTHORIZED || responseCode == FORBIDDEN) {\n                    throw new BggException(ioe.getMessage(), responseCode);\n                }\n                if (retriedCount == retryCount) {\n                    throw new BggException(ioe.getMessage(), responseCode);\n                }\n            }\n            try {\n                Thread.sleep(retryIntervalMillis);\n            } catch (InterruptedException ignore) {\n            }\n        }\n        return res;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10330989",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic DialogueSymbole(final JFrame jframe, final Element el, final String srcAttr) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public DialogueSymbole(final JFrame jframe, final Element el, final String srcAttr) {\n        super(jframe, JaxeResourceBundle.getRB().getString(\"symbole.Insertion\"), true);\n        this.jframe = jframe;\n        this.el = el;\n        final String nomf = el.getAttribute(srcAttr);\n        boolean applet = false;\n        try {\n            final File dossierSymboles = new File(\"symboles\");\n            if (!dossierSymboles.exists()) {\n                JOptionPane.showMessageDialog(jframe, JaxeResourceBundle.getRB().getString(\"erreur.SymbolesNonTrouve\"), JaxeResourceBundle.getRB().getString(\"erreur.Erreur\"), JOptionPane.ERROR_MESSAGE);\n                return;\n            }\n            liste = chercherImages(dossierSymboles);\n        } catch (AccessControlException ex) {\n            applet = true;\n            try {\n                final URL urlListe = DialogueSymbole.class.getClassLoader().getResource(\"symboles/liste.txt\");\n                BufferedReader in = new BufferedReader(new InputStreamReader(urlListe.openStream()));\n                final ArrayList<File> listeImages = new ArrayList<File>();\n                String ligne = null;\n                while ((ligne = in.readLine()) != null) {\n                    if (!\"\".equals(ligne.trim())) listeImages.add(new File(\"symboles/\" + ligne.trim()));\n                }\n                liste = listeImages.toArray(new File[listeImages.size()]);\n            } catch (IOException ex2) {\n                LOG.error(ex2);\n            }\n        }\n        final JPanel cpane = new JPanel(new BorderLayout());\n        setContentPane(cpane);\n        final GridLayout grille = new GridLayout((int) Math.ceil(liste.length / 13.0), 13, 10, 10);\n        final JPanel spane = new JPanel(grille);\n        cpane.add(spane, BorderLayout.CENTER);\n        ichoix = 0;\n        final MyMouseListener ecouteur = new MyMouseListener();\n        labels = new JLabel[liste.length];\n        for (int i = 0; i < liste.length; i++) {\n            if (nomf != null && !\"\".equals(nomf) && nomf.equals(liste[i].getPath())) ichoix = i;\n            URL urlIcone;\n            try {\n                if (applet) {\n                    final URL urlListe = DialogueSymbole.class.getClassLoader().getResource(\"symboles/liste.txt\");\n                    final String baseURL = urlListe.toString().substring(0, urlListe.toString().indexOf(\"symboles/liste.txt\"));\n                    urlIcone = new URL(baseURL + liste[i].getPath());\n                } else urlIcone = liste[i].toURL();\n            } catch (MalformedURLException ex) {\n                LOG.error(ex);\n                break;\n            }\n            final Icon ic = new ImageIcon(urlIcone);\n            final JLabel label = new JLabel(ic);\n            label.addMouseListener(ecouteur);\n            labels[i] = label;\n            spane.add(label);\n        }\n        final JPanel bpane = new JPanel(new FlowLayout(FlowLayout.RIGHT));\n        final JButton boutonAnnuler = new JButton(JaxeResourceBundle.getRB().getString(\"bouton.Annuler\"));\n        boutonAnnuler.addActionListener(this);\n        boutonAnnuler.setActionCommand(\"Annuler\");\n        bpane.add(boutonAnnuler);\n        final JButton boutonOK = new JButton(JaxeResourceBundle.getRB().getString(\"bouton.OK\"));\n        boutonOK.addActionListener(this);\n        boutonOK.setActionCommand(\"OK\");\n        bpane.add(boutonOK);\n        cpane.add(bpane, BorderLayout.SOUTH);\n        getRootPane().setDefaultButton(boutonOK);\n        choix(ichoix);\n        pack();\n        if (jframe != null) {\n            final Rectangle r = jframe.getBounds();\n            setLocation(r.x + r.width / 4, r.y + r.height / 4);\n        } else {\n            final Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();\n            setLocation((screen.width - getSize().width) / 3, (screen.height - getSize().height) / 3);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10332410",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "protected EntailmentType invokeHttp(String stuff) {\n        String data = encode(\"theory\") + \"=\" + encode(stuff);\n        URL url;\n        EntailmentType result = EntailmentType.unkown;\n        try {\n            url = new URL(httpAddress);\n        } catch (MalformedURLException e) {\n            throw new RuntimeException(\"FOL Reasoner not correclty configured: '\" + httpAddress + \"' is not an URL\");\n        }\n        log.debug(\"sending theory to endpoint: \" + url);\n        try {\n            URLConnection conn = url.openConnection();\n            conn.setDoOutput(true);\n            OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());\n            wr.write(data);\n            wr.flush();\n            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n            String line;\n            while ((line = rd.readLine()) != null) {\n                log.debug(\"resultline: \" + line);\n                if (line.contains(\"Proof found\")) {\n                    result = EntailmentType.entailed;\n                }\n                if (line.contains(\"Ran out of time\")) {\n                    result = EntailmentType.unkown;\n                }\n                if (line.contains(\"Completion found\")) {\n                    result = EntailmentType.notEntailed;\n                }\n            }\n            wr.close();\n            rd.close();\n        } catch (IOException io) {\n            throw new RuntimeException(\"the remote reasoner did not respond:\" + io, io);\n        }\n        return result;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10332951",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void loginSkyDrive() throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void loginSkyDrive() throws Exception {\n        System.out.println(\"login \");\n        u = new URL(loginurl);\n        uc = (HttpURLConnection) u.openConnection();\n        uc.setRequestProperty(\"Cookie\", msprcookie + \";\" + mspokcookie);\n        uc.setDoOutput(true);\n        uc.setRequestMethod(\"POST\");\n        uc.setInstanceFollowRedirects(false);\n        pw = new PrintWriter(new OutputStreamWriter(uc.getOutputStream()), true);\n        pw.print(\"login=dinesh007007%40hotmail.com&passwd=&SI=Sign+in&type=11&LoginOptions=3&NewUser=1&MEST=&PPSX=Passpor&PPFT=\" + ppft + \"&PwdPad=&sso=&i1=&i2=1&i3=10524&i4=&i12=1&i13=&i14=437&i15=624&i16=3438\");\n        pw.flush();\n        pw.close();\n        System.out.println(uc.getResponseCode());\n        Map<String, List<String>> headerFields = uc.getHeaderFields();\n        if (headerFields.containsKey(\"Set-Cookie\")) {\n            List<String> header = headerFields.get(\"Set-Cookie\");\n            for (int i = 0; i < header.size(); i++) {\n                tmp = header.get(i);\n                System.out.println(tmp);\n            }\n        }\n        location = uc.getHeaderField(\"Location\");\n        System.out.println(\"Location : \" + location);\n        System.out.println(\"going to open paaport page\");\n        DefaultHttpClient d = new DefaultHttpClient();\n        HttpGet hg = new HttpGet(\"https://skydrive.live.com\");\n        hg.setHeader(\"Cookie\", msprcookie + \";\" + mspokcookie);\n        HttpResponse execute = d.execute(hg);\n        HttpEntity entity = execute.getEntity();\n        System.out.println(EntityUtils.toString(entity));\n        System.out.println(execute.getStatusLine());\n        Header[] allHeaders = execute.getAllHeaders();\n        for (int i = 0; i < allHeaders.length; i++) {\n            System.out.println(allHeaders[i].getName() + \" : \" + allHeaders[i].getValue());\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10337386",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "protected void zipFile(File from, File to) throws IOException {\n        FileInputStream in = new FileInputStream(from);\n        ZipOutputStream out = new ZipOutputStream(new FileOutputStream(to));\n        byte[] buffer = new byte[4096];\n        int bytes_read;\n        while ((bytes_read = in.read(buffer)) != -1) out.write(buffer, 0, bytes_read);\n        in.close();\n        out.close();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10337387",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "protected void zipDirectory(File dir, File zipfile) throws IOException, IllegalArgumentException {\n        if (!dir.isDirectory()) throw new IllegalArgumentException(\"Compress: not a directory:  \" + dir);\n        String[] entries = dir.list();\n        byte[] buffer = new byte[4096];\n        int bytes_read;\n        ZipOutputStream out = new ZipOutputStream(new FileOutputStream(zipfile));\n        for (int i = 0; i < entries.length; i++) {\n            File f = new File(dir, entries[i]);\n            if (f.isDirectory()) continue;\n            FileInputStream in = new FileInputStream(f);\n            ZipEntry entry = new ZipEntry(f.getPath());\n            out.putNextEntry(entry);\n            while ((bytes_read = in.read(buffer)) != -1) out.write(buffer, 0, bytes_read);\n            in.close();\n        }\n        out.close();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10345032",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private String GetStringFromURL(String URL) {\n        InputStream in = null;\n        InputStreamReader inputStreamReader = null;\n        BufferedReader bufferedReader = null;\n        String outstring = \"\";\n        try {\n            java.net.URL url = new java.net.URL(URL);\n            in = url.openStream();\n            inputStreamReader = new InputStreamReader(in);\n            bufferedReader = new BufferedReader(inputStreamReader);\n            StringBuffer out = new StringBuffer(\"\");\n            String nextLine;\n            String newline = System.getProperty(\"line.separator\");\n            while ((nextLine = bufferedReader.readLine()) != null) {\n                out.append(nextLine);\n                out.append(newline);\n            }\n            outstring = new String(out);\n        } catch (IOException e) {\n            System.out.println(\"Failed to read from \" + URL);\n            outstring = \"\";\n        } finally {\n            try {\n                bufferedReader.close();\n                inputStreamReader.close();\n            } catch (Exception e) {\n            }\n        }\n        return outstring;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10348730",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void installBinaryFile(File source, File destination) {\n        byte[] buffer = new byte[8192];\n        FileInputStream fis = null;\n        FileOutputStream fos = null;\n        try {\n            fis = new FileInputStream(source);\n            fos = new FileOutputStream(destination);\n            int read;\n            while ((read = fis.read(buffer)) != -1) {\n                fos.write(buffer, 0, read);\n            }\n        } catch (FileNotFoundException e) {\n        } catch (IOException e) {\n            new ProjectCreateException(e, \"Failed to read binary file: %1$s\", source.getAbsolutePath());\n        } finally {\n            if (fis != null) {\n                try {\n                    fis.close();\n                } catch (IOException e) {\n                }\n            }\n            if (fos != null) {\n                try {\n                    fos.close();\n                } catch (IOException e) {\n                }\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10349782",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static byte[] encode(String origin, String algorithm) throws NoSuchAlgorithmException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static byte[] encode(String origin, String algorithm) throws NoSuchAlgorithmException {\n        String resultStr = null;\n        resultStr = new String(origin);\n        MessageDigest md = MessageDigest.getInstance(algorithm);\n        md.update(resultStr.getBytes());\n        return md.digest();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10349788",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static boolean checkEncode(String origin, byte[] mDigest, String algorithm) throws NoSuchAlgorithmException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static boolean checkEncode(String origin, byte[] mDigest, String algorithm) throws NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(algorithm);\n        md.update(origin.getBytes());\n        if (MessageDigest.isEqual(mDigest, md.digest())) {\n            return true;\n        } else {\n            return false;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10350952",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic synchronized String encrypt(String plaintext) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public synchronized String encrypt(String plaintext) throws Exception {\n        MessageDigest md = null;\n        try {\n            md = MessageDigest.getInstance(\"SHA\");\n        } catch (NoSuchAlgorithmException e) {\n            throw new Exception(e.getMessage());\n        }\n        try {\n            md.update(plaintext.getBytes(\"UTF-8\"));\n        } catch (UnsupportedEncodingException e) {\n            throw new Exception(e.getMessage());\n        }\n        byte raw[] = md.digest();\n        String hash = (new BASE64Encoder()).encode(raw);\n        return hash;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10353862",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic boolean copyTo(String targetFilePath) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public boolean copyTo(String targetFilePath) {\n        try {\n            FileInputStream srcFile = new FileInputStream(filePath);\n            FileOutputStream target = new FileOutputStream(targetFilePath);\n            byte[] buff = new byte[1024];\n            int readed = -1;\n            while ((readed = srcFile.read(buff)) > 0) target.write(buff, 0, readed);\n            srcFile.close();\n            target.close();\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01035597",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private Concept fetchDataNeeded(String conceptUri) {\n        if (cache.size() > MAX_CACHE) cache.clear();\n        if (cache.containsKey(conceptUri)) return this.cache.get(conceptUri);\n        try {\n            URL url = new URL(conceptUri);\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n            connection.setInstanceFollowRedirects(true);\n            connection.setRequestProperty(\"Accept\", \"application/rdf+xml\");\n            if (connection.getResponseCode() == HttpURLConnection.HTTP_OK && connection.getContentType().contains(\"application/rdf+xml\")) {\n                InputStream is = connection.getInputStream();\n                HashMap<String, String> parameters = new HashMap<String, String>();\n                parameters.put(\"uri\", conceptUri);\n                Transformer tf = this.templates.getDAOTransformer(keyTemplates, parameters);\n                DOMResult outputTarget = new DOMResult();\n                tf.transform(new StreamSource(is), outputTarget);\n                Concept concept = ConceptXMLBind.getInstance().restoreConcept(outputTarget.getNode());\n                this.cache.put(conceptUri, concept);\n                return concept;\n            } else {\n                logger.error(\"Unable to get a representation of the resource: \" + connection.getResponseCode() + \" => \" + connection.getContentType());\n                throw new RuntimeException(\"Unable to get a representation of the resource\");\n            }\n        } catch (Exception e) {\n            logger.error(\"Unable to fetch data for concept \" + conceptUri, e);\n            throw new RuntimeException(e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_00103593",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void fetchFile(String ID) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void fetchFile(String ID) {\n        String url = \"http://www.nal.usda.gov/cgi-bin/agricola-ind?bib=\" + ID + \"&conf=010000++++++++++++++&screen=MA\";\n        System.out.println(url);\n        try {\n            PrintWriter pw = new PrintWriter(new FileWriter(\"MARC\" + ID + \".txt\"));\n            if (!id.contains(\"MARC\" + ID + \".txt\")) {\n                id.add(\"MARC\" + ID + \".txt\");\n            }\n            in = new BufferedReader(new InputStreamReader((new URL(url)).openStream()));\n            in.readLine();\n            String inputLine, stx = \"\";\n            StringBuffer sb = new StringBuffer();\n            while ((inputLine = in.readLine()) != null) {\n                if (inputLine.startsWith(\"<TR><TD><B>\")) {\n                    String sts = (inputLine.substring(inputLine.indexOf(\"B>\") + 2, inputLine.indexOf(\"</\")));\n                    int i = 0;\n                    try {\n                        i = Integer.parseInt(sts);\n                    } catch (NumberFormatException nfe) {\n                    }\n                    if (i > 0) {\n                        stx = stx + \"\\n\" + sts + \" - \";\n                    } else {\n                        stx += sts;\n                    }\n                }\n                if (!(inputLine.startsWith(\"<\") || inputLine.startsWith(\" <\") || inputLine.startsWith(\">\"))) {\n                    String tx = inputLine.trim();\n                    stx += tx;\n                }\n            }\n            pw.println(stx);\n            pw.close();\n        } catch (Exception e) {\n            System.out.println(\"Couldn't open stream\");\n            System.out.println(e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10359449",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "protected Class findClass(String name) throws ClassNotFoundException {\n        String classFile = name.replace('.', '/') + \".class\";\n        InputStream classInputStream = null;\n        if (this.extensionJars != null) {\n            for (int i = 0; i < this.extensionJars.length; i++) {\n                JarFile extensionJar = this.extensionJars[i];\n                JarEntry jarEntry = extensionJar.getJarEntry(classFile);\n                if (jarEntry != null) {\n                    try {\n                        classInputStream = extensionJar.getInputStream(jarEntry);\n                    } catch (IOException ex) {\n                        throw new ClassNotFoundException(\"Couldn't read class \" + name, ex);\n                    }\n                }\n            }\n        }\n        if (classInputStream == null) {\n            URL url = getResource(classFile);\n            if (url == null) {\n                throw new ClassNotFoundException(\"Class \" + name);\n            }\n            try {\n                classInputStream = url.openStream();\n            } catch (IOException ex) {\n                throw new ClassNotFoundException(\"Couldn't read class \" + name, ex);\n            }\n        }\n        try {\n            ByteArrayOutputStream out = new ByteArrayOutputStream();\n            BufferedInputStream in = new BufferedInputStream(classInputStream);\n            byte[] buffer = new byte[8096];\n            int size;\n            while ((size = in.read(buffer)) != -1) {\n                out.write(buffer, 0, size);\n            }\n            in.close();\n            return defineClass(name, out.toByteArray(), 0, out.size(), this.protectionDomain);\n        } catch (IOException ex) {\n            throw new ClassNotFoundException(\"Class \" + name, ex);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10361370",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static byte[] hash(final byte[] saltBefore, final String content, final byte[] saltAfter, final int repeatedHashingCount) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static byte[] hash(final byte[] saltBefore, final String content, final byte[] saltAfter, final int repeatedHashingCount) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        if (content == null) return null;\n        final MessageDigest digest = MessageDigest.getInstance(DIGEST);\n        if (digestLength == -1) digestLength = digest.getDigestLength();\n        for (int i = 0; i < repeatedHashingCount; i++) {\n            if (i > 0) digest.update(digest.digest());\n            digest.update(saltBefore);\n            digest.update(content.getBytes(WebCastellumFilter.DEFAULT_CHARACTER_ENCODING));\n            digest.update(saltAfter);\n        }\n        return digest.digest();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10361726",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "void queryFile(String rendezvousProgram, String rendezvousMD5) {\n        try {\n            XMLConfigParser.readUrlHost();\n            String url = XMLConfigParser.urlHost;\n            String query;\n            String param1 = \"op=query\";\n            String param2 = \"program=\" + rendezvousProgram;\n            String param3 = \"md5=\" + rendezvousMD5;\n            query = String.format(\"%s&%s&%s\", param1, param2, param3);\n            openConnection(query, url);\n            String line = br.readLine();\n            NetworkLog.logMsg(NetworkLog.LOG_DEBUG, this, \"(Query) Response of the server: \" + line);\n            br.close();\n        } catch (MalformedURLException e) {\n            NetworkLog.logMsg(NetworkLog.LOG_ERROR, this, \"Error\" + e);\n        } catch (IOException e) {\n            NetworkLog.logMsg(NetworkLog.LOG_ERROR, this, e.getMessage());\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10361727",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "void queryInactive() {\n        try {\n            XMLConfigParser.readUrlHost();\n            String url = XMLConfigParser.urlHost;\n            Date currenttime = new Date();\n            String query;\n            String param1 = \"op=queryinactive\";\n            String param2 = \"time=\" + currenttime.getTime();\n            query = String.format(\"%s&%s\", param1, param2);\n            openConnection(query, url);\n            String line = br.readLine();\n            NetworkLog.logMsg(NetworkLog.LOG_DEBUG, this, \"(Query inactive)Response of the server: \" + line);\n            br.close();\n        } catch (MalformedURLException e) {\n            NetworkLog.logMsg(NetworkLog.LOG_ERROR, this, \"Error\" + e);\n        } catch (IOException e) {\n            NetworkLog.logMsg(NetworkLog.LOG_ERROR, this, e.getMessage());\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10363910",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private String getPayLoadWithCookie(String url) {\n        StringBuffer sb = new StringBuffer();\n        if (this.cookie != null) {\n            try {\n                Log.debug(\"Requesting url ==> \" + url);\n                URLConnection con = new URL(url).openConnection();\n                con.setDoOutput(true);\n                con.addRequestProperty(\"Cookie\", this.cookie);\n                BufferedReader br = new BufferedReader(new InputStreamReader(con.getInputStream()));\n                String line = \"\";\n                while ((line = br.readLine()) != null) {\n                    sb.append(line + \"\\n\");\n                }\n            } catch (MalformedURLException e) {\n                e.printStackTrace();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        return sb.toString();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10368839",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copy(File source, File destination) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copy(File source, File destination) throws IOException {\n        InputStream in = new FileInputStream(source);\n        OutputStream out = new FileOutputStream(destination);\n        byte[] buffer = new byte[1024];\n        int len;\n        while ((len = in.read(buffer)) > 0) out.write(buffer, 0, len);\n        in.close();\n        out.close();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10369570",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copy(String fromFileName, String toFileName) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copy(String fromFileName, String toFileName) throws IOException {\n        File fromFile = new File(fromFileName);\n        File toFile = new File(toFileName);\n        if (!fromFile.exists()) throw new IOException(\"FileCopy: \" + \"no such source file: \" + fromFileName);\n        if (!fromFile.isFile()) throw new IOException(\"FileCopy: \" + \"can't copy directory: \" + fromFileName);\n        if (!fromFile.canRead()) throw new IOException(\"FileCopy: \" + \"source file is unreadable: \" + fromFileName);\n        if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());\n        if (toFile.exists()) {\n            if (!toFile.canWrite()) throw new IOException(\"FileCopy: \" + \"destination file is unwriteable: \" + toFileName);\n            System.out.print(\"Overwrite existing file \" + toFile.getName() + \"? (Y/N): \");\n            System.out.flush();\n            BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n            String response = in.readLine();\n            if (!response.equals(\"Y\") && !response.equals(\"y\")) throw new IOException(\"FileCopy: \" + \"existing file was not overwritten.\");\n        } else {\n            String parent = toFile.getParent();\n            if (parent == null) parent = System.getProperty(\"user.dir\");\n            File dir = new File(parent);\n            if (!dir.exists()) throw new IOException(\"FileCopy: \" + \"destination directory doesn't exist: \" + parent);\n            if (dir.isFile()) throw new IOException(\"FileCopy: \" + \"destination is not a directory: \" + parent);\n            if (!dir.canWrite()) throw new IOException(\"FileCopy: \" + \"destination directory is unwriteable: \" + parent);\n        }\n        FileInputStream from = null;\n        FileOutputStream to = null;\n        try {\n            from = new FileInputStream(fromFile);\n            to = new FileOutputStream(toFile);\n            byte[] buffer = new byte[4096];\n            int bytesRead;\n            while ((bytesRead = from.read(buffer)) != -1) to.write(buffer, 0, bytesRead);\n        } finally {\n            if (from != null) try {\n                from.close();\n            } catch (IOException e) {\n                ;\n            }\n            if (to != null) try {\n                to.close();\n            } catch (IOException e) {\n                ;\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01037402",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static final String getContent(String address) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static final String getContent(String address) {\n        String content = \"\";\n        OutputStream out = null;\n        URLConnection conn = null;\n        InputStream in = null;\n        try {\n            URL url = new URL(address);\n            out = new ByteArrayOutputStream();\n            conn = url.openConnection();\n            in = conn.getInputStream();\n            byte[] buffer = new byte[1024];\n            int numRead;\n            while ((numRead = in.read(buffer)) != -1) {\n                out.write(buffer, 0, numRead);\n            }\n            content = out.toString();\n        } catch (Exception exception) {\n            exception.printStackTrace();\n        } finally {\n            try {\n                if (in != null) {\n                    in.close();\n                }\n                if (out != null) {\n                    out.close();\n                }\n            } catch (IOException ioe) {\n            }\n        }\n        return content;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01037968",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copyFromFileToFileUsingNIO(File inputFile, File outputFile) throws FileNotFoundException, IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copyFromFileToFileUsingNIO(File inputFile, File outputFile) throws FileNotFoundException, IOException {\n        FileChannel inputChannel = new FileInputStream(inputFile).getChannel();\n        FileChannel outputChannel = new FileOutputStream(outputFile).getChannel();\n        try {\n            inputChannel.transferTo(0, inputChannel.size(), outputChannel);\n        } catch (IOException e) {\n            throw e;\n        } finally {\n            if (inputChannel != null) inputChannel.close();\n            if (outputChannel != null) outputChannel.close();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10379908",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void setContentMD5() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void setContentMD5() {\n        MessageDigest messagedigest = null;\n        try {\n            messagedigest = MessageDigest.getInstance(\"MD5\");\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n            contentMD5 = null;\n        }\n        messagedigest.update(content.getBytes());\n        byte digest[] = messagedigest.digest();\n        String chk = \"\";\n        for (int i = 0; i < digest.length; i++) {\n            String s = Integer.toHexString(digest[i] & 0xFF);\n            chk += ((s.length() == 1) ? \"0\" + s : s);\n        }\n        contentMD5 = chk;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10382288",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void checkForUpdate(String version) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void checkForUpdate(String version) {\n        try {\n            URL url = new URL(WiimoteWhiteboard.getProperty(\"updateURL\"));\n            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n            final String current = in.readLine();\n            if (compare(version, current)) showUpdateNotification(version, current);\n            in.close();\n        } catch (Exception e) {\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10383721",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@SuppressWarnings(\"unchecked\")\n    private ReaderFeed processEntrys(String urlStr, String currentFlag) throws UnsupportedEncodingException, IOException, JDOMException {\n        String key = \"processEntrys@\" + urlStr + \"_\" + currentFlag;\n        if (cache.containsKey(key)) {\n            return (ReaderFeed) cache.get(key);\n        }\n        List<Post> postList = new ArrayList<Post>();\n        URL url = new URL(urlStr);\n        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n        connection.setRequestMethod(\"GET\");\n        connection.setRequestProperty(\"Cookie\", \"SID=\" + sid);\n        BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream(), \"UTF-8\"));\n        SAXBuilder builder = new SAXBuilder(false);\n        Document doc = builder.build(reader);\n        Element root = doc.getRootElement();\n        Namespace grNamespace = root.getNamespace(\"gr\");\n        Namespace namespace = root.getNamespace();\n        String newflag = root.getChildText(\"continuation\", grNamespace);\n        String title = root.getChildText(\"title\", namespace);\n        String subTitle = root.getChildText(\"subtitle\", namespace);\n        List<Element> entryList = root.getChildren(\"entry\", namespace);\n        DateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss'Z'\");\n        for (Element e : entryList) {\n            Post post = new Post();\n            post.setTitle(e.getChildText(\"title\", namespace));\n            try {\n                post.setDate(sdf.parse(e.getChildText(\"published\", namespace)));\n            } catch (ParseException e1) {\n            }\n            post.setUrl(e.getChild(\"link\", namespace).getAttributeValue(\"href\"));\n            post.setSauthor(e.getChild(\"author\", namespace).getChildText(\"name\", namespace));\n            String content = e.getChildText(\"content\", namespace);\n            if (StringUtils.isEmpty(content)) {\n                content = e.getChildText(\"description\", namespace);\n            }\n            if (StringUtils.isEmpty(content)) {\n                content = e.getChildText(\"summary\", namespace);\n            }\n            post.setContent(content);\n            postList.add(post);\n        }\n        ReaderFeed readerFeed = new ReaderFeed();\n        readerFeed.setTitle(title);\n        readerFeed.setSubTitle(subTitle);\n        readerFeed.setFlag(newflag);\n        readerFeed.setPostList(postList);\n        cache.put(key, readerFeed);\n        return readerFeed;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10384641",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "protected void setUp() throws Exception {\n        super.setUp();\n        bundles = Activator.bundleContext.getBundles();\n        for (int i = 0; i < bundles.length; ++i) {\n            if (bundles[i] != null) {\n                if ((bundles[i].getSymbolicName() == null) || (!bundles[i].getSymbolicName().startsWith(PSS))) {\n                    bundles[i] = null;\n                }\n            }\n        }\n        checklist = new Properties();\n        try {\n            URL url = Activator.bundleContext.getBundle().getResource(CHECK_FILE);\n            InputStream is = new BufferedInputStream(url.openStream());\n            checklist.load(is);\n            is.close();\n        } catch (FileNotFoundException fe) {\n            fail(\"Failed to find service checklist file\");\n        } catch (IOException e) {\n            fail(\"Failed to load service checklist file\");\n        }\n        if (pssTracker == null) {\n            pssTracker = new ServiceTracker(Activator.bundleContext, IPssManager.class.getName(), null);\n        }\n        pssTracker.open();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10384704",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void reset(String componentName, int currentPilot) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void reset(String componentName, int currentPilot) {\n        try {\n            PreparedStatement psta = jdbc.prepareStatement(\"DELETE FROM component_prop \" + \"WHERE pilot_id = ? \" + \"AND component_name = ?\");\n            psta.setInt(1, currentPilot);\n            psta.setString(2, componentName);\n            psta.executeUpdate();\n            jdbc.commit();\n        } catch (SQLException e) {\n            jdbc.rollback();\n            log.debug(e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10384705",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void reset(int currentPilot) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void reset(int currentPilot) {\n        try {\n            PreparedStatement psta = jdbc.prepareStatement(\"DELETE FROM component_prop \" + \"WHERE pilot_id = ? \");\n            psta.setInt(1, currentPilot);\n            psta.executeUpdate();\n            jdbc.commit();\n        } catch (SQLException e) {\n            jdbc.rollback();\n            log.debug(e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10385493",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void writeBack(File destinationFile, boolean makeCopy) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void writeBack(File destinationFile, boolean makeCopy) throws IOException {\n        if (makeCopy) {\n            FileChannel sourceChannel = new java.io.FileInputStream(getFile()).getChannel();\n            FileChannel destinationChannel = new java.io.FileOutputStream(destinationFile).getChannel();\n            sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\n            sourceChannel.close();\n            destinationChannel.close();\n        } else {\n            getFile().renameTo(destinationFile);\n        }\n        if (getExifTime() != null && getOriginalTime() != null && !getExifTime().equals(getOriginalTime())) {\n            String adjustArgument = \"-ts\" + m_dfJhead.format(getExifTime());\n            ProcessBuilder pb = new ProcessBuilder(m_tm.getJheadCommand(), adjustArgument, destinationFile.getAbsolutePath());\n            pb.directory(destinationFile.getParentFile());\n            System.out.println(pb.command().get(0) + \" \" + pb.command().get(1) + \" \" + pb.command().get(2));\n            final Process p = pb.start();\n            try {\n                p.waitFor();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10385564",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic SparqlQueryLoaderImpl() throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public SparqlQueryLoaderImpl() throws IOException {\n        ClassLoader loader = SparqlQueryLoaderImpl.class.getClassLoader();\n        URL url = loader.getResource(PROPERTIES_FILENAME);\n        InputStream stream = url.openStream();\n        properties.load(stream);\n        stream.close();\n        String names = getProperties().getProperty(NAMES_PARAMETER);\n        StringTokenizer st = new StringTokenizer(names, \",\");\n        while (st.hasMoreTokens()) {\n            String name = st.nextToken();\n            String value = readContents(String.format(\"sparql/%s.sparql\", name));\n            getName2Query().put(name, value);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10385815",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copy(String fileFrom, String fileTo) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copy(String fileFrom, String fileTo) throws IOException {\n        FileInputStream inputStream = null;\n        FileOutputStream outputStream = null;\n        FileChannel inputChannel = null;\n        FileChannel outputChannel = null;\n        try {\n            inputStream = new FileInputStream(fileFrom);\n            outputStream = new FileOutputStream(fileTo);\n            inputChannel = inputStream.getChannel();\n            outputChannel = outputStream.getChannel();\n            inputChannel.transferTo(0, inputChannel.size(), outputChannel);\n        } finally {\n            try {\n                inputChannel.close();\n            } finally {\n                try {\n                    outputChannel.close();\n                } finally {\n                    try {\n                        inputStream.close();\n                    } finally {\n                        outputStream.close();\n                    }\n                }\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10386966",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private ByteBuffer getByteBuffer(String resource) throws IOException {\n        ClassLoader classLoader = this.getClass().getClassLoader();\n        InputStream in = classLoader.getResourceAsStream(resource);\n        ByteArrayOutputStream out = new ByteArrayOutputStream();\n        IOUtils.copy(in, out);\n        return ByteBuffer.wrap(out.toByteArray());\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10387508",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void main(String[] args) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void main(String[] args) {\n        final MavenDeployerGui gui = new MavenDeployerGui();\n        final Chooser repositoryChooser = new Chooser(gui.formPanel, JFileChooser.DIRECTORIES_ONLY);\n        final Chooser artifactChooser = new Chooser(gui.formPanel, JFileChooser.FILES_ONLY);\n        final Chooser pomChooser = new Chooser(gui.formPanel, JFileChooser.FILES_ONLY, new POMFilter());\n        gui.cancel.setEnabled(false);\n        gui.cbDeployPOM.setVisible(false);\n        gui.cbDeployPOM.setEnabled(false);\n        gui.mavenBin.setText(findMavenExecutable());\n        gui.repositoryBrowser.addActionListener(new ActionListener() {\n\n            public void actionPerformed(ActionEvent e) {\n                File repo = repositoryChooser.chooseFrom(currentDir);\n                if (repo != null) {\n                    currentDir = repositoryChooser.currentFolder;\n                    gui.repositoryURL.setText(repo.getAbsolutePath());\n                }\n            }\n        });\n        gui.artifactBrowser.addActionListener(new ActionListener() {\n\n            public void actionPerformed(ActionEvent e) {\n                File artifact = artifactChooser.chooseFrom(currentDir);\n                if (artifact != null) {\n                    currentDir = artifactChooser.currentFolder;\n                    gui.artifactFile.setText(artifact.getAbsolutePath());\n                }\n            }\n        });\n        gui.deploy.addActionListener(new ActionListener() {\n\n            public void actionPerformed(ActionEvent e) {\n                deployer = new Deployer(gui, pom);\n                deployer.execute();\n            }\n        });\n        gui.clear.addActionListener(new ActionListener() {\n\n            public void actionPerformed(ActionEvent e) {\n                gui.console.setText(\"\");\n            }\n        });\n        gui.cancel.addActionListener(new ActionListener() {\n\n            public void actionPerformed(ActionEvent e) {\n                if (deployer != null) {\n                    deployer.stop();\n                    deployer = null;\n                }\n            }\n        });\n        gui.cbDeployPOM.addActionListener(new ActionListener() {\n\n            public void actionPerformed(ActionEvent e) {\n                readPOM(gui);\n            }\n        });\n        gui.loadPOM.addActionListener(new ActionListener() {\n\n            public void actionPerformed(ActionEvent e) {\n                pom = pomChooser.chooseFrom(currentDir);\n                if (pom != null) {\n                    currentDir = pomChooser.currentFolder;\n                    readPOM(gui);\n                    gui.cbDeployPOM.setText(\"Deploy also \" + pom.getAbsolutePath());\n                    gui.cbDeployPOM.setEnabled(true);\n                    gui.cbDeployPOM.setVisible(true);\n                }\n            }\n        });\n        String version = \"\";\n        try {\n            URL url = Thread.currentThread().getContextClassLoader().getResource(\"META-INF/maven/com.mycila.maven/maven-deployer/pom.properties\");\n            Properties p = new Properties();\n            p.load(url.openStream());\n            version = \" \" + p.getProperty(\"version\");\n        } catch (Exception ignored) {\n            version = \" x.y\";\n        }\n        JFrame frame = new JFrame(\"Maven Deployer\" + version + \" - By Mathieu Carbou (http://blog.mycila.com)\");\n        frame.setContentPane(gui.formPanel);\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        frame.setLocationRelativeTo(null);\n        frame.setLocationByPlatform(true);\n        frame.pack();\n        frame.setVisible(true);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01038900",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static SOAPMessage call(SOAPMessage request, URL url) throws IOException, SOAPException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static SOAPMessage call(SOAPMessage request, URL url) throws IOException, SOAPException {\n        URLConnection conn = url.openConnection();\n        conn.setDoOutput(true);\n        conn.setDoInput(true);\n        conn.connect();\n        request.writeTo(conn.getOutputStream());\n        MessageFactory mf = MessageFactory.newInstance(SOAPConstants.SOAP_1_2_PROTOCOL);\n        return mf.createMessage(null, conn.getInputStream());\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10391639",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static void copyFile(final File sourceFile, final File destFile) throws IOException {\n        if (!destFile.exists()) {\n            if (!destFile.createNewFile()) {\n                throw new IOException(\"Destination file cannot be created: \" + destFile.getPath());\n            }\n        }\n        FileChannel source = null;\n        FileChannel destination = null;\n        try {\n            source = new FileInputStream(sourceFile).getChannel();\n            destination = new FileOutputStream(destFile).getChannel();\n            destination.transferFrom(source, 0, source.size());\n        } finally {\n            if (source != null) {\n                source.close();\n            }\n            if (destination != null) {\n                destination.close();\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10391753",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String encrypt(String text) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String encrypt(String text) {\n        char[] toEncrypt = text.toCharArray();\n        StringBuffer hexString = new StringBuffer();\n        try {\n            MessageDigest dig = MessageDigest.getInstance(\"MD5\");\n            dig.reset();\n            String pw = \"\";\n            for (int i = 0; i < toEncrypt.length; i++) {\n                pw += toEncrypt[i];\n            }\n            dig.update(pw.getBytes());\n            byte[] digest = dig.digest();\n            int digestLength = digest.length;\n            for (int i = 0; i < digestLength; i++) {\n                hexString.append(hexDigit(digest[i]));\n            }\n        } catch (java.security.NoSuchAlgorithmException ae) {\n            ae.printStackTrace();\n        }\n        return hexString.toString();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10392922",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copyCompletely(InputStream input, OutputStream output) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copyCompletely(InputStream input, OutputStream output) throws IOException {\n        if ((output instanceof FileOutputStream) && (input instanceof FileInputStream)) {\n            try {\n                FileChannel target = ((FileOutputStream) output).getChannel();\n                FileChannel source = ((FileInputStream) input).getChannel();\n                source.transferTo(0, Integer.MAX_VALUE, target);\n                source.close();\n                target.close();\n                return;\n            } catch (Exception e) {\n            }\n        }\n        byte[] buf = new byte[8192];\n        while (true) {\n            int length = input.read(buf);\n            if (length < 0) break;\n            output.write(buf, 0, length);\n        }\n        try {\n            input.close();\n        } catch (IOException ignore) {\n        }\n        try {\n            output.close();\n        } catch (IOException ignore) {\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10395759",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void run() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void run() {\n        btnReintentar.setEnabled(false);\n        try {\n            lblEstado.setText(\"Conectando con servidor...\");\n            escribir(\"\\nConectando con servidor...\");\n            URL url = new URL(\"http://apeiron.sourceforge.net/version.php\");\n            lblEstado.setText(\"Obteniendo informaci\ufffdn de versi\ufffdn...\");\n            escribir(\"Ok\\n\");\n            escribir(\"Obteniendo informaci\ufffdn sobre \ufffdltima versi\ufffdn...\");\n            BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));\n            String linea = br.readLine();\n            escribir(\"Ok\\n\");\n            if (linea != null) {\n                escribir(\"Versi\ufffdn mas reciente: \" + linea + \"\\n\");\n                if (Principal.version < Double.parseDouble(linea)) {\n                    lblEstado.setText(\"Hay una nueva versi\ufffdn: Apeiron \" + linea);\n                    escribir(\"Puede obtener la actualizaci\ufffdn de: http://apeiron.sourceforge.net\\n\");\n                    btnActualizar.setEnabled(true);\n                    setVisible(true);\n                } else {\n                    lblEstado.setText(\"Usted tiene la \ufffdltima versi\ufffdn\");\n                }\n            }\n            br.close();\n        } catch (MalformedURLException e) {\n            escribir(\"Fall\ufffd\\n\" + e + \"\\n\");\n            e.printStackTrace();\n        } catch (IOException e) {\n            escribir(\"Fall\ufffd\\n\" + e + \"\\n\");\n            e.printStackTrace();\n        }\n        btnReintentar.setEnabled(true);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01039796",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void insert(Connection c, MLPApprox net, int azioneId, String descrizione, int[] indiciID, int output, Date from, Date to) throws SQLException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void insert(Connection c, MLPApprox net, int azioneId, String descrizione, int[] indiciID, int output, Date from, Date to) throws SQLException {\n        try {\n            PreparedStatement ps = c.prepareStatement(insertNet, PreparedStatement.RETURN_GENERATED_KEYS);\n            ArrayList<Integer> indexes = new ArrayList<Integer>(indiciID.length);\n            for (int i = 0; i < indiciID.length; i++) indexes.add(indiciID[i]);\n            ps.setObject(1, net);\n            ps.setInt(2, azioneId);\n            ps.setObject(3, indexes);\n            ps.setInt(4, output);\n            ps.setDate(5, from);\n            ps.setDate(6, to);\n            ps.setString(7, descrizione);\n            ps.executeUpdate();\n            ResultSet key = ps.getGeneratedKeys();\n            if (key.next()) {\n                int id = key.getInt(1);\n                for (int i = 0; i < indiciID.length; i++) {\n                    PreparedStatement psIndex = c.prepareStatement(insertNetIndex);\n                    psIndex.setInt(1, indiciID[i]);\n                    psIndex.setInt(2, id);\n                    psIndex.executeUpdate();\n                }\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n            try {\n                c.rollback();\n            } catch (SQLException e1) {\n                e1.printStackTrace();\n                throw e1;\n            }\n            throw e;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10398987",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void getDataFiles(String server, String username, String password, String folder, String destinationFolder) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void getDataFiles(String server, String username, String password, String folder, String destinationFolder) {\n        try {\n            FTPClient ftp = new FTPClient();\n            ftp.connect(server);\n            ftp.login(username, password);\n            System.out.println(\"Connected to \" + server + \".\");\n            System.out.print(ftp.getReplyString());\n            ftp.enterLocalActiveMode();\n            ftp.changeWorkingDirectory(folder);\n            System.out.println(\"Changed to \" + folder);\n            FTPFile[] files = ftp.listFiles();\n            System.out.println(\"Number of files in dir: \" + files.length);\n            for (int i = 0; i < files.length; i++) {\n                getFiles(ftp, files[i], destinationFolder);\n            }\n            ftp.logout();\n            ftp.disconnect();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10398988",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void putDataFiles(String server, String username, String password, String folder, String destinationFolder) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void putDataFiles(String server, String username, String password, String folder, String destinationFolder) {\n        try {\n            FTPClient ftp = new FTPClient();\n            ftp.connect(server);\n            System.out.println(\"Connected\");\n            ftp.login(username, password);\n            System.out.println(\"Logged in to \" + server + \".\");\n            System.out.print(ftp.getReplyString());\n            ftp.changeWorkingDirectory(destinationFolder);\n            System.out.println(\"Changed to directory \" + destinationFolder);\n            File localRoot = new File(folder);\n            File[] files = localRoot.listFiles();\n            System.out.println(\"Number of files in dir: \" + files.length);\n            for (int i = 0; i < files.length; i++) {\n                putFiles(ftp, files[i]);\n            }\n            ftp.logout();\n            ftp.disconnect();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10405919",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private Document getResponse(HttpGet request) throws ClientProtocolException, IOException, ParserConfigurationException, IllegalStateException, SAXException, NoRoutesException {\n        HttpClient httpClient = new DefaultHttpClient();\n        HttpResponse response = httpClient.execute(request);\n        if (response.getStatusLine().getStatusCode() != HTTP_STATUS_OK) throw new ClientProtocolException(\"The HTTP request is wrong.\");\n        allResponse = EntityUtils.toString(response.getEntity());\n        String responseText = \"\";\n        switch(modeOption) {\n            case DRIVING:\n                try {\n                    responseText = allResponse.substring(allResponse.indexOf(\"<ol\"), allResponse.indexOf(\"</ol>\") + 5);\n                } catch (Exception e) {\n                    throw new NoRoutesException();\n                }\n                break;\n            case WALKING:\n                try {\n                    responseText = allResponse.substring(allResponse.indexOf(\"<ol\"), allResponse.indexOf(\"</ol>\") + 5);\n                } catch (Exception e) {\n                    throw new NoRoutesException();\n                }\n                break;\n            case PUBLIC_TRANSIT:\n                String responseWithErrors = \"\";\n                try {\n                    responseWithErrors = allResponse.substring(allResponse.indexOf(\"<div id=\\\"tsp\\\">\"), allResponse.indexOf(\"<div class=\\\"ddwpt\\\" id=\\\"panel_ddw1\\\" oi=\\\"wi1\\\">\"));\n                } catch (Exception e) {\n                    throw new NoRoutesException();\n                }\n                responseText = responseWithErrors.replaceAll(\".gif\\\">\", \".gif\\\"/>\").replaceAll(\"colspan=2\", \"colspan=\\\"2\\\"\").replaceAll(\"nowrap\", \"\").replaceAll(\"&laquo;\", \"\").replaceAll(\"&nbsp;\", \"\").replaceAll(\"&raquo;\", \"\");\n                break;\n        }\n        File xmlFile = new File(\"./data/temp/response.xml\");\n        PrintWriter writer = new PrintWriter(xmlFile);\n        writer.println(responseText);\n        writer.close();\n        DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();\n        DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();\n        return dBuilder.parse(xmlFile);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10407191",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic boolean copy(Document document, Folder folder) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n    public boolean copy(Document document, Folder folder) throws Exception {\n        boolean isCopied = false;\n        if (document.getId() != null && folder.getId() != null) {\n            Document copiedDoc = new DocumentModel();\n            copiedDoc.setValues(document.getValues());\n            copiedDoc.setFolder(folder);\n            copiedDoc.setId(null);\n            em.persist(copiedDoc);\n            resourceAuthorityService.applyAuthority(copiedDoc);\n            List<Preference> preferences = prefService.findAll();\n            Preference preference = new PreferenceModel();\n            if (preferences != null && !preferences.isEmpty()) {\n                preference = preferences.get(0);\n            }\n            String repo = preference.getRepository();\n            SimpleDateFormat sdf = new SimpleDateFormat(Constants.DATEFORMAT_YYYYMMDD);\n            Calendar calendar = Calendar.getInstance();\n            StringBuffer sbRepo = new StringBuffer(repo);\n            sbRepo.append(File.separator);\n            StringBuffer sbFolder = new StringBuffer(sdf.format(calendar.getTime()));\n            sbFolder.append(File.separator).append(calendar.get(Calendar.HOUR_OF_DAY));\n            File fFolder = new File(sbRepo.append(sbFolder).toString());\n            if (!fFolder.exists()) {\n                fFolder.mkdirs();\n            }\n            copiedDoc.setLocation(sbFolder.toString());\n            em.merge(copiedDoc);\n            File in = new File(repo + File.separator + document.getLocation() + File.separator + document.getId() + \".\" + document.getExt());\n            File out = new File(fFolder.getAbsolutePath() + File.separator + copiedDoc.getId() + \".\" + copiedDoc.getExt());\n            FileChannel inChannel = new FileInputStream(in).getChannel();\n            FileChannel outChannel = new FileOutputStream(out).getChannel();\n            try {\n                inChannel.transferTo(0, inChannel.size(), outChannel);\n            } catch (IOException e) {\n                throw e;\n            } finally {\n                if (inChannel != null) inChannel.close();\n                if (outChannel != null) outChannel.close();\n            }\n        }\n        return isCopied;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10411415",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void readData(int choice) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void readData(int choice) throws IOException {\n        for (i = 0; i < max; i++) for (j = 0; j < max; j++) {\n            phase_x[i][j] = 0.0;\n            phase_y[i][j] = 0.0;\n        }\n        URL url;\n        InputStream is;\n        InputStreamReader isr;\n        if (choice == 0) {\n            url = getClass().getResource(\"resources/Phase_623_620_Achromat.dat\");\n            is = url.openStream();\n            isr = new InputStreamReader(is);\n        } else {\n            url = getClass().getResource(\"resources/Phase_623_620_NoAchromat.dat\");\n            is = url.openStream();\n            isr = new InputStreamReader(is);\n        }\n        BufferedReader br = new BufferedReader(isr);\n        s = br.readLine();\n        StringTokenizer st = new StringTokenizer(s);\n        i = 0;\n        j = 0;\n        phase_x[i][j] = 4 * Double.parseDouble(st.nextToken());\n        phase_y[i][j] = 4 * Double.parseDouble(st.nextToken());\n        xgridmin = phase_x[i][j];\n        ygridmin = phase_y[i][j];\n        temp_prev = phase_x[i][j];\n        kd[i][j] = Double.parseDouble(st.nextToken());\n        kfs[i][j] = Double.parseDouble(st.nextToken());\n        kfl[i][j] = Double.parseDouble(st.nextToken());\n        kdee[i][j] = Double.parseDouble(st.nextToken());\n        kdc[i][j] = Double.parseDouble(st.nextToken());\n        kfc[i][j] = Double.parseDouble(st.nextToken());\n        j++;\n        int k = 0;\n        while ((s = br.readLine()) != null) {\n            st = new StringTokenizer(s);\n            temp_new = 4 * Double.parseDouble(st.nextToken());\n            if (temp_new != temp_prev) {\n                temp_prev = temp_new;\n                i++;\n                j = 0;\n            }\n            phase_x[i][j] = temp_new;\n            phase_y[i][j] = 4 * Double.parseDouble(st.nextToken());\n            kd[i][j] = Double.parseDouble(st.nextToken());\n            kfs[i][j] = Double.parseDouble(st.nextToken());\n            kfl[i][j] = Double.parseDouble(st.nextToken());\n            kdee[i][j] = Double.parseDouble(st.nextToken());\n            kdc[i][j] = Double.parseDouble(st.nextToken());\n            kfc[i][j] = Double.parseDouble(st.nextToken());\n            imax = i;\n            jmax = j;\n            j++;\n            k++;\n        }\n        xgridmax = phase_x[i][j - 1];\n        ygridmax = phase_y[i][j - 1];\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10412897",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void test_ObjectInputStream2() throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@TestTargets({ @TestTargetNew(level = TestLevel.PARTIAL_COMPLETE, notes = \"Verifies that the ObjectInputStream constructor calls checkPermission on security manager.\", method = \"ObjectInputStream\", args = { InputStream.class }) })\n    public void test_ObjectInputStream2() throws IOException {\n        class TestSecurityManager extends SecurityManager {\n\n            boolean called;\n\n            Permission permission;\n\n            void reset() {\n                called = false;\n                permission = null;\n            }\n\n            @Override\n            public void checkPermission(Permission permission) {\n                if (permission instanceof SerializablePermission) {\n                    called = true;\n                    this.permission = permission;\n                }\n            }\n        }\n        class TestObjectInputStream extends ObjectInputStream {\n\n            TestObjectInputStream(InputStream s) throws StreamCorruptedException, IOException {\n                super(s);\n            }\n        }\n        class TestObjectInputStream_readFields extends ObjectInputStream {\n\n            TestObjectInputStream_readFields(InputStream s) throws StreamCorruptedException, IOException {\n                super(s);\n            }\n\n            @Override\n            public GetField readFields() throws IOException, ClassNotFoundException, NotActiveException {\n                return super.readFields();\n            }\n        }\n        class TestObjectInputStream_readUnshared extends ObjectInputStream {\n\n            TestObjectInputStream_readUnshared(InputStream s) throws StreamCorruptedException, IOException {\n                super(s);\n            }\n\n            @Override\n            public Object readUnshared() throws IOException, ClassNotFoundException {\n                return super.readUnshared();\n            }\n        }\n        long id = new java.util.Date().getTime();\n        String filename = \"SecurityPermissionsTest_\" + id;\n        File f = File.createTempFile(filename, null);\n        ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(f));\n        oos.writeObject(new Node());\n        oos.flush();\n        oos.close();\n        f.deleteOnExit();\n        TestSecurityManager s = new TestSecurityManager();\n        System.setSecurityManager(s);\n        s.reset();\n        new ObjectInputStream(new FileInputStream(f));\n        assertTrue(\"ObjectInputStream(InputStream) ctor must not call checkPermission on security manager on a class which neither overwrites methods readFields nor readUnshared\", !s.called);\n        s.reset();\n        new TestObjectInputStream(new FileInputStream(f));\n        assertTrue(\"ObjectInputStream(InputStream) ctor must not call checkPermission on security manager on a class which neither overwrites methods readFields nor readUnshared\", !s.called);\n        s.reset();\n        new TestObjectInputStream_readFields(new FileInputStream(f));\n        assertTrue(\"ObjectInputStream(InputStream) ctor must call checkPermission on security manager on a class which overwrites method readFields\", s.called);\n        assertEquals(\"Name of SerializablePermission is not correct\", \"enableSubclassImplementation\", s.permission.getName());\n        s.reset();\n        new TestObjectInputStream_readUnshared(new FileInputStream(f));\n        assertTrue(\"ObjectInputStream(InputStream) ctor must call checkPermission on security manager on a class which overwrites method readUnshared\", s.called);\n        assertEquals(\"Name of SerializablePermission is not correct\", \"enableSubclassImplementation\", s.permission.getName());\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10413153",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static JuneClass loadClass(Map<String, Entity> globals, String packageName, String baseClassName) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static JuneClass loadClass(Map<String, Entity> globals, String packageName, String baseClassName) {\n        try {\n            JuneClass $class = null;\n            String resourceName = (packageName.length() > 0 ? packageName.replace('.', '/') + \"/\" : \"\") + baseClassName.replace('.', '$') + \".class\";\n            URL url = Resolver.class.getClassLoader().getResource(resourceName);\n            if (url != null) {\n                ClassBuilder builder = new ClassBuilder(globals);\n                InputStream stream = url.openStream();\n                try {\n                    new ClassReader(new BufferedInputStream(stream)).accept(builder, ClassReader.SKIP_CODE);\n                } finally {\n                    stream.close();\n                }\n                $class = builder.$class;\n                $class.loaded = true;\n            }\n            return $class;\n        } catch (Exception e) {\n            throw Helper.throwAny(e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10415388",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copyFileNIO(String src, String dst) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copyFileNIO(String src, String dst) {\n        try {\n            FileChannel srcChannel = new FileInputStream(src).getChannel();\n            FileChannel dstChannel = new FileOutputStream(dst).getChannel();\n            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n            srcChannel.close();\n            dstChannel.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01042173",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void config() throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Test\n    public void config() throws IOException {\n        Reader reader = new FileReader(new File(\"src/test/resources/test.yml\"));\n        Writer writer = new FileWriter(new File(\"src/site/apt/config.apt\"));\n        writer.write(\"------\\n\");\n        writer.write(FileUtils.readFully(reader));\n        writer.flush();\n        writer.close();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01042184",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String scramble(String text) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String scramble(String text) {\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n            md.update(text.getBytes(\"UTF-8\"));\n            StringBuffer sb = new StringBuffer();\n            for (byte b : md.digest()) sb.append(Integer.toString(b & 0xFF, 16));\n            return sb.toString();\n        } catch (UnsupportedEncodingException e) {\n            return null;\n        } catch (NoSuchAlgorithmException e) {\n            return null;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10421893",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static FTPClient getFtpClient(String ftpHost, String ftpUsername, String ftpPassword) throws SocketException, IOException {\n        FTPClient ftp = new FTPClient();\n        ftp.addProtocolCommandListener(new PrintCommandListener(new PrintWriter(System.out)));\n        ftp.connect(ftpHost);\n        int reply = ftp.getReplyCode();\n        if (!FTPReply.isPositiveCompletion(reply)) {\n            ftp.disconnect();\n            return null;\n        }\n        if (!ftp.login(ftpUsername, ftpPassword)) {\n            return null;\n        }\n        ftp.setFileType(FTP.BINARY_FILE_TYPE);\n        ftp.enterLocalPassiveMode();\n        return ftp;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10422459",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private synchronized void renewToken() {\n        if (!(System.currentTimeMillis() > (lastTokenRenewal + 10000))) return;\n        lastTokenRenewal = System.currentTimeMillis();\n        String token = null;\n        System.out.println(\"loading error - refresh token\");\n        byte[] buff = null;\n        try {\n            BufferedInputStream bis = null;\n            System.out.println(\"Calling timeout : \" + getServingURL() + \"?token_timeout=true\");\n            URL remoteurl = new URL(getServingURL() + \"?token_timeout=true\");\n            URLConnection connection = remoteurl.openConnection();\n            connection.setRequestProperty(\"Referer\", getServingURL());\n            int length = connection.getContentLength();\n            InputStream in = connection.getInputStream();\n            buff = new byte[length];\n            int bytesRead = 0;\n            while (bytesRead < length) {\n                bytesRead += in.read(buff, bytesRead, in.available());\n            }\n            token = new String(buff);\n        } catch (Exception e) {\n        }\n        if (token != null && !token.equals(\"\")) {\n            token = token.trim();\n            this.info.setToken(token);\n        } else {\n            System.out.println(\"Token returned was null\");\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10425169",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void getRandomGUID(boolean secure, Object o) {\n        MessageDigest md5 = null;\n        StringBuffer sbValueBeforeMD5 = new StringBuffer();\n        try {\n            md5 = MessageDigest.getInstance(\"MD5\");\n        } catch (NoSuchAlgorithmException e) {\n            System.out.println(\"Error: \" + e);\n        }\n        try {\n            long time = System.currentTimeMillis();\n            long rand = 0;\n            if (secure) {\n                rand = mySecureRand.nextLong();\n            } else {\n                rand = myRand.nextLong();\n            }\n            sbValueBeforeMD5.append(o.getClass().getName());\n            sbValueBeforeMD5.append(\":\");\n            sbValueBeforeMD5.append(s_id);\n            sbValueBeforeMD5.append(\":\");\n            sbValueBeforeMD5.append(Long.toString(time));\n            sbValueBeforeMD5.append(\":\");\n            sbValueBeforeMD5.append(Long.toString(rand));\n            valueBeforeMD5 = sbValueBeforeMD5.toString();\n            md5.update(valueBeforeMD5.getBytes());\n            byte[] array = md5.digest();\n            StringBuffer sb = new StringBuffer();\n            for (int j = 0; j < array.length; ++j) {\n                int b = array[j] & 0xFF;\n                if (b < 0x10) sb.append('0');\n                sb.append(Integer.toHexString(b));\n            }\n            valueAfterMD5 = sb.toString();\n        } catch (Exception e) {\n            System.out.println(\"Error:\" + e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10426070",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static long copy(File src, long amount, File dst) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static long copy(File src, long amount, File dst) {\n        final int BUFFER_SIZE = 1024;\n        long amountToRead = amount;\n        InputStream in = null;\n        OutputStream out = null;\n        try {\n            in = new BufferedInputStream(new FileInputStream(src));\n            out = new BufferedOutputStream(new FileOutputStream(dst));\n            byte[] buf = new byte[BUFFER_SIZE];\n            while (amountToRead > 0) {\n                int read = in.read(buf, 0, (int) Math.min(BUFFER_SIZE, amountToRead));\n                if (read == -1) break;\n                amountToRead -= read;\n                out.write(buf, 0, read);\n            }\n        } catch (IOException e) {\n        } finally {\n            close(in);\n            flush(out);\n            close(out);\n        }\n        return amount - amountToRead;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10432256",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void copyImage(ProjectElement e) throws Exception {\n        String fn = e.getName();\n        if (!fn.toLowerCase().endsWith(\".png\")) {\n            if (fn.contains(\".\")) {\n                fn = fn.substring(0, fn.lastIndexOf('.')) + \".png\";\n            } else {\n                fn += \".png\";\n            }\n        }\n        File img = new File(resFolder, fn);\n        File imgz = new File(resoutFolder.getAbsolutePath(), fn + \".zlib\");\n        boolean copy = true;\n        if (img.exists() && config.containsKey(img.getName())) {\n            long modified = Long.parseLong(config.get(img.getName()));\n            if (modified >= img.lastModified()) {\n                copy = false;\n            }\n        }\n        if (copy) {\n            convertImage(e.getFile(), img);\n            config.put(img.getName(), String.valueOf(img.lastModified()));\n        }\n        DeflaterOutputStream out = new DeflaterOutputStream(new BufferedOutputStream(new FileOutputStream(imgz)));\n        BufferedInputStream in = new BufferedInputStream(new FileInputStream(img));\n        int read;\n        while ((read = in.read()) != -1) {\n            out.write(read);\n        }\n        out.close();\n        in.close();\n        imageFiles.add(imgz);\n        imageNames.put(imgz, e.getName());\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10432257",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void createImageArchive() throws Exception {\n        imageArchive = new File(resoutFolder, \"images.CrAr\");\n        DataOutputStream out = new DataOutputStream(new BufferedOutputStream(new FileOutputStream(imageArchive)));\n        out.writeInt(toNativeEndian(imageFiles.size()));\n        for (int i = 0; i < imageFiles.size(); i++) {\n            File f = imageFiles.get(i);\n            out.writeLong(toNativeEndian(f.length()));\n            out.writeLong(toNativeEndian(new File(resFolder, f.getName().substring(0, f.getName().length() - 5)).length()));\n        }\n        for (int i = 0; i < imageFiles.size(); i++) {\n            BufferedInputStream in = new BufferedInputStream(new FileInputStream(imageFiles.get(i)));\n            int read;\n            while ((read = in.read()) != -1) {\n                out.write(read);\n            }\n            in.close();\n        }\n        out.close();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10432260",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void appendArchive() throws Exception {\n        String cmd;\n        if (profile == CompilationProfile.UNIX_GCC) {\n            cmd = \"cat\";\n        } else if (profile == CompilationProfile.MINGW_WINDOWS) {\n            cmd = \"type\";\n        } else {\n            throw new Exception(\"Unknown cat equivalent for profile \" + profile);\n        }\n        compFrame.writeLine(\"<span style='color: green;'>\" + cmd + \" \\\"\" + imageArchive.getAbsolutePath() + \"\\\" >> \\\"\" + outputFile.getAbsolutePath() + \"\\\"</span>\");\n        BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(outputFile, true));\n        BufferedInputStream in = new BufferedInputStream(new FileInputStream(imageArchive));\n        int read;\n        while ((read = in.read()) != -1) {\n            out.write(read);\n        }\n        in.close();\n        out.close();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10432997",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static void copy(File source, File dest) throws FileNotFoundException, IOException {\n        FileInputStream input = new FileInputStream(source);\n        FileOutputStream output = new FileOutputStream(dest);\n        System.out.println(\"Copying \" + source + \" to \" + dest);\n        IOUtils.copy(input, output);\n        output.close();\n        input.close();\n        dest.setLastModified(source.lastModified());\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10436333",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private BundleURLClassPath createBundleURLClassPath(Bundle bundle, Version version, File bundleFile, File cache, boolean alreadyCached) throws Exception {\n        String bundleClassPath = (String) bundle.getHeaders().get(Constants.BUNDLE_CLASSPATH);\n        if (bundleClassPath == null) {\n            bundleClassPath = \".\";\n        }\n        ManifestEntry[] entries = ManifestEntry.parse(bundleClassPath);\n        String[] classPaths = new String[0];\n        for (int i = 0; i < entries.length; i++) {\n            String classPath = entries[i].getName();\n            if (classPath.startsWith(\"/\")) {\n                classPath = classPath.substring(1);\n            }\n            if (classPath.endsWith(\".jar\")) {\n                try {\n                    File file = new File(cache, classPath);\n                    if (!alreadyCached) {\n                        file.getParentFile().mkdirs();\n                        String url = new StringBuilder(\"jar:\").append(bundleFile.toURI().toURL().toString()).append(\"!/\").append(classPath).toString();\n                        OutputStream os = new FileOutputStream(file);\n                        InputStream is = new URL(url).openStream();\n                        IOUtil.copy(is, os);\n                        is.close();\n                        os.close();\n                    } else {\n                        if (!file.exists()) {\n                            throw new IOException(new StringBuilder(\"classpath \").append(classPath).append(\" not found\").toString());\n                        }\n                    }\n                } catch (IOException e) {\n                    FrameworkEvent frameworkEvent = new FrameworkEvent(FrameworkEvent.INFO, bundle, e);\n                    framework.postFrameworkEvent(frameworkEvent);\n                    continue;\n                }\n            }\n            classPaths = (String[]) ArrayUtil.add(classPaths, classPath);\n        }\n        if (!alreadyCached) {\n            String bundleNativeCode = (String) bundle.getHeaders().get(Constants.BUNDLE_NATIVECODE);\n            if (bundleNativeCode != null) {\n                entries = ManifestEntry.parse(bundleNativeCode);\n                for (int i = 0; i < entries.length; i++) {\n                    ManifestEntry entry = entries[i];\n                    String libPath = entry.getName();\n                    String url = new StringBuilder(\"jar:\").append(bundleFile.toURI().toURL().toString()).append(\"!/\").append(libPath).toString();\n                    File file = new File(cache, libPath);\n                    file.getParentFile().mkdirs();\n                    OutputStream os = new FileOutputStream(file);\n                    InputStream is = new URL(url).openStream();\n                    IOUtil.copy(is, os);\n                    is.close();\n                    os.close();\n                }\n            }\n        }\n        BundleURLClassPath urlClassPath = new BundleURLClassPathImpl(bundle, version, classPaths, cache);\n        return urlClassPath;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10436334",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "Bundle install(String location, InputStream is) throws BundleException {\n        synchronized (bundlesLock) {\n            SecurityManager securityManager = System.getSecurityManager();\n            if (securityManager != null) {\n                securityManager.checkPermission(new AdminPermission(new StringBuilder(\"(location=\").append(location).append(\")\").toString(), org.osgi.framework.AdminPermission.EXTENSIONLIFECYCLE));\n            }\n            long bundleId = getNextBundleId();\n            AbstractBundle bundle = null;\n            try {\n                if (is == null) {\n                    URL url = new URL(location);\n                    is = url.openStream();\n                }\n                File temp = new File(getTempFolder(), Long.toString(System.currentTimeMillis()));\n                OutputStream os;\n                os = new FileOutputStream(temp);\n                IOUtil.copy(is, os);\n                os.close();\n                is.close();\n                Manifest manifest = ManifestUtil.getJarManifest(new FileInputStream(temp));\n                Dictionary headers = ManifestUtil.toDictionary(manifest);\n                Version version = Version.parseVersion((String) headers.get(Constants.BUNDLE_VERSION));\n                File cache = createNewCache(bundleId, version);\n                File manifestFile = new File(cache, BUNDLE_MANIFEST_FILE);\n                os = new FileOutputStream(manifestFile);\n                ManifestUtil.storeManifest(headers, os);\n                os.close();\n                if (isBundleInstalled((String) headers.get(Constants.BUNDLE_SYMBOLICNAME))) {\n                    throw new BundleException(new StringBuilder(\"Bundle(location=\").append(location).append(\") already installed.\").toString());\n                }\n                ManifestEntry[] entries = ManifestEntry.parse(headers.get(Constants.FRAGMENT_HOST));\n                if (entries != null) {\n                    if (entries[0].hasAttribute(\"extension\")) {\n                        String extension = entries[0].getAttributeValue(\"extension\");\n                        if (extension.equals(\"bootclasspath\")) {\n                            String symbolicName = entries[0].getName();\n                            if (!symbolicName.equals(framework.getSymbolicName()) && !symbolicName.equals(Constants.SYSTEM_BUNDLE_SYMBOLICNAME)) {\n                                throw new BundleException(new StringBuilder(\"Trying to install a fragment Bundle(location=\").append(location).append(\") with extension 'bootclasspath' but host is not System Bundle.\").toString(), new UnsupportedOperationException());\n                            }\n                        }\n                    }\n                }\n                String requiredEE = (String) headers.get(Constants.BUNDLE_REQUIREDEXECUTIONENVIRONMENT);\n                if (requiredEE != null) {\n                    BundleContext context = framework.getBundleContext();\n                    String ee = context.getProperty(Constants.FRAMEWORK_EXECUTIONENVIRONMENT);\n                    if (!ee.contains(requiredEE)) {\n                        throw new BundleException(new StringBuilder(\"Bundle(location=\").append(location).append(\")  requires an unsopperted execution environment (=\").append(requiredEE).append(\").\").toString());\n                    }\n                }\n                if (FrameworkUtil.isFragmentHost(headers)) {\n                    bundle = new FragmentBundle(framework);\n                } else {\n                    bundle = new HostBundle(framework);\n                }\n                File bundlefile = new File(cache, Storage.BUNDLE_FILE);\n                temp.renameTo(bundlefile);\n                long lastModified = bundlefile.lastModified();\n                BundleInfo info = new BundleInfo(bundleId, location, lastModified, framework.getInitialBundleStartLevel());\n                info.setHeaders(headers);\n                info.setCache(cache);\n                storeBundleInfo(info);\n                bundleInfosByBundle.put(bundle, info);\n                BundleURLClassPath classPath = createBundleURLClassPath(bundle, version, bundlefile, cache, false);\n                classPathsByBundle.put(bundle, new BundleURLClassPath[] { classPath });\n                synchronized (bundlesLock) {\n                    bundles = (Bundle[]) ArrayUtil.add(bundles, bundle);\n                }\n                return bundle;\n            } catch (Exception e) {\n                if (bundle != null) {\n                    File bundleFolder = getBundleFolder(bundleId);\n                    try {\n                        IOUtil.delete(bundleFolder);\n                    } catch (IOException e1) {\n                    }\n                }\n                e.printStackTrace();\n                throw new BundleException(e.getMessage(), e);\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10436471",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic Cal3dModel loadModel(URL url, String skin) throws IOException, IncorrectFormatException, ParsingErrorException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n    public Cal3dModel loadModel(URL url, String skin) throws IOException, IncorrectFormatException, ParsingErrorException {\n        boolean baseURLWasNull = setBaseURLFromModelURL(url);\n        Cal3dModel model = new Cal3dModel(getFlags());\n        loadCal3dModel(getBaseURL(), url.toExternalForm(), new InputStreamReader(url.openStream()), model);\n        if (baseURLWasNull) {\n            popBaseURL();\n        }\n        return (model);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10437938",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "protected Document loadDocument() throws MalformedURLException, DocumentException, IOException {\n        if (jiraFilterURL.startsWith(\"file\")) {\n            URL url = getSourceURL();\n            return parseDocument(url);\n        } else {\n            HttpClient httpClient = new DefaultHttpClient();\n            List<NameValuePair> formparams = new ArrayList<NameValuePair>();\n            formparams.add(new BasicNameValuePair(\"os_username\", jiraUser));\n            formparams.add(new BasicNameValuePair(\"os_password\", jiraPassword));\n            formparams.add(new BasicNameValuePair(\"os_cookie\", \"true\"));\n            UrlEncodedFormEntity entity = new UrlEncodedFormEntity(formparams, \"UTF-8\");\n            HttpPost post = new HttpPost(getJiraRootUrl() + \"/secure/login.jsp\");\n            post.setEntity(entity);\n            HttpResponse response = httpClient.execute(post);\n            response.getEntity().consumeContent();\n            String url_str = StringEscapeUtils.unescapeXml(jiraFilterURL);\n            HttpGet get = new HttpGet(url_str);\n            response = httpClient.execute(get);\n            return parseDocument(response.getEntity().getContent());\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10441727",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void downloadFile(String url, File destFile) {\n        try {\n            System.out.println(\"Downloading \" + url + \" to \" + destFile + \"...\");\n            destFile.getParentFile().mkdirs();\n            OutputStream out = new FileOutputStream(destFile);\n            URLConnection conn = new URL(url).openConnection();\n            InputStream in = conn.getInputStream();\n            int totalSize = conn.getContentLength(), downloadedSize = 0, size;\n            byte[] buffer = new byte[32768];\n            ProgressMonitor pm = new ProgressMonitor(null, \"Downloading \" + url, \"\", 0, totalSize);\n            pm.setMillisToDecideToPopup(100);\n            pm.setMillisToPopup(500);\n            boolean canceled = false;\n            while ((size = in.read(buffer)) > 0 && !(canceled = pm.isCanceled())) {\n                out.write(buffer, 0, size);\n                pm.setProgress(downloadedSize += size);\n                pm.setNote((100 * downloadedSize / totalSize) + \"% finished\");\n            }\n            in.close();\n            out.close();\n            if (canceled) {\n                destFile.delete();\n                fatalError(\"Starting canceled\", \"Downloading canceled. Exiting...\");\n            }\n            pm.close();\n        } catch (IOException ex) {\n            ex.printStackTrace();\n            destFile.delete();\n            fatalError(\"Download Error\", \"Couldn't download file \" + url + \": \" + ex);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10443091",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic boolean validateZipFile(File zipFile) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public boolean validateZipFile(File zipFile) {\n        String tempdir = Config.CONTEXT.getRealPath(getBackupTempFilePath());\n        try {\n            deleteTempFiles();\n            File ftempDir = new File(tempdir);\n            ftempDir.mkdirs();\n            File tempZip = new File(tempdir + File.separator + zipFile.getName());\n            tempZip.createNewFile();\n            FileChannel ic = new FileInputStream(zipFile).getChannel();\n            FileChannel oc = new FileOutputStream(tempZip).getChannel();\n            for (long i = 0; i <= ic.size(); i++) {\n                ic.transferTo(0, 1000000, oc);\n                i = i + 999999;\n            }\n            ic.close();\n            oc.close();\n            if (zipFile != null && zipFile.getName().toLowerCase().endsWith(\".zip\")) {\n                ZipFile z = new ZipFile(zipFile);\n                ZipUtil.extract(z, new File(Config.CONTEXT.getRealPath(backupTempFilePath)));\n            }\n            return true;\n        } catch (Exception e) {\n            Logger.error(this, \"Error with file\", e);\n            return false;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10445018",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        MessageDigest md;\n        md = MessageDigest.getInstance(\"MD5\");\n        byte[] md5hash = new byte[32];\n        md.update(text.getBytes(\"iso-8859-1\"), 0, text.length());\n        md5hash = md.digest();\n        return convertToHex(md5hash);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10445819",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private Reader getReader() throws IOException {\n        if (data != null) {\n            if (url != null) throw new IllegalArgumentException(\"URL for source data and the data itself must never be specified together.\");\n            if (charset != null) throw new IllegalArgumentException(\"Charset has sense only for URL-based data\");\n            return new StringReader(data);\n        } else if (url != null) {\n            InputStream stream = url.openStream();\n            if (charset == null) return new InputStreamReader(stream); else return new InputStreamReader(stream, charset);\n        }\n        return null;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01044656",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void open(String server, String user, String pass, int port, String option) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void open(String server, String user, String pass, int port, String option) throws Exception {\n        log.info(\"Login to FTP: \" + server);\n        this.port = port;\n        ftp = new FTPClient();\n        ftp.connect(server, port);\n        ftp.login(user, pass);\n        checkReply(\"FTP server refused connection.\" + server);\n        modeBINARY();\n        this.me = this;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10447014",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void chmod(String remoteFile, String mode) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void chmod(String remoteFile, String mode) {\n        String remotePath = connector.getRemoteDirectory();\n        remotePath += PATH_SEPARATOR + remoteFile;\n        FTPClient ftp = new FTPClient();\n        try {\n            String hostname = connector.getUrl().getHost();\n            ftp.connect(hostname);\n            log.info(\"Connected to \" + hostname);\n            log.info(ftp.getReplyString());\n            boolean loggedIn = ftp.login(connector.getUsername(), connector.getPassword());\n            if (loggedIn) {\n                String parameters = \"chmod \" + mode + \" \" + remotePath;\n                ftp.site(parameters);\n                ftp.logout();\n            }\n            ftp.disconnect();\n        } catch (SocketException e) {\n            log.error(\"File chmod failed with message: \" + e.getMessage());\n        } catch (IOException e) {\n            log.error(\"File chmod failed with message: \" + e.getMessage());\n        } finally {\n            if (ftp.isConnected()) {\n                try {\n                    ftp.disconnect();\n                } catch (IOException ioe) {\n                }\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10447015",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void delete(String remoteFile) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void delete(String remoteFile) {\n        String remotePath = connector.getRemoteDirectory();\n        remotePath += PATH_SEPARATOR + remoteFile;\n        FTPClient ftp = new FTPClient();\n        try {\n            String hostname = connector.getUrl().getHost();\n            ftp.connect(hostname);\n            log.info(\"Connected to \" + hostname);\n            log.info(ftp.getReplyString());\n            boolean loggedIn = ftp.login(connector.getUsername(), connector.getPassword());\n            if (loggedIn) {\n                ftp.deleteFile(remotePath);\n                ftp.logout();\n            }\n            ftp.disconnect();\n        } catch (SocketException e) {\n            log.error(\"File chmod failed with message: \" + e.getMessage());\n        } catch (IOException e) {\n            log.error(\"File chmod failed with message: \" + e.getMessage());\n        } finally {\n            if (ftp.isConnected()) {\n                try {\n                    ftp.disconnect();\n                } catch (IOException ioe) {\n                }\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10450245",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic Map<String, String> getMetadata(WebFileObject fo) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public Map<String, String> getMetadata(WebFileObject fo) throws IOException {\n        if (!fo.wfs.getRootURL().getProtocol().equals(\"ftp\")) {\n            String realName = fo.pathname;\n            boolean exists;\n            URL ur = new URL(fo.wfs.getRootURL(), realName);\n            HttpURLConnection connect = (HttpURLConnection) ur.openConnection();\n            connect.setRequestMethod(\"HEAD\");\n            HttpURLConnection.setFollowRedirects(false);\n            connect.connect();\n            HttpURLConnection.setFollowRedirects(true);\n            if (connect.getResponseCode() == 303) {\n                String surl = connect.getHeaderField(\"Location\");\n                if (surl.startsWith(fo.wfs.root.toString())) {\n                    realName = surl.substring(fo.wfs.root.toString().length());\n                }\n                connect.disconnect();\n                ur = new URL(fo.wfs.getRootURL(), realName);\n                connect = (HttpURLConnection) ur.openConnection();\n                connect.setRequestMethod(\"HEAD\");\n                connect.connect();\n            }\n            exists = connect.getResponseCode() != 404;\n            Map<String, String> result = new HashMap<String, String>();\n            Map<String, List<String>> fields = connect.getHeaderFields();\n            for (Entry<String, List<String>> e : fields.entrySet()) {\n                String key = e.getKey();\n                List<String> value = e.getValue();\n                result.put(key, value.get(0));\n            }\n            result.put(META_EXIST, String.valueOf(exists));\n            connect.disconnect();\n            return result;\n        } else {\n            Map<String, String> result = new HashMap<String, String>();\n            URL url = new URL(fo.wfs.getRootURL(), fo.pathname);\n            URLConnection urlc = url.openConnection();\n            try {\n                urlc.connect();\n                urlc.getInputStream().close();\n                result.put(META_EXIST, \"true\");\n            } catch (IOException ex) {\n                result.put(META_EXIST, \"false\");\n            }\n            return result;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10451698",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void copy(File source, File destinationDirectory) throws IOException {\n        if (source.isDirectory()) {\n            File newDir = new File(destinationDirectory, source.getName());\n            newDir.mkdir();\n            File[] children = source.listFiles();\n            for (int i = 0; i < children.length; i++) {\n                if (children[i].getName().equals(\".svn\")) {\n                    continue;\n                }\n                copy(children[i], newDir);\n            }\n        } else {\n            File newFile = new File(destinationDirectory, source.getName());\n            if (newFile.exists() && source.lastModified() == newFile.lastModified()) {\n                return;\n            }\n            FileOutputStream output = new FileOutputStream(newFile);\n            FileInputStream input = new FileInputStream(source);\n            byte[] buff = new byte[2048];\n            int read = 0;\n            while ((read = input.read(buff)) > 0) {\n                output.write(buff, 0, read);\n            }\n            output.flush();\n            output.close();\n            input.close();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10453631",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic synchronized String encrypt(String plaintext) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public synchronized String encrypt(String plaintext) {\n        MessageDigest md = null;\n        try {\n            md = MessageDigest.getInstance(\"SHA\");\n            md.update(plaintext.getBytes(\"UTF-8\"));\n        } catch (NoSuchAlgorithmException e) {\n            log().error(\"failed to encrypt the password.\", e);\n            throw new RuntimeException(\"failed to encrypt the password.\", e);\n        } catch (UnsupportedEncodingException e) {\n            log().error(\"failed to encrypt the password.\", e);\n            throw new RuntimeException(\"failed to encrypt the password.\", e);\n        }\n        byte raw[] = md.digest();\n        String hash = (new BASE64Encoder()).encode(raw);\n        return hash;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01045723",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void handlePeerEvent(PeerEvent event) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n    public void handlePeerEvent(PeerEvent event) {\n        if (event.geteventInfo() instanceof EventServiceInfo) {\n            EventServiceInfo info = (EventServiceInfo) event.geteventInfo();\n            if (info.getServiceState() != ServiceState.Deployed) return;\n            long bid = info.getBundleId();\n            Bundle bundle = context.getBundle(bid);\n            Enumeration entries = bundle.findEntries(\"OSGI-INF/PrivacyPolicy/\", \"*.xml\", true);\n            if (entries != null) {\n                if (entries.hasMoreElements()) {\n                    try {\n                        URL url = (URL) entries.nextElement();\n                        BufferedInputStream in = new BufferedInputStream(url.openStream());\n                        XMLPolicyReader reader = new XMLPolicyReader(this.context);\n                        RequestPolicy policy = reader.readPolicyFromFile(in);\n                        if (policy != null) {\n                            this.policyMgr.addPrivacyPolicyForService(info.getServiceID(), policy);\n                        }\n                    } catch (IOException ioe) {\n                    }\n                }\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10460548",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void parse() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void parse() {\n        InputSource urlInputStream = null;\n        SAXParserFactory spf = null;\n        SAXParser sp = null;\n        HttpURLConnection conn = null;\n        try {\n            URL url = new URL(this.urlString);\n            _setProxy();\n            conn = (HttpURLConnection) url.openConnection();\n            urlInputStream = new InputSource(StreamUtils.inputStreamToReader(conn.getInputStream()));\n            spf = SAXParserFactory.newInstance();\n            if (spf != null) {\n                sp = spf.newSAXParser();\n                sp.parse(urlInputStream, this);\n            }\n        } catch (Exception e) {\n            if (conn != null) {\n                if (conn.getHeaderField(\"X-RateLimit-Limit\") != null) {\n                    String rateLimit = conn.getHeaderField(\"X-RateLimit-Limit\");\n                    String rateRemaining = conn.getHeaderField(\"X-RateLimit-Remaining\");\n                    long rateReset = Long.valueOf(conn.getHeaderField(\"X-RateLimit-Reset\")) * 1000;\n                    LOG.warn(\"Possible rate limits?  LIMIT:\" + rateLimit + \"  REMAINING:\" + rateRemaining + \"  RESET:\" + new Date(rateReset));\n                }\n            }\n            e.printStackTrace();\n            LOG.warn(\"error parsing rss feed\", e);\n        } finally {\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10463583",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static Document getXHTMLDocument(URL _url) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static Document getXHTMLDocument(URL _url) throws IOException {\n        final Tidy tidy = new Tidy();\n        tidy.setQuiet(true);\n        tidy.setShowWarnings(false);\n        tidy.setXmlOut(true);\n        final BufferedInputStream input_stream = new BufferedInputStream(_url.openStream());\n        return tidy.parseDOM(input_stream, null);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10466758",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void handleRequestInternal(final HttpServletRequest httpServletRequest, final HttpServletResponse httpServletResponse) throws ServletException, IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void handleRequestInternal(final HttpServletRequest httpServletRequest, final HttpServletResponse httpServletResponse) throws ServletException, IOException {\n        final String servetPath = httpServletRequest.getServletPath();\n        final String previousToken = httpServletRequest.getHeader(IF_NONE_MATCH);\n        final String currentToken = getETagValue(httpServletRequest);\n        httpServletResponse.setHeader(ETAG, currentToken);\n        final Date modifiedDate = new Date(httpServletRequest.getDateHeader(IF_MODIFIED_SINCE));\n        final Calendar calendar = Calendar.getInstance();\n        final Date now = calendar.getTime();\n        calendar.setTime(modifiedDate);\n        calendar.add(Calendar.MINUTE, getEtagExpiration());\n        if (currentToken.equals(previousToken) && (now.getTime() < calendar.getTime().getTime())) {\n            httpServletResponse.sendError(HttpServletResponse.SC_NOT_MODIFIED);\n            httpServletResponse.setHeader(LAST_MODIFIED, httpServletRequest.getHeader(IF_MODIFIED_SINCE));\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"ETag the same, will return 304\");\n            }\n        } else {\n            httpServletResponse.setDateHeader(LAST_MODIFIED, (new Date()).getTime());\n            final String width = httpServletRequest.getParameter(Constants.WIDTH);\n            final String height = httpServletRequest.getParameter(Constants.HEIGHT);\n            final ImageNameStrategy imageNameStrategy = imageService.getImageNameStrategy(servetPath);\n            String code = imageNameStrategy.getCode(servetPath);\n            String fileName = imageNameStrategy.getFileName(servetPath);\n            final String imageRealPathPrefix = getRealPathPrefix(httpServletRequest.getServerName().toLowerCase());\n            String original = imageRealPathPrefix + imageNameStrategy.getFullFileNamePath(fileName, code);\n            final File origFile = new File(original);\n            if (!origFile.exists()) {\n                code = Constants.NO_IMAGE;\n                fileName = imageNameStrategy.getFileName(code);\n                original = imageRealPathPrefix + imageNameStrategy.getFullFileNamePath(fileName, code);\n            }\n            String resizedImageFileName = null;\n            if (width != null && height != null && imageService.isSizeAllowed(width, height)) {\n                resizedImageFileName = imageRealPathPrefix + imageNameStrategy.getFullFileNamePath(fileName, code, width, height);\n            }\n            final File imageFile = getImageFile(original, resizedImageFileName, width, height);\n            final FileInputStream fileInputStream = new FileInputStream(imageFile);\n            IOUtils.copy(fileInputStream, httpServletResponse.getOutputStream());\n            fileInputStream.close();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10467996",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void copyFile(String oldPath, String newPath) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void copyFile(String oldPath, String newPath) {\n        try {\n            int bytesum = 0;\n            int byteread = 0;\n            File oldfile = new File(oldPath);\n            if (oldfile.exists()) {\n                InputStream inStream = new FileInputStream(oldPath);\n                FileOutputStream fs = new FileOutputStream(newPath);\n                byte[] buffer = new byte[1444];\n                while ((byteread = inStream.read(buffer)) != -1) {\n                    bytesum += byteread;\n                    System.out.println(bytesum);\n                    fs.write(buffer, 0, byteread);\n                }\n                inStream.close();\n            }\n        } catch (Exception e) {\n            System.out.println(\"\u590d\u5236\u5355\u4e2a\u6587\u4ef6\u64cd\u4f5c\u51fa\u9519\");\n            e.printStackTrace();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10473584",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic ValidationReport validate(OriginalDeployUnitDescription unit) throws UnitValidationException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public ValidationReport validate(OriginalDeployUnitDescription unit) throws UnitValidationException {\n        ValidationReport vr = new DefaultValidationReport();\n        errorHandler = new SimpleErrorHandler(vr);\n        vr.setFileUri(unit.getAbsolutePath());\n        SAXParser parser;\n        SAXReader reader = null;\n        try {\n            parser = factory.newSAXParser();\n            reader = new SAXReader(parser.getXMLReader());\n            reader.setValidation(false);\n            reader.setErrorHandler(this.errorHandler);\n        } catch (ParserConfigurationException e) {\n            throw new UnitValidationException(\"The configuration of parser is illegal.\", e);\n        } catch (SAXException e) {\n            String m = \"Something is wrong when register schema\";\n            logger.error(m, e);\n            throw new UnitValidationException(m, e);\n        }\n        ZipInputStream zipInputStream;\n        InputStream tempInput = null;\n        try {\n            tempInput = new FileInputStream(unit.getAbsolutePath());\n        } catch (FileNotFoundException e1) {\n            String m = String.format(\"The file [%s] don't exist.\", unit.getAbsolutePath());\n            logger.error(m, e1);\n            throw new UnitValidationException(m, e1);\n        }\n        zipInputStream = new ZipInputStream(tempInput);\n        ZipEntry zipEntry = null;\n        try {\n            zipEntry = zipInputStream.getNextEntry();\n            if (zipEntry == null) {\n                String m = String.format(\"Error when get zipEntry. Maybe the [%s] is not zip file!\", unit.getAbsolutePath());\n                logger.error(m);\n                throw new UnitValidationException(m);\n            }\n            while (zipEntry != null) {\n                if (configFiles.contains(zipEntry.getName())) {\n                    byte[] extra = new byte[(int) zipEntry.getSize()];\n                    zipInputStream.read(extra);\n                    File file = File.createTempFile(\"temp\", \"extra\");\n                    file.deleteOnExit();\n                    logger.info(\"[TempFile:]\" + file.getAbsoluteFile());\n                    ByteArrayInputStream byteInputStream = new ByteArrayInputStream(extra);\n                    FileOutputStream tempFileOutputStream = new FileOutputStream(file);\n                    IOUtils.copy(byteInputStream, tempFileOutputStream);\n                    tempFileOutputStream.flush();\n                    IOUtils.closeQuietly(tempFileOutputStream);\n                    InputStream inputStream = new FileInputStream(file);\n                    reader.read(inputStream, unit.getAbsolutePath() + \":\" + zipEntry.getName());\n                    IOUtils.closeQuietly(inputStream);\n                }\n                zipEntry = zipInputStream.getNextEntry();\n            }\n        } catch (IOException e) {\n            ValidationMessage vm = new XMLValidationMessage(\"IOError\", 0, 0, unit.getUrl() + \":\" + zipEntry.getName(), e);\n            vr.addValidationMessage(vm);\n        } catch (DocumentException e) {\n            ValidationMessage vm = new XMLValidationMessage(\"Document Error.\", 0, 0, unit.getUrl() + \":\" + zipEntry.getName(), e);\n            vr.addValidationMessage(vm);\n        } finally {\n            IOUtils.closeQuietly(tempInput);\n            IOUtils.closeQuietly(zipInputStream);\n        }\n        return vr;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10478671",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void copyFile(File sourcefile, File targetfile) {\n        BufferedInputStream in = null;\n        BufferedOutputStream out = null;\n        try {\n            in = new BufferedInputStream(new FileInputStream(sourcefile));\n            out = new BufferedOutputStream(new FileOutputStream(targetfile));\n            byte[] buffer = new byte[4096];\n            int bytesread = 0;\n            while ((bytesread = in.read(buffer)) >= 0) {\n                out.write(buffer, 0, bytesread);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (in != null) {\n                    in.close();\n                }\n                if (out != null) {\n                    out.close();\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10479536",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void bubbleSort(int values[]) {\n        PerfMonTimer timerOuter = PerfMonTimer.start(\"SortingTest.bubbleSort\");\n        try {\n            int len = values.length - 1;\n            for (int i = 0; i < len; i++) {\n                for (int j = 0; j < len - i; j++) {\n                    if (values[j] > values[j + 1]) {\n                        int tmp = values[j];\n                        values[j] = values[j + 1];\n                        values[j + 1] = tmp;\n                    }\n                }\n            }\n        } finally {\n            PerfMonTimer.stop(timerOuter);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10480049",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static SearchItem register(String... args) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static SearchItem register(String... args) {\n        SearchItem _return = new SearchItem();\n        String line = null;\n        try {\n            DefaultHttpClient httpClient = new DefaultHttpClient();\n            HttpPost httpPost = new HttpPost(URL_REGISTER);\n            List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(6);\n            nameValuePairs.add(new BasicNameValuePair(\"format\", \"xml\"));\n            nameValuePairs.add(new BasicNameValuePair(\"firtname\", args[0]));\n            nameValuePairs.add(new BasicNameValuePair(\"lastname\", args[1]));\n            nameValuePairs.add(new BasicNameValuePair(\"email\", args[2]));\n            nameValuePairs.add(new BasicNameValuePair(\"phone\", args[3]));\n            nameValuePairs.add(new BasicNameValuePair(\"password\", args[4]));\n            nameValuePairs.add(new BasicNameValuePair(\"confirmpassword\", args[5]));\n            httpPost.setEntity(new UrlEncodedFormEntity(nameValuePairs));\n            httpPost.setEntity(new UrlEncodedFormEntity(nameValuePairs));\n            HttpResponse response = httpClient.execute(httpPost);\n            line = EntityUtils.toString(response.getEntity());\n            Document document = XMLfunctions.XMLfromString(line);\n            NodeList nodes = document.getElementsByTagName(\"response\");\n            Element e = (Element) nodes.item(0);\n            _return.set(0, XMLfunctions.getValue(e, \"success\"));\n            if (\"false\".endsWith(_return.get(0))) {\n                _return.set(1, XMLfunctions.getValue(e, \"error\"));\n            } else {\n                _return.set(1, XMLfunctions.getValue(e, \"message\"));\n            }\n            return _return;\n        } catch (Exception e) {\n            line = \"<results status=\\\"error\\\"><msg>Can't connect to server</msg></results>\";\n            line = null;\n            _return.set(0, \"false\");\n            _return.set(1, \"\");\n        }\n        return _return;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10480050",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static SearchItem loadRecord(String id, boolean isContact) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static SearchItem loadRecord(String id, boolean isContact) {\n        String line = null;\n        try {\n            DefaultHttpClient httpClient = new DefaultHttpClient();\n            HttpPost httpPost = new HttpPost(isContact ? URL_RECORD_CONTACT : URL_RECORD_COMPANY);\n            List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(6);\n            nameValuePairs.add(new BasicNameValuePair(\"format\", \"xml\"));\n            nameValuePairs.add(new BasicNameValuePair(\"token\", Common.token));\n            nameValuePairs.add(new BasicNameValuePair(\"id\", id));\n            httpPost.setEntity(new UrlEncodedFormEntity(nameValuePairs));\n            httpPost.setEntity(new UrlEncodedFormEntity(nameValuePairs));\n            HttpResponse response = httpClient.execute(httpPost);\n            line = EntityUtils.toString(response.getEntity());\n            Document document = XMLfunctions.XMLfromString(line);\n            NodeList nodes = document.getElementsByTagName(\"response\");\n            Element e = (Element) nodes.item(0);\n            String Name__Last__First_ = XMLfunctions.getValue(e, isContact ? \"Name__Last__First_\" : \"Name\");\n            String phone = \"\";\n            if (!isContact) phone = XMLfunctions.getValue(e, \"Phone\");\n            String Email1 = XMLfunctions.getValue(e, isContact ? \"Personal_Email\" : \"Email\");\n            String Home_Fax = XMLfunctions.getValue(e, isContact ? \"Home_Fax\" : \"Fax1\");\n            String Address1 = XMLfunctions.getValue(e, \"Address1\");\n            String Address2 = XMLfunctions.getValue(e, \"Address2\");\n            String City = XMLfunctions.getValue(e, \"City\");\n            String State = XMLfunctions.getValue(e, \"State\");\n            String Zip = XMLfunctions.getValue(e, \"Zip\");\n            String Country = XMLfunctions.getValue(e, \"Country\");\n            String Profile = XMLfunctions.getValue(e, \"Profile\");\n            String success = XMLfunctions.getValue(e, \"success\");\n            String error = XMLfunctions.getValue(e, \"error\");\n            SearchItem item = new SearchItem();\n            item.set(1, Name__Last__First_);\n            item.set(2, phone);\n            item.set(3, phone);\n            item.set(4, Email1);\n            item.set(5, Home_Fax);\n            item.set(6, Address1);\n            item.set(7, Address2);\n            item.set(8, City);\n            item.set(9, State);\n            item.set(10, Zip);\n            item.set(11, Profile);\n            item.set(12, Country);\n            item.set(13, success);\n            item.set(14, error);\n            return item;\n        } catch (Exception e) {\n            line = \"<results status=\\\"error\\\"><msg>Can't connect to server</msg></results>\";\n            line = null;\n        }\n        return null;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10480051",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static RecordResponse loadRecord(RecordRequest recordRequest) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static RecordResponse loadRecord(RecordRequest recordRequest) {\n        RecordResponse recordResponse = new RecordResponse();\n        try {\n            DefaultHttpClient httpClient = new DefaultHttpClient();\n            HttpPost httpPost = new HttpPost(recordRequest.isContact() ? URL_RECORD_CONTACT : URL_RECORD_COMPANY);\n            List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(6);\n            nameValuePairs.add(new BasicNameValuePair(\"format\", \"xml\"));\n            nameValuePairs.add(new BasicNameValuePair(\"token\", recordRequest.getToken()));\n            nameValuePairs.add(new BasicNameValuePair(\"id\", recordRequest.getId()));\n            httpPost.setEntity(new UrlEncodedFormEntity(nameValuePairs));\n            httpPost.setEntity(new UrlEncodedFormEntity(nameValuePairs));\n            HttpResponse response = httpClient.execute(httpPost);\n            String line = EntityUtils.toString(response.getEntity());\n            Document document = XMLfunctions.XMLfromString(line);\n            NodeList nodes = document.getElementsByTagName(\"response\");\n            Element e = (Element) nodes.item(0);\n            String Name__Last__First_ = XMLfunctions.getValue(e, recordRequest.isContact() ? \"Name__Last__First_\" : \"Name\");\n            String phone = \"\";\n            if (!recordRequest.isContact()) phone = XMLfunctions.getValue(e, \"Phone\");\n            String Email1 = XMLfunctions.getValue(e, recordRequest.isContact() ? \"Personal_Email\" : \"Email\");\n            String Home_Fax = XMLfunctions.getValue(e, recordRequest.isContact() ? \"Home_Fax\" : \"Fax1\");\n            String Address1 = XMLfunctions.getValue(e, \"Address1\");\n            String Address2 = XMLfunctions.getValue(e, \"Address2\");\n            String City = XMLfunctions.getValue(e, \"City\");\n            String State = XMLfunctions.getValue(e, \"State\");\n            String Zip = XMLfunctions.getValue(e, \"Zip\");\n            String Country = XMLfunctions.getValue(e, \"Country\");\n            String Profile = XMLfunctions.getValue(e, \"Profile\");\n            String success = XMLfunctions.getValue(e, \"success\");\n            String error = XMLfunctions.getValue(e, \"error\");\n            recordResponse.setName(Name__Last__First_);\n            recordResponse.setPhone(phone);\n            recordResponse.setEmail(Email1);\n            recordResponse.setHomeFax(Home_Fax);\n            recordResponse.setAddress1(Address1);\n            recordResponse.setAddress2(Address2);\n            recordResponse.setCity(City);\n            recordResponse.setState(State);\n            recordResponse.setZip(Zip);\n            recordResponse.setProfile(Profile);\n            recordResponse.setCountry(Country);\n            recordResponse.setSuccess(success);\n            recordResponse.setError(error);\n        } catch (Exception e) {\n        }\n        return recordResponse;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10482004",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void main(String[] args) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void main(String[] args) throws IOException {\n        System.out.println(\"Start filtering zgps...\");\n        final Config config = ConfigUtils.loadConfig(args[0]);\n        final String CONFIG_MODULE = \"GPSFilterZGPS\";\n        File sourceFileSelectedStages = new File(config.findParam(CONFIG_MODULE, \"sourceFileSelectedStages\"));\n        File sourceFileZGPS = new File(config.findParam(CONFIG_MODULE, \"sourceFileZGPS\"));\n        File targetFile = new File(config.findParam(CONFIG_MODULE, \"targetFile\"));\n        System.out.println(\"Start reading selected stages...\");\n        FilterZGPSSelectedStages selectedStages = new FilterZGPSSelectedStages();\n        selectedStages.createSelectedStages(sourceFileSelectedStages);\n        System.out.println(\"Done. \" + selectedStages.getSelectedStages().size() + \" stages were stored\");\n        System.out.println(\"Start reading and writing zgps...\");\n        try {\n            BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(sourceFileZGPS)));\n            BufferedWriter out = new BufferedWriter(new FileWriter(targetFile));\n            out.write(in.readLine());\n            out.newLine();\n            String lineFromInputFile;\n            while ((lineFromInputFile = in.readLine()) != null) {\n                String[] entries = lineFromInputFile.split(\"\\t\");\n                if (selectedStages.containsStage(Integer.parseInt(entries[0]), Integer.parseInt(entries[1]), Integer.parseInt(entries[2]))) {\n                    out.write(lineFromInputFile);\n                    out.newLine();\n                    out.flush();\n                }\n            }\n            in.close();\n            out.close();\n        } catch (FileNotFoundException e) {\n            System.out.println(\"Could not find source file for selected stages.\");\n            e.printStackTrace();\n        } catch (IOException e) {\n            System.out.println(\"IO Exception while reading or writing zgps.\");\n            e.printStackTrace();\n        }\n        System.out.println(\"Done.\");\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01048665",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copy(String from_name, String to_name) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copy(String from_name, String to_name) throws IOException {\n        File from_file = new File(from_name);\n        File to_file = new File(to_name);\n        if (!from_file.exists()) abort(\"FileCopy: no such source file: \" + from_name);\n        if (!from_file.isFile()) abort(\"FileCopy: can't copy directory: \" + from_name);\n        if (!from_file.canRead()) abort(\"FileCopy: source file is unreadable: \" + from_name);\n        if (to_file.isDirectory()) to_file = new File(to_file, from_file.getName());\n        String parent = to_file.getParent();\n        if (parent == null) parent = System.getProperty(\"user.dir\");\n        File dir = new File(parent);\n        if (!dir.exists()) abort(\"FileCopy: destination directory doesn't exist: \" + parent);\n        if (dir.isFile()) abort(\"FileCopy: destination is not a directory: \" + parent);\n        if (!dir.canWrite()) abort(\"FileCopy: destination directory is unwriteable: \" + parent);\n        FileInputStream from = null;\n        FileOutputStream to = null;\n        try {\n            from = new FileInputStream(from_file);\n            to = new FileOutputStream(to_file);\n            byte[] buffer = new byte[4096];\n            int bytes_read;\n            while ((bytes_read = from.read(buffer)) != -1) to.write(buffer, 0, bytes_read);\n        } finally {\n            if (from != null) try {\n                from.close();\n            } catch (IOException e) {\n                ;\n            }\n            if (to != null) try {\n                to.close();\n            } catch (IOException e) {\n                ;\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01048705",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String encriptarPassword(String aPassword) throws BusinessException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String encriptarPassword(String aPassword) throws BusinessException {\n        ILogger logger = LogFactory.getLogger(User.class);\n        String methodId = \"encriptarPassword\";\n        try {\n            MessageDigest currentAlgorithm = MessageDigest.getInstance(\"MD5\");\n            currentAlgorithm.reset();\n            currentAlgorithm.update(aPassword.getBytes());\n            byte[] hash = currentAlgorithm.digest();\n            String d = \"\";\n            for (int i = 0; i < hash.length; i++) {\n                int v = hash[i] & 0xFF;\n                if (v < 16) d += \"0\";\n                d += Integer.toString(v, 16).toUpperCase();\n            }\n            return d.toLowerCase();\n        } catch (NoSuchAlgorithmException nsae) {\n            logger.logError(methodId + \"error al encriptar password:\" + nsae, nsae);\n            throw new BusinessException(\"Error al encriptar password\");\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10489209",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static ISimpleChemObjectReader createReader(URL url, String urlString, String type) throws CDKException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static ISimpleChemObjectReader createReader(URL url, String urlString, String type) throws CDKException {\n        if (type == null) {\n            type = \"mol\";\n        }\n        ISimpleChemObjectReader cor = null;\n        try {\n            Reader input = new BufferedReader(getReader(url));\n            FormatFactory formatFactory = new FormatFactory(8192);\n            IChemFormat format = formatFactory.guessFormat(input);\n            if (format != null) {\n                if (format instanceof RGroupQueryFormat) {\n                    cor = new RGroupQueryReader();\n                    cor.setReader(input);\n                } else if (format instanceof CMLFormat) {\n                    cor = new CMLReader(urlString);\n                    cor.setReader(url.openStream());\n                } else if (format instanceof MDLV2000Format) {\n                    cor = new MDLV2000Reader(getReader(url));\n                    cor.setReader(input);\n                }\n            }\n        } catch (Exception exc) {\n            exc.printStackTrace();\n        }\n        if (cor == null) {\n            if (type.equals(JCPFileFilter.cml) || type.equals(JCPFileFilter.xml)) {\n                cor = new CMLReader(urlString);\n            } else if (type.equals(JCPFileFilter.sdf)) {\n                cor = new MDLV2000Reader(getReader(url));\n            } else if (type.equals(JCPFileFilter.mol)) {\n                cor = new MDLV2000Reader(getReader(url));\n            } else if (type.equals(JCPFileFilter.inchi)) {\n                try {\n                    cor = new INChIReader(new URL(urlString).openStream());\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            } else if (type.equals(JCPFileFilter.rxn)) {\n                cor = new MDLRXNV2000Reader(getReader(url));\n            } else if (type.equals(JCPFileFilter.smi)) {\n                cor = new SMILESReader(getReader(url));\n            }\n        }\n        if (cor == null) {\n            throw new CDKException(GT._(\"Could not determine file format\"));\n        }\n        if (cor instanceof MDLV2000Reader) {\n            try {\n                BufferedReader in = new BufferedReader(getReader(url));\n                String line;\n                while ((line = in.readLine()) != null) {\n                    if (line.equals(\"$$$$\")) {\n                        String message = GT._(\"It seems you opened a mol or sdf\" + \" file containing several molecules. \" + \"Only the first one will be shown\");\n                        JOptionPane.showMessageDialog(null, message, GT._(\"sdf-like file\"), JOptionPane.INFORMATION_MESSAGE);\n                        break;\n                    }\n                }\n            } catch (IOException ex) {\n                ex.printStackTrace();\n            }\n        }\n        return cor;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10494402",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private Comic[] getAllComics() {\n        try {\n            URL comicURL = new URL(comicSite + \"list\");\n            InputStream is = comicURL.openStream();\n            BufferedReader buffread = new BufferedReader(new InputStreamReader(is));\n            Vector tmplist = new Vector();\n            while (buffread.ready()) {\n                String comic = buffread.readLine();\n                tmplist.add(comic);\n            }\n            Comic[] list = new Comic[tmplist.size()];\n            activated = new boolean[tmplist.size()];\n            titles = new String[tmplist.size()];\n            for (int i = 0; i < tmplist.size(); i++) {\n                try {\n                    URL curl = new URL(comicSite + (String) tmplist.get(i));\n                    BufferedInputStream bis = new BufferedInputStream(curl.openStream());\n                    Properties cprop = new Properties();\n                    cprop.load(bis);\n                    Comic c = new Comic(cprop, false);\n                    list[i] = c;\n                    titles[i] = c.getName();\n                    activated[i] = comicsmanager.isLoaded(c.getName());\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n            for (int i = 0; i < list.length; i++) {\n                System.out.println(list[i]);\n            }\n            return list;\n        } catch (MalformedURLException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10499553",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static InputStream connect(final String url) throws IOException {\n        InputStream in = null;\n        try {\n            final URLConnection conn = new URL(url).openConnection();\n            conn.setConnectTimeout(YahooGeocoding.connectTimeOut);\n            conn.setReadTimeout(YahooGeocoding.readTimeOut);\n            conn.setRequestProperty(\"User-Agent\", YahooGeocoding.USER_AGENT);\n            in = conn.getInputStream();\n            return in;\n        } catch (final IOException e) {\n            Util.d(\"problems connecting to geonames url \" + url + \"Exception:\" + e);\n        }\n        return in;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01050422",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String getSHA1Digest(String inputStr) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String getSHA1Digest(String inputStr) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        MessageDigest md = null;\n        byte[] sha1hash = null;\n        md = MessageDigest.getInstance(\"SHA\");\n        sha1hash = new byte[40];\n        md.update(inputStr.getBytes(\"iso-8859-1\"), 0, inputStr.length());\n        sha1hash = md.digest();\n        return convertToHex(sha1hash);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10504714",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private MediaWikiResult getFromUri(String url) throws OntologyServiceException {\n        try {\n            logger.info(\"getting \" + url);\n            HttpURLConnection connection = (java.net.HttpURLConnection) new URL(url).openConnection();\n            connection.setRequestProperty(\"User-Agent\", \"OntoCat-\" + Math.random());\n            BufferedInputStream bin = new BufferedInputStream(connection.getInputStream());\n            JAXBContext jaxbContext = JAXBContext.newInstance(\"uk.ac.ebi.ontocat.mediawiki.jaxb\");\n            Unmarshaller unmarshaller = jaxbContext.createUnmarshaller();\n            return (MediaWikiResult) unmarshaller.unmarshal(bin);\n        } catch (Exception e) {\n            e.printStackTrace();\n            throw new OntologyServiceException(e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10516730",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic final boolean login(String user, String pass) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public final boolean login(String user, String pass) {\n        if (user == null || pass == null) return false;\n        connectionInfo.setData(\"com.tensegrity.palojava.pass#\" + user, pass);\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            md.update(pass.getBytes());\n            pass = asHexString(md.digest());\n        } catch (NoSuchAlgorithmException ex) {\n            throw new PaloException(\"Failed to create encrypted password for \" + \"user '\" + user + \"'!\", ex);\n        }\n        connectionInfo.setUser(user);\n        connectionInfo.setPassword(pass);\n        return loginInternal(user, pass);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10520135",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic RegionInfo(String name, int databaseID, int units, float xMin, float xMax, float yMin, float yMax, float zMin, float zMax, String imageURL) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public RegionInfo(String name, int databaseID, int units, float xMin, float xMax, float yMin, float yMax, float zMin, float zMax, String imageURL) {\n        this.name = name;\n        this.databaseID = databaseID;\n        this.units = units;\n        this.xMin = xMin;\n        this.xMax = xMax;\n        this.yMin = yMin;\n        this.yMax = yMax;\n        this.zMin = zMin;\n        this.zMax = zMax;\n        try {\n            MessageDigest digest = MessageDigest.getInstance(\"SHA-1\");\n            digest.update(this.name.getBytes());\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            DataOutputStream daos = new DataOutputStream(baos);\n            daos.writeInt(this.databaseID);\n            daos.writeInt(this.units);\n            daos.writeDouble(this.xMin);\n            daos.writeDouble(this.xMax);\n            daos.writeDouble(this.yMin);\n            daos.writeDouble(this.yMax);\n            daos.writeDouble(this.zMin);\n            daos.writeDouble(this.zMax);\n            daos.flush();\n            byte[] hashValue = digest.digest(baos.toByteArray());\n            int hashCode = 0;\n            for (int i = 0; i < hashValue.length; i++) {\n                hashCode += (int) hashValue[i] << (i % 4);\n            }\n            this.hashcode = hashCode;\n        } catch (Exception e) {\n            throw new IllegalArgumentException(\"Error occurred while generating hashcode for region \" + this.name);\n        }\n        if (imageURL != null) {\n            URL url = null;\n            try {\n                url = new URL(imageURL);\n            } catch (MalformedURLException murle) {\n            }\n            if (url != null) {\n                BufferedImage tmpImage = null;\n                try {\n                    tmpImage = ImageIO.read(url);\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n                mapImage = tmpImage;\n            } else this.mapImage = null;\n        } else this.mapImage = null;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10521243",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic String md5(String phrase) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public String md5(String phrase) {\n        MessageDigest m;\n        String coded = new String();\n        try {\n            m = MessageDigest.getInstance(\"MD5\");\n            m.update(phrase.getBytes(), 0, phrase.length());\n            coded = (new BigInteger(1, m.digest()).toString(16)).toString();\n        } catch (NoSuchAlgorithmException ex) {\n            ex.printStackTrace();\n        }\n        if (coded.length() < 32) {\n            coded = \"0\" + coded;\n        }\n        return coded;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10524166",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copyURLToFile(URL source, File destination) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copyURLToFile(URL source, File destination) throws IOException {\n        InputStream input = source.openStream();\n        try {\n            FileOutputStream output = openOutputStream(destination);\n            try {\n                IOUtils.copy(input, output);\n            } finally {\n                IOUtils.closeQuietly(output);\n            }\n        } finally {\n            IOUtils.closeQuietly(input);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10531054",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic boolean open(String mode) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public boolean open(String mode) {\n        if (source instanceof String) return false; else if (mode == null) mode = \"\"; else mode = mode.toLowerCase();\n        boolean toread = false, towrite = false;\n        if (mode.indexOf(\"r\") >= 0) toread = true;\n        if (mode.indexOf(\"w\") >= 0) towrite = true;\n        if (!toread && !towrite) toread = towrite = true;\n        try {\n            if (toread && input == null) {\n                if (isDirectory()) return true; else if (reader != null) return true; else if (source instanceof File) input = new FileInputStream((File) source); else if (source instanceof Socket) input = ((Socket) source).getInputStream(); else if (source instanceof URL) return getUrlInfo(toread, towrite); else return false;\n            }\n            if (towrite && output == null) {\n                if (isDirectory()) return false; else if (writer != null) return true; else if (source instanceof File) output = new FileOutputStream((File) source); else if (source instanceof Socket) output = ((Socket) source).getOutputStream(); else if (source instanceof URL) return getUrlInfo(toread, towrite); else return false;\n            }\n            return true;\n        } catch (Exception e) {\n            return false;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_00105319",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private String MD5Sum(String input) {\n        String hashtext = null;\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            md.reset();\n            md.update(input.getBytes());\n            byte[] digest = md.digest();\n            BigInteger bigInt = new BigInteger(1, digest);\n            hashtext = bigInt.toString(16);\n            while (hashtext.length() < 32) {\n                hashtext = \"0\" + hashtext;\n            }\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n        return hashtext;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10535319",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static Collection<String> createTopLevelFiles(Configuration configuration, Collections collections, Sets sets) throws FlickrException, SAXException, IOException, JDOMException, TransformerException {\n        Collection<String> createdFiles = new HashSet<String>();\n        File toplevelXmlFilename = getToplevelXmlFilename(configuration.photosBaseDirectory);\n        Logger.getLogger(FlickrDownload.class).info(\"Creating XML file \" + toplevelXmlFilename.getAbsolutePath());\n        MediaIndexer indexer = new XmlMediaIndexer(configuration);\n        Element toplevel = new Element(\"flickr\").addContent(XmlUtils.createApplicationXml()).addContent(XmlUtils.createUserXml(configuration)).addContent(collections.createTopLevelXml()).addContent(sets.createTopLevelXml()).addContent(new Stats(sets).createStatsXml(indexer));\n        createdFiles.addAll(indexer.writeIndex());\n        XmlUtils.outputXmlFile(toplevelXmlFilename, toplevel);\n        createdFiles.add(toplevelXmlFilename.getName());\n        Logger.getLogger(FlickrDownload.class).info(\"Copying support files and performing XSLT transformations\");\n        IOUtils.copyToFileAndCloseStreams(XmlUtils.class.getResourceAsStream(\"xslt/\" + PHOTOS_CSS_FILENAME), new File(configuration.photosBaseDirectory, PHOTOS_CSS_FILENAME));\n        createdFiles.add(PHOTOS_CSS_FILENAME);\n        IOUtils.copyToFileAndCloseStreams(XmlUtils.class.getResourceAsStream(\"xslt/\" + PLAY_ICON_FILENAME), new File(configuration.photosBaseDirectory, PLAY_ICON_FILENAME));\n        createdFiles.add(PLAY_ICON_FILENAME);\n        XmlUtils.performXsltTransformation(configuration, \"all_sets.xsl\", toplevelXmlFilename, new File(configuration.photosBaseDirectory, ALL_SETS_HTML_FILENAME));\n        createdFiles.add(ALL_SETS_HTML_FILENAME);\n        XmlUtils.performXsltTransformation(configuration, \"all_collections.xsl\", toplevelXmlFilename, new File(configuration.photosBaseDirectory, ALL_COLLECTIONS_HTML_FILENAME));\n        createdFiles.add(ALL_COLLECTIONS_HTML_FILENAME);\n        createdFiles.add(Collections.COLLECTIONS_ICON_DIRECTORY);\n        XmlUtils.performXsltTransformation(configuration, \"stats.xsl\", toplevelXmlFilename, new File(configuration.photosBaseDirectory, STATS_HTML_FILENAME));\n        createdFiles.add(STATS_HTML_FILENAME);\n        sets.performXsltTransformation();\n        for (AbstractSet set : sets.getSets()) {\n            createdFiles.add(set.getSetId());\n        }\n        return createdFiles;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10536444",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copyFile(File source, File destination) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copyFile(File source, File destination) throws IOException {\n            BufferedInputStream in = new BufferedInputStream(new FileInputStream(source));\n            BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(destination));\n            byte[] buffer = new byte[4096];\n            int read = -1;\n            while ((read = in.read(buffer)) != -1) {\n                out.write(buffer, 0, read);\n            }\n            out.flush();\n            out.close();\n            in.close();\n        }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10539421",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String sha1(String clearText, String seed) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String sha1(String clearText, String seed) {\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n            md.update((seed + clearText).getBytes());\n            return convertToHex(md.digest());\n        } catch (Exception e) {\n            throw new RuntimeException(e.getMessage(), e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10540676",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void checkForUpgrade(Event event) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void checkForUpgrade(Event event) throws Exception {\n        ((Component) UiUtil.findComponent(\"downloadUpgrade\")).setVisible(false);\n        ((Component) UiUtil.findComponent(\"applyUpgrade\")).setVisible(false);\n        ((Component) UiUtil.findComponent(\"restartRequiredHbox\")).setVisible(false);\n        ((Component) UiUtil.findComponent(\"restartRequiredAlert\")).setVisible(false);\n        new Command(\"DELETE FROM TBLINSTALLATION WHERE STATUS<>'APPLIED'\").executeNonQuery();\n        String clientAppliedVersion = new Command(\"SELECT MAX(VERSION) FROM TBLINSTALLATION WHERE STATUS='APPLIED'\").executeScalarAsString();\n        if (NullStatus.isNull(clientAppliedVersion)) {\n            clientAppliedVersion = \"20050101\";\n        }\n        String macquery = \"\";\n        String clientMAC = \"\";\n        String clientUNITID = UiUtil.getUNITUID();\n        ArrayList<String> macList = getMacList();\n        for (int i = 0; i < macList.size(); i++) {\n            clientMAC += macList.get(i) + \",\";\n            macquery += \"'\" + macList.get(i) + \"'\";\n            if (i < macList.size() - 1) {\n                macquery += \",\";\n            }\n        }\n        URL urlLICENSEQUERY = new URL(\"http://www.tegsoft.com/Tobe/forms/TobeOS/upgrade/upgrade_current.jsp?tegsoftCLIENTVERSION=\" + clientAppliedVersion + \"&tegsoftCLIENTUNITID=\" + clientUNITID + \"&tegsoftCLIENTMAC=\" + clientMAC + \"&tegsoftCOMMAND=LICENSEQUERY\");\n        URLConnection urlConnection = urlLICENSEQUERY.openConnection();\n        BufferedReader in = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));\n        String commingList = \"\";\n        String line;\n        while ((line = in.readLine()) != null) {\n            commingList += line;\n        }\n        in.close();\n        String licenseArray[] = commingList.split(\"</ROW>\");\n        if (licenseArray.length > 0) {\n            String fields[] = licenseArray[0].split(\"</FLD>\");\n            String STATUS = fields[0];\n            String ERRORMSG = fields[1];\n            if (\"FAIL\".equals(STATUS)) {\n                if (\"NOUNITID\".equals(ERRORMSG)) {\n                    UiUtil.showMessage(MessageType.ERROR, MessageUtil.getMessage(Upgrade.class, Messages.upgrade_1));\n                    return;\n                }\n                if (\"NOCUSTOMER\".equals(ERRORMSG)) {\n                    UiUtil.showMessage(MessageType.ERROR, MessageUtil.getMessage(Upgrade.class, Messages.upgrade_1));\n                    return;\n                }\n                if (\"NOVALIDLICENSE\".equals(ERRORMSG)) {\n                    UiUtil.showMessage(MessageType.ERROR, MessageUtil.getMessage(Upgrade.class, Messages.upgrade_2));\n                    return;\n                }\n                UiUtil.showMessage(MessageType.ERROR, MessageUtil.getMessage(Upgrade.class, Messages.upgrade_3));\n                return;\n            }\n        }\n        Dataset TBLLICENSE = new Dataset(\"TBLLICENSE\", \"TBLLICENSE\");\n        Command command = new Command(\"DELETE FROM TBLLICENSE WHERE UNITUID={UNITUID} AND (NOTES IN (\");\n        command.append(macquery);\n        command.append(\") OR NOTES IS NULL) \");\n        command.executeNonQuery();\n        for (int i = 1; i < licenseArray.length; i++) {\n            String fields[] = licenseArray[i].split(\"</FLD>\");\n            String LICTYPE = fields[0];\n            String UNIQUEKEY = fields[1];\n            String LICKEY = fields[2];\n            DataRow dataRow = TBLLICENSE.addNewDataRow();\n            dataRow.set(\"LICENSENAME\", LICTYPE);\n            dataRow.set(\"LICENSE\", LICKEY);\n            dataRow.set(\"NOTES\", UNIQUEKEY);\n            TBLLICENSE.save();\n        }\n        URL url = new URL(\"http://www.tegsoft.com/Tobe/forms/TobeOS/upgrade/upgrade_current.jsp?tegsoftCLIENTVERSION=\" + clientAppliedVersion + \"&tegsoftCLIENTUNITID=\" + clientUNITID + \"&tegsoftCLIENTMAC=\" + clientMAC);\n        urlConnection = url.openConnection();\n        in = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));\n        String upgradeList = \"\";\n        while ((line = in.readLine()) != null) {\n            upgradeList += line;\n        }\n        in.close();\n        Dataset TBLINSTALLATION = new Dataset(\"TBLINSTALLATION\", \"TBLINSTALLATION\");\n        String upgrades[] = upgradeList.split(\"</ROW>\");\n        if (upgrades.length > 0) {\n            String fields[] = upgrades[0].split(\"</FLD>\");\n            String STATUS = fields[0];\n            String ERRORMSG = fields[1];\n            if (\"FAIL\".equals(STATUS)) {\n                if (\"NOUNITID\".equals(ERRORMSG)) {\n                    UiUtil.showMessage(MessageType.ERROR, MessageUtil.getMessage(Upgrade.class, Messages.upgrade_1));\n                    return;\n                }\n                if (\"NOCUSTOMER\".equals(ERRORMSG)) {\n                    UiUtil.showMessage(MessageType.ERROR, MessageUtil.getMessage(Upgrade.class, Messages.upgrade_1));\n                    return;\n                }\n                if (\"NOVALIDLICENSE\".equals(ERRORMSG)) {\n                    UiUtil.showMessage(MessageType.ERROR, MessageUtil.getMessage(Upgrade.class, Messages.upgrade_2));\n                    return;\n                }\n                UiUtil.showMessage(MessageType.ERROR, MessageUtil.getMessage(Upgrade.class, Messages.upgrade_3));\n                return;\n            }\n        }\n        boolean restartRequired = false;\n        boolean updateAvailable = false;\n        for (int i = 1; i < upgrades.length; i++) {\n            String fields[] = upgrades[i].split(\"</FLD>\");\n            String VERSION = fields[0];\n            String ORDERID = fields[1];\n            String UPGRADETYPE = fields[2];\n            String DESCRIPTION = fields[3];\n            String STATUS = \"UNAPPLIED\";\n            String PRDNAME = \"TegsoftCC\";\n            if (\"TEGSOFTJARS\".equals(UPGRADETYPE) || \"TOBEJARS\".equals(UPGRADETYPE) || \"ALLJARS\".equals(UPGRADETYPE) || \"CONFIGASTERISK\".equals(UPGRADETYPE)) {\n                restartRequired = true;\n            }\n            DataRow dataRow = TBLINSTALLATION.addNewDataRow();\n            dataRow.set(\"ORDERID\", ORDERID);\n            dataRow.set(\"PRDNAME\", PRDNAME);\n            dataRow.set(\"UPGRADETYPE\", UPGRADETYPE);\n            dataRow.set(\"VERSION\", VERSION);\n            dataRow.set(\"STATUS\", STATUS);\n            dataRow.set(\"DESCRIPTION\", DESCRIPTION);\n            TBLINSTALLATION.save();\n            updateAvailable = true;\n        }\n        UiUtil.getDataset(\"TBLINSTALLATION\").reFill();\n        if (restartRequired) {\n            ((Component) UiUtil.findComponent(\"restartRequiredHbox\")).setVisible(true);\n            ((Component) UiUtil.findComponent(\"restartRequiredAlert\")).setVisible(true);\n        }\n        if (updateAvailable) {\n            ((Component) UiUtil.findComponent(\"downloadUpgrade\")).setVisible(true);\n            UiUtil.showMessage(MessageType.INFO, MessageUtil.getMessage(Upgrade.class, Messages.upgrade_4));\n        } else {\n            UiUtil.showMessage(MessageType.INFO, MessageUtil.getMessage(Upgrade.class, Messages.upgrade_5));\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10540679",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static void downloadFile(String downloadFileName) throws Exception {\n        URL getFileUrl = new URL(\"http://www.tegsoft.com/Tobe/getFile\" + \"?tegsoftFileName=\" + downloadFileName);\n        URLConnection getFileUrlConnection = getFileUrl.openConnection();\n        InputStream is = getFileUrlConnection.getInputStream();\n        String tobeHome = UiUtil.getParameter(\"RealPath.Context\");\n        OutputStream out = new FileOutputStream(tobeHome + \"/setup/\" + downloadFileName);\n        IOUtils.copy(is, out);\n        is.close();\n        out.close();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10545755",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void write(URL exportUrl, OutputStream output) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void write(URL exportUrl, OutputStream output) throws Exception {\n        if (exportUrl == null || output == null) {\n            throw new RuntimeException(\"null passed in for required parameters\");\n        }\n        MediaContent mc = new MediaContent();\n        mc.setUri(exportUrl.toString());\n        MediaSource ms = service.getMedia(mc);\n        InputStream input = ms.getInputStream();\n        IOUtils.copy(input, output);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10547671",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private String retrieveTemplate() throws Exception {\n        if (cachedTemplate == null) {\n            final URL url = new URL(blogEditor.getBlogInfo().getBlogUrl());\n            final BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n            final StringBuilder result = new StringBuilder();\n            String line;\n            while ((line = in.readLine()) != null) {\n                result.append(line);\n            }\n            in.close();\n            cachedTemplate = result.toString();\n        }\n        return cachedTemplate;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10548278",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic ActionForward saveImageMap(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public ActionForward saveImageMap(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        log.debug(\"MapAction saveImageMap()\");\n        String imageURL = RequestUtil.getRequest(request, \"imgUrl\");\n        DataInputStream di = null;\n        FileOutputStream fo = null;\n        byte[] b = new byte[1];\n        URL url = new URL(imageURL);\n        URLConnection urlConnection = url.openConnection();\n        urlConnection.connect();\n        response.setContentType(\"application/octet-stream\");\n        response.setHeader(\"Content-disposition\", \"attachment;filename=\" + \"map.png\");\n        OutputStream outstream = response.getOutputStream();\n        byte abyte0[] = new byte[4096];\n        try {\n            BufferedInputStream instream = new BufferedInputStream(urlConnection.getInputStream());\n            int i;\n            while ((i = instream.read(abyte0, 0, 4096)) != -1) outstream.write(abyte0, 0, i);\n            instream.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return null;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10555214",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static Test suite() throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static Test suite() throws Exception {\n        java.net.URL url = ClassLoader.getSystemResource(\"host0.jndi.properties\");\n        java.util.Properties host0JndiProps = new java.util.Properties();\n        host0JndiProps.load(url.openStream());\n        java.util.Properties systemProps = System.getProperties();\n        systemProps.putAll(host0JndiProps);\n        System.setProperties(systemProps);\n        TestSuite suite = new TestSuite();\n        suite.addTest(new TestSuite(T06OTSInterpositionUnitTestCase.class));\n        TestSetup wrapper = new JBossTestSetup(suite) {\n\n            protected void setUp() throws Exception {\n                super.setUp();\n                deploy(\"dtmpassthrough2ots.jar\");\n            }\n\n            protected void tearDown() throws Exception {\n                undeploy(\"dtmpassthrough2ots.jar\");\n                super.tearDown();\n            }\n        };\n        return wrapper;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10565544",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copyToFileAndCloseStreams(InputStream istr, File destFile) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copyToFileAndCloseStreams(InputStream istr, File destFile) throws IOException {\n        OutputStream ostr = null;\n        try {\n            ostr = new FileOutputStream(destFile);\n            IOUtils.copy(istr, ostr);\n        } finally {\n            if (ostr != null) ostr.close();\n            if (istr != null) istr.close();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10566073",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic IntactOntology parseOboFile(URL url, boolean keepTemporaryFile) throws PsiLoaderException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public IntactOntology parseOboFile(URL url, boolean keepTemporaryFile) throws PsiLoaderException {\n        if (url == null) {\n            throw new IllegalArgumentException(\"Please give a non null URL.\");\n        }\n        StringBuffer buffer = new StringBuffer(1024 * 8);\n        try {\n            System.out.println(\"Loading URL: \" + url);\n            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()), 1024);\n            String line;\n            int lineCount = 0;\n            while ((line = in.readLine()) != null) {\n                lineCount++;\n                buffer.append(line).append(NEW_LINE);\n                if ((lineCount % 20) == 0) {\n                    System.out.print(\".\");\n                    System.out.flush();\n                    if ((lineCount % 500) == 0) {\n                        System.out.println(\"   \" + lineCount);\n                    }\n                }\n            }\n            in.close();\n            File tempDirectory = new File(System.getProperty(\"java.io.tmpdir\", \"tmp\"));\n            if (!tempDirectory.exists()) {\n                if (!tempDirectory.mkdirs()) {\n                    throw new IOException(\"Cannot create temp directory: \" + tempDirectory.getAbsolutePath());\n                }\n            }\n            System.out.println(\"Using temp directory: \" + tempDirectory.getAbsolutePath());\n            File tempFile = File.createTempFile(\"psimi.v25.\", \".obo\", tempDirectory);\n            tempFile.deleteOnExit();\n            tempFile.deleteOnExit();\n            System.out.println(\"The OBO file is temporary store as: \" + tempFile.getAbsolutePath());\n            BufferedWriter out = new BufferedWriter(new FileWriter(tempFile), 1024);\n            out.write(buffer.toString());\n            out.flush();\n            out.close();\n            return parseOboFile(tempFile);\n        } catch (IOException e) {\n            throw new PsiLoaderException(\"Error while loading URL (\" + url + \")\", e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10567003",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private InputStream loadSource(String url) throws ClientProtocolException, IOException {\n        HttpClient httpclient = new DefaultHttpClient();\n        httpclient.getParams().setParameter(HTTP.USER_AGENT, \"Mozilla/4.0 (compatible; MSIE 7.0b; Windows NT 6.0)\");\n        HttpGet httpget = new HttpGet(url);\n        HttpResponse response = httpclient.execute(httpget);\n        HttpEntity entity = response.getEntity();\n        return entity.getContent();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10584420",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String checkUpdate() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String checkUpdate() {\n        URL url = null;\n        try {\n            url = new URL(\"http://googlemeupdate.bravehost.com/\");\n        } catch (MalformedURLException ex) {\n            ex.printStackTrace();\n        }\n        InputStream html = null;\n        try {\n            html = url.openStream();\n            int c = 0;\n            String Buffer = \"\";\n            String Code = \"\";\n            while (c != -1) {\n                try {\n                    c = html.read();\n                } catch (IOException ex) {\n                }\n                Buffer = Buffer + (char) c;\n            }\n            return Buffer.substring(Buffer.lastIndexOf(\"Google.mE Version: \") + 19, Buffer.indexOf(\"||\"));\n        } catch (IOException ex) {\n            ex.printStackTrace();\n            return \"\";\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10584421",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String getWhatsNew(String ver) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String getWhatsNew(String ver) {\n        URL url = null;\n        try {\n            url = new URL(\"http://googlemeupdate.bravehost.com/History.htm\");\n        } catch (MalformedURLException ex) {\n            ex.printStackTrace();\n        }\n        InputStream html = null;\n        try {\n            html = url.openStream();\n            int c = 0;\n            String Buffer = \"\";\n            String Code = \"\";\n            while (c != -1) {\n                try {\n                    c = html.read();\n                } catch (IOException ex) {\n                }\n                Buffer = Buffer + (char) c;\n            }\n            Buffer = Buffer.substring(Buffer.lastIndexOf(ver) + ver.length() + 2, Buffer.indexOf(\"end::\")).replaceAll(\"||\", \"\");\n            return \"<html>\" + Buffer.substring(Buffer.indexOf(\"Google.mE Version: \"));\n        } catch (IOException ex) {\n            ex.printStackTrace();\n            return \"\";\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10586916",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void CreateBackupOfDataFile(String _src, String _dest) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void CreateBackupOfDataFile(String _src, String _dest) {\n        try {\n            File src = new File(_src);\n            File dest = new File(_dest);\n            if (new File(_src).exists()) {\n                BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n                BufferedInputStream in = new BufferedInputStream(new FileInputStream(src));\n                byte[] read = new byte[128];\n                int len = 128;\n                while ((len = in.read(read)) > 0) out.write(read, 0, len);\n                out.flush();\n                out.close();\n                in.close();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10589735",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void getRandomGUID(boolean secure) {\n        MessageDigest md5 = null;\n        StringBuffer sbValueBeforeMD5 = new StringBuffer();\n        try {\n            md5 = MessageDigest.getInstance(\"MD5\");\n        } catch (NoSuchAlgorithmException e) {\n        }\n        try {\n            long time = System.currentTimeMillis();\n            long rand = 0;\n            if (secure) {\n                rand = mySecureRand.nextLong();\n            } else {\n                rand = random.nextLong();\n            }\n            sbValueBeforeMD5.append(sid);\n            sbValueBeforeMD5.append(\":\");\n            sbValueBeforeMD5.append(Long.toString(time));\n            sbValueBeforeMD5.append(\":\");\n            sbValueBeforeMD5.append(Long.toString(rand));\n            valueBeforeMD5 = sbValueBeforeMD5.toString();\n            md5.update(valueBeforeMD5.getBytes());\n            byte[] array = md5.digest();\n            StringBuffer sb = new StringBuffer();\n            for (int j = 0; j < array.length; ++j) {\n                int b = array[j] & 0xFF;\n                if (b < 0x10) sb.append('0');\n                sb.append(Integer.toHexString(b));\n            }\n            valueAfterMD5 = sb.toString();\n        } catch (Exception e) {\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10596393",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String BaiKe(String unknown) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String BaiKe(String unknown) {\n        String encodeurl = \"\";\n        long sTime = System.currentTimeMillis();\n        long eTime;\n        try {\n            String regEx = \"\\\\#(.+)\\\\#\";\n            String searchText = \"\";\n            Pattern p = Pattern.compile(regEx);\n            Matcher m = p.matcher(unknown);\n            if (m.find()) {\n                searchText = m.group(1);\n            }\n            System.out.println(\"searchText :  \" + searchText);\n            encodeurl = URLEncoder.encode(searchText, \"UTF-8\");\n            String url = \"http://www.hudong.com/wiki/\" + encodeurl;\n            HttpURLConnection conn = (HttpURLConnection) (new URL(url)).openConnection();\n            conn.setConnectTimeout(10000);\n            Parser parser = new Parser(conn);\n            parser.setEncoding(parser.getEncoding());\n            NodeFilter filtera = new TagNameFilter(\"DIV\");\n            NodeList nodes = parser.extractAllNodesThatMatch(filtera);\n            String textInPage = \"\";\n            if (nodes != null) {\n                for (int i = 0; i < nodes.size(); i++) {\n                    Node textnode = (Node) nodes.elementAt(i);\n                    if (\"div class=\\\"summary\\\"\".equals(textnode.getText())) {\n                        String temp = textnode.toPlainTextString();\n                        textInPage += temp + \"\\n\";\n                    }\n                }\n            }\n            String s = Replace(textInPage, searchText);\n            eTime = System.currentTimeMillis();\n            String time = \"\u641c\u7d22[\" + searchText + \"]\u7528\u65f6:\" + (eTime - sTime) / 1000.0 + \"s\";\n            System.out.println(s);\n            return time + \"\\r\\n\" + s;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return \"\u5927\u59e8\u5988\u6765\u4e86\";\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10598170",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static String sort(final String item) {\n        final char[] chars = item.toCharArray();\n        for (int i = 1; i < chars.length; i++) {\n            for (int j = 0; j < chars.length - 1; j++) {\n                if (chars[j] > chars[j + 1]) {\n                    final char temp = chars[j];\n                    chars[j] = chars[j + 1];\n                    chars[j + 1] = temp;\n                }\n            }\n        }\n        return String.valueOf(chars);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10598290",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic String encryptLdapPassword(String algorithm) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public String encryptLdapPassword(String algorithm) {\n        String sEncrypted = _password;\n        if ((_password != null) && (_password.length() > 0)) {\n            algorithm = Val.chkStr(algorithm);\n            boolean bMD5 = algorithm.equalsIgnoreCase(\"MD5\");\n            boolean bSHA = algorithm.equalsIgnoreCase(\"SHA\") || algorithm.equalsIgnoreCase(\"SHA1\") || algorithm.equalsIgnoreCase(\"SHA-1\");\n            if (bSHA || bMD5) {\n                String sAlgorithm = \"MD5\";\n                if (bSHA) {\n                    sAlgorithm = \"SHA\";\n                }\n                try {\n                    MessageDigest md = MessageDigest.getInstance(sAlgorithm);\n                    md.update(getPassword().getBytes(\"UTF-8\"));\n                    sEncrypted = \"{\" + sAlgorithm + \"}\" + (new BASE64Encoder()).encode(md.digest());\n                } catch (NoSuchAlgorithmException e) {\n                    sEncrypted = null;\n                    e.printStackTrace(System.err);\n                } catch (UnsupportedEncodingException e) {\n                    sEncrypted = null;\n                    e.printStackTrace(System.err);\n                }\n            }\n        }\n        return sEncrypted;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10601019",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copyFile(File src, File dst) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copyFile(File src, File dst) throws IOException {\n        InputStream in = new FileInputStream(src);\n        OutputStream out = new FileOutputStream(dst);\n        byte[] buf = new byte[1024];\n        int len;\n        while ((len = in.read(buf)) > 0) out.write(buf, 0, len);\n        in.close();\n        out.close();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10606028",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void bubble() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void bubble() {\n        boolean test = false;\n        int kars = 0, tas = 0;\n        while (true) {\n            for (int j = 0; j < dizi.length - 1; j++) {\n                kars++;\n                if (dizi[j] > dizi[j + 1]) {\n                    int temp = dizi[j];\n                    dizi[j] = dizi[j + 1];\n                    dizi[j + 1] = temp;\n                    test = true;\n                    tas++;\n                }\n            }\n            if (!test) {\n                break;\n            } else {\n                test = false;\n            }\n        }\n        System.out.print(kars + \" \" + tas);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10622245",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void downloadTo(URL url, File out) throws IOException {\n        URLConnection conn = url.openConnection();\n        BufferedInputStream is = new BufferedInputStream(conn.getInputStream());\n        BufferedOutputStream os = new BufferedOutputStream(new FileOutputStream(out));\n        final int BLOCK_SIZE = 1024;\n        byte[] buf = new byte[BLOCK_SIZE];\n        int size;\n        while ((size = is.read(buf, 0, BLOCK_SIZE)) > 0) os.write(buf, 0, size);\n        is.close();\n        os.close();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10625892",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String getTextFromUrl(final String url) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String getTextFromUrl(final String url) {\n        InputStreamReader inputStreamReader = null;\n        BufferedReader bufferedReader = null;\n        try {\n            final StringBuilder result = new StringBuilder();\n            inputStreamReader = new InputStreamReader(new URL(url).openStream());\n            bufferedReader = new BufferedReader(inputStreamReader);\n            String line;\n            while ((line = bufferedReader.readLine()) != null) {\n                result.append(HtmlUtil.quoteHtml(line)).append(\"\\r\");\n            }\n            return result.toString();\n        } catch (final IOException exception) {\n            return exception.getMessage();\n        } finally {\n            InputOutputUtil.close(bufferedReader);\n            InputOutputUtil.close(inputStreamReader);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10628604",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic File extractID3v2TagDataIntoFile(File outputFile) throws TagNotFoundException, IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public File extractID3v2TagDataIntoFile(File outputFile) throws TagNotFoundException, IOException {\n        int startByte = (int) ((MP3AudioHeader) audioHeader).getMp3StartByte();\n        if (startByte >= 0) {\n            FileInputStream fis = new FileInputStream(file);\n            FileChannel fc = fis.getChannel();\n            ByteBuffer bb = ByteBuffer.allocate(startByte);\n            fc.read(bb);\n            FileOutputStream out = new FileOutputStream(outputFile);\n            out.write(bb.array());\n            out.close();\n            fc.close();\n            fis.close();\n            return outputFile;\n        }\n        throw new TagNotFoundException(\"There is no ID3v2Tag data in this file\");\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10634007",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static EXISchema getEXISchema(String fileName, Class<?> cls, EXISchemaFactoryErrorHandler compilerErrorHandler) throws IOException, ClassNotFoundException, EXISchemaFactoryException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static EXISchema getEXISchema(String fileName, Class<?> cls, EXISchemaFactoryErrorHandler compilerErrorHandler) throws IOException, ClassNotFoundException, EXISchemaFactoryException {\n        EXISchemaFactory schemaCompiler = new EXISchemaFactory();\n        schemaCompiler.setCompilerErrorHandler(compilerErrorHandler);\n        InputSource inputSource = null;\n        if (fileName != null) {\n            URL url;\n            if ((url = cls.getResource(fileName)) != null) {\n                inputSource = new InputSource(url.openStream());\n                inputSource.setSystemId(url.toString());\n            } else throw new RuntimeException(\"File '\" + fileName + \"' not found.\");\n        }\n        EXISchema compiled = schemaCompiler.compile(inputSource);\n        InputStream serialized = serializeSchema(compiled);\n        return loadSchema(serialized);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10634089",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String checkPublicIP() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String checkPublicIP() {\n        String ipAddress = null;\n        try {\n            URL url;\n            url = new URL(\"http://checkip.dyndns.org/\");\n            InputStreamReader in = new InputStreamReader(url.openStream());\n            BufferedReader buffer = new BufferedReader(in);\n            String line;\n            Pattern p = Pattern.compile(\"\\\\b\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\b\");\n            while ((line = buffer.readLine()) != null) {\n                if (line.indexOf(\"IP Address:\") != -1) {\n                    Matcher m = p.matcher(line);\n                    if (m.find()) {\n                        ipAddress = m.group();\n                        break;\n                    }\n                }\n            }\n            buffer.close();\n            in.close();\n        } catch (MalformedURLException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return ipAddress;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10642765",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "protected Reader getText() throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));\n        String readLine;\n        do {\n            readLine = br.readLine();\n        } while (readLine != null && readLine.indexOf(\"</table><br clear=all>\") < 0);\n        return br;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10645501",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private int streamConf() throws IOException {\n        int avail = 0;\n        switch(mode) {\n            case FILE:\n                if (!Helper.findInString(filename, \".jar\")) {\n                    is = new FileInputStream(filename);\n                    bisr = new BufferedReader(new InputStreamReader(is, INPUT_CHARSET));\n                } else {\n                    is = Helper.getZipInput(filename.substring(0, filename.indexOf(\".jar\") + 4), filename.substring(filename.indexOf(\".jar\") + 5, filename.length()));\n                    bisr = new BufferedReader(new InputStreamReader(is, INPUT_CHARSET));\n                }\n                break;\n            case STREAM:\n                bisr = new BufferedReader(new InputStreamReader(is, INPUT_CHARSET));\n                break;\n            case NET:\n                is = url.openStream();\n                bisr = new BufferedReader(new InputStreamReader(is, INPUT_CHARSET));\n                break;\n        }\n        switch(mode) {\n            case FILE:\n            case STREAM:\n                avail = is.available();\n                break;\n            case NET:\n                while (is.read() != -1) avail++;\n                bisr.close();\n                is.close();\n                is = url.openStream();\n                bisr = new BufferedReader(new InputStreamReader(is, INPUT_CHARSET));\n                break;\n            case STRING:\n                avail = fileStr.length();\n                break;\n        }\n        return avail;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10649421",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        String dataSetURL = request.getParameter(\"datasetURL\");\n        String contentType = request.getParameter(\"contentType\");\n        String studyUID = request.getParameter(\"studyUID\");\n        String seriesUID = request.getParameter(\"seriesUID\");\n        String objectUID = request.getParameter(\"objectUID\");\n        dataSetURL += \"&contentType=\" + contentType + \"&studyUID=\" + studyUID + \"&seriesUID=\" + seriesUID + \"&objectUID=\" + objectUID;\n        dataSetURL = dataSetURL.replace(\"+\", \"%2B\");\n        InputStream resultInStream = null;\n        OutputStream resultOutStream = response.getOutputStream();\n        try {\n            URL url = new URL(dataSetURL);\n            resultInStream = url.openStream();\n            byte[] buffer = new byte[4096];\n            int bytes_read;\n            while ((bytes_read = resultInStream.read(buffer)) != -1) {\n                resultOutStream.write(buffer, 0, bytes_read);\n            }\n            resultOutStream.flush();\n            resultOutStream.close();\n            resultInStream.close();\n        } catch (Exception e) {\n            log.error(\"Unable to read and send the DICOM dataset page\", e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10654982",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String getEncryptedPassword(String password) throws PasswordException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String getEncryptedPassword(String password) throws PasswordException {\n        MessageDigest md = null;\n        try {\n            md = MessageDigest.getInstance(\"SHA\");\n            md.update(password.getBytes(\"UTF-8\"));\n        } catch (Exception e) {\n            throw new PasswordException(e);\n        }\n        return convertToString(md.digest());\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10656323",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void copy(File s, File t) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void copy(File s, File t) throws IOException {\n            FileChannel in = (new FileInputStream(s)).getChannel();\n            FileChannel out = (new FileOutputStream(t)).getChannel();\n            in.transferTo(0, s.length(), out);\n            in.close();\n            out.close();\n        }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10658266",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copy(File srcFile, File destFile) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copy(File srcFile, File destFile) throws IOException {\n        FileInputStream in = null;\n        FileOutputStream out = null;\n        try {\n            in = new FileInputStream(srcFile);\n            out = new FileOutputStream(destFile);\n            final byte[] buf = new byte[4096];\n            int read;\n            while ((read = in.read(buf)) >= 0) {\n                out.write(buf, 0, read);\n            }\n        } finally {\n            try {\n                if (in != null) in.close();\n            } catch (IOException ioe) {\n            }\n            try {\n                if (out != null) out.close();\n            } catch (IOException ioe) {\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_00106595",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void displayDiffResults() throws IOException {\n        File outFile = File.createTempFile(\"diff\", \".htm\");\n        outFile.deleteOnExit();\n        FileOutputStream outStream = new FileOutputStream(outFile);\n        BufferedWriter out = new BufferedWriter(new OutputStreamWriter(outStream));\n        out.write(\"<html><head><title>LOC Differences</title>\\n\" + SCRIPT + \"</head>\\n\" + \"<body bgcolor='#ffffff'>\\n\" + \"<div onMouseOver=\\\"window.defaultStatus='Metrics'\\\">\\n\");\n        if (addedTable.length() > 0) {\n            out.write(\"<table border><tr><th>Files Added:</th>\" + \"<th>Add</th><th>Type</th></tr>\");\n            out.write(addedTable.toString());\n            out.write(\"</table><br><br>\");\n        }\n        if (modifiedTable.length() > 0) {\n            out.write(\"<table border><tr><th>Files Modified:</th>\" + \"<th>Base</th><th>Del</th><th>Mod</th><th>Add</th>\" + \"<th>Total</th><th>Type</th></tr>\");\n            out.write(modifiedTable.toString());\n            out.write(\"</table><br><br>\");\n        }\n        if (deletedTable.length() > 0) {\n            out.write(\"<table border><tr><th>Files Deleted:</th>\" + \"<th>Del</th><th>Type</th></tr>\");\n            out.write(deletedTable.toString());\n            out.write(\"</table><br><br>\");\n        }\n        out.write(\"<table name=METRICS BORDER>\\n\");\n        if (modifiedTable.length() > 0 || deletedTable.length() > 0) {\n            out.write(\"<tr><td>Base:&nbsp;</td><td>\");\n            out.write(Long.toString(base));\n            out.write(\"</td></tr>\\n<tr><td>Deleted:&nbsp;</td><td>\");\n            out.write(Long.toString(deleted));\n            out.write(\"</td></tr>\\n<tr><td>Modified:&nbsp;</td><td>\");\n            out.write(Long.toString(modified));\n            out.write(\"</td></tr>\\n<tr><td>Added:&nbsp;</td><td>\");\n            out.write(Long.toString(added));\n            out.write(\"</td></tr>\\n<tr><td>New & Changed:&nbsp;</td><td>\");\n            out.write(Long.toString(added + modified));\n            out.write(\"</td></tr>\\n\");\n        }\n        out.write(\"<tr><td>Total:&nbsp;</td><td>\");\n        out.write(Long.toString(total));\n        out.write(\"</td></tr>\\n</table></div>\");\n        redlinesOut.close();\n        out.flush();\n        InputStream redlines = new FileInputStream(redlinesTempFile);\n        byte[] buffer = new byte[4096];\n        int bytesRead;\n        while ((bytesRead = redlines.read(buffer)) != -1) outStream.write(buffer, 0, bytesRead);\n        outStream.write(\"</BODY></HTML>\".getBytes());\n        outStream.close();\n        Browser.launch(outFile.toURL().toString());\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_00106625",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic boolean open() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public boolean open() {\n        try {\n            URL url = new URL(resource);\n            conn = url.openConnection();\n            in = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n        } catch (MalformedURLException e) {\n            System.out.println(\"Uable to connect URL:\" + resource);\n            return false;\n        } catch (IOException e) {\n            System.out.println(\"IOExeption when connecting to URL\" + resource);\n            return false;\n        }\n        return true;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10667866",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private Bitmap fetchImage(String urlstr) throws Exception {\n        URL url;\n        url = new URL(urlstr);\n        HttpURLConnection c = (HttpURLConnection) url.openConnection();\n        c.setDoInput(true);\n        c.setRequestProperty(\"User-Agent\", \"Agent\");\n        c.connect();\n        InputStream is = c.getInputStream();\n        Bitmap img;\n        img = BitmapFactory.decodeStream(is);\n        return img;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10669537",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "String processURLInput(String inputURL) throws SoaplabException {\n        try {\n            File tmpFile = File.createTempFile(\"gowlab.\", null);\n            tmpFile.deleteOnExit();\n            Object data = inputs.get(inputURL);\n            URL url = new URL(data.toString());\n            if (url.getProtocol().equals(\"file\")) logAndThrow(\"Trying to get local file '\" + url.toString() + \"' is not allowed.\");\n            URLConnection uc = url.openConnection();\n            uc.connect();\n            InputStream in = uc.getInputStream();\n            byte[] buffer = new byte[256];\n            DataOutputStream fileout = new DataOutputStream(new BufferedOutputStream(new FileOutputStream(tmpFile)));\n            int bytesRead;\n            while ((bytesRead = in.read(buffer)) != -1) {\n                fileout.write(buffer, 0, bytesRead);\n            }\n            fileout.close();\n            return tmpFile.getAbsolutePath();\n        } catch (IOException e) {\n            logAndThrow(\"In processURLData: \" + e.toString());\n        }\n        return null;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10671991",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String md5(String value) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String md5(String value) {\n        try {\n            MessageDigest messageDigest = MessageDigest.getInstance(\"MD5\");\n            messageDigest.update(value.getBytes());\n            return bytesToString(messageDigest.digest());\n        } catch (Exception ex) {\n            Tools.logException(Tools.class, ex, value);\n        }\n        return value;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10671994",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copy(File src, File dst) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copy(File src, File dst) {\n        try {\n            FileChannel srcChannel = new FileInputStream(src).getChannel();\n            FileChannel dstChannel = new FileOutputStream(dst).getChannel();\n            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n            srcChannel.close();\n            srcChannel = null;\n            dstChannel.close();\n            dstChannel = null;\n        } catch (IOException ex) {\n            Tools.logException(Tools.class, ex, dst.getAbsolutePath());\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10673772",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private File extractResource(String resourceName, File destDir) {\n        File file = new File(destDir, resourceName);\n        InputStream in = getClass().getResourceAsStream(resourceName);\n        try {\n            FileOutputStream out = FileUtils.openOutputStream(file);\n            try {\n                IOUtils.copy(in, out);\n            } finally {\n                if (out != null) {\n                    out.close();\n                }\n            }\n        } finally {\n            if (in != null) {\n                in.close();\n            }\n        }\n        return file;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10674824",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void setUp() throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Before\n    public void setUp() throws Exception {\n        final URL url = getClass().getClassLoader().getResource(\"insecureSSL.keystore\");\n        final KeyStore keystore = KeyStore.getInstance(\"jks\");\n        final char[] pwd = \"nopassword\".toCharArray();\n        keystore.load(url.openStream(), pwd);\n        final TrustManagerFactory trustManagerFactory = createTrustManagerFactory();\n        trustManagerFactory.init(keystore);\n        final TrustManager[] trustManagers = trustManagerFactory.getTrustManagers();\n        final KeyManagerFactory keyManagerFactory = createKeyManagerFactory();\n        keyManagerFactory.init(keystore, pwd);\n        final KeyManager[] keyManagers = keyManagerFactory.getKeyManagers();\n        final SSLContext serverSSLContext = SSLContext.getInstance(\"TLS\");\n        serverSSLContext.init(keyManagers, trustManagers, null);\n        localServer_ = new LocalTestServer(serverSSLContext);\n        localServer_.registerDefaultHandlers();\n        localServer_.start();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10676051",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void sendRequest(String method) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void sendRequest(String method) {\n        try {\n            url = new URL(urlStr);\n            httpURLConnection = (HttpURLConnection) url.openConnection();\n            httpURLConnection.setRequestMethod(method);\n            httpURLConnection.setDoOutput(true);\n            httpURLConnection.getOutputStream().flush();\n            httpURLConnection.getOutputStream().close();\n            System.out.println(httpURLConnection.getResponseMessage());\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            if (httpURLConnection != null) {\n                httpURLConnection.disconnect();\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10682428",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void readConfigFromResource(String resname) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void readConfigFromResource(String resname) throws Exception {\n        URL url = ConfigXMLReader.class.getClassLoader().getResource(resname);\n        if (url == null) throw new FileNotFoundException(\"Couldn't find the config resource:\" + resname);\n        System.out.println(\"Reading config from resource: \" + url.toString());\n        readConfig(url.openStream());\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10682592",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private InputStream open(String url) throws IOException {\n        debug(url);\n        if (!useCache) {\n            return new URL(url).openStream();\n        }\n        File f = new File(System.getProperty(\"java.io.tmpdir\", \".\"), Digest.SHA1.encrypt(url) + \".xml\");\n        debug(\"Cache : \" + f);\n        if (f.exists()) {\n            return new FileInputStream(f);\n        }\n        InputStream in = new URL(url).openStream();\n        OutputStream out = new FileOutputStream(f);\n        IOUtils.copyTo(in, out);\n        out.flush();\n        out.close();\n        in.close();\n        return new FileInputStream(f);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10685269",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copy(FileInputStream source, FileOutputStream target) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copy(FileInputStream source, FileOutputStream target) throws IOException {\n        FileChannel sourceChannel = source.getChannel();\n        FileChannel targetChannel = target.getChannel();\n        sourceChannel.transferTo(0, sourceChannel.size(), targetChannel);\n        sourceChannel.close();\n        targetChannel.close();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10688093",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic final InputStream getStreamFromUrl(final URL url) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public final InputStream getStreamFromUrl(final URL url) {\n        try {\n            if (listener != null) {\n                listener.openedStream(url);\n            }\n            return url.openStream();\n        } catch (IOException e) {\n            listener.exceptionThrown(e);\n            return null;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10689659",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copyFile(File fromFile, File toFile) throws OWFileCopyException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copyFile(File fromFile, File toFile) throws OWFileCopyException {\n        try {\n            FileChannel src = new FileInputStream(fromFile).getChannel();\n            FileChannel dest = new FileOutputStream(toFile).getChannel();\n            dest.transferFrom(src, 0, src.size());\n            src.close();\n            dest.close();\n        } catch (IOException e) {\n            throw (new OWFileCopyException(\"An error occurred while copying a file\", e));\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10690321",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static void readData() {\n        StringTokenizer sTok;\n        topSet = new HashSet();\n        sTok = new StringTokenizer(tops, \",\");\n        while (sTok.hasMoreTokens()) topSet.add(sTok.nextToken());\n        leftSet = new HashSet();\n        sTok = new StringTokenizer(lefts, \",\");\n        while (sTok.hasMoreTokens()) leftSet.add(sTok.nextToken());\n        rightSet = new HashSet();\n        sTok = new StringTokenizer(rights, \",\");\n        while (sTok.hasMoreTokens()) rightSet.add(sTok.nextToken());\n        farRightSet = new HashSet();\n        sTok = new StringTokenizer(farrights, \",\");\n        while (sTok.hasMoreTokens()) farRightSet.add(sTok.nextToken());\n        vowelSet = new HashSet();\n        sTok = new StringTokenizer(vowels, \",\");\n        while (sTok.hasMoreTokens()) {\n            String ntk;\n            vowelSet.add(ntk = sTok.nextToken());\n            if (maxEwtsVowelLength < ntk.length()) maxEwtsVowelLength = ntk.length();\n            validInputSequences.put(ntk, anyOldObjectWillDo);\n        }\n        puncSet = new HashSet();\n        sTok = new StringTokenizer(others, \",\");\n        while (sTok.hasMoreTokens()) {\n            String ntk;\n            puncSet.add(ntk = sTok.nextToken());\n            validInputSequences.put(ntk, anyOldObjectWillDo);\n        }\n        charSet = new HashSet();\n        tibSet = new HashSet();\n        sTok = new StringTokenizer(tibetanConsonants, \",\");\n        while (sTok.hasMoreTokens()) {\n            String ntk;\n            charSet.add(ntk = sTok.nextToken());\n            tibSet.add(ntk);\n            validInputSequences.put(ntk, anyOldObjectWillDo);\n        }\n        sanskritStackSet = new HashSet();\n        sTok = new StringTokenizer(otherConsonants, \",\");\n        while (sTok.hasMoreTokens()) {\n            String ntk;\n            charSet.add(ntk = sTok.nextToken());\n            sanskritStackSet.add(ntk);\n            validInputSequences.put(ntk, anyOldObjectWillDo);\n        }\n        numberSet = new HashSet();\n        sTok = new StringTokenizer(numbers, \",\");\n        while (sTok.hasMoreTokens()) {\n            String ntk;\n            charSet.add(ntk = sTok.nextToken());\n            numberSet.add(ntk);\n            validInputSequences.put(ntk, anyOldObjectWillDo);\n        }\n        charSet.add(\"Y\");\n        charSet.add(\"R\");\n        charSet.add(\"W\");\n        validInputSequences.put(\"Y\", anyOldObjectWillDo);\n        validInputSequences.put(\"R\", anyOldObjectWillDo);\n        validInputSequences.put(\"W\", anyOldObjectWillDo);\n        sTok = null;\n        top_vowels = new HashSet();\n        top_vowels.add(i_VOWEL);\n        top_vowels.add(e_VOWEL);\n        top_vowels.add(o_VOWEL);\n        top_vowels.add(ai_VOWEL);\n        top_vowels.add(au_VOWEL);\n        top_vowels.add(reverse_i_VOWEL);\n        try {\n            URL url = TibetanMachineWeb.class.getResource(fileName);\n            if (url == null) {\n                System.err.println(\"Cannot find \" + fileName + \"; aborting.\");\n                System.exit(1);\n            }\n            InputStreamReader isr = new InputStreamReader(url.openStream());\n            BufferedReader in = new BufferedReader(isr);\n            System.out.println(\"Reading Tibetan Machine Web code table \" + fileName);\n            String line;\n            boolean hashOn = false;\n            boolean isTibetan = false;\n            boolean isSanskrit = false;\n            boolean ignore = false;\n            while ((line = in.readLine()) != null) {\n                if (line.startsWith(\"<?\")) {\n                    if (line.equalsIgnoreCase(\"<?Consonants?>\")) {\n                        isSanskrit = false;\n                        isTibetan = true;\n                        hashOn = false;\n                        ignore = false;\n                        do {\n                            line = in.readLine();\n                        } while (line.startsWith(\"//\") || line.equals(\"\"));\n                    } else if (line.equalsIgnoreCase(\"<?Numbers?>\")) {\n                        isSanskrit = false;\n                        isTibetan = false;\n                        hashOn = false;\n                        ignore = false;\n                        do {\n                            line = in.readLine();\n                        } while (line.startsWith(\"//\") || line.equals(\"\"));\n                    } else if (line.equalsIgnoreCase(\"<?Vowels?>\")) {\n                        isSanskrit = false;\n                        isTibetan = false;\n                        hashOn = false;\n                        ignore = false;\n                        do {\n                            line = in.readLine();\n                        } while (line.startsWith(\"//\") || line.equals(\"\"));\n                    } else if (line.equalsIgnoreCase(\"<?Other?>\")) {\n                        isSanskrit = false;\n                        isTibetan = false;\n                        hashOn = false;\n                        ignore = false;\n                        do {\n                            line = in.readLine();\n                        } while (line.startsWith(\"//\") || line.equals(\"\"));\n                    } else if (line.equalsIgnoreCase(\"<?Input:Punctuation?>\") || line.equalsIgnoreCase(\"<?Input:Vowels?>\")) {\n                        isSanskrit = false;\n                        isTibetan = false;\n                        hashOn = true;\n                        ignore = false;\n                    } else if (line.equalsIgnoreCase(\"<?Input:Tibetan?>\")) {\n                        isSanskrit = false;\n                        isTibetan = true;\n                        hashOn = true;\n                        ignore = false;\n                    } else if (line.equalsIgnoreCase(\"<?Input:Numbers?>\")) {\n                        isSanskrit = false;\n                        isTibetan = false;\n                        hashOn = true;\n                        ignore = false;\n                    } else if (line.equalsIgnoreCase(\"<?Input:Sanskrit?>\")) {\n                        isSanskrit = true;\n                        isTibetan = false;\n                        hashOn = true;\n                        ignore = false;\n                    } else if (line.equalsIgnoreCase(\"<?ToWylie?>\")) {\n                        isSanskrit = false;\n                        isTibetan = false;\n                        hashOn = false;\n                        ignore = false;\n                    } else if (line.equalsIgnoreCase(\"<?Ignore?>\")) {\n                        isSanskrit = false;\n                        ignore = true;\n                    }\n                } else if (line.startsWith(\"//\")) {\n                    ;\n                } else if (line.equals(\"\")) {\n                    ;\n                } else {\n                    StringTokenizer st = new StringTokenizer(line, DELIMITER, true);\n                    String wylie = null;\n                    DuffCode[] duffCodes;\n                    duffCodes = new DuffCode[11];\n                    int k = 0;\n                    StringBuffer escapedToken = new StringBuffer(\"\");\n                    ThdlDebug.verify(escapedToken.length() == 0);\n                    while (st.hasMoreTokens()) {\n                        String val = getEscapedToken(st, escapedToken);\n                        if (val.equals(DELIMITER) && escapedToken.length() == 0) {\n                            k++;\n                        } else if (!val.equals(\"\")) {\n                            if (escapedToken.length() != 0) {\n                                escapedToken = new StringBuffer(\"\");\n                                ThdlDebug.verify(escapedToken.length() == 0);\n                            }\n                            switch(k) {\n                                case 0:\n                                    wylie = val;\n                                    break;\n                                case 1:\n                                    duffCodes[TM] = new DuffCode(val, false);\n                                    break;\n                                case 2:\n                                    if (!ignore) {\n                                        duffCodes[REDUCED_C] = new DuffCode(val, true);\n                                    }\n                                    break;\n                                case 3:\n                                    duffCodes[TMW] = new DuffCode(val, true);\n                                    if (null != duffCodes[TM]) {\n                                        TMtoTMW[duffCodes[TM].getFontNum() - 1][duffCodes[TM].getCharNum() - 32] = duffCodes[TMW];\n                                    }\n                                    if (null != TMWtoTM[duffCodes[TMW].getFontNum() - 1][duffCodes[TMW].getCharNum() - 32]) throw new Error(\"tibwn.ini is supposed to use the TibetanMachineWeb glyph as the unique key, but \" + val + \" appears two or more times.\");\n                                    TMWtoTM[duffCodes[TMW].getFontNum() - 1][duffCodes[TMW].getCharNum() - 32] = duffCodes[TM];\n                                    if (wylie.toLowerCase().startsWith(\"\\\\uf0\")) {\n                                        int x = Integer.parseInt(wylie.substring(\"\\\\u\".length()), 16);\n                                        ThdlDebug.verify((x >= 0xF000 && x <= 0xF0FF));\n                                        NonUnicodeToTMW[x - '\uf000'] = new DuffCode[] { duffCodes[TMW] };\n                                    }\n                                    break;\n                                case 4:\n                                case 5:\n                                case 6:\n                                case 7:\n                                case 8:\n                                case 9:\n                                    if (!ignore) {\n                                        try {\n                                            duffCodes[k - 1] = new DuffCode(val, true);\n                                        } catch (Exception e) {\n                                            System.err.println(\"Couldn't make a DuffCode out of \" + val + \"; line is \" + line + \"; k is \" + k);\n                                        }\n                                    }\n                                    break;\n                                case 10:\n                                    if (!val.equals(\"none\")) {\n                                        StringBuffer unicodeBuffer = new StringBuffer();\n                                        StringTokenizer uTok = new StringTokenizer(val, \",\");\n                                        while (uTok.hasMoreTokens()) {\n                                            String subval = uTok.nextToken();\n                                            ThdlDebug.verify(subval.length() == 4 || subval.length() == 3);\n                                            try {\n                                                int x = Integer.parseInt(subval, 16);\n                                                ThdlDebug.verify((x >= 0x0F00 && x <= 0x0FFF) || x == 0x5350 || x == 0x534D || x == 0x0020 || x == 0x00A0 || x == 0x2003);\n                                                unicodeBuffer.append((char) x);\n                                            } catch (NumberFormatException e) {\n                                                ThdlDebug.verify(false);\n                                            }\n                                        }\n                                        TMWtoUnicode[duffCodes[TMW].getFontNum() - 1][duffCodes[TMW].getCharNum() - 32] = unicodeBuffer.toString();\n                                        char ch;\n                                        if (unicodeBuffer.length() == 1 && UnicodeUtils.isInTibetanRange(ch = unicodeBuffer.charAt(0))) {\n                                            if (null != UnicodeToTMW[ch - '\u0f00'][0] && '\u0f00' != ch && '\u0f02' != ch && '\u0f03' != ch && '\u0f0b' != ch && '\u0f0e' != ch && '\u0f40' != ch && '\u0f42' != ch && '\u0f49' != ch && '\u0f4f' != ch && '\u0f51' != ch && '\u0f53' != ch && '\u0f5e' != ch && '\u0f62' != ch && '\u0f64' != ch && '\u0f67' != ch && '\u0f6a' != ch && '\u0f71' != ch && '\u0f72' != ch && '\u0f73' != ch && '\u0f74' != ch && '\u0f75' != ch && '\u0f76' != ch && '\u0f77' != ch && '\u0f78' != ch && '\u0f79' != ch && '\u0f7a' != ch && '\u0f7c' != ch && '\u0f7e' != ch && '\u0f81' != ch) {\n                                                throw new Error(\"tibwn.ini has more than one TMW fellow listed that has the Unicode \" + val + \", but it's not on the list of specially handled glyphs\");\n                                            }\n                                            UnicodeToTMW[ch - '\u0f00'][0] = duffCodes[TMW];\n                                        }\n                                    }\n                                    break;\n                                case 11:\n                                    if (!ignore) {\n                                        duffCodes[HALF_C] = new DuffCode(val, true);\n                                    }\n                                    break;\n                                case 12:\n                                    if (!ignore) {\n                                        DuffCode binduCode = new DuffCode(val, true);\n                                        binduMap.put(duffCodes[TMW], binduCode);\n                                    }\n                                    break;\n                                case 13:\n                                    throw new Error(\"tibwn.ini has only 13 columns, you tried to use a 14th column.\");\n                            }\n                        } else {\n                            if (k == 10) {\n                                throw new Error(\"needed none or some unicode; line is \" + line);\n                            }\n                        }\n                    }\n                    if (k < 10) {\n                        throw new Error(\"needed none or some unicode; line is \" + line);\n                    }\n                    if (!ignore) {\n                        if (null == wylie) throw new Error(fileName + \" has a line ^\" + DELIMITER + \" which means that no Wylie is assigned.  That isn't supported.\");\n                        if (hashOn) {\n                            tibHash.put(Manipulate.unescape(wylie), duffCodes);\n                        }\n                        if (isTibetan) {\n                            StringBuffer wylieWithoutDashes = new StringBuffer(wylie);\n                            for (int wl = 0; wl < wylieWithoutDashes.length(); wl++) {\n                                if (wylieWithoutDashes.charAt(wl) == '-') {\n                                    wylieWithoutDashes.deleteCharAt(wl);\n                                    --wl;\n                                }\n                            }\n                            tibSet.add(wylieWithoutDashes.toString());\n                        }\n                        if (isSanskrit) {\n                            sanskritStackSet.add(wylie);\n                        }\n                        if (null == duffCodes[TMW]) throw new Error(fileName + \" has a line with wylie \" + wylie + \" but no TMW; that's not allowed\");\n                        int font = duffCodes[TMW].getFontNum();\n                        int code = duffCodes[TMW].getCharNum() - 32;\n                        toHashKey[font][code] = Manipulate.unescape(wylie);\n                    }\n                }\n            }\n        } catch (IOException e) {\n            System.out.println(\"file Disappeared\");\n            ThdlDebug.noteIffyCode();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10690728",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void addMaintainerScripts(TarOutputStream tar, PackageInfo info) throws IOException, ScriptDataTooLargeException {\n        for (final MaintainerScript script : info.getMaintainerScripts().values()) {\n            if (script.getSize() > Integer.MAX_VALUE) {\n                throw new ScriptDataTooLargeException(\"The script data is too large for the tar file. script=[\" + script.getType().getFilename() + \"].\");\n            }\n            final TarEntry entry = standardEntry(script.getType().getFilename(), UnixStandardPermissions.EXECUTABLE_FILE_MODE, (int) script.getSize());\n            tar.putNextEntry(entry);\n            IOUtils.copy(script.getStream(), tar);\n            tar.closeEntry();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10692452",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic boolean config(URL url, boolean throwsException) throws IllegalArgumentException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public boolean config(URL url, boolean throwsException) throws IllegalArgumentException {\n        try {\n            final MetaRoot conf = UjoManagerXML.getInstance().parseXML(new BufferedInputStream(url.openStream()), MetaRoot.class, this);\n            config(conf);\n            return true;\n        } catch (Exception e) {\n            if (throwsException) {\n                throw new IllegalArgumentException(\"Configuration file is not valid \", e);\n            } else {\n                return false;\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01069283",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void run() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void getPage(final String path, final String dataToSend, final GetPageCallback callback) {\n        runner.add(new Runnable() {\n\n            @Override\n            public void run() {\n                String url = \"http://\" + resources.getString(R.string.host) + path;\n                HttpUriRequest req;\n                if (dataToSend == null) {\n                    req = new HttpGet(url);\n                } else {\n                    req = new HttpPost(url);\n                    try {\n                        ((HttpPost) req).setEntity(new StringEntity(dataToSend));\n                    } catch (UnsupportedEncodingException e) {\n                        Logger.getLogger(JSBridge.class.getName()).log(Level.SEVERE, \"Unsupported encoding.\", e);\n                    }\n                }\n                req.addHeader(\"Cookie\", getAuthCookie(false));\n                try {\n                    HttpResponse response = httpclient.execute(req);\n                    Logger.getLogger(JSBridge.class.getName()).log(Level.INFO, \"Response status is '\" + response.getStatusLine() + \"'.\");\n                    HttpEntity entity = response.getEntity();\n                    if (entity != null) {\n                        InputStream instream = entity.getContent();\n                        try {\n                            BufferedReader in = new BufferedReader(new InputStreamReader(instream));\n                            StringBuilder b = new StringBuilder();\n                            String line;\n                            boolean first = true;\n                            while ((line = in.readLine()) != null) {\n                                b.append(line);\n                                if (first) {\n                                    first = false;\n                                } else {\n                                    b.append(\"\\r\\n\");\n                                }\n                            }\n                            in.close();\n                            callback.success(b.toString());\n                            return;\n                        } catch (RuntimeException ex) {\n                            throw ex;\n                        } finally {\n                            instream.close();\n                        }\n                    }\n                } catch (ClientProtocolException e) {\n                    Logger.getLogger(JSBridge.class.getName()).log(Level.SEVERE, \"HTTP protocol violated.\", e);\n                } catch (IOException e) {\n                    Logger.getLogger(JSBridge.class.getName()).log(Level.WARNING, \"Could not load '\" + path + \"'.\", e);\n                }\n                Logger.getLogger(JSBridge.class.getName()).log(Level.INFO, \"Calling error from JSBridge.getPage because of previous errors.\");\n                callback.error();\n            }\n        });\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01069284",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void run() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n            public void run() {\n                String url = \"http://\" + resources.getString(R.string.host) + path;\n                HttpUriRequest req;\n                if (dataToSend == null) {\n                    req = new HttpGet(url);\n                } else {\n                    req = new HttpPost(url);\n                    try {\n                        ((HttpPost) req).setEntity(new StringEntity(dataToSend));\n                    } catch (UnsupportedEncodingException e) {\n                        Logger.getLogger(JSBridge.class.getName()).log(Level.SEVERE, \"Unsupported encoding.\", e);\n                    }\n                }\n                req.addHeader(\"Cookie\", getAuthCookie(false));\n                try {\n                    HttpResponse response = httpclient.execute(req);\n                    Logger.getLogger(JSBridge.class.getName()).log(Level.INFO, \"Response status is '\" + response.getStatusLine() + \"'.\");\n                    HttpEntity entity = response.getEntity();\n                    if (entity != null) {\n                        InputStream instream = entity.getContent();\n                        try {\n                            BufferedReader in = new BufferedReader(new InputStreamReader(instream));\n                            StringBuilder b = new StringBuilder();\n                            String line;\n                            boolean first = true;\n                            while ((line = in.readLine()) != null) {\n                                b.append(line);\n                                if (first) {\n                                    first = false;\n                                } else {\n                                    b.append(\"\\r\\n\");\n                                }\n                            }\n                            in.close();\n                            callback.success(b.toString());\n                            return;\n                        } catch (RuntimeException ex) {\n                            throw ex;\n                        } finally {\n                            instream.close();\n                        }\n                    }\n                } catch (ClientProtocolException e) {\n                    Logger.getLogger(JSBridge.class.getName()).log(Level.SEVERE, \"HTTP protocol violated.\", e);\n                } catch (IOException e) {\n                    Logger.getLogger(JSBridge.class.getName()).log(Level.WARNING, \"Could not load '\" + path + \"'.\", e);\n                }\n                Logger.getLogger(JSBridge.class.getName()).log(Level.INFO, \"Calling error from JSBridge.getPage because of previous errors.\");\n                callback.error();\n            }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01069285",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private String getAuthCookie(boolean invalidate) {\n        if (resources.getBoolean(R.bool.dev)) {\n            return \"dev_appserver_login=get_view@localhost.devel:false:18580476422013912411\";\n        } else {\n            try {\n                Account[] accounts = accountsManager.getAccountsByType(\"com.google\");\n                Account account = null;\n                while (!(accounts.length > 0)) {\n                    accountsManager.addAccount(\"com.google\", \"ah\", null, null, act, null, null).getResult();\n                    accounts = accountsManager.getAccountsByType(\"com.google\");\n                }\n                if (account == null) {\n                    account = accounts[0];\n                }\n                String authToken = accountsManager.getAuthToken(account, \"ah\", null, act, null, null).getResult().get(AccountManager.KEY_AUTHTOKEN).toString();\n                if (invalidate || authToken == null) {\n                    Logger.getLogger(JSBridge.class.getName()).log(Level.INFO, \"Invalidating auth token.\");\n                    accountsManager.invalidateAuthToken(\"com.google\", authToken);\n                    return getAuthCookie(false);\n                }\n                HttpGet httpget = new HttpGet(\"http://\" + resources.getString(R.string.host) + \"/_ah/login?auth=\" + authToken);\n                HttpResponse response = httpclient.execute(httpget);\n                for (Header c : response.getHeaders(\"Set-Cookie\")) {\n                    if (c.getValue().startsWith(\"ACSID=\")) {\n                        return c.getValue();\n                    }\n                }\n                return getAuthCookie(false);\n            } catch (ClientProtocolException e) {\n                Logger.getLogger(JSBridge.class.getName()).log(Level.SEVERE, \"HTTP protocol violated.\", e);\n            } catch (OperationCanceledException e) {\n                Logger.getLogger(JSBridge.class.getName()).log(Level.WARNING, \"Login canceled.\", e);\n            } catch (AuthenticatorException e) {\n                Logger.getLogger(JSBridge.class.getName()).log(Level.WARNING, \"Authentication failed.\", e);\n            } catch (IOException e) {\n                Logger.getLogger(JSBridge.class.getName()).log(Level.SEVERE, \"Login failed.\", e);\n            }\n            return getAuthCookie(true);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10697587",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copyFileNIO(File in, File out) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copyFileNIO(File in, File out) throws IOException {\n        FileInputStream fis = null;\n        FileOutputStream fos = null;\n        try {\n            fis = new FileInputStream(in);\n            fos = new FileOutputStream(out);\n            FileChannel sourceChannel = fis.getChannel();\n            FileChannel targetChannel = fos.getChannel();\n            sourceChannel.transferTo(0, sourceChannel.size(), targetChannel);\n            sourceChannel.close();\n            targetChannel.close();\n        } catch (IOException e) {\n            throw e;\n        } finally {\n            try {\n                if (fos != null) {\n                    fos.close();\n                }\n            } catch (Exception e) {\n                e.printStackTrace(System.out);\n            }\n            try {\n                if (fis != null) {\n                    fis.close();\n                }\n            } catch (Exception e) {\n                e.printStackTrace(System.out);\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10713685",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static boolean unzip_and_merge(String infile, String outfile) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static boolean unzip_and_merge(String infile, String outfile) {\n        try {\n            BufferedOutputStream dest = null;\n            FileInputStream fis = new FileInputStream(infile);\n            ZipInputStream zis = new ZipInputStream(new BufferedInputStream(fis));\n            FileOutputStream fos = new FileOutputStream(outfile);\n            dest = new BufferedOutputStream(fos, BUFFER);\n            while (zis.getNextEntry() != null) {\n                int count;\n                byte data[] = new byte[BUFFER];\n                while ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count);\n                dest.flush();\n            }\n            dest.close();\n            zis.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n        return true;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10715600",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static synchronized String toMD5(String str) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static synchronized String toMD5(String str) {\n        Nulls.failIfNull(str, \"Cannot create an MD5 encryption form a NULL string\");\n        String hashword = null;\n        try {\n            MessageDigest md5 = MessageDigest.getInstance(MD5);\n            md5.update(str.getBytes());\n            BigInteger hash = new BigInteger(1, md5.digest());\n            hashword = hash.toString(16);\n            return Strings.padLeft(hashword, 32, \"0\");\n        } catch (NoSuchAlgorithmException ex) {\n            ex.printStackTrace();\n        }\n        return hashword;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10715601",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static synchronized String toSHA1(String str) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static synchronized String toSHA1(String str) {\n        Nulls.failIfNull(str, \"Cannot create an SHA1 encryption form a NULL string\");\n        try {\n            MessageDigest md;\n            md = MessageDigest.getInstance(SHA1);\n            byte[] sha1hash = new byte[40];\n            md.update(str.getBytes(ISO_CHARSET), 0, str.length());\n            sha1hash = md.digest();\n            return convertToHex(sha1hash);\n        } catch (NoSuchAlgorithmException ex) {\n            ex.printStackTrace();\n        } catch (UnsupportedEncodingException ex) {\n            ex.printStackTrace();\n        }\n        return null;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10717656",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void run() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void run() {\n        StringBuffer xml;\n        String tabName;\n        Element guiElement;\n        setBold(monitor.getReading());\n        setBold(monitor.getReadingStatus());\n        monitor.getReadingStatus().setText(\"      Working\");\n        HttpMethod method = null;\n        xml = new StringBuffer();\n        File tempfile = new File(url);\n        if (tempfile.exists()) {\n            try {\n                InputStream in = new FileInputStream(tempfile);\n                int temp;\n                while ((temp = in.read()) != -1) {\n                    xml.append((char) temp);\n                }\n                in.close();\n            } catch (IOException e) {\n                System.out.println(\"Loading Monitor Failed, error while reading XML file from local file\");\n                e.printStackTrace(System.err);\n                return;\n            }\n        } else {\n            try {\n                HttpClient client = new HttpClient();\n                method = new GetMethod(url);\n                int response = client.executeMethod(method);\n                if (response == 200) {\n                    InputStream in = method.getResponseBodyAsStream();\n                    int temp;\n                    while ((temp = in.read()) != -1) {\n                        xml.append((char) temp);\n                    }\n                    in.close();\n                } else {\n                    if (method != null) {\n                        method.releaseConnection();\n                    }\n                    System.out.println(\"Loading Monitor Failed. Incorrect response from HTTP Server \" + response);\n                    return;\n                }\n            } catch (IOException e) {\n                if (method != null) {\n                    method.releaseConnection();\n                }\n                System.out.println(\"Loading Monitor Failed, error while reading XML file from HTTP Server\");\n                e.printStackTrace(System.err);\n                return;\n            }\n        }\n        setPlain(monitor.getReading());\n        setPlain(monitor.getReadingStatus());\n        monitor.getReadingStatus().setText(\"      Done\");\n        setBold(monitor.getValidating());\n        setBold(monitor.getValidatingStatus());\n        monitor.getValidatingStatus().setText(\"      Working\");\n        DocumentBuilderFactoryImpl factory = new DocumentBuilderFactoryImpl();\n        try {\n            DocumentBuilder parser = factory.newDocumentBuilder();\n            Document document = parser.parse(new ByteArrayInputStream(xml.toString().getBytes()));\n            if (method != null) {\n                method.releaseConnection();\n            }\n            Element root = document.getDocumentElement();\n            NodeList temp = root.getElementsByTagName(\"resource\");\n            for (int j = 0; j < temp.getLength(); j++) {\n                Element resource = (Element) temp.item(j);\n                resources.add(new URL(resource.getAttribute(\"url\")));\n            }\n            NodeList connections = root.getElementsByTagName(\"jmxserver\");\n            for (int j = 0; j < connections.getLength(); j++) {\n                Element connection = (Element) connections.item(j);\n                String name = connection.getAttribute(\"name\");\n                String tempUrl = connection.getAttribute(\"url\");\n                if (tempUrl.indexOf(\"${host}\") != -1) {\n                    HostDialog dialog = new HostDialog(Config.getHosts());\n                    String host = dialog.showDialog();\n                    if (host == null) {\n                        System.out.println(\"Host can not be null, unable to create panel.\");\n                        return;\n                    }\n                    tempUrl = tempUrl.replaceAll(\"\\\\$\\\\{host\\\\}\", host);\n                    Config.addHost(host);\n                }\n                JMXServiceURL jmxUrl = new JMXServiceURL(tempUrl);\n                JmxServerGraph server = new JmxServerGraph(name, jmxUrl, new JmxWorker(false));\n                servers.put(name, server);\n                NodeList listeners = connection.getElementsByTagName(\"listener\");\n                for (int i = 0; i < listeners.getLength(); i++) {\n                    Element attribute = (Element) listeners.item(i);\n                    String taskname = attribute.getAttribute(\"taskname\");\n                    MBean mbean = new MBean(attribute.getAttribute(\"mbean\"), null);\n                    String filtertype = attribute.getAttribute(\"filterType\");\n                    TaskNotificationListener listener = new TaskNotificationListener();\n                    NotificationFilterSupport filter = new NotificationFilterSupport();\n                    if (filtertype == null || \"\".equals(filtertype)) {\n                        filter = null;\n                    } else {\n                        filter.enableType(filtertype);\n                    }\n                    Task task = new Task(-1, Task.LISTEN, server);\n                    task.setMbean(mbean);\n                    task.setListener(listener);\n                    task.setFilter(filter);\n                    server.getWorker().addTask(task);\n                    if (tasks.get(taskname) != null) {\n                        System.out.println(\"Task \" + taskname + \" already exists.\");\n                        return;\n                    }\n                    List<Task> hashTempList = new ArrayList<Task>();\n                    hashTempList.add(task);\n                    tasks.put(taskname, hashTempList);\n                }\n                NodeList attributes = connection.getElementsByTagName(\"attribute\");\n                for (int i = 0; i < attributes.getLength(); i++) {\n                    Element attribute = (Element) attributes.item(i);\n                    String taskname = attribute.getAttribute(\"taskname\");\n                    MBean mbean = new MBean(attribute.getAttribute(\"mbean\"), null);\n                    String attributename = attribute.getAttribute(\"attributename\");\n                    String frequency = attribute.getAttribute(\"frequency\");\n                    String onEvent = attribute.getAttribute(\"onEvent\");\n                    if (frequency.equalsIgnoreCase(\"onchange\")) {\n                        TaskNotificationListener listener = new TaskNotificationListener();\n                        AttributeChangeNotificationFilter filter = new AttributeChangeNotificationFilter();\n                        filter.enableAttribute(attributename);\n                        Task task = new Task(-1, Task.LISTEN, server);\n                        MBeanAttribute att = new MBeanAttribute(mbean, attributename);\n                        task.setAttribute(att);\n                        task.setMbean(mbean);\n                        task.setListener(listener);\n                        task.setFilter(filter);\n                        server.getWorker().addTask(task);\n                        if (tasks.get(taskname) != null) {\n                            System.out.println(\"Task \" + taskname + \" already exists.\");\n                            return;\n                        }\n                        Task task2 = new Task(-1, Task.GET_ATTRIBUTE, server);\n                        task2.setAttribute(att);\n                        task2.setMbean(mbean);\n                        server.getWorker().addTask(task2);\n                        List<Task> hashTempList = new ArrayList<Task>();\n                        hashTempList.add(task);\n                        hashTempList.add(task2);\n                        tasks.put(taskname, hashTempList);\n                    } else {\n                        int frequency2 = Integer.parseInt(frequency);\n                        Task task = new Task(frequency2, Task.GET_ATTRIBUTE, server);\n                        MBeanAttribute att = new MBeanAttribute(mbean, attributename);\n                        task.setAttribute(att);\n                        task.setMbean(mbean);\n                        if (tasks.get(taskname) != null) {\n                            System.out.println(\"Task \" + taskname + \" already exists.\");\n                            return;\n                        }\n                        List<Task> hashTempList = new ArrayList<Task>();\n                        hashTempList.add(task);\n                        tasks.put(taskname, hashTempList);\n                        TaskNotificationListener listener = null;\n                        if (onEvent != null && !\"\".equals(onEvent)) {\n                            Task tempTask = tasks.get(onEvent).get(0);\n                            if (tempTask == null) {\n                                System.out.println(onEvent + \" was not found.\");\n                                return;\n                            } else {\n                                listener = (TaskNotificationListener) tempTask.getListener();\n                            }\n                        }\n                        if (listener == null) {\n                            server.getWorker().addTask(task);\n                        } else {\n                            listener.addTask(task);\n                        }\n                    }\n                }\n            }\n            NodeList guiTemp = root.getElementsByTagName(\"gui\");\n            guiElement = (Element) guiTemp.item(0);\n            tabName = guiElement.getAttribute(\"name\");\n            if (MonitorServer.contains(tabName)) {\n                JOptionPane.showMessageDialog(null, \"This panel is already open, stoping creating of panel.\", \"Panel already exists\", JOptionPane.ERROR_MESSAGE);\n                return;\n            }\n            for (int i = 0; i < monitor.getTab().getTabCount(); i++) {\n                if (monitor.getTab().getComponent(i).equals(monitor)) {\n                    monitor.getTab().setTitleAt(i, tabName);\n                    break;\n                }\n            }\n            NodeList tempBindings = root.getElementsByTagName(\"binding\");\n            for (int i = 0; i < tempBindings.getLength(); i++) {\n                Element binding = (Element) tempBindings.item(i);\n                String guiname = binding.getAttribute(\"guiname\");\n                String tmethod = binding.getAttribute(\"method\");\n                String taskname = binding.getAttribute(\"taskname\");\n                String formater = binding.getAttribute(\"formater\");\n                BindingContainer tempBinding;\n                if (formater == null || (formater != null && formater.equals(\"\"))) {\n                    tempBinding = new BindingContainer(guiname, tmethod, taskname);\n                } else {\n                    tempBinding = new BindingContainer(guiname, tmethod, taskname, formater);\n                }\n                bindings.add(tempBinding);\n            }\n        } catch (Exception e) {\n            System.err.println(\"Exception message: \" + e.getMessage());\n            System.out.println(\"Loading Monitor Failed, couldnt parse XML file.\");\n            e.printStackTrace(System.err);\n            return;\n        }\n        setPlain(monitor.getValidating());\n        setPlain(monitor.getValidatingStatus());\n        monitor.getValidatingStatus().setText(\"      Done\");\n        setBold(monitor.getDownload());\n        setBold(monitor.getDownloadStatus());\n        monitor.getDownloadStatus().setText(\"      Working\");\n        List<File> jarFiles = new ArrayList<File>();\n        File cacheDir = new File(Config.getCacheDir());\n        if (!cacheDir.exists()) {\n            cacheDir.mkdir();\n        }\n        for (URL resUrl : resources) {\n            try {\n                HttpClient client = new HttpClient();\n                HttpMethod methodRes = new GetMethod(resUrl.toString());\n                int response = client.executeMethod(methodRes);\n                if (response == 200) {\n                    int index = resUrl.toString().lastIndexOf(\"/\") + 1;\n                    File file = new File(Config.getCacheDir() + resUrl.toString().substring(index));\n                    FileOutputStream out = new FileOutputStream(file);\n                    InputStream in = methodRes.getResponseBodyAsStream();\n                    int readTemp = 0;\n                    while ((readTemp = in.read()) != -1) {\n                        out.write(readTemp);\n                    }\n                    System.out.println(file.getName() + \" downloaded.\");\n                    methodRes.releaseConnection();\n                    if (file.getName().endsWith(\".jar\")) {\n                        jarFiles.add(file);\n                    }\n                } else {\n                    methodRes.releaseConnection();\n                    System.out.println(\"Loading Monitor Failed. Unable to get resource \" + url);\n                    return;\n                }\n            } catch (IOException e) {\n                System.out.println(\"Loading Monitor Failed, error while reading resource file from HTTP Server\");\n                e.printStackTrace(System.err);\n                return;\n            }\n        }\n        URL[] urls = new URL[jarFiles.size()];\n        try {\n            for (int i = 0; i < jarFiles.size(); i++) {\n                File file = jarFiles.get(i);\n                File newFile = new File(Config.getCacheDir() + \"/\" + System.currentTimeMillis() + file.getName());\n                FileInputStream in = new FileInputStream(file);\n                FileOutputStream out = new FileOutputStream(newFile);\n                int n = 0;\n                byte[] buf = new byte[1024];\n                while ((n = in.read(buf, 0, 1024)) > -1) {\n                    out.write(buf, 0, n);\n                }\n                out.close();\n                out.close();\n                in.close();\n                urls[i] = new URL(\"file:\" + newFile.getAbsolutePath());\n            }\n        } catch (Exception e1) {\n            System.out.println(\"Unable to load jar files.\");\n            e1.printStackTrace();\n        }\n        URLClassLoader loader = new URLClassLoader(urls);\n        engine.setClassLoader(loader);\n        setPlain(monitor.getDownload());\n        setPlain(monitor.getDownloadStatus());\n        monitor.getDownloadStatus().setText(\"      Done\");\n        setBold(monitor.getGui());\n        setBold(monitor.getGuiStatus());\n        monitor.getGuiStatus().setText(\"      Working\");\n        Container container;\n        try {\n            String tempXml = xml.toString();\n            int start = tempXml.indexOf(\"<gui\");\n            start = tempXml.indexOf('>', start) + 1;\n            int end = tempXml.indexOf(\"</gui>\");\n            container = engine.render(new StringReader(tempXml.substring(start, end)));\n        } catch (Exception e) {\n            e.printStackTrace(System.err);\n            System.err.println(\"Exception msg: \" + e.getMessage());\n            System.out.println(\"Loading Monitor Failed, error creating gui.\");\n            return;\n        }\n        for (BindingContainer bcon : bindings) {\n            for (Task task : tasks.get(bcon.getTask())) {\n                if (task != null) {\n                    Object comp = engine.find(bcon.getComponent());\n                    if (comp != null) {\n                        if (task.getTaskType() == Task.LISTEN && task.getFilter() instanceof AttributeChangeNotificationFilter) {\n                            TaskNotificationListener listener = (TaskNotificationListener) task.getListener();\n                            if (bcon.getFormater() == null) {\n                                listener.addResultListener(new Binding(comp, bcon.getMethod()));\n                            } else {\n                                listener.addResultListener(new Binding(comp, bcon.getMethod(), bcon.getFormater(), loader));\n                            }\n                        } else {\n                            if (bcon.getFormater() == null) {\n                                task.addResultListener(new Binding(comp, bcon.getMethod()));\n                            } else {\n                                task.addResultListener(new Binding(comp, bcon.getMethod(), bcon.getFormater(), loader));\n                            }\n                        }\n                    } else {\n                        System.out.println(\"Refering to gui name, \" + bcon.getComponent() + \", that doesnt exist. Unable to create monitor.\");\n                        return;\n                    }\n                } else {\n                    System.out.println(\"Refering to task name, \" + bcon.getTask() + \", that doesnt exist. Unable to create monitor.\");\n                    return;\n                }\n            }\n        }\n        for (int i = 0; i < monitor.getTab().getTabCount(); i++) {\n            if (monitor.getTab().getComponent(i).equals(monitor)) {\n                monitor.getTab().setComponentAt(i, new MonitorContainerPanel(container, this));\n                break;\n            }\n        }\n        System.out.println(\"Connecting to server(s).\");\n        Enumeration<JmxServerGraph> e = servers.elements();\n        List<JmxWorker> list = new ArrayList<JmxWorker>();\n        while (e.hasMoreElements()) {\n            JmxWorker worker = e.nextElement().getWorker();\n            worker.setRunning(true);\n            worker.start();\n            list.add(worker);\n        }\n        MonitorServer.add(tabName, list);\n        Config.addUrl(url);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10718506",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void update() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void update() {\n        if (url == null) {\n            throw new IllegalArgumentException(\"URL cannot be null!\");\n        }\n        try {\n            URLConnection urlConnection = url.openConnection();\n            urlConnection.setRequestProperty(\"User-Agent\", Settings.INSTANCE.getUserAgent());\n            SyndFeedInput input = new SyndFeedInput();\n            SyndFeed syndFeed = input.build(new XmlReader(url));\n            Channel channel = (Channel) syndFeed.createWireFeed(syndFeed.getFeedType());\n            long lastModified = urlConnection.getLastModified();\n            if (feed.getLastModified() != lastModified) {\n                Server.print(\"Updating: \" + feed.getName());\n                feed.setLastModified(lastModified);\n                ArrayList<String> cachedItems = getCachedItems();\n                List<Item> items = channel.getItems();\n                if (items.isEmpty()) {\n                    return;\n                }\n                if (cachedItems.isEmpty()) {\n                    Database.INSTANCE.addItems(feed, items);\n                } else {\n                    for (Item item : items) {\n                        if (!cachedItems.contains(item.getTitle())) {\n                            Database.INSTANCE.addItem(feed, item);\n                        }\n                    }\n                }\n                cacheItems(items);\n                Settings.INSTANCE.persist();\n                Server.print(\"Done updating: \" + feed.getName());\n            }\n        } catch (ConnectException e) {\n            Server.print(\"Could not connect to \\\"\" + feed.getName() + \"\\\"\");\n        } catch (SocketException e) {\n            Server.print(\"Could not connect to \\\"\" + feed.getName() + \"\\\"\");\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10721229",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic String connect(String host, int port, String init) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public String connect(String host, int port, String init) {\n        HttpURLConnection c = null;\n        String ret = \"\";\n        int response;\n        URL url = null;\n        try {\n            url = new URL(\"http://\" + gwhost + \":\" + gwport + \"/connect?host=\" + Utils.URLEncode(host.getBytes()) + \"&port=\" + Utils.URLEncode((\"\" + port).getBytes()) + \"&passwd=\" + Utils.URLEncode(gwpasswd.getBytes()) + \"&data=\" + Utils.URLEncode(stringToByteArray(init, encoding, utf8output)));\n        } catch (MalformedURLException me) {\n            ret += \"Exception: \" + me.getMessage();\n        }\n        try {\n            c = (HttpURLConnection) url.openConnection();\n            response = c.getResponseCode();\n            identifier = c.getHeaderField(\"X-Identifier\");\n            if (c != null) c.disconnect();\n        } catch (Exception e) {\n            ret += \"Error trying to connect to HTTP proxy server, aborting... \";\n            ret += \"Exception: \" + e.getMessage();\n            return ret;\n        }\n        if (response != HttpStatus.SC_OK) {\n            ret += \"Error trying to connect to IRC server, reason: \";\n            switch(response) {\n                case HttpStatus.SC_FORBIDDEN:\n                    ret += \"Wrong password\";\n                    break;\n                case HttpStatus.SC_BAD_GATEWAY:\n                    ret += \"Bad gateway\";\n                    break;\n                case HttpStatus.SC_NOT_FOUND:\n                    ret += \"IRC connection not found\";\n                    break;\n                default:\n                    ret += \"HTTP response code: \" + response;\n                    break;\n            }\n            return ret;\n        } else {\n            connected = true;\n            return null;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10721234",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private String handleRequest(String url, boolean get) {\n        HttpURLConnection c = null;\n        InputStream is = null;\n        ByteArrayInputStream bais;\n        byte[] buf;\n        String temp, ret = \"\";\n        int response, len, i;\n        try {\n            c = (HttpURLConnection) new URL(url).openConnection();\n            if (get) c.setRequestMethod(\"GET\"); else c.setRequestMethod(\"HEAD\");\n            response = c.getResponseCode();\n            if (get) {\n                is = c.getInputStream();\n                len = (int) c.getContentLength();\n                if (len > 0) {\n                    byte[] data = new byte[len];\n                    for (i = 0; i < len; i++) {\n                        data[i] = (byte) is.read();\n                    }\n                    bytein += data.length;\n                    bais = new ByteArrayInputStream(data);\n                    while (bais.available() > 0) {\n                        buf = Utils.readLine(bais);\n                        if (buf != null) {\n                            temp = byteArrayToString(buf, encoding, utf8detect);\n                            inqueue.addElement(temp);\n                        }\n                    }\n                }\n            }\n            if (is != null) is.close();\n            if (c != null) c.disconnect();\n        } catch (Exception e) {\n            ret += \"Request failed, continuing...\";\n            return ret;\n        }\n        if (response != HttpStatus.SC_OK) {\n            if (response != HttpStatus.SC_NOT_FOUND) {\n                ret += \"Error in connection to IRC server, aborting... \";\n                ret += \"Error: HTTP response code: \" + response;\n            }\n            connected = false;\n            return ret;\n        } else return null;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10728185",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "protected Context getResource3ServerInitialContext() throws Exception {\n        if (resource3ServerJndiProps == null) {\n            URL url = ClassLoader.getSystemResource(\"jndi.properties\");\n            resource3ServerJndiProps = new java.util.Properties();\n            resource3ServerJndiProps.load(url.openStream());\n            String jndiHost = System.getProperty(\"jbosstest.resource3.server.host\", \"localhost\");\n            String jndiUrl = \"jnp://\" + jndiHost + \":1099\";\n            resource3ServerJndiProps.setProperty(\"java.naming.provider.url\", jndiUrl);\n        }\n        return new InitialContext(resource3ServerJndiProps);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10728243",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private byte[] scramble411(String password, String seed) {\n        MessageDigest md;\n        try {\n            md = MessageDigest.getInstance(\"SHA-1\");\n            byte[] passwordHashStage1 = md.digest(password.getBytes());\n            md.reset();\n            byte[] passwordHashStage2 = md.digest(passwordHashStage1);\n            md.reset();\n            md.update(seed.getBytes());\n            md.update(passwordHashStage2);\n            byte[] toBeXord = md.digest();\n            int numToXor = toBeXord.length;\n            for (int i = 0; i < numToXor; i++) {\n                toBeXord[i] = (byte) (toBeXord[i] ^ passwordHashStage1[i]);\n            }\n            return toBeXord;\n        } catch (NoSuchAlgorithmException e) {\n            if (logger.isLoggable(Level.SEVERE)) {\n                logger.log(Level.SEVERE, e.getMessage(), e);\n            }\n        }\n        return null;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10731052",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic HttpURLConnection getTileUrlConnection(int zoom, int tilex, int tiley) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public HttpURLConnection getTileUrlConnection(int zoom, int tilex, int tiley) throws IOException {\n        String url = getTileUrl(zoom, tilex, tiley);\n        if (url == null) return null;\n        return (HttpURLConnection) new URL(url).openConnection();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10735044",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static byte[] getBytes(URL url) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static byte[] getBytes(URL url) throws IOException {\n        URLConnection connection = url.openConnection();\n        InputStream in = connection.getInputStream();\n        int contentLength = connection.getContentLength();\n        ByteArrayOutputStream tmpOut;\n        if (contentLength != -1) {\n            tmpOut = new ByteArrayOutputStream(contentLength);\n        } else {\n            tmpOut = new ByteArrayOutputStream(16384);\n        }\n        byte[] buf = new byte[512];\n        while (true) {\n            int len = in.read(buf);\n            if (len == -1) {\n                break;\n            }\n            tmpOut.write(buf, 0, len);\n        }\n        in.close();\n        tmpOut.close();\n        byte[] array = tmpOut.toByteArray();\n        return array;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10742462",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String md5(String string) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String md5(String string) {\n        MessageDigest md = null;\n        try {\n            md = MessageDigest.getInstance(\"MD5\");\n        } catch (NoSuchAlgorithmException exception) {\n            LOGGER.warn(exception.getMessage());\n        }\n        byte[] md5hash = new byte[32];\n        try {\n            md.update(string.getBytes(\"iso-8859-1\"), 0, string.length());\n        } catch (UnsupportedEncodingException exception) {\n            LOGGER.warn(exception.getMessage());\n        }\n        md5hash = md.digest();\n        return convertToHex(md5hash);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10750170",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private PropertiesLoader(String masterFileLocation, String extraFileLocation) throws IOException {\n        List propertiesList = new ArrayList();\n        ClassLoader classLoader = this.getClass().getClassLoader();\n        try {\n            InputStream is = classLoader.getResourceAsStream(masterFileLocation);\n            Properties p = new Properties();\n            p.load(is);\n            is.close();\n            propertiesList.add(p);\n        } catch (IOException ioex) {\n            IOException ex = new IOException(\"could not load ROME master plugins file [\" + masterFileLocation + \"], \" + ioex.getMessage());\n            ex.setStackTrace(ioex.getStackTrace());\n            throw ex;\n        }\n        Enumeration urls = classLoader.getResources(extraFileLocation);\n        while (urls.hasMoreElements()) {\n            URL url = (URL) urls.nextElement();\n            Properties p = new Properties();\n            try {\n                InputStream is = url.openStream();\n                p.load(is);\n                is.close();\n            } catch (IOException ioex) {\n                IOException ex = new IOException(\"could not load ROME extensions plugins file [\" + url.toString() + \"], \" + ioex.getMessage());\n                ex.setStackTrace(ioex.getStackTrace());\n                throw ex;\n            }\n            propertiesList.add(p);\n        }\n        _properties = new Properties[propertiesList.size()];\n        propertiesList.toArray(_properties);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10752643",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String MD5(String text) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String MD5(String text) throws Exception {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] md5hash = md.digest();\n        return convertToHex(md5hash);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10753830",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static Document send(String address, Document request) throws MalformedURLException, IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static Document send(String address, Document request) throws MalformedURLException, IOException {\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"Sending request to \" + address);\n            String requestString = XMLUtil.transformToString(request);\n            logger.debug(\"Sending Request \" + requestString);\n        }\n        URL url = new URL(address);\n        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n        connection.setRequestProperty(\"Content-Type\", \"text/xml\");\n        connection.setDoOutput(true);\n        connection.setDefaultUseCaches(false);\n        connection.setRequestMethod(\"POST\");\n        connection.connect();\n        OutputStream os = connection.getOutputStream();\n        XMLUtil.transformToStream(request, os);\n        os.flush();\n        os.close();\n        if (connection.getResponseCode() != connection.HTTP_OK) {\n            logger.error(\"Was expecting HTTP_OK (200) but received response code: \" + connection.getResponseCode());\n            logger.error(\"Message: \" + connection.getResponseMessage());\n            throw new LibraryException(LibraryException.Code.REQUEST_FAILURE, connection.getResponseCode() + \" - \" + connection.getResponseMessage());\n        }\n        BufferedReader rd = new BufferedReader(new InputStreamReader(connection.getInputStream()));\n        StringBuilder sb = new StringBuilder();\n        String line;\n        while ((line = rd.readLine()) != null) {\n            sb.append(line);\n        }\n        rd.close();\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"Received Response\" + sb.toString());\n        }\n        try {\n            return XMLUtil.parseString(sb.toString());\n        } catch (SAXException ex) {\n            logger.error(\"Error parsing XML Response\", ex);\n            throw new LibraryException(LibraryException.Code.INVALID_XML, ex);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10754938",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static URL getIconURLForUser(String id) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static URL getIconURLForUser(String id) {\n        try {\n            URL url = new URL(\"http://profiles.yahoo.com/\" + id);\n            BufferedReader r = new BufferedReader(new InputStreamReader(url.openStream()));\n            String input = null;\n            while ((input = r.readLine()) != null) {\n                if (input.indexOf(\"<a href=\\\"\") < 0) continue;\n                if (input.indexOf(\"<img src=\\\"\") < 0) continue;\n                if (input.indexOf(\"<a href=\\\"\") > input.indexOf(\"<img src=\\\"\")) continue;\n                String href = input.substring(input.indexOf(\"<a href=\\\"\") + 9);\n                String src = input.substring(input.indexOf(\"<img src=\\\"\") + 10);\n                if (href.indexOf(\"\\\"\") < 0) continue;\n                if (src.indexOf(\"\\\"\") < 0) continue;\n                href = href.substring(0, href.indexOf(\"\\\"\"));\n                src = src.substring(0, src.indexOf(\"\\\"\"));\n                if (href.equals(src)) {\n                    return new URL(href);\n                }\n            }\n        } catch (IOException e) {\n        }\n        URL toReturn = null;\n        try {\n            toReturn = new URL(\"http://us.i1.yimg.com/us.yimg.com/i/ppl/no_photo.gif\");\n        } catch (MalformedURLException e) {\n            Debug.assrt(false);\n        }\n        return toReturn;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10759917",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void delete(String name) throws FidoDatabaseException, CannotDeleteSystemLinkException, ClassLinkTypeNotFoundException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void delete(String name) throws FidoDatabaseException, CannotDeleteSystemLinkException, ClassLinkTypeNotFoundException {\n        try {\n            Connection conn = null;\n            Statement stmt = null;\n            try {\n                conn = fido.util.FidoDataSource.getConnection();\n                conn.setAutoCommit(false);\n                stmt = conn.createStatement();\n                if (isSystemLink(stmt, name) == true) throw new CannotDeleteSystemLinkException(name);\n                AdjectivePrepositionTable prepTable = new AdjectivePrepositionTable();\n                prepTable.deleteLinkType(stmt, name);\n                ObjectLinkTable objectLinkTable = new ObjectLinkTable();\n                objectLinkTable.deleteLinkType(stmt, name);\n                String sql = \"delete from ClassLinkTypes where LinkName = '\" + name + \"'\";\n                stmt.executeUpdate(sql);\n                conn.commit();\n            } catch (SQLException e) {\n                if (conn != null) conn.rollback();\n                throw e;\n            } finally {\n                if (stmt != null) stmt.close();\n                if (conn != null) conn.close();\n            }\n        } catch (SQLException e) {\n            throw new FidoDatabaseException(e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10760907",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void send(org.hibernate.Session hsession, Session session, String repositoryName, Vector files, int label, String charset) throws FilesException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void send(org.hibernate.Session hsession, Session session, String repositoryName, Vector files, int label, String charset) throws FilesException {\n        ByteArrayInputStream bais = null;\n        FileOutputStream fos = null;\n        try {\n            if ((files == null) || (files.size() <= 0)) {\n                return;\n            }\n            if (charset == null) {\n                charset = MimeUtility.javaCharset(Charset.defaultCharset().displayName());\n            }\n            Users user = getUser(hsession, repositoryName);\n            Identity identity = getDefaultIdentity(hsession, user);\n            InternetAddress _returnPath = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());\n            InternetAddress _from = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());\n            InternetAddress _replyTo = new InternetAddress(identity.getIdeReplyTo(), identity.getIdeName());\n            InternetAddress _to = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());\n            for (int i = 0; i < files.size(); i++) {\n                MultiPartEmail email = email = new MultiPartEmail();\n                email.setCharset(charset);\n                if (_from != null) {\n                    email.setFrom(_from.getAddress(), _from.getPersonal());\n                }\n                if (_returnPath != null) {\n                    email.addHeader(\"Return-Path\", _returnPath.getAddress());\n                    email.addHeader(\"Errors-To\", _returnPath.getAddress());\n                    email.addHeader(\"X-Errors-To\", _returnPath.getAddress());\n                }\n                if (_replyTo != null) {\n                    email.addReplyTo(_replyTo.getAddress(), _replyTo.getPersonal());\n                }\n                if (_to != null) {\n                    email.addTo(_to.getAddress(), _to.getPersonal());\n                }\n                MailPartObj obj = (MailPartObj) files.get(i);\n                email.setSubject(\"Files-System \" + obj.getName());\n                Date now = new Date();\n                email.setSentDate(now);\n                File dir = new File(System.getProperty(\"user.home\") + File.separator + \"tmp\");\n                if (!dir.exists()) {\n                    dir.mkdir();\n                }\n                File file = new File(dir, obj.getName());\n                bais = new ByteArrayInputStream(obj.getAttachent());\n                fos = new FileOutputStream(file);\n                IOUtils.copy(bais, fos);\n                IOUtils.closeQuietly(bais);\n                IOUtils.closeQuietly(fos);\n                EmailAttachment attachment = new EmailAttachment();\n                attachment.setPath(file.getPath());\n                attachment.setDisposition(EmailAttachment.ATTACHMENT);\n                attachment.setDescription(\"File Attachment: \" + file.getName());\n                attachment.setName(file.getName());\n                email.attach(attachment);\n                String mid = getId();\n                email.addHeader(RFC2822Headers.IN_REPLY_TO, \"<\" + mid + \".JavaMail.duroty@duroty\" + \">\");\n                email.addHeader(RFC2822Headers.REFERENCES, \"<\" + mid + \".JavaMail.duroty@duroty\" + \">\");\n                email.addHeader(\"X-DBox\", \"FILES\");\n                email.addHeader(\"X-DRecent\", \"false\");\n                email.setMailSession(session);\n                email.buildMimeMessage();\n                MimeMessage mime = email.getMimeMessage();\n                int size = MessageUtilities.getMessageSize(mime);\n                if (!controlQuota(hsession, user, size)) {\n                    throw new MailException(\"ErrorMessages.mail.quota.exceded\");\n                }\n                messageable.storeMessage(mid, mime, user);\n            }\n        } catch (FilesException e) {\n            throw e;\n        } catch (Exception e) {\n            throw new FilesException(e);\n        } catch (java.lang.OutOfMemoryError ex) {\n            System.gc();\n            throw new FilesException(ex);\n        } catch (Throwable e) {\n            throw new FilesException(e);\n        } finally {\n            GeneralOperations.closeHibernateSession(hsession);\n            IOUtils.closeQuietly(bais);\n            IOUtils.closeQuietly(fos);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10763720",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic String plainStringToMD5(String input) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public String plainStringToMD5(String input) {\n        MessageDigest md = null;\n        byte[] byteHash = null;\n        StringBuffer resultString = new StringBuffer();\n        try {\n            md = MessageDigest.getInstance(\"MD5\");\n        } catch (NoSuchAlgorithmException e) {\n            logger.throwing(getClass().getName(), \"plainStringToMD5\", e);\n        }\n        md.reset();\n        try {\n            md.update(input.getBytes(\"UTF-8\"));\n        } catch (UnsupportedEncodingException e) {\n        }\n        byteHash = md.digest();\n        for (int i = 0; i < byteHash.length; i++) {\n            resultString.append(Integer.toHexString(0xF0 & byteHash[i]).charAt(0));\n            resultString.append(Integer.toHexString(0x0F & byteHash[i]));\n        }\n        return (resultString.toString());\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10769994",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic AudioInputStream getAudioInputStream(URL url, String userAgent) throws UnsupportedAudioFileException, IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public AudioInputStream getAudioInputStream(URL url, String userAgent) throws UnsupportedAudioFileException, IOException {\n        if (TDebug.TraceAudioFileReader) {\n            TDebug.out(\"MpegAudioFileReaderWorkaround.getAudioInputStream(URL,String): begin\");\n        }\n        long lFileLengthInBytes = AudioSystem.NOT_SPECIFIED;\n        URLConnection conn = url.openConnection();\n        boolean isShout = false;\n        int toRead = 4;\n        byte[] head = new byte[toRead];\n        if (userAgent != null) conn.setRequestProperty(\"User-Agent\", userAgent);\n        conn.setRequestProperty(\"Accept\", \"*/*\");\n        conn.setRequestProperty(\"Icy-Metadata\", \"1\");\n        conn.setRequestProperty(\"Connection\", \"close\");\n        BufferedInputStream bInputStream = new BufferedInputStream(conn.getInputStream());\n        bInputStream.mark(toRead);\n        int read = bInputStream.read(head, 0, toRead);\n        if ((read > 2) && (((head[0] == 'I') | (head[0] == 'i')) && ((head[1] == 'C') | (head[1] == 'c')) && ((head[2] == 'Y') | (head[2] == 'y')))) {\n            isShout = true;\n        }\n        bInputStream.reset();\n        InputStream inputStream = null;\n        if (isShout == true) {\n            IcyInputStream icyStream = new IcyInputStream(bInputStream);\n            icyStream.addTagParseListener(IcyListener.getInstance());\n            inputStream = icyStream;\n        } else {\n            String metaint = conn.getHeaderField(\"icy-metaint\");\n            if (metaint != null) {\n                IcyInputStream icyStream = new IcyInputStream(bInputStream, metaint);\n                icyStream.addTagParseListener(IcyListener.getInstance());\n                inputStream = icyStream;\n            } else {\n                inputStream = bInputStream;\n            }\n        }\n        AudioInputStream audioInputStream = null;\n        try {\n            audioInputStream = getAudioInputStream(inputStream, lFileLengthInBytes);\n        } catch (UnsupportedAudioFileException e) {\n            inputStream.close();\n            throw e;\n        } catch (IOException e) {\n            inputStream.close();\n            throw e;\n        }\n        if (TDebug.TraceAudioFileReader) {\n            TDebug.out(\"MpegAudioFileReaderWorkaround.getAudioInputStream(URL,String): end\");\n        }\n        return audioInputStream;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10771590",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String crypt(String strPassword, String strSalt) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String crypt(String strPassword, String strSalt) {\n        try {\n            StringTokenizer st = new StringTokenizer(strSalt, \"$\");\n            st.nextToken();\n            byte[] abyPassword = strPassword.getBytes();\n            byte[] abySalt = st.nextToken().getBytes();\n            MessageDigest _md = MessageDigest.getInstance(\"MD5\");\n            _md.update(abyPassword);\n            _md.update(MAGIC.getBytes());\n            _md.update(abySalt);\n            MessageDigest md2 = MessageDigest.getInstance(\"MD5\");\n            md2.update(abyPassword);\n            md2.update(abySalt);\n            md2.update(abyPassword);\n            byte[] abyFinal = md2.digest();\n            for (int n = abyPassword.length; n > 0; n -= 16) {\n                _md.update(abyFinal, 0, n > 16 ? 16 : n);\n            }\n            abyFinal = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\n            for (int j = 0, i = abyPassword.length; i != 0; i >>>= 1) {\n                if ((i & 1) == 1) _md.update(abyFinal, j, 1); else _md.update(abyPassword, j, 1);\n            }\n            StringBuffer sbPasswd = new StringBuffer();\n            sbPasswd.append(MAGIC);\n            sbPasswd.append(new String(abySalt));\n            sbPasswd.append('$');\n            abyFinal = _md.digest();\n            for (int n = 0; n < 1000; n++) {\n                MessageDigest md3 = MessageDigest.getInstance(\"MD5\");\n                if ((n & 1) != 0) md3.update(abyPassword); else md3.update(abyFinal);\n                if ((n % 3) != 0) md3.update(abySalt);\n                if ((n % 7) != 0) md3.update(abyPassword);\n                if ((n & 1) != 0) md3.update(abyFinal); else md3.update(abyPassword);\n                abyFinal = md3.digest();\n            }\n            int[] anFinal = new int[] { (abyFinal[0] & 0x7f) | (abyFinal[0] & 0x80), (abyFinal[1] & 0x7f) | (abyFinal[1] & 0x80), (abyFinal[2] & 0x7f) | (abyFinal[2] & 0x80), (abyFinal[3] & 0x7f) | (abyFinal[3] & 0x80), (abyFinal[4] & 0x7f) | (abyFinal[4] & 0x80), (abyFinal[5] & 0x7f) | (abyFinal[5] & 0x80), (abyFinal[6] & 0x7f) | (abyFinal[6] & 0x80), (abyFinal[7] & 0x7f) | (abyFinal[7] & 0x80), (abyFinal[8] & 0x7f) | (abyFinal[8] & 0x80), (abyFinal[9] & 0x7f) | (abyFinal[9] & 0x80), (abyFinal[10] & 0x7f) | (abyFinal[10] & 0x80), (abyFinal[11] & 0x7f) | (abyFinal[11] & 0x80), (abyFinal[12] & 0x7f) | (abyFinal[12] & 0x80), (abyFinal[13] & 0x7f) | (abyFinal[13] & 0x80), (abyFinal[14] & 0x7f) | (abyFinal[14] & 0x80), (abyFinal[15] & 0x7f) | (abyFinal[15] & 0x80) };\n            to64(sbPasswd, anFinal[0] << 16 | anFinal[6] << 8 | anFinal[12], 4);\n            to64(sbPasswd, anFinal[1] << 16 | anFinal[7] << 8 | anFinal[13], 4);\n            to64(sbPasswd, anFinal[2] << 16 | anFinal[8] << 8 | anFinal[14], 4);\n            to64(sbPasswd, anFinal[3] << 16 | anFinal[9] << 8 | anFinal[15], 4);\n            to64(sbPasswd, anFinal[4] << 16 | anFinal[10] << 8 | anFinal[5], 4);\n            to64(sbPasswd, anFinal[11], 2);\n            return sbPasswd.toString();\n        } catch (NoSuchAlgorithmException e) {\n            return null;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10778361",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void writeData(String name, int items, int mznum, int mzscale, long tstart, long tdelta, int[] peaks) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void writeData(String name, int items, int mznum, int mzscale, long tstart, long tdelta, int[] peaks) {\n        PrintWriter file = getWriter(name + \".txt\");\n        file.println(\"999 9999\");\n        file.println(\"Doe, John\");\n        file.println(\"TEST Lab\");\n        if (mzscale == 1) file.println(\"PALMS Positive Ion Data\"); else if (mzscale == -1) file.println(\"PALMS Negative Ion Data\"); else file.println(\"PALMS GJIFJIGJ Ion Data\");\n        file.println(\"TEST Mission\");\n        file.println(\"1 1\");\n        file.println(\"1970 01 01 2008 07 09\");\n        file.println(\"0\");\n        file.println(\"TIME (UT SECONDS)\");\n        file.println(mznum + 4);\n        for (int i = 0; i < mznum + 4; i++) file.println(\"1.0\");\n        for (int i = 0; i < mznum + 4; i++) file.println(\"9.9E29\");\n        file.println(\"TOTION total MCP signal (electron units)\");\n        file.println(\"HMASS high mass integral (fraction)\");\n        file.println(\"UNLIST (unlisted low mass peaks (fraction)\");\n        file.println(\"UFO unidentified peaks (fraction)\");\n        for (int i = 1; i <= mznum; i++) file.println(\"MS\" + i + \" (fraction)\");\n        int header2length = 13;\n        file.println(header2length);\n        for (int i = 0; i < header2length; i++) file.println(\"1.0\");\n        for (int i = 0; i < header2length; i++) file.println(\"9.9E29\");\n        file.println(\"AirCraftTime aircraft time (s)\");\n        file.println(\"INDEX index ()\");\n        file.println(\"SCAT scatter (V)\");\n        file.println(\"JMETER joule meter ()\");\n        file.println(\"ND neutral density (fraction)\");\n        file.println(\"SCALEA Mass scale intercept (us)\");\n        file.println(\"SCALEB mass scale slope (us)\");\n        file.println(\"NUMPKS number of peaks ()\");\n        file.println(\"CONF confidence (coded)\");\n        file.println(\"CAT preliminary category ()\");\n        file.println(\"AeroDiam aerodynamic diameter (um)\");\n        file.println(\"AeroDiam1p7 aero diam if density=1.7 (um)\");\n        file.println(\"TOTBACK total background subtracted (electron units)\");\n        file.println(\"0\");\n        file.println(\"0\");\n        String nothing = \"0.000000\";\n        for (int i = 0; i < items; i++) {\n            file.println(tstart + (tdelta * i));\n            file.println(tstart + (tdelta * i) - 3);\n            file.println(i + 1);\n            for (int j = 0; j < 15; j++) file.println(Math.random());\n            boolean peaked = false;\n            for (int k = 1; k <= mznum; k++) {\n                for (int j = 0; j < peaks.length && !peaked; j++) if (k == peaks[j]) {\n                    double randData = (int) (1000000 * (j + 1));\n                    file.println(randData / 1000000);\n                    peaked = true;\n                }\n                if (!peaked) file.println(nothing);\n                peaked = false;\n            }\n        }\n        try {\n            Scanner test = new Scanner(f);\n            while (test.hasNext()) {\n                System.out.println(test.nextLine());\n            }\n            System.out.println(\"test\");\n        } catch (Exception e) {\n        }\n        file.close();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10784622",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static InputStream getPropertyFileInputStream(String propertyFileURLStr) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static InputStream getPropertyFileInputStream(String propertyFileURLStr) {\n        InputStream in = null;\n        String errmsg = \"Fatal error: Unable to open specified properties file: \" + propertyFileURLStr;\n        try {\n            URL url = new URL(propertyFileURLStr);\n            in = url.openStream();\n        } catch (IOException e) {\n            throw new IllegalArgumentException(errmsg);\n        }\n        return (in);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10785895",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void createPropertyName(String objectID, String value, String propertyName, Long userID) throws JspTagException {\n        rObject object = new rObject(new Long(objectID), userID);\n        ClassProperty classProperty = new ClassProperty(propertyName, object.getClassName());\n        String newValue = value;\n        if (classProperty.getName().equals(\"Password\")) {\n            try {\n                MessageDigest crypt = MessageDigest.getInstance(\"MD5\");\n                crypt.update(value.getBytes());\n                byte digest[] = crypt.digest();\n                StringBuffer hexString = new StringBuffer();\n                for (int i = 0; i < digest.length; i++) {\n                    hexString.append(hexDigit(digest[i]));\n                }\n                newValue = hexString.toString();\n                crypt.reset();\n            } catch (NoSuchAlgorithmException e) {\n                System.err.println(\"jspShop: Could not get instance of MD5 algorithm. Please fix this!\" + e.getMessage());\n                e.printStackTrace();\n                throw new JspTagException(\"Error crypting password!: \" + e.getMessage());\n            }\n        }\n        Properties properties = new Properties(new Long(objectID), userID);\n        try {\n            Property property = properties.create(classProperty.getID(), newValue);\n            pageContext.setAttribute(getId(), property);\n        } catch (CreateException e) {\n            throw new JspTagException(\"Could not create PropertyValue, CreateException: \" + e.getMessage());\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10785896",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void createProperty(String objectID, String value, String propertyID, Long userID) throws JspTagException {\n        ClassProperty classProperty = new ClassProperty(new Long(propertyID));\n        String newValue = value;\n        if (classProperty.getName().equals(\"Password\")) {\n            try {\n                MessageDigest crypt = MessageDigest.getInstance(\"MD5\");\n                crypt.update(value.getBytes());\n                byte digest[] = crypt.digest();\n                StringBuffer hexString = new StringBuffer();\n                for (int i = 0; i < digest.length; i++) {\n                    hexString.append(hexDigit(digest[i]));\n                }\n                newValue = hexString.toString();\n                crypt.reset();\n            } catch (NoSuchAlgorithmException e) {\n                System.err.println(\"jspShop: Could not get instance of MD5 algorithm. Please fix this!\" + e.getMessage());\n                e.printStackTrace();\n                throw new JspTagException(\"Error crypting password!: \" + e.getMessage());\n            }\n        }\n        Properties properties = new Properties(new Long(objectID), userID);\n        try {\n            Property property = properties.create(new Long(propertyID), newValue);\n            pageContext.setAttribute(getId(), property);\n        } catch (CreateException e) {\n            throw new JspTagException(\"Could not create PropertyValue, CreateException: \" + e.getMessage());\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10789070",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic List<Datastream> getFiles(final String pFile) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public List<Datastream> getFiles(final String pFile) throws IOException {\n        List<Datastream> tDatastreams = new ArrayList<Datastream>();\n        new File(this.getTmpExtractDirName()).mkdir();\n        ZipFile tZipFile = new ZipFile(pFile);\n        Enumeration tEntries = tZipFile.entries();\n        ZipEntry tEntry = null;\n        File tFile = null;\n        String tFileLocation = \"\";\n        LocalDatastream tLocalDs = null;\n        while (tEntries.hasMoreElements()) {\n            tEntry = (ZipEntry) tEntries.nextElement();\n            if (tEntry.isDirectory()) {\n                continue;\n            }\n            tFileLocation = this.getTmpExtractDirName() + System.getProperty(\"file.separator\") + tEntry.getName();\n            tFile = new File(tFileLocation);\n            LOG.debug(\"Saving \" + tEntry.getName() + \" to \" + tFile.getPath());\n            tFile.getParentFile().mkdirs();\n            IOUtils.copy(tZipFile.getInputStream(tEntry), new FileOutputStream(tFile));\n            tLocalDs = new LocalDatastream(tFile.getName().split(\"\\\\.\")[0], FindMimeType.getMimeType(tFile.getName().split(\"\\\\.\")[1]), tFileLocation);\n            tLocalDs.setLabel(tEntry.getName());\n            tDatastreams.add(tLocalDs);\n        }\n        return tDatastreams;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10793696",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        MessageDigest md;\n        md = MessageDigest.getInstance(\"SHA-1\");\n        byte[] sha1hash = new byte[40];\n        md.update(text.getBytes(\"iso-8859-1\"), 0, text.length());\n        sha1hash = md.digest();\n        return convertToHex(sha1hash);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10793825",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic String getRec(String attribute, String url) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public String getRec(String attribute, String url) {\n        String arr[] = new String[3];\n        String[] subarr = new String[6];\n        String mdPrefix = \"\";\n        String mdPrefixValue = \"\";\n        String iden = \"\";\n        String idenValue = \"\";\n        String s = \"\";\n        String arguments = attribute.substring(attribute.indexOf(\"?\") + 1);\n        System.out.println(\"attributes\" + arguments);\n        java.util.StringTokenizer st = new java.util.StringTokenizer(arguments, \"&\");\n        int i = 0;\n        int j = 0;\n        int count = 0;\n        int argCount = 0;\n        java.util.Vector v1 = new java.util.Vector(1, 1);\n        java.util.Vector v901 = new java.util.Vector(1, 1);\n        java.util.Vector v902 = new java.util.Vector(1, 1);\n        java.util.Vector v903 = new java.util.Vector(1, 1);\n        java.util.Vector v904 = new java.util.Vector(1, 1);\n        java.util.Vector v905 = new java.util.Vector(1, 1);\n        java.util.Vector v906 = new java.util.Vector(1, 1);\n        java.util.Vector v907 = new java.util.Vector(1, 1);\n        java.util.Vector v908 = new java.util.Vector(1, 1);\n        java.util.Vector v3 = new java.util.Vector(1, 1);\n        java.util.Vector vData = new java.util.Vector(1, 1);\n        java.util.Vector vSet = new java.util.Vector(1, 1);\n        java.util.Vector v856 = new java.util.Vector(1, 1);\n        Resdate dt = new Resdate();\n        try {\n            while (st.hasMoreElements()) {\n                arr[i] = st.nextElement().toString();\n                java.util.StringTokenizer subSt = new java.util.StringTokenizer(arr[i], \"=\");\n                while (subSt.hasMoreElements()) {\n                    subarr[j] = subSt.nextElement().toString();\n                    System.out.println(\" arga are... \" + subarr[j]);\n                    j++;\n                }\n                i++;\n                count++;\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        Namespace oains = Namespace.getNamespace(\"http://www.openarchives.org/OAI/2.0/\");\n        Element root = new Element(\"OAI-PMH\", oains);\n        Namespace xsi = Namespace.getNamespace(\"xsi\", \"http://www.w3.org/2001/XMLSchema-instance\");\n        Attribute schemaLocation = new Attribute(\"schemaLocation\", \"http://www.openarchives.org/OAI/2.0/ http://www.openarchives.org/OAI/2.0/OAI-PMH.xsd\", xsi);\n        root.setAttribute(schemaLocation);\n        root.addNamespaceDeclaration(xsi);\n        Document doc = new Document(root);\n        Element responseDate = new Element(\"responseDate\", oains);\n        root.addContent(responseDate);\n        responseDate.setText(dt.getDate());\n        Element request = new Element(\"request\", oains);\n        request.setAttribute(\"verb\", \"GetRecord\");\n        int idenCount = 0, mdfCount = 0;\n        for (int k = 2; k < j; k += 2) {\n            System.out.println(\" arg key \" + subarr[k]);\n            if (subarr[k].equals(\"metadataPrefix\")) {\n                mdPrefix = \"metadataPrefix\";\n                mdfCount++;\n                mdPrefixValue = subarr[k + 1];\n                request.setAttribute(mdPrefix, mdPrefixValue);\n                System.out.println(subarr[k] + \"=\");\n                System.out.println(mdPrefixValue);\n                argCount++;\n            } else if (subarr[k].equals(\"identifier\")) {\n                iden = \"identifier\";\n                idenCount++;\n                idenValue = subarr[k + 1];\n                request.setAttribute(iden, idenValue);\n                System.out.println(subarr[k] + \"=\");\n                System.out.println(idenValue);\n                argCount++;\n            }\n        }\n        request.setText(url);\n        root.addContent(request);\n        System.out.println(\"count\" + argCount);\n        if (mdfCount == 1 && idenCount == 1 && (mdPrefixValue.equals(\"marc21\") || mdPrefixValue.equals(\"oai_dc\") || mdPrefixValue.equals(\"mods\"))) {\n            try {\n                v1 = ((ejb.bprocess.OAIPMH.ListGetRecordsHome) ejb.bprocess.util.HomeFactory.getInstance().getRemoteHome(\"ListGetRecords\")).create().getRecord(idenValue, mdPrefixValue);\n            } catch (Exception ex) {\n                ex.printStackTrace();\n            }\n            if (v1.size() == 0) {\n                System.out.println(\"vector size is empty\");\n                Errors e1 = new Errors();\n                Element errorXML = e1.describeError(3, attribute, url, \"GetRecord\");\n                root.addContent(errorXML);\n            } else {\n                Element GetRecord = new Element(\"GetRecord\", oains);\n                root.addContent(GetRecord);\n                Element Record = new Element(\"record\", oains);\n                Element metadata = new Element(\"metadata\", oains);\n                Element head = new Element(\"header\", oains);\n                System.out.println(\"size i  s \" + v1.size());\n                for (int v = 0; v < v1.size(); v = v + 13) {\n                    vSet = (java.util.Vector) v1.elementAt(v + 1);\n                    Element ident = new Element(\"identifier\", oains);\n                    ident.setText(idenValue);\n                    head.addContent(ident);\n                    Element dates = new Element(\"datestamp\", oains);\n                    dates.setText(v1.elementAt(v).toString().substring(0, 10));\n                    head.addContent(dates);\n                    for (int t = 0; t < vSet.size(); t++) {\n                        Element setSpec = new Element(\"setSpec\", oains);\n                        System.out.println(\"set elem\" + vSet.elementAt(t).toString());\n                        setSpec.setText(vSet.elementAt(t).toString());\n                        head.addContent(setSpec);\n                    }\n                    Element marcroot = new Element(\"record\", \"marc\", \"http://www.loc.gov/MARC21/slim\");\n                    Namespace xsimarc = Namespace.getNamespace(\"xsi\", \"http://www.w3.org/2001/XMLSchema-instance\");\n                    marcroot.addNamespaceDeclaration(xsimarc);\n                    Attribute schemaLocationmarc = new Attribute(\"schemaLocation\", \"http://www.loc.gov/MARC21/slim http://www.loc.gov/standards/marcxml/schema/MARC21slim.xsd\", xsimarc);\n                    marcroot.setAttribute(schemaLocationmarc);\n                    marcroot.setAttribute(\"type\", \"Bibliographic\");\n                    v3 = (java.util.Vector) v1.elementAt(v + 10);\n                    java.util.Vector vL = (java.util.Vector) v3.elementAt(0);\n                    org.jdom.Element lead = new org.jdom.Element(\"leader\", \"marc\", \"http://www.loc.gov/MARC21/slim\");\n                    lead.setText(vL.elementAt(0).toString());\n                    marcroot.addContent(lead);\n                    java.util.Vector vC = (java.util.Vector) v3.elementAt(1);\n                    for (int u = 0; u < vC.size(); u = u + 2) {\n                        org.jdom.Element ct = new org.jdom.Element(\"controlfield\", \"marc\", \"http://www.loc.gov/MARC21/slim\");\n                        ct.setAttribute(\"tag\", vC.elementAt(u).toString());\n                        ct.setText(vC.elementAt(u + 1).toString());\n                        marcroot.addContent(ct);\n                    }\n                    v901 = (java.util.Vector) v1.elementAt(v + 2);\n                    for (int k = 0; k < v901.size(); k++) {\n                        org.jdom.Element datafield = new org.jdom.Element(\"datafield\", \"marc\", \"http://www.loc.gov/MARC21/slim\");\n                        datafield.setAttribute(\"tag\", \"901\");\n                        datafield.setAttribute(\"ind1\", \"0\");\n                        datafield.setAttribute(\"ind2\", \"0\");\n                        java.util.Vector vecSub = new java.util.Vector(1, 1);\n                        vecSub = (java.util.Vector) v901.elementAt(k);\n                        System.out.println(\"in getrec sub \");\n                        System.out.println(\"sub 901 size\" + vecSub.size());\n                        for (int k1 = 0; k1 < vecSub.size(); k1 = k1 + 2) {\n                            org.jdom.Element subfield = new org.jdom.Element(\"subfield\", \"marc\", \"http://www.loc.gov/MARC21/slim\");\n                            subfield.setAttribute(\"code\", vecSub.elementAt(k1).toString());\n                            subfield.setText(vecSub.elementAt(k1 + 1).toString());\n                            datafield.addContent(subfield);\n                        }\n                        marcroot.addContent(datafield);\n                    }\n                    v902 = (java.util.Vector) v1.elementAt(v + 3);\n                    for (int l = 0; l < v902.size(); l++) {\n                        Element datafield1 = new Element(\"datafield\", \"marc\", \"http://www.loc.gov/MARC21/slim\");\n                        datafield1.setAttribute(\"tag\", \"902\");\n                        datafield1.setAttribute(\"ind1\", \"0\");\n                        datafield1.setAttribute(\"ind2\", \"0\");\n                        java.util.Vector vecSub1 = new java.util.Vector(1, 1);\n                        vecSub1 = (java.util.Vector) v902.elementAt(l);\n                        for (int b = 0; b < vecSub1.size(); b = b + 2) {\n                            Element subfield = new Element(\"subfield\", \"marc\", \"http://www.loc.gov/MARC21/slim\");\n                            subfield.setAttribute(\"code\", vecSub1.elementAt(b).toString());\n                            subfield.setText(vecSub1.elementAt(b + 1).toString());\n                            datafield1.addContent(subfield);\n                        }\n                        marcroot.addContent(datafield1);\n                    }\n                    v903 = (java.util.Vector) v1.elementAt(v + 4);\n                    Element datafield1 = new Element(\"datafield\", \"marc\", \"http://www.loc.gov/MARC21/slim\");\n                    datafield1.setAttribute(\"tag\", \"903\");\n                    datafield1.setAttribute(\"ind1\", \"0\");\n                    datafield1.setAttribute(\"ind2\", \"0\");\n                    for (int l = 0; l < v903.size(); l++) {\n                        Element subfield = new Element(\"subfield\", \"marc\", \"http://www.loc.gov/MARC21/slim\");\n                        subfield.setAttribute(\"code\", \"a\");\n                        subfield.setText(v903.elementAt(l).toString());\n                        datafield1.addContent(subfield);\n                    }\n                    marcroot.addContent(datafield1);\n                    v904 = (java.util.Vector) v1.elementAt(v + 5);\n                    Element datafield21 = new Element(\"datafield\", \"marc\", \"http://www.loc.gov/MARC21/slim\");\n                    datafield21.setAttribute(\"tag\", \"904\");\n                    datafield21.setAttribute(\"ind1\", \"0\");\n                    datafield21.setAttribute(\"ind2\", \"0\");\n                    for (int l = 0; l < v904.size(); l++) {\n                        Element subfield = new Element(\"subfield\", \"marc\", \"http://www.loc.gov/MARC21/slim\");\n                        subfield.setAttribute(\"code\", \"a\");\n                        subfield.setText(v904.elementAt(l).toString());\n                        datafield21.addContent(subfield);\n                    }\n                    marcroot.addContent(datafield21);\n                    v905 = (java.util.Vector) v1.elementAt(v + 6);\n                    Element datafield31 = new Element(\"datafield\", \"marc\", \"http://www.loc.gov/MARC21/slim\");\n                    datafield31.setAttribute(\"tag\", \"905\");\n                    datafield31.setAttribute(\"ind1\", \"0\");\n                    datafield31.setAttribute(\"ind2\", \"0\");\n                    for (int l = 0; l < v905.size(); l++) {\n                        Element subfield = new Element(\"subfield\", \"marc\", \"http://www.loc.gov/MARC21/slim\");\n                        subfield.setAttribute(\"code\", \"a\");\n                        subfield.setText(v905.elementAt(l).toString());\n                        datafield31.addContent(subfield);\n                    }\n                    marcroot.addContent(datafield31);\n                    v906 = (java.util.Vector) v1.elementAt(v + 7);\n                    Element datafield4 = new Element(\"datafield\", \"marc\", \"http://www.loc.gov/MARC21/slim\");\n                    datafield4.setAttribute(\"tag\", \"906\");\n                    datafield4.setAttribute(\"ind1\", \"0\");\n                    datafield4.setAttribute(\"ind2\", \"0\");\n                    for (int l = 0; l < v906.size(); l++) {\n                        Element subfield = new Element(\"subfield\", \"marc\", \"http://www.loc.gov/MARC21/slim\");\n                        subfield.setAttribute(\"code\", \"a\");\n                        subfield.setText(v906.elementAt(l).toString());\n                        datafield4.addContent(subfield);\n                    }\n                    marcroot.addContent(datafield4);\n                    v907 = (java.util.Vector) v1.elementAt(v + 8);\n                    for (int l = 0; l < v907.size(); l++) {\n                        Element datafield5 = new Element(\"datafield\", \"marc\", \"http://www.loc.gov/MARC21/slim\");\n                        datafield5.setAttribute(\"tag\", \"907\");\n                        datafield5.setAttribute(\"ind1\", \"0\");\n                        datafield5.setAttribute(\"ind2\", \"0\");\n                        java.util.Vector vecSub1 = new java.util.Vector(1, 1);\n                        vecSub1 = (java.util.Vector) v907.elementAt(l);\n                        for (int b = 0; b < vecSub1.size(); b = b + 2) {\n                            Element subfield = new Element(\"subfield\", \"marc\", \"http://www.loc.gov/MARC21/slim\");\n                            subfield.setAttribute(\"code\", vecSub1.elementAt(b).toString());\n                            subfield.setText(vecSub1.elementAt(b + 1).toString());\n                            datafield5.addContent(subfield);\n                        }\n                        marcroot.addContent(datafield5);\n                    }\n                    v908 = (java.util.Vector) v1.elementAt(v + 9);\n                    for (int l = 0; l < v908.size(); l++) {\n                        Element datafield6 = new Element(\"datafield\", \"marc\", \"http://www.loc.gov/MARC21/slim\");\n                        datafield6.setAttribute(\"tag\", \"908\");\n                        datafield6.setAttribute(\"ind1\", \"0\");\n                        datafield6.setAttribute(\"ind2\", \"0\");\n                        java.util.Vector vecSub1 = new java.util.Vector(1, 1);\n                        vecSub1 = (java.util.Vector) v908.elementAt(l);\n                        for (int b = 0; b < vecSub1.size(); b = b + 2) {\n                            Element subfield = new Element(\"subfield\", \"marc\", \"http://www.loc.gov/MARC21/slim\");\n                            subfield.setAttribute(\"code\", vecSub1.elementAt(b).toString());\n                            subfield.setText(vecSub1.elementAt(b + 1).toString());\n                            datafield6.addContent(subfield);\n                        }\n                        marcroot.addContent(datafield6);\n                    }\n                    vData = (java.util.Vector) v1.elementAt(v + 11);\n                    for (int m = 0; m < vData.size(); m = m + 2) {\n                        Element datafield2 = new Element(\"datafield\", \"marc\", \"http://www.loc.gov/MARC21/slim\");\n                        datafield2.setAttribute(\"tag\", vData.elementAt(m).toString());\n                        datafield2.setAttribute(\"ind1\", \"0\");\n                        datafield2.setAttribute(\"ind2\", \"0\");\n                        java.util.Vector vSub = new java.util.Vector(1, 1);\n                        vSub = (java.util.Vector) vData.elementAt(m + 1);\n                        for (int n = 0; n < vSub.size(); n = n + 2) {\n                            Element subfield = new Element(\"subfield\", \"marc\", \"http://www.loc.gov/MARC21/slim\");\n                            subfield.setAttribute(\"code\", vSub.elementAt(n).toString());\n                            subfield.setText(vSub.elementAt(n + 1).toString());\n                            datafield2.addContent(subfield);\n                        }\n                        marcroot.addContent(datafield2);\n                    }\n                    v856 = (java.util.Vector) v1.elementAt(v + 12);\n                    for (int l = 0; l < v856.size(); l = l + 2) {\n                        Element datafield3 = new Element(\"datafield\", \"marc\", \"http://www.loc.gov/MARC21/slim\");\n                        datafield3.setAttribute(\"tag\", \"856\");\n                        datafield3.setAttribute(\"ind1\", \"0\");\n                        datafield3.setAttribute(\"ind2\", \"0\");\n                        Element subfield1 = new Element(\"subfield\", \"marc\", \"http://www.loc.gov/MARC21/slim\");\n                        subfield1.setAttribute(\"code\", v856.elementAt(l).toString());\n                        subfield1.setText(v856.elementAt(l + 1).toString());\n                        datafield3.addContent(subfield1);\n                        marcroot.addContent(datafield3);\n                    }\n                    if (mdPrefixValue.equals(\"oai_dc\")) {\n                        try {\n                            Transformer transformer = TransformerFactory.newInstance().newTransformer(new StreamSource(ejb.bprocess.util.NewGenLibRoot.getRoot() + java.io.File.separator + \"StyleSheets\" + java.io.File.separator + \"MARC21slim2OAIDC.xsl\"));\n                            Document docmarc = new Document(marcroot);\n                            JDOMSource in = new JDOMSource(docmarc);\n                            JDOMResult out = new JDOMResult();\n                            transformer.transform(in, out);\n                            Document doc2 = out.getDocument();\n                            org.jdom.output.XMLOutputter out1 = new org.jdom.output.XMLOutputter();\n                            out1.setTextTrim(true);\n                            out1.setIndent(\"  \");\n                            out1.setNewlines(true);\n                            String s1 = out1.outputString(doc2);\n                            System.out.println(\"dublin core is\" + s1);\n                            Element dcroot1 = doc2.getRootElement();\n                            Namespace xsi1 = Namespace.getNamespace(\"xsi\", \"http://www.w3.org/2001/XMLSchema-instance\");\n                            Namespace oainsdc = Namespace.getNamespace(\"http://www.openarchives.org/OAI/2.0/oai_dc/\");\n                            Element dcroot = new Element(\"dc\", \"oai_dc\", \"http://www.openarchives.org/OAI/2.0/oai_dc/\");\n                            Namespace dcns = Namespace.getNamespace(\"dc\", \"http://purl.org/dc/elements/1.1/\");\n                            dcroot.addNamespaceDeclaration(dcns);\n                            dcroot.addNamespaceDeclaration(xsi1);\n                            Attribute schemaLocationdc = new Attribute(\"schemaLocation\", \"http://www.openarchives.org/OAI/2.0/oai_dc/ http://www.openarchives.org/OAI/2.0/oai_dc.xsd\", xsi1);\n                            dcroot.setAttribute(schemaLocationdc);\n                            java.util.List dcList = doc2.getRootElement().getChildren();\n                            for (int g = 0; g < dcList.size(); g++) {\n                                Element dcElem1 = (org.jdom.Element) dcList.get(g);\n                                Element dcElem = new Element(dcElem1.getName(), \"dc\", \"http://purl.org/dc/elements/1.1/\");\n                                dcElem.setText(dcElem1.getText());\n                                dcroot.addContent(dcElem);\n                            }\n                            metadata.addContent(dcroot);\n                        } catch (TransformerException e) {\n                            e.printStackTrace();\n                        }\n                    } else if (mdPrefixValue.equals(\"mods\")) {\n                        try {\n                            java.util.Properties systemSettings = System.getProperties();\n                            java.util.prefs.Preferences prefs = java.util.prefs.Preferences.systemRoot();\n                            if (prefs.getBoolean(\"useproxy\", false)) {\n                                systemSettings.put(\"proxySet\", \"true\");\n                                systemSettings.put(\"proxyHost\", prefs.get(\"proxyservername\", \"\"));\n                                systemSettings.put(\"proxyPort\", prefs.get(\"proxyport\", \"\"));\n                                systemSettings.put(\"http.proxyHost\", prefs.get(\"proxyservername\", \"\"));\n                                systemSettings.put(\"http.proxyPort\", prefs.get(\"proxyport\", \"\"));\n                            }\n                            String urltext = \"\";\n                            Transformer transformer = null;\n                            urltext = \"http://www.loc.gov/standards/mods/v3/MARC21slim2MODS3.xsl\";\n                            java.net.URL url1 = new java.net.URL(urltext);\n                            java.net.URLConnection urlconn = url1.openConnection();\n                            urlconn.setDoInput(true);\n                            transformer = TransformerFactory.newInstance().newTransformer(new StreamSource(urlconn.getInputStream()));\n                            Document docmarc = new Document(marcroot);\n                            JDOMSource in = new JDOMSource(docmarc);\n                            JDOMResult out = new JDOMResult();\n                            transformer.transform(in, out);\n                            Document doc2 = out.getDocument();\n                            org.jdom.output.XMLOutputter out1 = new org.jdom.output.XMLOutputter();\n                            out1.setTextTrim(true);\n                            out1.setIndent(\"  \");\n                            out1.setNewlines(true);\n                            String s1 = out1.outputString(doc2);\n                            Namespace xsi1 = Namespace.getNamespace(\"xlink\", \"http://www.w3.org/1999/xlink\");\n                            Namespace oainsdc = Namespace.getNamespace(\"http://www.openarchives.org/OAI/2.0/oai_dc/\");\n                            Element mroot = new Element(\"mods\", \"http://www.loc.gov/mods/v3\");\n                            Namespace dcns = Namespace.getNamespace(\"http://www.loc.gov/mods/v3\");\n                            mroot.addNamespaceDeclaration(xsi1);\n                            Attribute schemaLocationdc = new Attribute(\"schemaLocation\", \"http://www.loc.gov/mods/v3 http://www.loc.gov/standards/mods/v3/mods-3-0.xsd\", xsi1);\n                            mroot.setAttribute(schemaLocationdc);\n                            java.util.List dcList = doc2.getRootElement().getChildren();\n                            for (int g = 0; g < dcList.size(); g++) {\n                                Element mElem1 = (org.jdom.Element) dcList.get(g);\n                                Element mElem = new Element(mElem1.getName(), \"http://www.loc.gov/mods/v3\");\n                                if (mElem1.hasChildren()) {\n                                    java.util.List mList1 = mElem1.getChildren();\n                                    for (int f = 0; f < mList1.size(); f++) {\n                                        Element mElem2 = (org.jdom.Element) mList1.get(f);\n                                        Element mElem3 = new Element(mElem2.getName(), \"http://www.loc.gov/mods/v3\");\n                                        if (mElem2.hasChildren()) {\n                                            java.util.List mList2 = mElem2.getChildren();\n                                            for (int h = 0; h < mList2.size(); h++) {\n                                                Element mElem4 = (org.jdom.Element) mList1.get(h);\n                                                Element mElem5 = new Element(mElem4.getName(), \"http://www.loc.gov/mods/v3\");\n                                                mElem5.setText(mElem4.getText());\n                                                mElem3.addContent(mElem5);\n                                            }\n                                        }\n                                        if (mElem2.hasChildren() == false) {\n                                            mElem3.setText(mElem2.getText());\n                                        }\n                                        mElem.addContent(mElem3);\n                                    }\n                                }\n                                if (mElem1.hasChildren() == false) {\n                                    mElem.setText(mElem1.getText());\n                                }\n                                mroot.addContent(mElem);\n                            }\n                            metadata.addContent(mroot);\n                        } catch (Exception e) {\n                            e.printStackTrace();\n                        }\n                    }\n                    if (mdPrefixValue.equals(\"marc21\")) {\n                        metadata.addContent(marcroot);\n                    } else if (mdPrefixValue.equals(\"oai_dc\")) {\n                    }\n                }\n                Record.addContent(head);\n                Record.addContent(metadata);\n                GetRecord.addContent(Record);\n            }\n        } else if (argCount <= 2) {\n            if (idenCount < 1 && mdfCount < 1) {\n                Errors e1 = new Errors();\n                Element errorXML = e1.describeError(2, \"missing arguments: identifier,metadataprefix\", url, \"GetRecord\");\n                root.addContent(errorXML);\n            } else if (idenCount < 1) {\n                Errors e1 = new Errors();\n                Element errorXML = e1.describeError(2, \"missing argument: identifier\", url, \"GetRecord\");\n                root.addContent(errorXML);\n            } else if (mdfCount < 1) {\n                Errors e1 = new Errors();\n                Element errorXML = e1.describeError(2, \"missing argument: metadataprefix\", url, \"GetRecord\");\n                root.addContent(errorXML);\n            } else if (argCount > 2) {\n                Errors e1 = new Errors();\n                Element errorXML = e1.describeError(2, \"more number of arguments\", url, \"GetRecord\");\n                root.addContent(errorXML);\n            } else {\n                System.out.println(\"no format\");\n                Errors e1 = new Errors();\n                Element errorXML = e1.describeError(6, \"\", url, \"GetRecord\");\n                root.addContent(errorXML);\n            }\n        }\n        XMLOutputter out = new XMLOutputter();\n        out.setIndent(\" \");\n        out.setNewlines(true);\n        s = out.outputString(doc);\n        return s;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10793895",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "protected void configure() {\n        Enumeration<URL> resources = null;\n        try {\n            resources = classLoader.getResources(resourceName);\n        } catch (IOException e) {\n            binder().addError(e.getMessage(), e);\n            return;\n        }\n        int resourceCount = 0;\n        while (resources.hasMoreElements()) {\n            URL url = resources.nextElement();\n            log.debug(url + \" ...\");\n            try {\n                InputStream stream = url.openStream();\n                Properties props = new Properties();\n                props.load(stream);\n                resourceCount++;\n                addComponentsFromProperties(props, classLoader);\n            } catch (IOException e) {\n                binder().addError(e.getMessage(), e);\n            }\n        }\n        log.info(\"Added components from \" + resourceCount + \" resources.\");\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10795866",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic String upload() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public String upload() {\n        System.out.println(imgFile);\n        String destDir = \"E:\\\\ganymede_workspace\\\\training01\\\\web\\\\user_imgs\\\\map_bg.jpg\";\n        FileOutputStream fos;\n        try {\n            fos = new FileOutputStream(new File(destDir));\n            IOUtils.copy(new FileInputStream(imgFile), fos);\n            IOUtils.closeQuietly(fos);\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return \"show\";\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10797051",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static void copy(File in, File out) throws IOException {\n        if (!out.getParentFile().isDirectory()) out.getParentFile().mkdirs();\n        FileChannel ic = new FileInputStream(in).getChannel();\n        FileChannel oc = new FileOutputStream(out).getChannel();\n        ic.transferTo(0, ic.size(), oc);\n        ic.close();\n        oc.close();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10797166",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String readFromUrl(String url) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String readFromUrl(String url) {\n        URL url_ = null;\n        URLConnection uc = null;\n        BufferedReader in = null;\n        StringBuilder str = new StringBuilder();\n        try {\n            url_ = new URL(url);\n            uc = url_.openConnection();\n            in = new BufferedReader(new InputStreamReader(uc.getInputStream()));\n            String inputLine;\n            while ((inputLine = in.readLine()) != null) str.append(inputLine);\n            in.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return str.toString();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10798829",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private boolean handlePart(Part p) throws MessagingException, GetterException {\n        String filename = p.getFileName();\n        if (!p.isMimeType(\"multipart/*\")) {\n            String disp = p.getDisposition();\n            if (disp == null || disp.equalsIgnoreCase(Part.ATTACHMENT)) {\n                if (checkCriteria(p)) {\n                    if (filename == null) filename = \"Attachment\" + attnum++;\n                    if (result == null) {\n                        try {\n                            File f = File.createTempFile(\"amorph_pop3-\", \".tmp\");\n                            f.deleteOnExit();\n                            OutputStream os = new BufferedOutputStream(new FileOutputStream(f));\n                            InputStream is = p.getInputStream();\n                            int c;\n                            while ((c = is.read()) != -1) os.write(c);\n                            os.close();\n                            result = new FileInputStream(f);\n                            System.out.println(\"saved attachment to file: \" + f.getAbsolutePath());\n                            return true;\n                        } catch (IOException ex) {\n                            throw new GetterException(ex, \"Failed to save attachment: \" + ex);\n                        }\n                    }\n                }\n            }\n        }\n        return false;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10806987",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic final Matrix3D<E> read(final URL url) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public final Matrix3D<E> read(final URL url) throws IOException {\n        if (url == null) {\n            throw new IllegalArgumentException(\"url must not be null\");\n        }\n        InputStream inputStream = null;\n        try {\n            inputStream = url.openStream();\n            return read(inputStream);\n        } catch (IOException e) {\n            throw e;\n        } finally {\n            MatrixIOUtils.closeQuietly(inputStream);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10816494",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void sendData(String serverUrl, String fileName, String type, InputStream is) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n    public void sendData(String serverUrl, String fileName, String type, InputStream is) throws IOException {\n        ClientSession clientSession = null;\n        try {\n            if (logger.isDebugEnabled()) {\n                logger.debug(\"Connecting to \" + serverUrl);\n            }\n            clientSession = (ClientSession) Connector.open(serverUrl);\n            HeaderSet hsConnectReply = clientSession.connect(clientSession.createHeaderSet());\n            if (hsConnectReply.getResponseCode() != ResponseCodes.OBEX_HTTP_OK) {\n                throw new IOException(\"Connect Error \" + hsConnectReply.getResponseCode());\n            }\n            HeaderSet hsOperation = clientSession.createHeaderSet();\n            hsOperation.setHeader(HeaderSet.NAME, fileName);\n            if (type != null) {\n                hsOperation.setHeader(HeaderSet.TYPE, type);\n            }\n            hsOperation.setHeader(HeaderSet.LENGTH, new Long(is.available()));\n            Operation po = clientSession.put(hsOperation);\n            OutputStream os = po.openOutputStream();\n            IOUtils.copy(is, os);\n            os.flush();\n            os.close();\n            if (logger.isDebugEnabled()) {\n                logger.debug(\"put responseCode \" + po.getResponseCode());\n            }\n            po.close();\n            HeaderSet hsDisconnect = clientSession.disconnect(null);\n            if (logger.isDebugEnabled()) {\n                logger.debug(\"disconnect responseCode \" + hsDisconnect.getResponseCode());\n            }\n            if (hsDisconnect.getResponseCode() != ResponseCodes.OBEX_HTTP_OK) {\n                throw new IOException(\"Send Error \" + hsConnectReply.getResponseCode());\n            }\n        } finally {\n            if (clientSession != null) {\n                try {\n                    clientSession.close();\n                } catch (IOException ignore) {\n                    if (logger.isDebugEnabled()) {\n                        logger.debug(\"IOException during clientSession.close()\", ignore);\n                    }\n                }\n            }\n            clientSession = null;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10816804",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String md5(String input) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String md5(String input) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        StringBuffer result = new StringBuffer();\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(input.getBytes(\"utf-8\"));\n        byte[] digest = md.digest();\n        for (byte b : digest) {\n            result.append(String.format(\"%02X \", b & 0xff));\n        }\n        return result.toString();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10816827",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "protected Object getMethodKey(String methodName, Object[] args) {\n        StringBuffer key = new StringBuffer(methodName.trim().replace(\" \", \".\")).append(\".\");\n        for (Object o : args) {\n            if (o != null) key.append(o.hashCode());\n        }\n        LOGGER.info(\"Generation key ->\" + key.toString());\n        try {\n            MessageDigest messageDigest = MessageDigest.getInstance(\"SHA-512\");\n            messageDigest.reset();\n            messageDigest.update(key.toString().getBytes(Charset.forName(\"UTF8\")));\n            final byte[] resultByte = messageDigest.digest();\n            String hex = null;\n            for (int i = 0; i < resultByte.length; i++) {\n                hex = Integer.toHexString(0xFF & resultByte[i]);\n                if (hex.length() < 2) {\n                    key.append(\"0\");\n                }\n                key.append(hex);\n            }\n        } catch (NoSuchAlgorithmException e) {\n            LOGGER.severe(\"No hash generated for method key! \" + StackTraceUtil.getStackTrace(e));\n        }\n        LOGGER.info(\"Generation key ->\" + key.toString());\n        return new String(key);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10817170",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic Parser getParser() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void extractByParsingHtml(String refererURL, String requestURL) throws MalformedURLException, IOException {\n        URL url = new URL(refererURL);\n        InputStream is = url.openStream();\n        mRefererURL = refererURL;\n        if (requestURL.startsWith(\"http://www.\")) {\n            mRequestURLWWW = requestURL;\n            mRequestURL = \"http://\" + mRequestURLWWW.substring(11);\n        } else {\n            mRequestURL = requestURL;\n            mRequestURLWWW = \"http://www.\" + mRequestURL.substring(7);\n        }\n        Parser parser = (new HTMLEditorKit() {\n\n            public Parser getParser() {\n                return super.getParser();\n            }\n        }).getParser();\n        InputStreamReader isr = new InputStreamReader(is);\n        BufferedReader br = new BufferedReader(isr);\n        String line = null;\n        StringBuffer sb = new StringBuffer();\n        while ((line = br.readLine()) != null) {\n            sb.append(line);\n        }\n        StringReader sr = new StringReader(sb.toString());\n        parser.parse(sr, new LinkbackCallback(), true);\n        if (mStart != 0 && mEnd != 0 && mEnd > mStart) {\n            mExcerpt = sb.toString().substring(mStart, mEnd);\n            mExcerpt = Utilities.removeHTML(mExcerpt);\n            if (mExcerpt.length() > mMaxExcerpt) {\n                mExcerpt = mExcerpt.substring(0, mMaxExcerpt) + \"...\";\n            }\n        }\n        if (mTitle.startsWith(\">\") && mTitle.length() > 1) {\n            mTitle = mTitle.substring(1);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10819149",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic String insertBuilding() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public String insertBuilding() {\n        homeMap = homeMapDao.getHomeMapById(homeMap.getId());\n        homeBuilding.setHomeMap(homeMap);\n        Integer id = homeBuildingDao.saveHomeBuilding(homeBuilding);\n        String dir = \"E:\\\\ganymede_workspace\\\\training01\\\\web\\\\user_buildings\\\\\";\n        FileOutputStream fos;\n        try {\n            fos = new FileOutputStream(dir + id);\n            IOUtils.copy(new FileInputStream(imageFile), fos);\n            IOUtils.closeQuietly(fos);\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return execute();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10824317",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copyFile(File from, File to) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copyFile(File from, File to) throws Exception {\n        if (!from.exists()) return;\n        FileInputStream in = new FileInputStream(from);\n        FileOutputStream out = new FileOutputStream(to);\n        byte[] buffer = new byte[8192];\n        int bytes_read;\n        while (true) {\n            bytes_read = in.read(buffer);\n            if (bytes_read == -1) break;\n            out.write(buffer, 0, bytes_read);\n        }\n        out.flush();\n        out.close();\n        in.close();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10826994",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copyFile(File in, File out) throws EnhancedException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copyFile(File in, File out) throws EnhancedException {\n        try {\n            FileChannel sourceChannel = new FileInputStream(in).getChannel();\n            FileChannel destinationChannel = new FileOutputStream(out).getChannel();\n            sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\n            sourceChannel.close();\n            destinationChannel.close();\n        } catch (Exception e) {\n            throw new EnhancedException(\"Could not copy file \" + in.getAbsolutePath() + \" to \" + out.getAbsolutePath() + \".\", e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10828162",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String loadURLToString(String url, String EOL) throws FileNotFoundException, IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String loadURLToString(String url, String EOL) throws FileNotFoundException, IOException {\n        BufferedReader in = new BufferedReader(new InputStreamReader((new URL(url)).openStream()));\n        String result = \"\";\n        String str;\n        while ((str = in.readLine()) != null) {\n            result += str + EOL;\n        }\n        in.close();\n        return result;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10829636",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String generate(String presentity, String eventPackage) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String generate(String presentity, String eventPackage) {\n        if (presentity == null || eventPackage == null) {\n            return null;\n        }\n        String date = Long.toString(System.currentTimeMillis());\n        try {\n            MessageDigest md = MessageDigest.getInstance(HASH_ALGORITHM);\n            md.update(presentity.getBytes());\n            md.update(eventPackage.getBytes());\n            md.update(date.getBytes());\n            byte[] digest = md.digest();\n            return toHexString(digest);\n        } catch (NoSuchAlgorithmException e) {\n            return null;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10836108",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void main(String[] args) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void main(String[] args) {\n        LogFrame.getInstance();\n        for (int i = 0; i < args.length; i++) {\n            String arg = args[i];\n            if (arg.trim().startsWith(DEBUG_PARAMETER_NAME + \"=\")) {\n                properties.put(DEBUG_PARAMETER_NAME, arg.trim().substring(DEBUG_PARAMETER_NAME.length() + 1).trim());\n                if (properties.getProperty(DEBUG_PARAMETER_NAME).toLowerCase().equals(DEBUG_TRUE)) {\n                    DEBUG = true;\n                }\n            } else if (arg.trim().startsWith(AUTOCONNECT_PARAMETER_NAME + \"=\")) {\n                properties.put(AUTOCONNECT_PARAMETER_NAME, arg.trim().substring(AUTOCONNECT_PARAMETER_NAME.length() + 1).trim());\n            } else if (arg.trim().startsWith(SITE_CONFIG_URL_PARAMETER_NAME + \"=\")) {\n                properties.put(SITE_CONFIG_URL_PARAMETER_NAME, arg.trim().substring(SITE_CONFIG_URL_PARAMETER_NAME.length() + 1).trim());\n            } else if (arg.trim().startsWith(LOAD_PLUGINS_PARAMETER_NAME + \"=\")) {\n                properties.put(LOAD_PLUGINS_PARAMETER_NAME, arg.trim().substring(LOAD_PLUGINS_PARAMETER_NAME.length() + 1).trim());\n            } else if (arg.trim().startsWith(DOCSERVICE_URL_PARAMETER_NAME + \"=\")) {\n                properties.put(DOCSERVICE_URL_PARAMETER_NAME, arg.trim().substring(DOCSERVICE_URL_PARAMETER_NAME.length() + 1).trim());\n            } else if (arg.trim().startsWith(CORPUS_ID_PARAMETER_NAME + \"=\")) {\n                properties.put(CORPUS_ID_PARAMETER_NAME, arg.trim().substring(CORPUS_ID_PARAMETER_NAME.length() + 1).trim());\n            } else {\n                System.out.println(\"WARNING! Unknown or undefined parameter: '\" + arg.trim() + \"'\");\n            }\n        }\n        System.out.println(\"Annic GUI startup parameters:\");\n        System.out.println(\"------------------------------\");\n        for (Object propName : properties.keySet()) {\n            System.out.println(propName.toString() + \"=\" + properties.getProperty((String) propName));\n        }\n        System.out.println(\"------------------------------\");\n        if (properties.getProperty(SITE_CONFIG_URL_PARAMETER_NAME) == null || properties.getProperty(SITE_CONFIG_URL_PARAMETER_NAME).length() == 0) {\n            String err = \"Mandatory parameter '\" + SITE_CONFIG_URL_PARAMETER_NAME + \"' is missing.\\n\\nApplication will exit.\";\n            System.out.println(err);\n            JOptionPane.showMessageDialog(new JFrame(), err, \"Error!\", JOptionPane.ERROR_MESSAGE);\n            System.exit(-1);\n        }\n        try {\n            String context = System.getProperty(CONTEXT);\n            if (context == null || \"\".equals(context)) {\n                context = DEFAULT_CONTEXT;\n            }\n            String s = System.getProperty(GateConstants.GATE_HOME_PROPERTY_NAME);\n            if (s == null || s.length() == 0) {\n                File f = File.createTempFile(\"foo\", \"\");\n                String gateHome = f.getParent().toString() + context;\n                f.delete();\n                System.setProperty(GateConstants.GATE_HOME_PROPERTY_NAME, gateHome);\n                f = new File(System.getProperty(GateConstants.GATE_HOME_PROPERTY_NAME));\n                if (!f.exists()) {\n                    f.mkdirs();\n                }\n            }\n            s = System.getProperty(GateConstants.PLUGINS_HOME_PROPERTY_NAME);\n            if (s == null || s.length() == 0) {\n                System.setProperty(GateConstants.PLUGINS_HOME_PROPERTY_NAME, System.getProperty(GateConstants.GATE_HOME_PROPERTY_NAME) + \"/plugins\");\n                File f = new File(System.getProperty(GateConstants.PLUGINS_HOME_PROPERTY_NAME));\n                if (!f.exists()) {\n                    f.mkdirs();\n                }\n            }\n            s = System.getProperty(GateConstants.GATE_SITE_CONFIG_PROPERTY_NAME);\n            if (s == null || s.length() == 0) {\n                System.setProperty(GateConstants.GATE_SITE_CONFIG_PROPERTY_NAME, System.getProperty(GateConstants.GATE_HOME_PROPERTY_NAME) + \"/gate.xml\");\n            }\n            if (properties.getProperty(SITE_CONFIG_URL_PARAMETER_NAME) != null && properties.getProperty(SITE_CONFIG_URL_PARAMETER_NAME).length() > 0) {\n                File f = new File(System.getProperty(GateConstants.GATE_SITE_CONFIG_PROPERTY_NAME));\n                if (f.exists()) {\n                    f.delete();\n                }\n                f.getParentFile().mkdirs();\n                f.createNewFile();\n                URL url = new URL(properties.getProperty(SITE_CONFIG_URL_PARAMETER_NAME));\n                InputStream is = url.openStream();\n                FileOutputStream fos = new FileOutputStream(f);\n                int i = is.read();\n                while (i != -1) {\n                    fos.write(i);\n                    i = is.read();\n                }\n                fos.close();\n                is.close();\n            }\n            try {\n                Gate.init();\n                gate.Main.applyUserPreferences();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n            s = BASE_PLUGIN_NAME + \",\" + properties.getProperty(LOAD_PLUGINS_PARAMETER_NAME);\n            System.out.println(\"Loading plugins: \" + s);\n            loadPlugins(s, true);\n        } catch (Throwable e) {\n            e.printStackTrace();\n        }\n        MainFrame.getInstance().setVisible(true);\n        MainFrame.getInstance().pack();\n        if (properties.getProperty(AUTOCONNECT_PARAMETER_NAME, \"\").toLowerCase().equals(AUTOCONNECT_TRUE)) {\n            if (properties.getProperty(CORPUS_ID_PARAMETER_NAME) == null || properties.getProperty(CORPUS_ID_PARAMETER_NAME).length() == 0) {\n                String err = \"Can't autoconnect. A parameter '\" + CORPUS_ID_PARAMETER_NAME + \"' is missing.\";\n                System.out.println(err);\n                JOptionPane.showMessageDialog(MainFrame.getInstance(), err, \"Error!\", JOptionPane.ERROR_MESSAGE);\n                ActionShowAnnicConnectDialog.getInstance().actionPerformed(null);\n            } else {\n                ActionConnectToAnnicGUI.getInstance().actionPerformed(null);\n            }\n        } else {\n            ActionShowAnnicConnectDialog.getInstance().actionPerformed(null);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10839252",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String getWebContent(String remoteUrl) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String getWebContent(String remoteUrl) {\n        StringBuffer sb = new StringBuffer();\n        try {\n            java.net.URL url = new java.net.URL(remoteUrl);\n            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n            String line;\n            while ((line = in.readLine()) != null) {\n                sb.append(line);\n            }\n            in.close();\n        } catch (Exception e) {\n            logger.error(\"\u83b7\u53d6\u8fdc\u7a0b\u7f51\u5740\u5185\u5bb9\u5931\u8d25 - \" + remoteUrl, e);\n        }\n        return sb.toString();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10839253",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String getWebContent(String remoteUrl, String encoding) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String getWebContent(String remoteUrl, String encoding) {\n        StringBuffer sb = new StringBuffer();\n        try {\n            java.net.URL url = new java.net.URL(remoteUrl);\n            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream(), encoding));\n            String line;\n            while ((line = in.readLine()) != null) {\n                sb.append(line);\n            }\n            in.close();\n        } catch (Exception e) {\n            logger.error(\"\u83b7\u53d6\u8fdc\u7a0b\u7f51\u5740\u5185\u5bb9\u5931\u8d25 - \" + remoteUrl, e);\n        }\n        return sb.toString();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10840966",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void copy(String sourcePath, String targetPath) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void copy(String sourcePath, String targetPath) throws IOException {\n        File sourceFile = new File(sourcePath);\n        File targetFile = new File(targetPath);\n        FileInputStream fileInputStream = null;\n        FileOutputStream fileOutputStream = null;\n        try {\n            fileInputStream = new FileInputStream(sourceFile);\n            fileOutputStream = new FileOutputStream(targetFile);\n            byte[] buffer = new byte[4096];\n            int bytesRead;\n            while ((bytesRead = fileInputStream.read(buffer)) != -1) fileOutputStream.write(buffer, 0, bytesRead);\n        } finally {\n            if (fileInputStream != null) try {\n                fileInputStream.close();\n            } catch (IOException exception) {\n                JOptionPane.showMessageDialog(null, AcideLanguageManager.getInstance().getLabels().getString(\"s265\") + sourcePath, AcideLanguageManager.getInstance().getLabels().getString(\"s266\"), JOptionPane.ERROR_MESSAGE);\n                AcideLog.getLog().error(exception.getMessage());\n            }\n            if (fileOutputStream != null) try {\n                fileOutputStream.close();\n            } catch (IOException exception) {\n                JOptionPane.showMessageDialog(null, AcideLanguageManager.getInstance().getLabels().getString(\"s267\") + targetPath, AcideLanguageManager.getInstance().getLabels().getString(\"268\"), JOptionPane.ERROR_MESSAGE);\n                AcideLog.getLog().error(exception.getMessage());\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10846725",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private DataFileType[] getDataFiles(Collection<ContentToSend> contentsToSend) {\n            DataFileType[] files = new DataFileType[contentsToSend.size()];\n            int fileIndex = 0;\n            for (ContentToSend contentToSend : contentsToSend) {\n                DataFileType dataFile = DataFileType.Factory.newInstance();\n                dataFile.setFilename(contentToSend.getFileName());\n                dataFile.setId(\"D\" + fileIndex);\n                dataFile.setMimeType(contentToSend.getMimeType());\n                dataFile.setContentType(DataFileType.ContentType.EMBEDDED_BASE_64);\n                final StringWriter stringWriter = new StringWriter();\n                final OutputStream encodeStream = Base64.newEncoder(stringWriter, 0, null);\n                final InputStream is = contentToSend.getInputStream();\n                try {\n                    long sizeCopied = IOUtils.copyLarge(is, encodeStream);\n                    dataFile.setSize(BigDecimal.valueOf(sizeCopied));\n                } catch (IOException e) {\n                    throw new RuntimeException(\"Failed to get input to the file to be sent\", e);\n                } finally {\n                    IOUtils.closeQuietly(encodeStream);\n                    IOUtils.closeQuietly(is);\n                }\n                dataFile.setStringValue(stringWriter.toString());\n                files[fileIndex++] = dataFile;\n            }\n            return files;\n        }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10846738",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void run() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static <OS extends OutputStream> OS getUnzipAndDecodeOutputStream(InputStream inputStream, final OS outputStream) {\n        final PipedOutputStream pipedOutputStream = new PipedOutputStream();\n        final List<Throwable> ungzipThreadThrowableList = new LinkedList<Throwable>();\n        Writer decoderWriter = null;\n        Thread ungzipThread = null;\n        try {\n            final PipedInputStream pipedInputStream = new PipedInputStream(pipedOutputStream);\n            ungzipThread = new Thread(new Runnable() {\n\n                public void run() {\n                    GZIPInputStream gzipInputStream = null;\n                    try {\n                        gzipInputStream = new GZIPInputStream(pipedInputStream);\n                        IOUtils.copy(gzipInputStream, outputStream);\n                    } catch (Throwable t) {\n                        ungzipThreadThrowableList.add(t);\n                    } finally {\n                        IOUtils.closeQuietly(gzipInputStream);\n                        IOUtils.closeQuietly(pipedInputStream);\n                    }\n                }\n            });\n            decoderWriter = Base64.newDecoder(pipedOutputStream);\n            ungzipThread.start();\n            IOUtils.copy(inputStream, decoderWriter, DVK_MESSAGE_CHARSET);\n            decoderWriter.flush();\n            pipedOutputStream.flush();\n        } catch (IOException e) {\n            throw new RuntimeException(\"failed to unzip and decode input\", e);\n        } finally {\n            IOUtils.closeQuietly(decoderWriter);\n            IOUtils.closeQuietly(pipedOutputStream);\n            if (ungzipThread != null) {\n                try {\n                    ungzipThread.join();\n                } catch (InterruptedException ie) {\n                    throw new RuntimeException(\"thread interrupted while for ungzip thread to finish\", ie);\n                }\n            }\n        }\n        if (!ungzipThreadThrowableList.isEmpty()) {\n            throw new RuntimeException(\"ungzip failed\", ungzipThreadThrowableList.get(0));\n        }\n        return outputStream;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10846739",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void run() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void run() {\n                    GZIPInputStream gzipInputStream = null;\n                    try {\n                        gzipInputStream = new GZIPInputStream(pipedInputStream);\n                        IOUtils.copy(gzipInputStream, outputStream);\n                    } catch (Throwable t) {\n                        ungzipThreadThrowableList.add(t);\n                    } finally {\n                        IOUtils.closeQuietly(gzipInputStream);\n                        IOUtils.closeQuietly(pipedInputStream);\n                    }\n                }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10848568",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static void main(String mp3Path) throws IOException {\n        String convPath = \"http://android.adinterest.biz/wav2mp3.php?k=\";\n        String uri = convPath + mp3Path;\n        URL rssurl = new URL(uri);\n        InputStream is = rssurl.openStream();\n        BufferedReader br = new BufferedReader(new InputStreamReader(is, \"UTF-8\"));\n        String buf = \"\";\n        while ((buf = br.readLine()) != null) {\n        }\n        is.close();\n        br.close();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_00010851",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static void readAndRewrite(File inFile, File outFile) throws IOException {\n        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n        Dataset ds = DcmObjectFactory.getInstance().newDataset();\n        dcmParser.setDcmHandler(ds.getDcmHandler());\n        dcmParser.parseDcmFile(null, Tags.PixelData);\n        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        System.out.println(\"reading \" + inFile + \"...\");\n        pdReader.readPixelData(false);\n        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n        ds.writeDataset(out, dcmEncParam);\n        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n        System.out.println(\"writing \" + outFile + \"...\");\n        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        pdWriter.writePixelData();\n        out.flush();\n        out.close();\n        System.out.println(\"done!\");\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10852631",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void getRandomGUID(boolean secure) {\n        MessageDigest md5 = null;\n        final StringBuilder sbValueBeforeMD5 = new StringBuilder();\n        try {\n            md5 = MessageDigest.getInstance(\"MD5\");\n        } catch (NoSuchAlgorithmException e) {\n            logger.fatal(\"\", e);\n            return;\n        }\n        try {\n            final long time = System.currentTimeMillis();\n            long rand = 0;\n            if (secure) {\n                rand = mySecureRand.nextLong();\n            } else {\n                rand = myRand.nextLong();\n            }\n            sbValueBeforeMD5.append(sId);\n            sbValueBeforeMD5.append(\":\");\n            sbValueBeforeMD5.append(Long.toString(time));\n            sbValueBeforeMD5.append(\":\");\n            sbValueBeforeMD5.append(Long.toString(rand));\n            valueBeforeMD5 = sbValueBeforeMD5.toString();\n            md5.update(valueBeforeMD5.getBytes());\n            final byte[] array = md5.digest();\n            final StringBuilder sb = new StringBuilder();\n            for (int j = 0; j < array.length; ++j) {\n                final int b = array[j] & 0xFF;\n                if (b < 0x10) {\n                    sb.append('0');\n                }\n                sb.append(Integer.toHexString(b));\n            }\n            valueAfterMD5 = sb.toString();\n        } catch (Exception e) {\n            logger.fatal(\"\", e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10871260",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static final String getUniqueId() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static final String getUniqueId() {\n        String digest = \"\";\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            String timeVal = \"\" + (System.currentTimeMillis() + 1);\n            String localHost = \"\";\n            try {\n                localHost = InetAddress.getLocalHost().toString();\n            } catch (UnknownHostException e) {\n                throw new RuntimeException(\"Error trying to get localhost\" + e.getMessage());\n            }\n            String randVal = \"\" + new Random().nextInt();\n            String val = timeVal + localHost + randVal;\n            md.reset();\n            md.update(val.getBytes());\n            digest = toHexString(md.digest());\n        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(\"NoSuchAlgorithmException : \" + e.getMessage());\n        }\n        return digest;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10878062",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copy(File source, File dest) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copy(File source, File dest) throws Exception {\n        FileInputStream in = new FileInputStream(source);\n        FileOutputStream out = new FileOutputStream(dest);\n        int c;\n        while ((c = in.read()) != -1) out.write(c);\n        in.close();\n        out.close();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10878119",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void notifyIterationEnds(final IterationEndsEvent event) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void notifyIterationEnds(final IterationEndsEvent event) {\n        log.info(\"moving files...\");\n        File source = new File(\"deqsim.log\");\n        if (source.exists()) {\n            File destination = new File(Controler.getIterationFilename(\"deqsim.log\"));\n            if (!IOUtils.renameFile(source, destination)) {\n                log.info(\"WARNING: Could not move deqsim.log to its iteration directory.\");\n            }\n        }\n        int parallelCnt = 0;\n        source = new File(\"deqsim.log.\" + parallelCnt);\n        while (source.exists()) {\n            File destination = new File(Controler.getIterationFilename(\"deqsim.log.\" + parallelCnt));\n            if (!IOUtils.renameFile(source, destination)) {\n                log.info(\"WARNING: Could not move deqsim.log.\" + parallelCnt + \" to its iteration directory.\");\n            }\n            parallelCnt++;\n            source = new File(\"deqsim.log.\" + parallelCnt);\n        }\n        source = new File(\"loads_out.txt\");\n        if (source.exists()) {\n            File destination = new File(Controler.getIterationFilename(\"loads_out.txt\"));\n            try {\n                IOUtils.copyFile(source, destination);\n            } catch (FileNotFoundException e) {\n                log.info(\"WARNING: Could not copy loads_out.txt to its iteration directory.\");\n            } catch (IOException e) {\n                log.info(\"WARNING: Could not copy loads_out.txt to its iteration directory.\");\n            }\n            destination = new File(\"loads_in.txt\");\n            if (!IOUtils.renameFile(source, destination)) {\n                log.info(\"WARNING: Could not move loads_out.txt to loads_in.txt.\");\n            }\n        }\n        source = new File(\"linkprocs.txt\");\n        if (source.exists()) {\n            File destination = new File(Controler.getIterationFilename(\"linkprocs.txt\"));\n            if (!IOUtils.renameFile(source, destination)) {\n                log.info(\"WARNING: Could not move linkprocs.txt to its iteration directory.\");\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10880872",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic final boolean delete() throws RecordException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n    public final boolean delete() throws RecordException {\n        if (frozen) {\n            throw new RecordException(\"The object is frozen.\");\n        }\n        Connection conn = ConnectionManager.getConnection();\n        LoggableStatement pStat = null;\n        Class<? extends Record> actualClass = this.getClass();\n        StatementBuilder builder = null;\n        try {\n            builder = new StatementBuilder(\"delete from \" + TableNameResolver.getTableName(actualClass) + \" where id = :id\");\n            Field f = FieldHandler.findField(this.getClass(), \"id\");\n            builder.set(\"id\", FieldHandler.getValue(f, this));\n            pStat = builder.getPreparedStatement(conn);\n            log.log(pStat.getQueryString());\n            int i = pStat.executeUpdate();\n            return i == 1;\n        } catch (Exception e) {\n            try {\n                conn.rollback();\n            } catch (SQLException e1) {\n                throw new RecordException(\"Error executing rollback\");\n            }\n            throw new RecordException(e);\n        } finally {\n            try {\n                if (pStat != null) {\n                    pStat.close();\n                }\n                conn.commit();\n                conn.close();\n            } catch (SQLException e) {\n                throw new RecordException(\"Error closing connection\");\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10880875",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic final boolean save() throws RecordException, RecordValidationException, RecordValidationSyntax {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n    public final boolean save() throws RecordException, RecordValidationException, RecordValidationSyntax {\n        if (frozen) {\n            throw new RecordException(\"The object is frozen.\");\n        }\n        boolean toReturn = false;\n        Class<? extends Record> actualClass = this.getClass();\n        HashMap<String, Integer> columns = getColumns(TableNameResolver.getTableName(actualClass));\n        Connection conn = ConnectionManager.getConnection();\n        LoggableStatement pStat = null;\n        try {\n            if (exists()) {\n                doValidations(true);\n                StatementBuilder builder = new StatementBuilder(\"update \" + TableNameResolver.getTableName(actualClass) + \" set\");\n                String updates = \"\";\n                for (String key : columns.keySet()) {\n                    if (!key.equals(\"id\")) {\n                        Field f = null;\n                        try {\n                            f = FieldHandler.findField(actualClass, key);\n                        } catch (FieldOrMethodNotFoundException e) {\n                            throw new RecordException(\"Database column name >\" + key + \"< not found in class \" + actualClass.getCanonicalName());\n                        }\n                        updates += key + \" = :\" + key + \", \";\n                        builder.set(key, FieldHandler.getValue(f, this));\n                    }\n                }\n                builder.append(updates.substring(0, updates.length() - 2));\n                builder.append(\"where id = :id\");\n                builder.set(\":id\", FieldHandler.getValue(FieldHandler.findField(actualClass, \"id\"), this));\n                pStat = builder.getPreparedStatement(conn);\n                log.log(pStat.getQueryString());\n                int i = pStat.executeUpdate();\n                toReturn = i == 1;\n            } else {\n                doValidations(false);\n                StatementBuilder builder = new StatementBuilder(\"insert into \" + TableNameResolver.getTableName(actualClass) + \" \");\n                String names = \"\";\n                String values = \"\";\n                for (String key : columns.keySet()) {\n                    Field f = null;\n                    try {\n                        f = FieldHandler.findField(actualClass, key);\n                    } catch (FieldOrMethodNotFoundException e) {\n                        throw new RecordException(\"Database column name >\" + key + \"< not found in class \" + actualClass.getCanonicalName());\n                    }\n                    if (key.equals(\"id\") && (Integer) FieldHandler.getValue(f, this) == 0) {\n                        continue;\n                    }\n                    names += key + \", \";\n                    values += \":\" + key + \", \";\n                    builder.set(key, f.get(this));\n                }\n                names = names.substring(0, names.length() - 2);\n                values = values.substring(0, values.length() - 2);\n                builder.append(\"(\" + names + \")\");\n                builder.append(\"values\");\n                builder.append(\"(\" + values + \")\");\n                pStat = builder.getPreparedStatement(conn);\n                log.log(pStat.getQueryString());\n                int i = pStat.executeUpdate();\n                toReturn = i == 1;\n            }\n            if (childList != null) {\n                if (childObjects == null) {\n                    childObjects = new HashMap<Class<? extends Record>, Record>();\n                }\n                for (Class<? extends Record> c : childList.keySet()) {\n                    if (childObjects.get(c) != null) {\n                        childObjects.get(c).save();\n                    }\n                }\n            }\n            if (childrenList != null) {\n                if (childrenObjects == null) {\n                    childrenObjects = new HashMap<Class<? extends Record>, List<? extends Record>>();\n                }\n                for (Class<? extends Record> c : childrenList.keySet()) {\n                    if (childrenObjects.get(c) != null) {\n                        for (Record r : childrenObjects.get(c)) {\n                            r.save();\n                        }\n                    }\n                }\n            }\n            if (relatedList != null) {\n                if (childrenObjects == null) {\n                    childrenObjects = new HashMap<Class<? extends Record>, List<? extends Record>>();\n                }\n                for (Class<? extends Record> c : relatedList.keySet()) {\n                    if (childrenObjects.get(c) != null) {\n                        for (Record r : childrenObjects.get(c)) {\n                            r.save();\n                        }\n                    }\n                }\n            }\n            return toReturn;\n        } catch (Exception e) {\n            if (e instanceof RecordValidationException) {\n                throw (RecordValidationException) e;\n            }\n            if (e instanceof RecordValidationSyntax) {\n                throw (RecordValidationSyntax) e;\n            }\n            try {\n                conn.rollback();\n            } catch (SQLException e1) {\n                throw new RecordException(\"Error executing rollback\");\n            }\n            throw new RecordException(e);\n        } finally {\n            try {\n                if (pStat != null) {\n                    pStat.close();\n                }\n                conn.commit();\n                conn.close();\n            } catch (SQLException e) {\n                throw new RecordException(\"Error closing connection\");\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_00108845",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void doVersionCheck(View view) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void doVersionCheck(View view) {\n        view.showWaitCursor();\n        try {\n            URL url = new URL(jEdit.getProperty(\"version-check.url\"));\n            InputStream in = url.openStream();\n            BufferedReader bin = new BufferedReader(new InputStreamReader(in));\n            String line;\n            String version = null;\n            String build = null;\n            while ((line = bin.readLine()) != null) {\n                if (line.startsWith(\".version\")) version = line.substring(8).trim(); else if (line.startsWith(\".build\")) build = line.substring(6).trim();\n            }\n            bin.close();\n            if (version != null && build != null) {\n                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {\n                    GUIUtilities.message(view, \"version-check\" + \".up-to-date\", new String[0]);\n                }\n            }\n        } catch (IOException e) {\n            String[] args = { jEdit.getProperty(\"version-check.url\"), e.toString() };\n            GUIUtilities.error(view, \"read-error\", args);\n        }\n        view.hideWaitCursor();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10891166",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static Image getPluginImage(Object plugin, String name) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static Image getPluginImage(Object plugin, String name) {\n        try {\n            try {\n                URL url = getPluginImageURL(plugin, name);\n                if (m_URLImageMap.containsKey(url)) return m_URLImageMap.get(url);\n                InputStream is = url.openStream();\n                Image image;\n                try {\n                    image = getImage(is);\n                    m_URLImageMap.put(url, image);\n                } finally {\n                    is.close();\n                }\n                return image;\n            } catch (Throwable e) {\n            }\n        } catch (Throwable e) {\n        }\n        return null;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01089238",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private Document saveFile(Document document, File file) throws Exception {\n        SimpleDateFormat sdf = new SimpleDateFormat(Constants.DATEFORMAT_YYYYMMDD);\n        List<Preference> preferences = prefService.findAll();\n        if (preferences != null && !preferences.isEmpty()) {\n            Preference preference = preferences.get(0);\n            String repo = preference.getRepository();\n            StringBuffer sbRepo = new StringBuffer(repo);\n            sbRepo.append(File.separator);\n            StringBuffer sbFolder = new StringBuffer(document.getLocation());\n            File folder = new File(sbRepo.append(sbFolder).toString());\n            log.info(\"Check in file ID [\" + document.getId() + \"] to \" + folder.getAbsolutePath());\n            if (!folder.exists()) {\n                folder.mkdirs();\n            }\n            FileChannel fcSource = null, fcDest = null, fcVersionDest = null;\n            try {\n                StringBuffer sbFile = new StringBuffer(folder.getAbsolutePath()).append(File.separator).append(document.getId()).append(\".\").append(document.getExt());\n                StringBuffer sbVersionFile = new StringBuffer(folder.getAbsolutePath()).append(File.separator).append(document.getId()).append(\"_\").append(document.getVersion().toString()).append(\".\").append(document.getExt());\n                fcSource = new FileInputStream(file).getChannel();\n                fcDest = new FileOutputStream(sbFile.toString()).getChannel();\n                fcVersionDest = new FileOutputStream(sbVersionFile.toString()).getChannel();\n                fcDest.transferFrom(fcSource, 0, fcSource.size());\n                fcSource = new FileInputStream(file).getChannel();\n                fcVersionDest.transferFrom(fcSource, 0, fcSource.size());\n                document.setLocation(sbFolder.toString());\n                documentService.save(document);\n            } catch (FileNotFoundException notFoundEx) {\n                log.error(\"saveFile file not found: \" + document.getName(), notFoundEx);\n            } catch (IOException ioEx) {\n                log.error(\"saveFile IOException: \" + document.getName(), ioEx);\n            } finally {\n                try {\n                    if (fcSource != null) {\n                        fcSource.close();\n                    }\n                    if (fcDest != null) {\n                        fcDest.close();\n                    }\n                    if (fcVersionDest != null) {\n                        fcVersionDest.close();\n                    }\n                } catch (Exception e) {\n                    log.error(e.getMessage(), e);\n                }\n            }\n        }\n        return document;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10893111",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copyFile(File in, File out) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copyFile(File in, File out) throws IOException {\n        try {\n            FileReader inf = new FileReader(in);\n            OutputStreamWriter outf = new OutputStreamWriter(new FileOutputStream(out), \"UTF-8\");\n            int c;\n            while ((c = inf.read()) != -1) outf.write(c);\n            inf.close();\n            outf.close();\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10895680",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private DefaultMutableTreeNode parseTree() {\n        try {\n            DefaultMutableTreeNode root;\n            URL url = RebusHelp.class.getResource(\"/org/olga/rebus/gui/help/html/content.xml\");\n            InputStream is = url.openStream();\n            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n            factory.setIgnoringComments(true);\n            factory.setValidating(false);\n            DocumentBuilder parser = factory.newDocumentBuilder();\n            Document document = parser.parse(is);\n            NodeList elements = document.getElementsByTagName(\"help\");\n            Element element = (Element) elements.item(0);\n            root = createTreeContent(element);\n            is.close();\n            return root;\n        } catch (IOException e) {\n            System.out.println(e.getMessage());\n            return null;\n        } catch (ParserConfigurationException e1) {\n            System.out.println(e1.getMessage());\n            return null;\n        } catch (org.xml.sax.SAXException e2) {\n            System.out.println(e2.getMessage());\n            return null;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10896362",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private HttpResponse executePutPost(HttpEntityEnclosingRequestBase request, String content) {\n        try {\n            if (LOG.isTraceEnabled()) {\n                LOG.trace(\"Content: {}\", content);\n            }\n            StringEntity e = new StringEntity(content, \"UTF-8\");\n            e.setContentType(\"application/json\");\n            request.setEntity(e);\n            return executeRequest(request);\n        } catch (Exception e) {\n            throw Exceptions.propagate(e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10899860",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void copy(File in, File out) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void copy(File in, File out) throws Exception {\n        FileChannel src = new FileInputStream(in).getChannel();\n        FileChannel dest = new FileOutputStream(out).getChannel();\n        src.transferTo(0, src.size(), dest);\n        src.close();\n        dest.close();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10903521",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private synchronized void awaitResponse() throws BOSHException {\n        HttpEntity entity = null;\n        try {\n            HttpResponse httpResp = client.execute(post, context);\n            entity = httpResp.getEntity();\n            byte[] data = EntityUtils.toByteArray(entity);\n            String encoding = entity.getContentEncoding() != null ? entity.getContentEncoding().getValue() : null;\n            if (ZLIBCodec.getID().equalsIgnoreCase(encoding)) {\n                data = ZLIBCodec.decode(data);\n            } else if (GZIPCodec.getID().equalsIgnoreCase(encoding)) {\n                data = GZIPCodec.decode(data);\n            }\n            body = StaticBody.fromString(new String(data, CHARSET));\n            statusCode = httpResp.getStatusLine().getStatusCode();\n            sent = true;\n        } catch (IOException iox) {\n            abort();\n            toThrow = new BOSHException(\"Could not obtain response\", iox);\n            throw (toThrow);\n        } catch (RuntimeException ex) {\n            abort();\n            throw (ex);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10905999",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "protected int insertRecord(PutMetadataRequest request, PutMetadataInfo info) throws ImsServiceException, SQLException {\n        Connection con = null;\n        boolean autoCommit = true;\n        PreparedStatement st = null;\n        ResultSet rs = null;\n        int nRows = 0;\n        String sXml = info.getXml();\n        String sUuid = info.getUuid();\n        String sName = info.getName();\n        String sThumbnailBinary = info.getThumbnailBinary();\n        String sTable = this.getResourceTableName();\n        String sDataTable = this.getResourceDataTableName();\n        long id = doesRecordExist(sTable, sUuid);\n        try {\n            ManagedConnection mc = returnConnection();\n            con = mc.getJdbcConnection();\n            autoCommit = con.getAutoCommit();\n            con.setAutoCommit(false);\n            if (id < 0) {\n                StringBuffer sql = new StringBuffer();\n                sql.append(\"INSERT INTO \").append(sTable);\n                sql.append(\" (\");\n                sql.append(\"DOCUUID,\");\n                sql.append(\"TITLE,\");\n                sql.append(\"OWNER\");\n                sql.append(\")\");\n                sql.append(\" VALUES(?,?,?)\");\n                logExpression(sql.toString());\n                st = con.prepareStatement(sql.toString());\n                int n = 1;\n                st.setString(n++, sUuid);\n                st.setString(n++, sName);\n                st.setInt(n++, this.publisher.getLocalID());\n                nRows = st.executeUpdate();\n                closeStatement(st);\n                if (nRows > 0) {\n                    if (getIsDbCaseSensitive(this.getRequestContext())) {\n                        st = con.prepareStatement(\"SELECT id FROM \" + sTable + \" WHERE UPPER(docuuid)=?\");\n                    } else {\n                        st = con.prepareStatement(\"SELECT id FROM \" + sTable + \" WHERE docuuid=?\");\n                    }\n                    st.setString(1, sUuid.toUpperCase());\n                    rs = st.executeQuery();\n                    rs.next();\n                    id = rs.getLong(1);\n                    closeStatement(st);\n                    request.setActionStatus(ImsRequest.ACTION_STATUS_OK);\n                    sql = new StringBuffer();\n                    sql.append(\"INSERT INTO \").append(sDataTable);\n                    sql.append(\" (DOCUUID,ID,XML)\");\n                    sql.append(\" VALUES(?,?,?)\");\n                    logExpression(sql.toString());\n                    st = con.prepareStatement(sql.toString());\n                    st.setString(1, sUuid);\n                    st.setLong(2, id);\n                    st.setString(3, sXml);\n                    st.executeUpdate();\n                }\n            } else {\n                this.authorize(request, sUuid);\n                StringBuffer sql = new StringBuffer();\n                sql.append(\"UPDATE \").append(sTable);\n                sql.append(\" SET \");\n                if (!request.getLockTitle()) {\n                    sql.append(\"TITLE=?, \");\n                }\n                sql.append(\"OWNER=?, \");\n                sql.append(\"UPDATEDATE=?\");\n                sql.append(\" WHERE DOCUUID=?\");\n                logExpression(sql.toString());\n                st = con.prepareStatement(sql.toString());\n                int n = 1;\n                if (!request.getLockTitle()) {\n                    st.setString(n++, sName);\n                }\n                st.setInt(n++, this.publisher.getLocalID());\n                st.setTimestamp(n++, new Timestamp(System.currentTimeMillis()));\n                st.setString(n++, sUuid);\n                nRows = st.executeUpdate();\n                if (nRows > 0) {\n                    request.setActionStatus(ImsRequest.ACTION_STATUS_REPLACED);\n                }\n                closeStatement(st);\n                sql = new StringBuffer();\n                if (doesRecordExist(sDataTable, sUuid) >= 0) {\n                    sql.append(\"UPDATE \").append(sDataTable);\n                    sql.append(\" SET DOCUUID=?, XML=?, THUMBNAIL=?\");\n                    sql.append(\" WHERE ID=?\");\n                } else {\n                    sql.append(\"INSERT INTO \").append(sDataTable);\n                    sql.append(\" (DOCUUID, XML,THUMBNAIL,ID)\");\n                    sql.append(\" VALUES(?,?,?,?)\");\n                }\n                logExpression(sql.toString());\n                st = con.prepareStatement(sql.toString());\n                st.setString(1, sUuid);\n                st.setString(2, sXml);\n                st.setBytes(3, null);\n                st.setLong(4, id);\n                st.executeUpdate();\n            }\n            con.commit();\n        } catch (ImsServiceException ex) {\n            if (con != null) {\n                con.rollback();\n            }\n            throw ex;\n        } catch (SQLException ex) {\n            if (con != null) {\n                con.rollback();\n            }\n            throw ex;\n        } finally {\n            closeResultSet(rs);\n            closeStatement(st);\n            if (con != null) {\n                con.setAutoCommit(autoCommit);\n            }\n        }\n        if ((sThumbnailBinary != null) && (sThumbnailBinary.length() > 0)) {\n            this.updateThumbnail(sThumbnailBinary, sUuid);\n        }\n        return nRows;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10909692",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void deployDir(File srcDir, String destDir) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void deployDir(File srcDir, String destDir) {\n        File[] dirFiles = srcDir.listFiles();\n        for (int k = 0; dirFiles != null && k < dirFiles.length; k++) {\n            if (!dirFiles[k].getName().startsWith(\".\")) {\n                if (dirFiles[k].isFile()) {\n                    File deployFile = new File(destDir + File.separator + dirFiles[k].getName());\n                    if (dirFiles[k].lastModified() != deployFile.lastModified() || dirFiles[k].length() != deployFile.length()) {\n                        IOUtils.copy(dirFiles[k], deployFile);\n                    }\n                } else if (dirFiles[k].isDirectory()) {\n                    String newDestDir = destDir + File.separator + dirFiles[k].getName();\n                    deployDir(dirFiles[k], newDestDir);\n                }\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10912333",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void guardarRecordatorio() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void guardarRecordatorio() {\n        try {\n            if (espaciosLlenos()) {\n                guardarCantidad();\n                String dat = \"\";\n                String filenametxt = String.valueOf(\"recordatorio\" + cantidadArchivos + \".txt\");\n                String filenamezip = String.valueOf(\"recordatorio\" + cantidadArchivos + \".zip\");\n                cantidadArchivos++;\n                dat += identificarDato(datoSeleccionado) + \"\\n\";\n                dat += String.valueOf(mesTemporal) + \"\\n\";\n                dat += String.valueOf(anoTemporal) + \"\\n\";\n                dat += horaT.getText() + \"\\n\";\n                dat += lugarT.getText() + \"\\n\";\n                dat += actividadT.getText() + \"\\n\";\n                File archivo = new File(filenametxt);\n                FileWriter fw = new FileWriter(archivo);\n                BufferedWriter bw = new BufferedWriter(fw);\n                PrintWriter salida = new PrintWriter(bw);\n                salida.print(dat);\n                salida.close();\n                BufferedInputStream origin = null;\n                FileOutputStream dest = new FileOutputStream(filenamezip);\n                ZipOutputStream out = new ZipOutputStream(new BufferedOutputStream(dest));\n                byte data[] = new byte[buffer];\n                File f = new File(filenametxt);\n                FileInputStream fi = new FileInputStream(f);\n                origin = new BufferedInputStream(fi, buffer);\n                ZipEntry entry = new ZipEntry(filenametxt);\n                out.putNextEntry(entry);\n                int count;\n                while ((count = origin.read(data, 0, buffer)) != -1) out.write(data, 0, count);\n                out.close();\n                JOptionPane.showMessageDialog(null, \"El recordatorio ha sido guardado con exito\", \"Recordatorio Guardado\", JOptionPane.INFORMATION_MESSAGE);\n                marco.hide();\n                marco.dispose();\n                establecerMarca();\n                table.clearSelection();\n            } else JOptionPane.showMessageDialog(null, \"Debe llenar los espacios de Hora, Lugar y Actividad\", \"Error\", JOptionPane.ERROR_MESSAGE);\n        } catch (Exception e) {\n            JOptionPane.showMessageDialog(null, \"Error en: \" + e.toString(), \"Error\", JOptionPane.ERROR_MESSAGE);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10912335",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void guardarCantidad() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void guardarCantidad() {\n        try {\n            String can = String.valueOf(cantidadArchivos);\n            File archivo = new File(\"cantidadArchivos.txt\");\n            FileWriter fw = new FileWriter(archivo);\n            BufferedWriter bw = new BufferedWriter(fw);\n            PrintWriter salida = new PrintWriter(bw);\n            salida.print(can);\n            salida.close();\n            BufferedInputStream origin = null;\n            FileOutputStream dest = new FileOutputStream(\"cantidadArchivos.zip\");\n            ZipOutputStream out = new ZipOutputStream(new BufferedOutputStream(dest));\n            byte data[] = new byte[buffer];\n            File f = new File(\"cantidadArchivos.txt\");\n            FileInputStream fi = new FileInputStream(f);\n            origin = new BufferedInputStream(fi, buffer);\n            ZipEntry entry = new ZipEntry(\"cantidadArchivos.txt\");\n            out.putNextEntry(entry);\n            int count;\n            while ((count = origin.read(data, 0, buffer)) != -1) out.write(data, 0, count);\n            out.close();\n        } catch (Exception e) {\n            JOptionPane.showMessageDialog(null, \"Error en: \" + e.toString(), \"Error\", JOptionPane.ERROR_MESSAGE);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10912336",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void verRecordatorio() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void verRecordatorio() {\n        try {\n            cantidadArchivos = obtenerCantidad() + 1;\n            boolean existe = false;\n            String filenametxt = \"\";\n            String filenamezip = \"\";\n            String hora = \"\";\n            String lugar = \"\";\n            String actividad = \"\";\n            String linea = \"\";\n            int dia = 0;\n            int mes = 0;\n            int ano = 0;\n            for (int i = 1; i < cantidadArchivos; i++) {\n                filenamezip = \"recordatorio\" + i + \".zip\";\n                filenametxt = \"recordatorio\" + i + \".txt\";\n                BufferedOutputStream dest = null;\n                BufferedInputStream is = null;\n                ZipEntry entry;\n                ZipFile zipfile = new ZipFile(filenamezip);\n                Enumeration e = zipfile.entries();\n                while (e.hasMoreElements()) {\n                    entry = (ZipEntry) e.nextElement();\n                    is = new BufferedInputStream(zipfile.getInputStream(entry));\n                    int count;\n                    byte data[] = new byte[buffer];\n                    FileOutputStream fos = new FileOutputStream(entry.getName());\n                    dest = new BufferedOutputStream(fos, buffer);\n                    while ((count = is.read(data, 0, buffer)) != -1) dest.write(data, 0, count);\n                    dest.flush();\n                    dest.close();\n                    is.close();\n                }\n                DataInputStream input = new DataInputStream(new FileInputStream(filenametxt));\n                dia = Integer.parseInt(input.readLine());\n                mes = Integer.parseInt(input.readLine());\n                ano = Integer.parseInt(input.readLine());\n                if (dia == Integer.parseInt(identificarDato(datoSeleccionado))) {\n                    existe = true;\n                    hora = input.readLine();\n                    lugar = input.readLine();\n                    while ((linea = input.readLine()) != null) actividad += linea + \"\\n\";\n                    verRecordatorioInterfaz(hora, lugar, actividad);\n                    hora = \"\";\n                    lugar = \"\";\n                    actividad = \"\";\n                }\n                input.close();\n            }\n            if (!existe) JOptionPane.showMessageDialog(null, \"No existe un recordatorio guardado\\n\" + \"para el \" + identificarDato(datoSeleccionado) + \" de \" + meses[mesTemporal].toLowerCase() + \" del a\ufffdo \" + anoTemporal, \"No existe\", JOptionPane.INFORMATION_MESSAGE);\n            table.clearSelection();\n        } catch (Exception e) {\n            JOptionPane.showMessageDialog(null, \"Error en: \" + e.toString(), \"Error\", JOptionPane.ERROR_MESSAGE);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10912339",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic int obtenerCantidad() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public int obtenerCantidad() {\n        try {\n            BufferedOutputStream dest = null;\n            BufferedInputStream is = null;\n            ZipEntry entry;\n            ZipFile zipfile = new ZipFile(\"cantidadArchivos.zip\");\n            Enumeration e = zipfile.entries();\n            while (e.hasMoreElements()) {\n                entry = (ZipEntry) e.nextElement();\n                is = new BufferedInputStream(zipfile.getInputStream(entry));\n                int count;\n                byte data[] = new byte[buffer];\n                FileOutputStream fos = new FileOutputStream(entry.getName());\n                dest = new BufferedOutputStream(fos, buffer);\n                while ((count = is.read(data, 0, buffer)) != -1) dest.write(data, 0, count);\n                dest.flush();\n                dest.close();\n                is.close();\n            }\n            DataInputStream input = new DataInputStream(new FileInputStream(\"cantidadArchivos.txt\"));\n            int a = Integer.parseInt(input.readLine());\n            input.close();\n            return (a);\n        } catch (Exception e) {\n            return (0);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10912340",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic boolean chequearMarca(int a, int m, int d) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public boolean chequearMarca(int a, int m, int d) {\n        boolean existe = false;\n        try {\n            cantidadArchivos = obtenerCantidad() + 1;\n            String filenametxt = \"\";\n            String filenamezip = \"\";\n            int dia = 0;\n            int mes = 0;\n            int ano = 0;\n            for (int i = 1; i < cantidadArchivos; i++) {\n                filenamezip = \"recordatorio\" + i + \".zip\";\n                filenametxt = \"recordatorio\" + i + \".txt\";\n                BufferedOutputStream dest = null;\n                BufferedInputStream is = null;\n                ZipEntry entry;\n                ZipFile zipfile = new ZipFile(filenamezip);\n                Enumeration e = zipfile.entries();\n                while (e.hasMoreElements()) {\n                    entry = (ZipEntry) e.nextElement();\n                    is = new BufferedInputStream(zipfile.getInputStream(entry));\n                    int count;\n                    byte data[] = new byte[buffer];\n                    FileOutputStream fos = new FileOutputStream(entry.getName());\n                    dest = new BufferedOutputStream(fos, buffer);\n                    while ((count = is.read(data, 0, buffer)) != -1) dest.write(data, 0, count);\n                    dest.flush();\n                    dest.close();\n                    is.close();\n                }\n                DataInputStream input = new DataInputStream(new FileInputStream(filenametxt));\n                dia = Integer.parseInt(input.readLine());\n                mes = Integer.parseInt(input.readLine());\n                ano = Integer.parseInt(input.readLine());\n                if (ano == a && mes == m && dia == d) existe = true;\n                input.close();\n            }\n        } catch (Exception e) {\n            JOptionPane.showMessageDialog(null, \"Error en: \" + e.toString(), \"Error\", JOptionPane.ERROR_MESSAGE);\n        }\n        return (existe);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10916692",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic GetMyDocuments() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public GetMyDocuments() {\n        String urlString = dms_url + \"/servlet/com.ufnasoft.dms.server.ServerGetMyDocuments\";\n        String rvalue = \"\";\n        String filename = dms_home + FS + \"temp\" + FS + username + \"mydocuments.xml\";\n        try {\n            String urldata = urlString + \"?username=\" + URLEncoder.encode(username, \"UTF-8\") + \"&key=\" + URLEncoder.encode(key, \"UTF-8\") + \"&filename=\" + URLEncoder.encode(username, \"UTF-8\") + \"mydocuments.xml\";\n            ;\n            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n            DocumentBuilder parser = factory.newDocumentBuilder();\n            URL u = new URL(urldata);\n            DataInputStream is = new DataInputStream(u.openStream());\n            FileOutputStream os = new FileOutputStream(filename);\n            int iBufSize = is.available();\n            byte inBuf[] = new byte[20000 * 1024];\n            int iNumRead;\n            while ((iNumRead = is.read(inBuf, 0, iBufSize)) > 0) os.write(inBuf, 0, iNumRead);\n            os.close();\n            is.close();\n            File f = new File(filename);\n            InputStream inputstream = new FileInputStream(f);\n            Document document = parser.parse(inputstream);\n            NodeList nodelist = document.getElementsByTagName(\"document\");\n            int num = nodelist.getLength();\n            myDocsData = new String[num][4];\n            myDocsToolTip = new String[num];\n            myDocumentImageName = new String[num];\n            myDocIds = new int[num];\n            for (int i = 0; i < num; i++) {\n                myDocsData[i][0] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), \"filename\"));\n                myDocsData[i][1] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), \"project\"));\n                myDocsData[i][2] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), \"deadline\"));\n                myDocsData[i][3] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), \"workingfolder\"));\n                myDocsToolTip[i] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), \"title\"));\n                myDocumentImageName[i] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), \"imagename\"));\n                myDocIds[i] = (new Integer(new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), \"documentid\")))).intValue();\n            }\n        } catch (MalformedURLException ex) {\n            System.out.println(ex);\n        } catch (ParserConfigurationException ex) {\n            System.out.println(ex);\n        } catch (NullPointerException ex) {\n        } catch (Exception ex) {\n            System.out.println(ex);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10922718",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static boolean downloadRegPage() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static boolean downloadRegPage() {\n        String filename = \"register.php?csz=\" + checkEmptyString(jDtr) + \"&&mac=\" + MAC + \"&&uname=\" + checkEmptyString(InstallName) + \"&&cname=\" + checkEmptyString(InstallCompany) + \"&&winuname=\" + checkEmptyString(WinName) + \"&&wincname=\" + checkEmptyString(WinCompany) + \"&&age=\" + checkEmptyString(jAge) + \"&&sal=\" + checkEmptyString(jSal) + \"&&sta=\" + checkEmptyString(jSta) + \"&&sex=\" + checkEmptyString(jSex) + \"&&con=\" + checkEmptyString(jCon) + \"&&occ=\" + checkEmptyString(jOcc) + \"&&int=\" + checkEmptyString(jInt) + \"&&ver=\" + checkEmptyString(jVer) + \"&&mor=\" + checkEmptyString(jTyp);\n        URL url1 = null;\n        try {\n            url1 = new URL(url + filename);\n        } catch (MalformedURLException e1) {\n        }\n        int status = 0;\n        try {\n            status = ((HttpURLConnection) url1.openConnection()).getResponseCode();\n        } catch (IOException e1) {\n            System.out.println(e1);\n        }\n        if (status == 200) {\n            return true;\n        } else {\n            return false;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10923940",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void request() {\n        try {\n            connection = (HttpURLConnection) new URL(url).openConnection();\n            if (isCometConnection) {\n                connection.setReadTimeout(0);\n            } else {\n                connection.setReadTimeout(30000);\n            }\n            connection.setInstanceFollowRedirects(false);\n            connection.setDoInput(true);\n            connection.setRequestMethod(method);\n            connection.setRequestProperty(\"User-Agent\", \"Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US; rv:1.9.1.5) Gecko/20091102 Firefox/3.5.5 GTB5\");\n            if (\"post\".equalsIgnoreCase(method)) {\n                connection.setDoOutput(true);\n                connection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n            }\n            if (user != null) {\n                String auth = user + \":\" + (password != null ? password : \"\");\n                String base64Auth = HttpRequest.Base64.byteArrayToBase64(auth.getBytes());\n                connection.setRequestProperty(\"Authorization\", \"Basic \" + base64Auth);\n            }\n            for (Iterator<String> iter = headers.keySet().iterator(); iter.hasNext(); ) {\n                String key = (String) iter.next();\n                connection.setRequestProperty(key, (String) headers.get(key));\n            }\n            connection.setUseCaches(false);\n            if (checkAbort()) return;\n            if (\"post\".equalsIgnoreCase(method)) {\n                DataOutputStream dos = new DataOutputStream(connection.getOutputStream());\n                activeOS = dos;\n                if (content != null) {\n                    dos.writeBytes(content);\n                }\n                if (checkAbort()) return;\n                dos.flush();\n                dos.close();\n                activeOS = null;\n            }\n            if (checkAbort()) return;\n            InputStream is = null;\n            try {\n                is = connection.getInputStream();\n            } catch (IOException e) {\n                if (checkAbort()) return;\n                readyState = 4;\n                if (onreadystatechange != null) {\n                    onreadystatechange.onLoaded();\n                }\n                connection = null;\n                readyState = 0;\n                return;\n            }\n            activeIS = is;\n            if (readyState < 2) {\n                readyState = 2;\n                status = connection.getResponseCode();\n                statusText = connection.getResponseMessage();\n                if (onreadystatechange != null) {\n                    onreadystatechange.onSent();\n                }\n            }\n            receiving = initializeReceivingMonitor();\n            ByteArrayOutputStream baos = new ByteArrayOutputStream(10240);\n            byte[] buffer = new byte[10240];\n            int read;\n            while (!toAbort && (read = is.read(buffer)) != -1) {\n                if (checkAbort()) return;\n                if (readyState != 3) {\n                    readyState = 3;\n                    if (onreadystatechange != null) {\n                        onreadystatechange.onReceiving();\n                    }\n                }\n                boolean received = false;\n                if (receiving != null) {\n                    received = receiving.receiving(baos, buffer, 0, read);\n                }\n                if (!received) {\n                    baos.write(buffer, 0, read);\n                }\n            }\n            if (checkAbort()) return;\n            is.close();\n            activeIS = null;\n            responseText = null;\n            String type = connection.getHeaderField(\"Content-Type\");\n            if (type != null) {\n                String charset = null;\n                String lowerType = type.toLowerCase();\n                int idx = lowerType.indexOf(\"charset=\");\n                if (idx != -1) {\n                    charset = type.substring(idx + 8);\n                } else {\n                    idx = lowerType.indexOf(\"/xml\");\n                    if (idx != -1) {\n                        String tmp = baos.toString();\n                        Matcher matcher = Pattern.compile(\"<\\\\?.*encoding\\\\s*=\\\\s*[\\'\\\"]([^'\\\"]*)[\\'\\\"].*\\\\?>\", Pattern.MULTILINE).matcher(tmp);\n                        if (matcher.find()) {\n                            charset = matcher.group(1);\n                        } else {\n                            responseText = tmp;\n                        }\n                    } else {\n                        idx = lowerType.indexOf(\"html\");\n                        if (idx != -1) {\n                            String tmp = baos.toString();\n                            Matcher matcher = Pattern.compile(\"<meta.*content\\\\s*=\\\\s*[\\'\\\"][^'\\\"]*charset\\\\s*=\\\\s*([^'\\\"]*)\\\\s*[\\'\\\"].*>\", Pattern.MULTILINE | Pattern.CASE_INSENSITIVE).matcher(tmp);\n                            if (matcher.find()) {\n                                charset = matcher.group(1);\n                            } else {\n                                responseText = tmp;\n                            }\n                        }\n                    }\n                }\n                if (charset != null) {\n                    try {\n                        responseText = baos.toString(charset);\n                    } catch (UnsupportedEncodingException e) {\n                    }\n                }\n            }\n            if (responseText == null) {\n                try {\n                    responseText = baos.toString(\"iso-8859-1\");\n                } catch (UnsupportedEncodingException e) {\n                    responseText = baos.toString();\n                }\n            }\n            readyState = 4;\n            if (onreadystatechange != null) {\n                onreadystatechange.onLoaded();\n            }\n            connection.disconnect();\n            readyState = 0;\n        } catch (Exception e) {\n            if (checkAbort()) return;\n            e.printStackTrace();\n            readyState = 4;\n            if (onreadystatechange != null) {\n                onreadystatechange.onLoaded();\n            }\n            connection = null;\n            readyState = 0;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10927077",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private String hash(String message) {\n        MessageDigest md = null;\n        try {\n            md = MessageDigest.getInstance(\"SHA1\");\n        } catch (NoSuchAlgorithmException e) {\n            throw new AssertionError(\"Can't find the SHA1 algorithm in the java.security package\");\n        }\n        String saltString = String.valueOf(12345);\n        md.update(saltString.getBytes());\n        md.update(message.getBytes());\n        byte[] digestBytes = md.digest();\n        StringBuffer digestSB = new StringBuffer();\n        for (int i = 0; i < digestBytes.length; i++) {\n            int lowNibble = digestBytes[i] & 0x0f;\n            int highNibble = (digestBytes[i] >> 4) & 0x0f;\n            digestSB.append(Integer.toHexString(highNibble));\n            digestSB.append(Integer.toHexString(lowNibble));\n        }\n        String digestStr = digestSB.toString().trim();\n        return digestStr;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01092728",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic String encodePassword(String rawPass, Object salt) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public String encodePassword(String rawPass, Object salt) {\n        MessageDigest sha;\n        try {\n            sha = MessageDigest.getInstance(\"SHA\");\n        } catch (java.security.NoSuchAlgorithmException e) {\n            throw new LdapDataAccessException(\"No SHA implementation available!\");\n        }\n        sha.update(rawPass.getBytes());\n        if (salt != null) {\n            Assert.isInstanceOf(byte[].class, salt, \"Salt value must be a byte array\");\n            sha.update((byte[]) salt);\n        }\n        byte[] hash = combineHashAndSalt(sha.digest(), (byte[]) salt);\n        return (salt == null ? SHA_PREFIX : SSHA_PREFIX) + new String(Base64.encodeBase64(hash));\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10933932",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String crypt(String str) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String crypt(String str) {\n        if (str == null || str.length() == 0) {\n            throw new IllegalArgumentException(\"String to encript cannot be null or zero length\");\n        }\n        StringBuffer hexString = new StringBuffer();\n        MessageDigest md = null;\n        try {\n            md = MessageDigest.getInstance(\"MD5\");\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n        md.update(str.getBytes());\n        byte[] hash = md.digest();\n        for (int i = 0; i < hash.length; i++) {\n            if ((0xff & hash[i]) < 0x10) {\n                hexString.append(\"0\" + Integer.toHexString((0xFF & hash[i])));\n            } else {\n                hexString.append(Integer.toHexString(0xFF & hash[i]));\n            }\n        }\n        return hexString.toString();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10934628",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void main(String[] args) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void main(String[] args) {\n        try {\n            {\n                byte[] bytes1 = { (byte) 2, (byte) 2, (byte) 3, (byte) 0, (byte) 9 };\n                byte[] bytes2 = { (byte) 99, (byte) 2, (byte) 2, (byte) 3, (byte) 0, (byte) 9 };\n                System.out.println(\"Bytes 2,2,3,0,9 as Base64: \" + encodeBytes(bytes1));\n                System.out.println(\"Bytes 2,2,3,0,9 w/ offset: \" + encodeBytes(bytes2, 1, bytes2.length - 1));\n                byte[] dbytes = decode(encodeBytes(bytes1));\n                System.out.print(encodeBytes(bytes1) + \" decoded: \");\n                for (int i = 0; i < dbytes.length; i++) System.out.print(dbytes[i] + (i < dbytes.length - 1 ? \",\" : \"\\n\"));\n            }\n            {\n                java.io.FileInputStream fis = new java.io.FileInputStream(\"test.gif.b64\");\n                Base64.InputStream b64is = new Base64.InputStream(fis, DECODE);\n                byte[] bytes = new byte[0];\n                int b = -1;\n                while ((b = b64is.read()) >= 0) {\n                    byte[] temp = new byte[bytes.length + 1];\n                    System.arraycopy(bytes, 0, temp, 0, bytes.length);\n                    temp[bytes.length] = (byte) b;\n                    bytes = temp;\n                }\n                b64is.close();\n                javax.swing.ImageIcon iicon = new javax.swing.ImageIcon(bytes);\n                javax.swing.JLabel jlabel = new javax.swing.JLabel(\"Read from test.gif.b64\", iicon, 0);\n                javax.swing.JFrame jframe = new javax.swing.JFrame();\n                jframe.getContentPane().add(jlabel);\n                jframe.pack();\n                jframe.setVisible(true);\n                java.io.FileOutputStream fos = new java.io.FileOutputStream(\"test.gif_out\");\n                fos.write(bytes);\n                fos.close();\n                fis = new java.io.FileInputStream(\"test.gif_out\");\n                b64is = new Base64.InputStream(fis, ENCODE);\n                byte[] ebytes = new byte[0];\n                b = -1;\n                while ((b = b64is.read()) >= 0) {\n                    byte[] temp = new byte[ebytes.length + 1];\n                    System.arraycopy(ebytes, 0, temp, 0, ebytes.length);\n                    temp[ebytes.length] = (byte) b;\n                    ebytes = temp;\n                }\n                b64is.close();\n                String s = new String(ebytes);\n                javax.swing.JTextArea jta = new javax.swing.JTextArea(s);\n                javax.swing.JScrollPane jsp = new javax.swing.JScrollPane(jta);\n                jframe = new javax.swing.JFrame();\n                jframe.setTitle(\"Read from test.gif_out\");\n                jframe.getContentPane().add(jsp);\n                jframe.pack();\n                jframe.setVisible(true);\n                fos = new java.io.FileOutputStream(\"test.gif.b64_out\");\n                fos.write(ebytes);\n                fis = new java.io.FileInputStream(\"test.gif.b64_out\");\n                b64is = new Base64.InputStream(fis, DECODE);\n                byte[] edbytes = new byte[0];\n                b = -1;\n                while ((b = b64is.read()) >= 0) {\n                    byte[] temp = new byte[edbytes.length + 1];\n                    System.arraycopy(edbytes, 0, temp, 0, edbytes.length);\n                    temp[edbytes.length] = (byte) b;\n                    edbytes = temp;\n                }\n                b64is.close();\n                iicon = new javax.swing.ImageIcon(edbytes);\n                jlabel = new javax.swing.JLabel(\"Read from test.gif.b64_out\", iicon, 0);\n                jframe = new javax.swing.JFrame();\n                jframe.getContentPane().add(jlabel);\n                jframe.pack();\n                jframe.setVisible(true);\n            }\n            {\n                java.io.FileInputStream fis = new java.io.FileInputStream(\"test.gif_out\");\n                byte[] rbytes = new byte[0];\n                int b = -1;\n                while ((b = fis.read()) >= 0) {\n                    byte[] temp = new byte[rbytes.length + 1];\n                    System.arraycopy(rbytes, 0, temp, 0, rbytes.length);\n                    temp[rbytes.length] = (byte) b;\n                    rbytes = temp;\n                }\n                fis.close();\n                java.io.FileOutputStream fos = new java.io.FileOutputStream(\"test.gif.b64_out2\");\n                Base64.OutputStream b64os = new Base64.OutputStream(fos, ENCODE);\n                b64os.write(rbytes);\n                b64os.close();\n                fis = new java.io.FileInputStream(\"test.gif.b64_out2\");\n                byte[] rebytes = new byte[0];\n                b = -1;\n                while ((b = fis.read()) >= 0) {\n                    byte[] temp = new byte[rebytes.length + 1];\n                    System.arraycopy(rebytes, 0, temp, 0, rebytes.length);\n                    temp[rebytes.length] = (byte) b;\n                    rebytes = temp;\n                }\n                fis.close();\n                String s = new String(rebytes);\n                javax.swing.JTextArea jta = new javax.swing.JTextArea(s);\n                javax.swing.JScrollPane jsp = new javax.swing.JScrollPane(jta);\n                javax.swing.JFrame jframe = new javax.swing.JFrame();\n                jframe.setTitle(\"Read from test.gif.b64_out2\");\n                jframe.getContentPane().add(jsp);\n                jframe.pack();\n                jframe.setVisible(true);\n                fos = new java.io.FileOutputStream(\"test.gif_out2\");\n                b64os = new Base64.OutputStream(fos, DECODE);\n                b64os.write(rebytes);\n                b64os.close();\n                javax.swing.ImageIcon iicon = new javax.swing.ImageIcon(\"test.gif_out2\");\n                javax.swing.JLabel jlabel = new javax.swing.JLabel(\"Read from test.gif_out2\", iicon, 0);\n                jframe = new javax.swing.JFrame();\n                jframe.getContentPane().add(jlabel);\n                jframe.pack();\n                jframe.setVisible(true);\n            }\n            {\n                java.io.FileInputStream fis = new java.io.FileInputStream(\"D:\\\\temp\\\\testencoding.txt\");\n                Base64.InputStream b64is = new Base64.InputStream(fis, DECODE);\n                java.io.FileOutputStream fos = new java.io.FileOutputStream(\"D:\\\\temp\\\\file.zip\");\n                int b;\n                while ((b = b64is.read()) >= 0) fos.write(b);\n                fos.close();\n                b64is.close();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10935129",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private String encryptUserPassword(int userId, String password) {\n        password = password.trim();\n        if (password.length() == 0) {\n            return \"\";\n        } else {\n            MessageDigest md;\n            try {\n                md = MessageDigest.getInstance(\"SHA\");\n            } catch (NoSuchAlgorithmException ex) {\n                throw new BoardRuntimeException(ex);\n            }\n            md.update(String.valueOf(userId).getBytes());\n            md.update(password.getBytes());\n            byte b[] = md.digest();\n            StringBuffer sb = new StringBuffer(1 + b.length * 2);\n            for (int i = 0; i < b.length; i++) {\n                int ii = b[i];\n                if (ii < 0) {\n                    ii = 256 + ii;\n                }\n                sb.append(getHexadecimalValue2(ii));\n            }\n            return sb.toString();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10936821",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void doIt() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n    public void doIt() {\n        try {\n            Shared.createBackup(\"articulo precio codigo_de_barras costo movimiento_inventario detalles_movimientos\");\n            if (mode.equals(\"FTP\")) {\n                FTPClient client = new FTPClient();\n                client.connect(Constants.ftpHost);\n                client.login(Constants.ftpUser, Constants.ftpPass);\n                client.changeDirectory(Constants.ftpDir);\n                File ff = new File(Constants.tmpDir + Constants.tmpFtpFileName);\n                client.download(\"GT99_A09.rar\", ff);\n                client.disconnect(false);\n                Shared.prepareMovements(ff);\n            } else if (mode.equals(\"File\")) {\n                JFileChooser jfc = new JFileChooser();\n                FileFilter f = new ExtensionFileFilter(\"Traslados de Total Pos\", \"rar\");\n                jfc.setFileFilter(f);\n                int selection = jfc.showOpenDialog(Shared.getMyMainWindows());\n                if (selection == JFileChooser.APPROVE_OPTION) {\n                    Shared.prepareMovements(jfc.getSelectedFile());\n                } else {\n                    return;\n                }\n            }\n            Shared.updateMovements();\n            if (Shared.isHadMovements()) {\n                MessageBox msg = new MessageBox(MessageBox.SGN_SUCCESS, \"Fue cargado el nuevo inventario satisfactoriamente!\");\n                msg.show(Shared.getMyMainWindows());\n            } else {\n                MessageBox msg = new MessageBox(MessageBox.SGN_WARNING, \"La tienda no tuvo ningun movimiento asociado.\");\n                msg.show(Shared.getMyMainWindows());\n            }\n        } catch (Exception ex) {\n            MessageBox msg = new MessageBox(MessageBox.SGN_DANGER, \"Ha ocurrido un error.\", ex);\n            msg.show(Shared.getMyMainWindows());\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10937054",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void main(String[] args) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void main(String[] args) {\n        FTPClient client = new FTPClient();\n        FileInputStream fis = null;\n        try {\n            client.connect(\"192.168.1.10\");\n            client.login(\"a\", \"123456\");\n            String filename = \"D:\\\\DHTH5CLT\\\\HK3\\\\Ung dung phan tan\\\\FTP_JAVA\\\\FTP_DETAI\\\\FTP\\\\src\\\\DemoFTP\\\\filename\\\\5s.txt\";\n            fis = new FileInputStream(filename);\n            client.storeFile(filename, fis);\n            client.logout();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (fis != null) {\n                    fis.close();\n                }\n                client.disconnect();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10937085",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void _he3Decode(String in_file) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void _he3Decode(String in_file) {\n        try {\n            File out = new File(in_file + dec_extension);\n            File in = new File(in_file);\n            int file_size = (int) in.length();\n            FileInputStream in_stream = new FileInputStream(in_file);\n            out.createNewFile();\n            FileOutputStream out_stream = new FileOutputStream(out.getName());\n            InputStreamReader inputReader = new InputStreamReader(in_stream, \"ISO8859_1\");\n            OutputStreamWriter outputWriter = new OutputStreamWriter(out_stream, \"ISO8859_1\");\n            ByteArrayOutputStream os = new ByteArrayOutputStream(file_size);\n            byte byte_arr[] = new byte[8];\n            char char_arr[] = new char[8];\n            int buff_size = char_arr.length;\n            int _fetched = 0;\n            int _chars_read = 0;\n            System.out.println(appname + \".\\n\" + dec_mode + \": \" + in_file + \"\\n\" + dec_mode + \" to: \" + in_file + dec_extension + \"\\n\" + \"\\nreading: \");\n            while (_fetched < file_size) {\n                _chars_read = inputReader.read(char_arr, 0, buff_size);\n                if (_chars_read == -1) break;\n                for (int i = 0; i < _chars_read; i++) byte_arr[i] = (byte) char_arr[i];\n                os.write(byte_arr, 0, _chars_read);\n                _fetched += _chars_read;\n                System.out.print(\"*\");\n            }\n            System.out.print(\"\\n\" + dec_mode + \": \");\n            outputWriter.write(new String(_decode((ByteArrayOutputStream) os), \"ISO-8859-1\"));\n            System.out.print(\"complete\\n\\n\");\n        } catch (java.io.FileNotFoundException fnfEx) {\n            System.err.println(\"Exception: \" + fnfEx.getMessage());\n        } catch (java.io.IOException ioEx) {\n            System.err.println(\"Exception: \" + ioEx.getMessage());\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10940445",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "protected HttpResponse doGet(String action, String[][] args) throws IOException {\n        long startTime = System.currentTimeMillis();\n        String getString = host + \"?\" + ACTION_PARAMETER + \"=\" + action;\n        if (args != null && args.length != 0) {\n            for (int i = 0; i < args.length; i++) {\n                if (args[i].length != 0) {\n                    getString = getString + \"&\" + args[i][0] + \"=\" + encode(args[i][1]);\n                }\n            }\n        }\n        HttpGet httpGet = new HttpGet(getString);\n        HttpResponse response = getHttpClient().execute(httpGet);\n        if (timingsOn) {\n            totalCalls++;\n            long elapsedTime = (System.currentTimeMillis() - startTime);\n            if (totalCalls != 1) {\n                totalTime = totalTime + elapsedTime;\n                minTime = Math.min(minTime, elapsedTime);\n                maxTime = Math.max(maxTime, elapsedTime);\n            } else {\n                minTime = elapsedTime;\n                maxTime = 0L;\n            }\n            System.out.println(\"http get took \" + elapsedTime + \" ms., (calls, min, max, av) = (\" + totalCalls + \", \" + minTime + \", \" + maxTime + \", \" + (totalTime / totalCalls) + \")\");\n        }\n        return response;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10941155",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void detachFile(File file, Block b) throws IOException {\n        File tmpFile = volume.createDetachFile(b, file.getName());\n        try {\n            IOUtils.copyBytes(new FileInputStream(file), new FileOutputStream(tmpFile), 16 * 1024, true);\n            if (file.length() != tmpFile.length()) {\n                throw new IOException(\"Copy of file \" + file + \" size \" + file.length() + \" into file \" + tmpFile + \" resulted in a size of \" + tmpFile.length());\n            }\n            FileUtil.replaceFile(tmpFile, file);\n        } catch (IOException e) {\n            boolean done = tmpFile.delete();\n            if (!done) {\n                DataNode.LOG.info(\"detachFile failed to delete temporary file \" + tmpFile);\n            }\n            throw e;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10942052",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copy(String from, String to) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copy(String from, String to) throws Exception {\n        File inputFile = new File(from);\n        File outputFile = new File(to);\n        FileInputStream in = new FileInputStream(inputFile);\n        FileOutputStream out = new FileOutputStream(outputFile);\n        byte[] buffer = new byte[1024];\n        int len;\n        while ((len = in.read(buffer)) != -1) out.write(buffer, 0, len);\n        in.close();\n        out.close();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10943077",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void copy(File fromFile, File toFile) throws IOException {\n        String fromFileName = fromFile.getName();\n        File tmpFile = new File(fromFileName);\n        String toFileName = toFile.getName();\n        if (!tmpFile.exists()) throw new IOException(\"FileCopy: \" + \"no such source file: \" + fromFileName);\n        if (!tmpFile.isFile()) throw new IOException(\"FileCopy: \" + \"can't copy directory: \" + fromFileName);\n        if (!tmpFile.canRead()) throw new IOException(\"FileCopy: \" + \"source file is unreadable: \" + fromFileName);\n        FileInputStream from = null;\n        FileOutputStream to = null;\n        try {\n            from = new FileInputStream(tmpFile);\n            File toF = new File(toFile.getCanonicalPath());\n            if (!toF.exists()) ;\n            toF.createNewFile();\n            if (!SBCMain.DEBUG_MODE) to = new FileOutputStream(toFile); else to = new FileOutputStream(toF);\n            byte[] buffer = new byte[4096];\n            int bytesRead;\n            while ((bytesRead = from.read(buffer)) != -1) to.write(buffer, 0, bytesRead);\n        } finally {\n            if (from != null) try {\n                from.close();\n            } catch (IOException e) {\n                ;\n            }\n            if (to != null) try {\n                to.close();\n            } catch (IOException e) {\n                ;\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10949790",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void loadDBpediaOntology() {\n        try {\n            URL url = new URL(\"http://downloads.dbpedia.org/3.6/dbpedia_3.6.owl.bz2\");\n            InputStream is = new BufferedInputStream(url.openStream());\n            CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is);\n            dbPediaOntology = OWLManager.createOWLOntologyManager().loadOntologyFromOntologyDocument(in);\n            reasoner = PelletReasonerFactory.getInstance().createNonBufferingReasoner(dbPediaOntology);\n            reasoner.precomputeInferences(InferenceType.CLASS_HIERARCHY);\n        } catch (MalformedURLException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } catch (CompressorException e) {\n            e.printStackTrace();\n        } catch (OWLOntologyCreationException e) {\n            e.printStackTrace();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10957655",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String SHA1(String string) throws XLWrapException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String SHA1(String string) throws XLWrapException {\n        MessageDigest md;\n        try {\n            md = MessageDigest.getInstance(\"SHA-1\");\n        } catch (NoSuchAlgorithmException e) {\n            throw new XLWrapException(\"SHA-1 message digest is not available.\");\n        }\n        byte[] data = new byte[40];\n        md.update(string.getBytes());\n        data = md.digest();\n        StringBuffer buf = new StringBuffer();\n        for (int i = 0; i < data.length; i++) {\n            int halfbyte = (data[i] >>> 4) & 0x0F;\n            int two_halfs = 0;\n            do {\n                if ((0 <= halfbyte) && (halfbyte <= 9)) buf.append((char) ('0' + halfbyte)); else buf.append((char) ('a' + (halfbyte - 10)));\n                halfbyte = data[i] & 0x0F;\n            } while (two_halfs++ < 1);\n        }\n        return buf.toString();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10959933",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void main(String[] args) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void main(String[] args) throws Exception {\n        FileChannel fc = new FileOutputStream(\"data.txt\").getChannel();\n        fc.write(ByteBuffer.wrap(\"some text \".getBytes()));\n        fc.close();\n        fc = new RandomAccessFile(\"data.txt\", \"rw\").getChannel();\n        fc.position(fc.size());\n        fc.write(ByteBuffer.wrap(\"some more\".getBytes()));\n        fc.close();\n        fc = new FileInputStream(\"data.txt\").getChannel();\n        ByteBuffer buff = ByteBuffer.allocate(BSIZE);\n        fc.read(buff);\n        buff.flip();\n        while (buff.hasRemaining()) {\n            PrintUtil.prt((char) buff.get());\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10960896",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void executeUpdate(Database db, String... statements) throws SQLException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void executeUpdate(Database db, String... statements) throws SQLException {\n        Connection con = null;\n        Statement stmt = null;\n        try {\n            con = getConnection(db);\n            con.setAutoCommit(false);\n            stmt = con.createStatement();\n            for (String statement : statements) {\n                stmt.executeUpdate(statement);\n            }\n            con.commit();\n        } catch (SQLException e) {\n            try {\n                con.rollback();\n            } catch (SQLException e1) {\n            }\n            throw e;\n        } finally {\n            closeStatement(stmt);\n            closeConnection(con);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10968489",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void storeFieldMap(Content c, Connection conn) throws SQLException {\n        SQLDialect dialect = getDatabase().getSQLDialect();\n        if (TRANSACTIONS_ENABLED) {\n            conn.setAutoCommit(false);\n        }\n        try {\n            Object thisKey = c.getPrimaryKey();\n            deleteFieldContent(thisKey, conn);\n            PreparedStatement ps = null;\n            StructureItem nextItem;\n            Map fieldMap = c.getFieldMap();\n            String type;\n            Object value, siKey;\n            for (Iterator i = c.getStructure().getStructureItems().iterator(); i.hasNext(); ) {\n                nextItem = (StructureItem) i.next();\n                type = nextItem.getDataType().toUpperCase();\n                siKey = nextItem.getPrimaryKey();\n                value = fieldMap.get(nextItem.getName());\n                if (type.equals(StructureItem.DATE)) {\n                    ps = conn.prepareStatement(sqlConstants.get(\"INSERT_DATE_FIELD\"));\n                    ps.setObject(1, thisKey);\n                    ps.setObject(2, siKey);\n                    dialect.setDate(ps, 3, (java.util.Date) value);\n                    ps.executeUpdate();\n                } else if (type.equals(StructureItem.INT) || type.equals(StructureItem.FLOAT) || type.equals(StructureItem.VARCHAR)) {\n                    ps = conn.prepareStatement(sqlConstants.get(\"INSERT_\" + type + \"_FIELD\"));\n                    ps.setObject(1, thisKey);\n                    ps.setObject(2, siKey);\n                    if (value != null) {\n                        ps.setObject(3, value);\n                    } else {\n                        int sqlType = Types.INTEGER;\n                        if (type.equals(StructureItem.FLOAT)) {\n                            sqlType = Types.FLOAT;\n                        } else if (type.equals(StructureItem.VARCHAR)) {\n                            sqlType = Types.VARCHAR;\n                        }\n                        ps.setNull(3, sqlType);\n                    }\n                    ps.executeUpdate();\n                } else if (type.equals(StructureItem.TEXT)) {\n                    setTextField(c, siKey, (String) value, conn);\n                }\n                if (ps != null) {\n                    ps.close();\n                    ps = null;\n                }\n            }\n            if (TRANSACTIONS_ENABLED) {\n                conn.commit();\n            }\n        } catch (SQLException e) {\n            if (TRANSACTIONS_ENABLED) {\n                conn.rollback();\n            }\n            throw e;\n        } finally {\n            if (TRANSACTIONS_ENABLED) {\n                conn.setAutoCommit(true);\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01096936",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static String readJarURL(URL url) throws IOException {\n        JarURLConnection juc = (JarURLConnection) url.openConnection();\n        InputStream in = juc.getInputStream();\n        ByteArrayOutputStream out = new ByteArrayOutputStream();\n        int i = in.read();\n        while (i != -1) {\n            out.write(i);\n            i = in.read();\n        }\n        return out.toString();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01097146",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String getMessageDigest(String input) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String getMessageDigest(String input) {\n        if (input == null) {\n            log.warn(\"Returning SHA-1 null value for null input\");\n            return null;\n        }\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n            md.update(input.getBytes(\"UTF-8\"));\n            byte[] bytes = md.digest();\n            return new BASE64Encoder().encode(bytes);\n        } catch (NoSuchAlgorithmException e) {\n            throw new IllegalStateException(e.getMessage());\n        } catch (UnsupportedEncodingException e) {\n            throw new IllegalStateException(e.getMessage());\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01097147",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String getMessageDigest(String[] inputs) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String getMessageDigest(String[] inputs) {\n        if (inputs.length == 0) return null;\n        try {\n            MessageDigest sha = MessageDigest.getInstance(\"SHA-1\");\n            for (String input : inputs) sha.update(input.getBytes());\n            byte[] hash = sha.digest();\n            String CPass = \"\";\n            int h = 0;\n            String s = \"\";\n            for (int i = 0; i < 20; i++) {\n                h = hash[i];\n                if (h < 0) h += 256;\n                s = Integer.toHexString(h);\n                if (s.length() < 2) CPass = CPass.concat(\"0\");\n                CPass = CPass.concat(s);\n            }\n            CPass = CPass.toUpperCase();\n            return CPass;\n        } catch (NoSuchAlgorithmException e) {\n            throw new IllegalStateException(e.getMessage());\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10977091",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic String md5(String password) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public String md5(String password) {\n        MessageDigest m = null;\n        try {\n            m = MessageDigest.getInstance(\"MD5\");\n        } catch (NoSuchAlgorithmException ex) {\n        }\n        m.update(password.getBytes(), 0, password.length());\n        return new BigInteger(1, m.digest()).toString(16);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10986823",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static String executeQueryWithXbird(String queryFile, String replace) throws XQueryException, IOException, URISyntaxException {\n        URL url = DocumentTableTest.class.getResource(queryFile);\n        URI uri = url.toURI();\n        String query = IOUtils.toString(url.openStream());\n        XQueryProcessor processor = new XQueryProcessor();\n        query = query.replace(\"fn:doc(\\\"auction.xml\\\")\", replace);\n        if (DEBUG_LIGHT) {\n            System.err.println(query);\n        }\n        XQueryModule mod = processor.parse(query, uri);\n        StringWriter res_sw = new StringWriter();\n        Serializer ser = new SAXSerializer(new SAXWriter(res_sw), res_sw);\n        processor.execute(mod, ser);\n        String result = res_sw.toString();\n        return result;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10986824",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static String executeQueryWithSaxon(String queryFile) throws XPathException, FileNotFoundException, IOException, URISyntaxException {\n        URL url = DocumentTableTest.class.getResource(queryFile);\n        URI uri = url.toURI();\n        String query = IOUtils.toString(url.openStream());\n        Configuration config = new Configuration();\n        config.setHostLanguage(Configuration.XQUERY);\n        StaticQueryContext staticContext = new StaticQueryContext(config);\n        staticContext.setBaseURI(uri.toString());\n        XQueryExpression exp = staticContext.compileQuery(query);\n        Properties props = new Properties();\n        props.setProperty(SaxonOutputKeys.WRAP, \"no\");\n        props.setProperty(OutputKeys.INDENT, \"no\");\n        props.setProperty(OutputKeys.OMIT_XML_DECLARATION, \"yes\");\n        StringWriter res_sw = new StringWriter();\n        DynamicQueryContext dynamicContext = new DynamicQueryContext(config);\n        exp.run(dynamicContext, new StreamResult(res_sw), props);\n        return res_sw.toString();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_10993811",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "Bitmap downloadImage(String uri) {\n            try {\n                mGetMethod.setURI(new URI(uri));\n                HttpResponse resp = mClient.execute(mGetMethod);\n                if (resp.getStatusLine().getStatusCode() < 400) {\n                    InputStream is = resp.getEntity().getContent();\n                    String tmp = convertStreamToString(is);\n                    Log.d(TAG, \"hoge\" + tmp);\n                    is.close();\n                    return null;\n                }\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n            return null;\n        }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11000632",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic final void provisionGSLAM() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public final void provisionGSLAM() {\n        try {\n            UUID[] slaUUID = new UUID[] { new UUID(\"AG-1\") };\n            SLA[] slas = sslamContext.getSLARegistry().getIQuery().getSLA(slaUUID);\n            for (SLA s : slas) {\n                Party[] parties = s.getParties();\n                System.out.println(\"SLA Info :::\" + s.getUuid().toString());\n                for (Party p : parties) {\n                    System.out.println(\"Printing gslam_epr value for Party\" + p.getId() + \"--\" + p.getAgreementRole());\n                    System.out.println(parties[0].getPropertyValue(new STND(\"gslam_epr\")));\n                }\n            }\n            sslamContext.getSLARegistry().getIRegister().register(slas[0], slaUUID, SLAState.OBSERVED);\n            String xmlFile2Send = System.getenv(\"SLASOI_HOME\") + System.getProperty(\"file.separator\") + \"Integration\" + System.getProperty(\"file.separator\") + \"soap\" + System.getProperty(\"file.separator\") + \"provision.xml\";\n            String soapAction = \"\";\n            URL url;\n            url = new URL(syntaxConverterNegotiationWSURL);\n            URLConnection connection = url.openConnection();\n            HttpURLConnection httpConn = (HttpURLConnection) connection;\n            FileInputStream fin = new FileInputStream(xmlFile2Send);\n            ByteArrayOutputStream bout = new ByteArrayOutputStream();\n            SOAPClient4XG.copy(fin, bout);\n            fin.close();\n            byte[] b = bout.toByteArray();\n            httpConn.setRequestProperty(\"Content-Length\", String.valueOf(b.length));\n            httpConn.setRequestProperty(\"Content-Type\", \"application/soap+xml; charset=UTF-8\");\n            httpConn.setRequestProperty(\"SOAPAction\", soapAction);\n            httpConn.setRequestMethod(\"POST\");\n            httpConn.setDoOutput(true);\n            httpConn.setDoInput(true);\n            OutputStream out = httpConn.getOutputStream();\n            out.write(b);\n            out.close();\n            InputStreamReader isr = new InputStreamReader(httpConn.getInputStream());\n            BufferedReader in = new BufferedReader(isr);\n            String inputLine;\n            StringBuffer response = new StringBuffer();\n            while ((inputLine = in.readLine()) != null) {\n                response.append(inputLine);\n            }\n            in.close();\n            javax.xml.parsers.DocumentBuilderFactory factory = javax.xml.parsers.DocumentBuilderFactory.newInstance();\n            javax.xml.parsers.DocumentBuilder db;\n            db = factory.newDocumentBuilder();\n            org.xml.sax.InputSource inStream = new org.xml.sax.InputSource();\n            inStream.setCharacterStream(new java.io.StringReader(response.toString()));\n            System.out.println(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\" + \"####################################################\" + \"#################################################\\n\" + \"####################################################\" + \"#################################################\\n\" + \"Component Name: GSLAM\\n\" + \"Interface Name: negotiate/coordinage\\n\" + \"Operation Name: Provision\\n\" + \"Input:Type \" + \"void\" + \"\\n\" + \"####################################################\" + \"#################################################\\n\" + \"####################################################\" + \"#################################################\\n\" + \"######################################## RESPONSE\" + \"############################################\\n\\n\");\n            System.out.println(response.toString());\n        } catch (MalformedURLException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } catch (ParserConfigurationException e) {\n            e.printStackTrace();\n        } catch (RegistrationFailureException e) {\n            e.printStackTrace();\n        } catch (SLAManagerContextException e) {\n            e.printStackTrace();\n        } catch (InvalidUUIDException e) {\n            e.printStackTrace();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11005804",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic String kodetu(String testusoila) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public String kodetu(String testusoila) {\n        MessageDigest md = null;\n        try {\n            md = MessageDigest.getInstance(\"SHA\");\n        } catch (NoSuchAlgorithmException e) {\n            new MezuLeiho(\"Ez da zifraketa algoritmoa aurkitu\", \"Ados\", \"Zifraketa Arazoa\", JOptionPane.ERROR_MESSAGE);\n            e.printStackTrace();\n        }\n        try {\n            md.update(testusoila.getBytes(\"UTF-8\"));\n        } catch (UnsupportedEncodingException e) {\n            new MezuLeiho(\"Errorea kodetzerakoan\", \"Ados\", \"Kodeketa Errorea\", JOptionPane.ERROR_MESSAGE);\n            e.printStackTrace();\n        }\n        byte raw[] = md.digest();\n        String hash = (new BASE64Encoder()).encode(raw);\n        return hash;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11012490",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void execute(String file, String[] ebms, String[] eems, String[] ims, String[] efms) throws BuildException {\n        if (verbose) {\n            System.out.println(\"Preprocessing file \" + file + \" (type: \" + type + \")\");\n        }\n        try {\n            File targetFile = new File(file);\n            FileReader fr = new FileReader(targetFile);\n            BufferedReader reader = new BufferedReader(fr);\n            File preprocFile = File.createTempFile(targetFile.getName(), \"tmp\", targetFile.getParentFile());\n            FileWriter fw = new FileWriter(preprocFile);\n            BufferedWriter writer = new BufferedWriter(fw);\n            int result = preprocess(reader, writer, ebms, eems, ims, efms);\n            reader.close();\n            writer.close();\n            switch(result) {\n                case OVERWRITE:\n                    if (!targetFile.delete()) {\n                        System.out.println(\"Can't overwrite target file with preprocessed file\");\n                        throw new BuildException(\"Can't overwrite target file \" + target + \" with preprocessed file\");\n                    }\n                    preprocFile.renameTo(targetFile);\n                    if (verbose) {\n                        System.out.println(\"File \" + preprocFile.getName() + \" modified.\");\n                    }\n                    modifiedCnt++;\n                    break;\n                case REMOVE:\n                    if (!targetFile.delete()) {\n                        System.out.println(\"Can't delete target file\");\n                        throw new BuildException(\"Can't delete target file \" + target);\n                    }\n                    if (!preprocFile.delete()) {\n                        System.out.println(\"Can't delete temporary preprocessed file \" + preprocFile.getName());\n                        throw new BuildException(\"Can't delete temporary preprocessed file \" + preprocFile.getName());\n                    }\n                    if (verbose) {\n                        System.out.println(\"File \" + preprocFile.getName() + \" removed.\");\n                    }\n                    removedCnt++;\n                    break;\n                case KEEP:\n                    if (!preprocFile.delete()) {\n                        System.out.println(\"Can't delete temporary preprocessed file \" + preprocFile.getName());\n                        throw new BuildException(\"Can't delete temporary preprocessed file \" + preprocFile.getName());\n                    }\n                    break;\n                default:\n                    throw new BuildException(\"Unexpected preprocessing result for file \" + preprocFile.getName());\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n            throw new BuildException(e.getMessage());\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11015015",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic Bits write(Map data) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public Bits write(Map data) throws IOException {\n        String pictureurl = (String) data.get(\"pictureurl\");\n        URL url = new URL(pictureurl);\n        InputStream is = url.openStream();\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        int buf = is.read();\n        while (buf >= 0) {\n            baos.write(buf);\n            buf = is.read();\n        }\n        return BitUtils._concat(BitUtils._bitsUI16(TypeUtils.toLong(data.get(\"shapeId\"))), BitUtils._bytesToBits(baos.toByteArray()));\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11018792",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String encryptePassword(String md5key, String passwordAccount, String encryptedPassword, int passwdenc) throws UnsupportedEncodingException, NoSuchAlgorithmException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String encryptePassword(String md5key, String passwordAccount, String encryptedPassword, int passwdenc) throws UnsupportedEncodingException, NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(Constants.ALGORITHM);\n        switch(passwdenc) {\n            case 1:\n                md.update((md5key + encryptedPassword).getBytes(\"8859_1\"));\n                break;\n            case 2:\n                md.update((encryptedPassword + md5key).getBytes(\"8859_1\"));\n                break;\n            default:\n                return null;\n        }\n        return new String(md.digest());\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11018793",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static boolean checkEncryptedPassword(String md5key, String passwordAccount, String encryptedPassword, int passwdenc) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static boolean checkEncryptedPassword(String md5key, String passwordAccount, String encryptedPassword, int passwdenc) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        MessageDigest md = MessageDigest.getInstance(Constants.ALGORITHM);\n        switch(passwdenc) {\n            case 1:\n                md.update((md5key + encryptedPassword).getBytes(\"8859_1\"));\n                return md.digest().equals(passwordAccount.getBytes(\"8859_1\"));\n            case 2:\n                md.update((encryptedPassword + md5key).getBytes(\"8859_1\"));\n                return md.digest().equals(passwordAccount.getBytes(\"8859_1\"));\n            default:\n                return false;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11020815",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static byte[] getbytes(String host, int port, String cmd) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static byte[] getbytes(String host, int port, String cmd) {\n        String result = \"GetHtmlFromServer no answer\";\n        String tmp = \"\";\n        result = \"\";\n        try {\n            tmp = \"http://\" + host + \":\" + port + \"/\" + cmd;\n            URL url = new URL(tmp);\n            if (1 == 2) {\n                BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n                String str;\n                while ((str = in.readLine()) != null) {\n                    result += str;\n                }\n                in.close();\n                return result.getBytes();\n            } else {\n                HttpURLConnection c = (HttpURLConnection) url.openConnection();\n                c.setConnectTimeout(2 * 1000);\n                c.setRequestMethod(\"GET\");\n                c.connect();\n                int amt = c.getContentLength();\n                InputStream in = c.getInputStream();\n                MojasiWriter writer = new MojasiWriter();\n                byte[] buff = new byte[256];\n                while (writer.size() < amt) {\n                    int got = in.read(buff);\n                    if (got < 0) break;\n                    writer.pushBytes(buff, got);\n                }\n                in.close();\n                c.disconnect();\n                return writer.getBytes();\n            }\n        } catch (MalformedURLException e) {\n            System.err.println(tmp + \" \" + e);\n        } catch (IOException e) {\n            ;\n        }\n        return null;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11020818",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static byte[] excutePostRaw(String targetURL, byte[] postdata) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static byte[] excutePostRaw(String targetURL, byte[] postdata) {\n        URL url;\n        HttpURLConnection connection = null;\n        try {\n            url = new URL(targetURL);\n            connection = (HttpURLConnection) url.openConnection();\n            connection.setRequestMethod(\"POST\");\n            connection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n            connection.setRequestProperty(\"Content-Length\", \"\" + Integer.toString(postdata.length));\n            connection.setRequestProperty(\"Content-Language\", \"en-US\");\n            connection.setUseCaches(false);\n            connection.setDoInput(true);\n            connection.setDoOutput(true);\n            DataOutputStream wr = new DataOutputStream(connection.getOutputStream());\n            wr.write(postdata);\n            wr.flush();\n            wr.close();\n            int amt = connection.getContentLength();\n            InputStream in = connection.getInputStream();\n            MojasiWriter writer = new MojasiWriter();\n            byte[] buff = new byte[256];\n            while (writer.size() < amt) {\n                int got = in.read(buff);\n                if (got < 0) break;\n                writer.pushBytes(buff, got);\n                if (writer.size() > 1) System.out.println();\n            }\n            in.close();\n            connection.disconnect();\n            return writer.getBytes();\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        } finally {\n            if (connection != null) {\n                connection.disconnect();\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11021107",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private String getResourceAsString(final String name) throws IOException {\n        final InputStream is = JiBXTestCase.class.getResourceAsStream(name);\n        final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        IOUtils.copyAndClose(is, baos);\n        return baos.toString();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11026173",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static URLConnection getURLConnection(URL url, boolean ignoreBadCertificates) throws KeyManagementException, NoSuchAlgorithmException, UnknownHostException, IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static URLConnection getURLConnection(URL url, boolean ignoreBadCertificates) throws KeyManagementException, NoSuchAlgorithmException, UnknownHostException, IOException {\n        SSLSocketFactory sslSocketFactory = null;\n        if (ignoreBadCertificates) {\n            SSLContext sslContext = SSLContext.getInstance(\"SSL\");\n            sslContext.init(null, getAllTrustingTrustManager(), new java.security.SecureRandom());\n            sslSocketFactory = sslContext.getSocketFactory();\n        } else {\n            sslSocketFactory = (SSLSocketFactory) SSLSocketFactory.getDefault();\n        }\n        HttpsURLConnection.setDefaultSSLSocketFactory(sslSocketFactory);\n        return url.openConnection();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11026476",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic Object invoke(Invocation invocation) throws Throwable {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public Object invoke(Invocation invocation) throws Throwable {\n        SmartRef smartRef = (SmartRef) invocation.getValue(Invocation.SMARTREF);\n        HttpURLConnection connection = null;\n        ObjectOutputStream out = null;\n        URL url = null;\n        try {\n            url = new URL(smartRef.getProperties().getProperty(\"org.smartcc.connector.url\"));\n            url = new URL(url, smartRef.getLookup());\n            connection = (HttpURLConnection) url.openConnection();\n            connection.setRequestProperty(\"Content-Type\", \"application/octet-stream\");\n            connection.setDoOutput(true);\n            connection.setDoInput(true);\n            connection.setUseCaches(false);\n            out = new ObjectOutputStream(connection.getOutputStream());\n            out.writeObject(invocation);\n            out.flush();\n        } catch (ObjectStreamException e) {\n            System.err.println(\"error: during serialization\");\n            throw new EJBException(\"error: during serialization\", e);\n        } catch (IOException e) {\n            System.err.println(\"error: could not connect to \" + url);\n            throw new ConnectIOException(\"could not connect to \" + url, e);\n        } finally {\n            try {\n                out.close();\n            } catch (Exception e) {\n            }\n        }\n        boolean isThrowable = false;\n        Object result = null;\n        ObjectInputStream in = null;\n        try {\n            in = new ObjectInputStream(connection.getInputStream());\n            isThrowable = in.readBoolean();\n            if (isThrowable || !invocation.getMethod().getReturnType().equals(void.class)) result = in.readObject();\n        } catch (ObjectStreamException e) {\n            System.err.println(\"error: during deserialization\");\n            throw new EJBException(\"error: during deserialization\", e);\n        } catch (IOException e) {\n            System.err.println(\"error: could not connect to \" + url);\n            throw new ConnectIOException(\"could not connect to \" + url, e);\n        } finally {\n            try {\n                in.close();\n            } catch (Exception e) {\n            }\n        }\n        if (isThrowable) throw (Throwable) result;\n        return result;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11028858",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void runTask(HashMap pjobParameters) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n    public void runTask(HashMap pjobParameters) throws Exception {\n        if (hasRequiredResources(isSubTask())) {\n            File lfileSource = new File(getSource());\n            File lfileTarget = new File(getTarget());\n            FileChannel lfisInput = null;\n            FileChannel lfosOutput = null;\n            try {\n                int mbCount = 64;\n                boolean lblnDone = false;\n                while (!lblnDone) {\n                    lfisInput = new FileInputStream(lfileSource).getChannel();\n                    lfosOutput = new FileOutputStream(lfileTarget).getChannel();\n                    try {\n                        int maxCount = (mbCount * 1024 * 1024) - (32 * 1024);\n                        long size = lfisInput.size();\n                        long position = 0;\n                        while (position < size) {\n                            position += lfisInput.transferTo(position, maxCount, lfosOutput);\n                        }\n                        lblnDone = true;\n                    } catch (IOException lioXcp) {\n                        getLog().warn(lioXcp);\n                        if (lioXcp.getMessage().contains(\"Insufficient system resources exist to complete the requested servic\")) {\n                            mbCount--;\n                            getLog().debug(\"Dropped resource count down to [\" + mbCount + \"]\");\n                            if (mbCount == 0) {\n                                lblnDone = true;\n                            }\n                            if (lfisInput != null) {\n                                lfisInput.close();\n                            }\n                            if (lfosOutput != null) {\n                                lfosOutput.close();\n                            }\n                        } else {\n                            throw lioXcp;\n                        }\n                    }\n                }\n            } finally {\n                if (lfisInput != null) {\n                    lfisInput.close();\n                }\n                if (lfosOutput != null) {\n                    lfosOutput.close();\n                }\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01102936",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void writeInputStreamToFile(final InputStream stream, final File target) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void writeInputStreamToFile(final InputStream stream, final File target) {\n        long size = 0;\n        FileOutputStream fileOut;\n        try {\n            fileOut = new FileOutputStream(target);\n            size = IOUtils.copyLarge(stream, fileOut);\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        if (log.isInfoEnabled()) {\n            log.info(\"Wrote \" + size + \" bytes to \" + target.getAbsolutePath());\n        } else {\n            System.out.println(\"Wrote \" + size + \" bytes to \" + target.getAbsolutePath());\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01102939",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static long writeInputStreamToOutputStream(final InputStream in, final OutputStream out) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static long writeInputStreamToOutputStream(final InputStream in, final OutputStream out) {\n        long size = 0;\n        try {\n            size = IOUtils.copyLarge(in, out);\n        } catch (IOException e1) {\n            e1.printStackTrace();\n        }\n        return size;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11032544",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void testExactCopySize() throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Test\n    public void testExactCopySize() throws IOException {\n        final int size = Byte.SIZE + RANDOMIZER.nextInt(TEST_DATA.length - Long.SIZE);\n        final InputStream in = new ByteArrayInputStream(TEST_DATA);\n        final ByteArrayOutputStream out = new ByteArrayOutputStream(size);\n        final int cpySize = ExtraIOUtils.copy(in, out, size);\n        assertEquals(\"Mismatched copy size\", size, cpySize);\n        final byte[] subArray = ArrayUtils.subarray(TEST_DATA, 0, size), outArray = out.toByteArray();\n        assertArrayEquals(\"Mismatched data\", subArray, outArray);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11032545",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void testCopyOverSize() throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Test\n    public void testCopyOverSize() throws IOException {\n        final InputStream in = new ByteArrayInputStream(TEST_DATA);\n        final ByteArrayOutputStream out = new ByteArrayOutputStream(TEST_DATA.length);\n        final int cpySize = ExtraIOUtils.copy(in, out, TEST_DATA.length + Long.SIZE);\n        assertEquals(\"Mismatched copy size\", TEST_DATA.length, cpySize);\n        final byte[] outArray = out.toByteArray();\n        assertArrayEquals(\"Mismatched data\", TEST_DATA, outArray);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11032546",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void testCopyUnknownSize() throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Test\n    public void testCopyUnknownSize() throws IOException {\n        final InputStream in = new ByteArrayInputStream(TEST_DATA);\n        final ByteArrayOutputStream out = new ByteArrayOutputStream(TEST_DATA.length);\n        final int cpySize = ExtraIOUtils.copy(in, out, (-1));\n        assertEquals(\"Mismatched copy size\", TEST_DATA.length, cpySize);\n        final byte[] outArray = out.toByteArray();\n        assertArrayEquals(\"Mismatched data\", TEST_DATA, outArray);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11034629",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private List _getWeathersFromYahoo(String city) {\n        System.out.println(\"== get weather information of \" + city + \" from yahoo ==\");\n        try {\n            URL url = new URL(URL + cities.get(city).toString());\n            InputStream input = url.openStream();\n            SAXParserFactory factory = SAXParserFactory.newInstance();\n            factory.setNamespaceAware(false);\n            SAXParser parser = factory.newSAXParser();\n            YahooHandler yh = new YahooHandler();\n            yh.setCity(city);\n            parser.parse(input, yh);\n            return yh.getWeathers();\n        } catch (MalformedURLException e) {\n            throw new WeatherException(\"MalformedURLException\");\n        } catch (IOException e) {\n            throw new WeatherException(\"\u65e0\u6cd5\u8bfb\u53d6\u6570\u636e\u3002\");\n        } catch (ParserConfigurationException e) {\n            throw new WeatherException(\"ParserConfigurationException\");\n        } catch (SAXException e) {\n            throw new WeatherException(\"\u6570\u636e\u683c\u5f0f\u9519\u8bef\uff0c\u65e0\u6cd5\u89e3\u6790\u3002\");\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11036037",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copy(String srcFilename, String destFilename) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copy(String srcFilename, String destFilename) throws IOException {\n        int bytes_read = 0;\n        byte[] buffer = new byte[512];\n        FileInputStream fin = null;\n        FileOutputStream fout = null;\n        try {\n            fin = new FileInputStream(srcFilename);\n            try {\n                fout = new FileOutputStream(destFilename);\n                while ((bytes_read = fin.read(buffer)) != -1) {\n                    fout.write(buffer, 0, bytes_read);\n                }\n            } finally {\n                try {\n                    if (fout != null) {\n                        fout.close();\n                        fout = null;\n                    }\n                } catch (IOException e) {\n                }\n            }\n        } finally {\n            try {\n                if (fin != null) {\n                    fin.close();\n                    fin = null;\n                }\n            } catch (IOException e) {\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11039844",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static int load(Context context, URL url) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static int load(Context context, URL url) throws Exception {\n        int texture[] = new int[1];\n        GLES20.glGenTextures(1, texture, 0);\n        int textureId = texture[0];\n        GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, textureId);\n        InputStream is = url.openStream();\n        Bitmap tmpBmp;\n        try {\n            tmpBmp = BitmapFactory.decodeStream(is);\n        } finally {\n            try {\n                is.close();\n            } catch (IOException e) {\n            }\n        }\n        GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MIN_FILTER, GLES20.GL_LINEAR_MIPMAP_NEAREST);\n        MyGLUtils.checkGlError(\"glTexParameterf GL_TEXTURE_MIN_FILTER\");\n        GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MAG_FILTER, GLES20.GL_LINEAR);\n        MyGLUtils.checkGlError(\"glTexParameterf GL_TEXTURE_MAG_FILTER\");\n        GLUtils.texImage2D(GLES20.GL_TEXTURE_2D, 0, tmpBmp, 0);\n        MyGLUtils.checkGlError(\"texImage2D\");\n        GLES20.glGenerateMipmap(GLES20.GL_TEXTURE_2D);\n        MyGLUtils.checkGlError(\"glGenerateMipmap\");\n        tmpBmp.recycle();\n        GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, 0);\n        return textureId;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11044947",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copyFile(File in, File out, boolean append) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copyFile(File in, File out, boolean append) throws IOException {\n        FileChannel inChannel = new FileInputStream(in).getChannel();\n        FileChannel outChannel = new FileOutputStream(out, append).getChannel();\n        try {\n            inChannel.transferTo(0, inChannel.size(), outChannel);\n        } catch (IOException e) {\n            throw e;\n        } finally {\n            if (inChannel != null) inChannel.close();\n            if (outChannel != null) outChannel.close();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11046598",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private String hash(String clearPassword) {\n        if (salt == 0) return null;\n        MessageDigest md = null;\n        try {\n            md = MessageDigest.getInstance(\"SHA1\");\n        } catch (NoSuchAlgorithmException e) {\n            throw new AssertionError(\"Can't find the SHA1 algorithm in the java.security package\");\n        }\n        String saltString = String.valueOf(salt);\n        md.update(saltString.getBytes());\n        md.update(clearPassword.getBytes());\n        byte[] digestBytes = md.digest();\n        StringBuffer digestSB = new StringBuffer();\n        for (int i = 0; i < digestBytes.length; i++) {\n            int lowNibble = digestBytes[i] & 0x0f;\n            int highNibble = (digestBytes[i] >> 4) & 0x0f;\n            digestSB.append(Integer.toHexString(highNibble));\n            digestSB.append(Integer.toHexString(lowNibble));\n        }\n        String digestStr = digestSB.toString();\n        return digestStr;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11048469",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String getContents(String urlStr) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String getContents(String urlStr) throws Exception {\n        String contents = \"\";\n        URL url = new URL(urlStr);\n        URLConnection openConnection = url.openConnection();\n        final char[] buffer = new char[1024 * 1024];\n        StringBuilder out = new StringBuilder();\n        Reader in = new InputStreamReader(openConnection.getInputStream(), \"UTF-8\");\n        int read;\n        do {\n            read = in.read(buffer, 0, buffer.length);\n            if (read > 0) {\n                out.append(buffer, 0, read);\n            }\n        } while (read >= 0);\n        contents = out.toString();\n        return contents;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11048470",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String download(String urlStr, String folder, String title) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String download(String urlStr, String folder, String title) {\n        String result = \"\";\n        try {\n            long startTime = System.currentTimeMillis();\n            URL url = new URL(urlStr);\n            url.openConnection();\n            InputStream reader = url.openStream();\n            FileOutputStream writer = new FileOutputStream(folder + File.separator + title);\n            byte[] buffer = new byte[1024 * 1024];\n            int totalBytesRead = 0;\n            int bytesRead = 0;\n            while ((bytesRead = reader.read(buffer)) > 0) {\n                writer.write(buffer, 0, bytesRead);\n                buffer = new byte[153600];\n                totalBytesRead += bytesRead;\n            }\n            long endTime = System.currentTimeMillis();\n            result = \"Done. \" + (new Integer(totalBytesRead).toString()) + \" bytes read (\" + (new Long(endTime - startTime).toString()) + \" millseconds).\\n\";\n            writer.close();\n            reader.close();\n        } catch (Exception e) {\n            result = \"Can not download. \" + folder + File.separator + title + \":\\n\" + e.getMessage();\n        }\n        return result;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11049257",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String generate(boolean secure, boolean sep) throws UnknownHostException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String generate(boolean secure, boolean sep) throws UnknownHostException {\n        MessageDigest messagedigest;\n        StringBuilder stringbuffer = new StringBuilder();\n        try {\n            messagedigest = MessageDigest.getInstance(\"MD5\");\n        } catch (NoSuchAlgorithmException nosuchalgorithmexception) {\n            throw new RuntimeException(nosuchalgorithmexception);\n        }\n        StringBuffer stringbuffer2;\n        InetAddress inetaddress = InetAddress.getLocalHost();\n        long l = System.currentTimeMillis();\n        long l1 = 0L;\n        if (secure) l1 = _secureRand.nextLong(); else l1 = _rand.nextLong();\n        stringbuffer.append(inetaddress.toString());\n        stringbuffer.append(\":\");\n        stringbuffer.append(Long.toString(l));\n        stringbuffer.append(\":\");\n        stringbuffer.append(Long.toString(l1));\n        messagedigest.update(stringbuffer.toString().getBytes());\n        byte abyte0[] = messagedigest.digest();\n        StringBuffer stringbuffer1 = new StringBuffer();\n        for (int i = 0; i < abyte0.length; i++) {\n            int j = abyte0[i] & 0xff;\n            if (j < 16) stringbuffer1.append('0');\n            stringbuffer1.append(Integer.toHexString(j));\n        }\n        String s = stringbuffer1.toString();\n        stringbuffer2 = new StringBuffer();\n        if (sep) {\n            stringbuffer2.append(s.substring(0, 8));\n            stringbuffer2.append(\"-\");\n            stringbuffer2.append(s.substring(8, 12));\n            stringbuffer2.append(\"-\");\n            stringbuffer2.append(s.substring(12, 16));\n            stringbuffer2.append(\"-\");\n            stringbuffer2.append(s.substring(16, 20));\n            stringbuffer2.append(\"-\");\n            stringbuffer2.append(s.substring(20));\n            return stringbuffer2.toString();\n        } else {\n            return s;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11050195",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void writeFile(File file, String fileName) {\n        try {\n            FileInputStream fin = new FileInputStream(file);\n            FileOutputStream fout = new FileOutputStream(dirTableModel.getDirectory().getAbsolutePath() + File.separator + fileName);\n            int val;\n            while ((val = fin.read()) != -1) fout.write(val);\n            fin.close();\n            fout.close();\n            dirTableModel.reset();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11063162",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic int getResponseCode(URI uri) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public int getResponseCode(URI uri) {\n        int response = -1;\n        try {\n            URL url = uri.toURL();\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n            response = connection.getResponseCode();\n        } catch (MalformedURLException m) {\n            throw new MalformedURLException(\"URL not correct\");\n        } catch (IOException e) {\n            throw new IOException(\"can open connection\");\n        } finally {\n            return response;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11066054",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static void copyFile(File src, File dest, int bufSize, boolean force) throws IOException {\n        if (dest.exists()) {\n            if (force) {\n                dest.delete();\n            } else {\n                throw new IOException(\"Cannot overwrite existing file: \" + dest.getName());\n            }\n        }\n        byte[] buffer = new byte[bufSize];\n        int read = 0;\n        InputStream in = null;\n        OutputStream out = null;\n        try {\n            in = new FileInputStream(src);\n            out = new FileOutputStream(dest);\n            while (true) {\n                read = in.read(buffer);\n                if (read == -1) {\n                    break;\n                }\n                out.write(buffer, 0, read);\n            }\n        } finally {\n            if (in != null) {\n                try {\n                    in.close();\n                } finally {\n                    if (out != null) {\n                        out.close();\n                    }\n                }\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11066055",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static void copy(String fromFileName, String toFileName) throws IOException {\n        File fromFile = new File(fromFileName);\n        File toFile = new File(toFileName);\n        if (!fromFile.exists()) throw new IOException(\"FileCopy: \" + \"no such source file: \" + fromFileName);\n        if (!fromFile.isFile()) throw new IOException(\"FileCopy: \" + \"can't copy directory: \" + fromFileName);\n        if (!fromFile.canRead()) throw new IOException(\"FileCopy: \" + \"source file is unreadable: \" + fromFileName);\n        if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());\n        if (toFile.exists()) {\n            if (!toFile.canWrite()) throw new IOException(\"FileCopy: destination file is unwriteable: \" + toFileName);\n            System.out.flush();\n            BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n            String response = in.readLine();\n            if (!response.equals(\"Y\") && !response.equals(\"y\")) throw new IOException(\"FileCopy: existing file was not overwritten.\");\n        } else {\n            String parent = toFile.getParent();\n            if (parent == null) parent = System.getProperty(\"user.dir\");\n            File dir = new File(parent);\n            if (!dir.exists()) throw new IOException(\"FileCopy: \" + \"destination directory doesn't exist: \" + parent);\n            if (dir.isFile()) throw new IOException(\"FileCopy: \" + \"destination is not a directory: \" + parent);\n            if (!dir.canWrite()) throw new IOException(\"FileCopy: \" + \"destination directory is unwriteable: \" + parent);\n        }\n        FileInputStream from = null;\n        FileOutputStream to = null;\n        try {\n            from = new FileInputStream(fromFile);\n            to = new FileOutputStream(toFile);\n            byte[] buffer = new byte[4096];\n            int bytesRead;\n            while ((bytesRead = from.read(buffer)) != -1) to.write(buffer, 0, bytesRead);\n        } finally {\n            if (from != null) try {\n                from.close();\n            } catch (IOException e) {\n                ;\n            }\n            if (to != null) try {\n                to.close();\n            } catch (IOException e) {\n                ;\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11066056",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copyFile(File in, File out) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copyFile(File in, File out) throws IOException {\n        FileChannel inChannel = new FileInputStream(in).getChannel();\n        FileChannel outChannel = new FileOutputStream(out).getChannel();\n        try {\n            inChannel.transferTo(0, inChannel.size(), outChannel);\n        } catch (IOException e) {\n            throw e;\n        } finally {\n            if (inChannel != null) inChannel.close();\n            if (outChannel != null) outChannel.close();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11070888",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copyFile(File file, File dest_file) throws FileNotFoundException, IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copyFile(File file, File dest_file) throws FileNotFoundException, IOException {\n        DataInputStream in = new DataInputStream(new BufferedInputStream(new FileInputStream(file)));\n        DataOutputStream out = new DataOutputStream(new BufferedOutputStream(new FileOutputStream(dest_file)));\n        byte[] buffer = new byte[1024];\n        int read;\n        while ((read = in.read(buffer)) > 0) {\n            out.write(buffer, 0, read);\n        }\n        in.close();\n        out.close();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11073250",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "protected void loadText(final Element elem) {\n        final String urlAttr = elem.getAttributeValue(\"url\");\n        if (urlAttr != null) {\n            String result = \"\";\n            try {\n                final URL url = new URL(DatabaseViewerManager.baseURL, urlAttr);\n                final BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\n                String line = reader.readLine();\n                while (line != null) {\n                    result += line + \"\\n\";\n                    line = reader.readLine();\n                }\n                elem.addContent(result);\n                elem.removeAttribute(\"url\");\n            } catch (final Exception e) {\n                throw new RuntimeException(\"Could not insert text template for database viewer from file\", e);\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11075647",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void testWriteModel() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Test\n    public void testWriteModel() {\n        Model model = new Model();\n        model.setName(\"MY_MODEL1\");\n        Stereotype st1 = new Stereotype();\n        st1.setName(\"Pirulito1\");\n        PackageObject p1 = new PackageObject(\"p1\");\n        ClassType type1 = new ClassType(\"Class1\");\n        type1.setStereotype(st1);\n        type1.addMethod(new Method(\"doSomething\"));\n        p1.add(type1);\n        ClassType type2 = new ClassType(\"Class2\");\n        Method m2 = new Method(\"doSomethingElse\");\n        m2.setType(type1);\n        type2.addMethod(m2);\n        p1.add(type2);\n        Generalization g = new Generalization();\n        g.setSource(type1);\n        g.setTarget(type1);\n        p1.add(g);\n        model.add(p1);\n        ModelWriter writer = new ModelWriter();\n        try {\n            File modelFile = new File(\"target\", \"test.model\");\n            writer.write(model, modelFile);\n            File xmlFile = new File(\"target\", \"test.xml\");\n            xmlFile.createNewFile();\n            IOUtils.copy(new GZIPInputStream(new FileInputStream(modelFile)), new FileOutputStream(xmlFile));\n        } catch (IOException e) {\n            log.error(e.getMessage(), e);\n            Assert.fail(e.getMessage());\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11075914",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic InputStream open(String filename) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public InputStream open(String filename) throws IOException {\n        URL url = TemplateLoader.resolveURL(\"cms/\" + filename);\n        if (url != null) return url.openStream();\n        url = TemplateLoader.resolveURL(filename);\n        if (url != null) return url.openStream();\n        return null;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11078985",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void run() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void run() {\n        OutputStream out = null;\n        InputStream in = null;\n        boolean success = false;\n        String absoluteFileName = \"\";\n        try {\n            String fileName = getFileName(softwareLocation);\n            File downloadFolder = new File(Properties.downloadFolder);\n            if (downloadFolder.exists()) {\n                if (downloadFolder.isDirectory()) {\n                    fileName = downloadFolder.getPath() + File.separator + fileName;\n                }\n            } else {\n                downloadFolder.mkdir();\n                fileName = downloadFolder.getPath() + File.separator + fileName;\n            }\n            File softwareFile = new File(fileName);\n            absoluteFileName = softwareFile.getAbsolutePath();\n            if (softwareFile.exists() && softwareFile.length() == softwareSize) {\n                XohmLogger.debugPrintln(\"Software file already exists. Exiting...\");\n                listener.downloadComplete(true, softwareName, absoluteFileName);\n                return;\n            } else {\n                try {\n                    File[] oldFiles = downloadFolder.listFiles();\n                    for (int i = 0; i < oldFiles.length; i++) {\n                        oldFiles[i].delete();\n                    }\n                } catch (Exception ex) {\n                }\n            }\n            File softwareTempFile = File.createTempFile(\"XOHMCM\", null);\n            URL url = new URL(softwareLocation);\n            out = new BufferedOutputStream(new FileOutputStream(softwareTempFile));\n            URLConnection connection = url.openConnection();\n            in = connection.getInputStream();\n            listener.downloadStarted(softwareName);\n            byte[] buffer = new byte[1024];\n            int numRead;\n            long numWritten = 0;\n            while ((numRead = in.read(buffer)) != -1) {\n                out.write(buffer, 0, numRead);\n                numWritten += numRead;\n                listener.downloadProgressNotification(softwareName, numWritten, softwareSize);\n            }\n            out.flush();\n            out.close();\n            in.close();\n            if (copyFile(softwareTempFile, softwareFile)) {\n                XohmLogger.debugPrintln(\"Download complete: \" + absoluteFileName + \"\\t\" + numWritten);\n                success = true;\n                softwareTempFile.delete();\n            }\n        } catch (Exception ex) {\n            XohmLogger.warningPrintln(\"Software Update download failed - \" + ex.getMessage(), null, null);\n            ex.printStackTrace();\n        }\n        listener.downloadComplete(success, softwareName, absoluteFileName);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11081583",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void rename(String virtualWiki, String oldTopicName, String newTopicName) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void rename(String virtualWiki, String oldTopicName, String newTopicName) throws Exception {\n        Connection conn = DatabaseConnection.getConnection();\n        try {\n            boolean commit = false;\n            conn.setAutoCommit(false);\n            try {\n                PreparedStatement pstm = conn.prepareStatement(STATEMENT_RENAME);\n                try {\n                    pstm.setString(1, newTopicName);\n                    pstm.setString(2, oldTopicName);\n                    pstm.setString(3, virtualWiki);\n                    if (pstm.executeUpdate() == 0) throw new SQLException(\"Unable to rename topic \" + oldTopicName + \" on wiki \" + virtualWiki);\n                } finally {\n                    pstm.close();\n                }\n                doUnlockTopic(conn, virtualWiki, oldTopicName);\n                doRenameAllVersions(conn, virtualWiki, oldTopicName, newTopicName);\n                commit = true;\n            } finally {\n                if (commit) conn.commit(); else conn.rollback();\n            }\n        } finally {\n            conn.close();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11081922",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void testAuthentication() throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void testAuthentication() throws Exception {\n        String host = \"localhost\";\n        int port = 8080;\n        URL url = new URL(\"http://\" + host + \":\" + port + \"/\");\n        URLConnection connection = url.openConnection();\n        InputStream in = connection.getInputStream();\n        in.close();\n        server.invoke(name, \"stop\", null, null);\n        server.setAttribute(name, new Attribute(\"AuthenticationMethod\", \"basic\"));\n        server.invoke(name, \"addAuthorization\", new Object[] { \"openjmx\", \"openjmx\" }, new String[] { \"java.lang.String\", \"java.lang.String\" });\n        server.invoke(name, \"start\", null, null);\n        url = new URL(\"http://\" + host + \":\" + port + \"/\");\n        connection = url.openConnection();\n        in = connection.getInputStream();\n        in.close();\n        assertEquals(((HttpURLConnection) connection).getResponseCode(), 401);\n        url = new URL(\"http://\" + host + \":\" + port + \"/\");\n        connection = url.openConnection();\n        connection.setRequestProperty(\"Authorization\", \"basic b3BlbmpteDpvcGVuam14\");\n        in = connection.getInputStream();\n        in.close();\n        server.invoke(name, \"stop\", null, null);\n        server.setAttribute(name, new Attribute(\"AuthenticationMethod\", \"none\"));\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11082670",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic List<Event> lookupFutureEvents(String groupIdentifier) throws GtugsException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@SuppressWarnings(\"unchecked\")\n    public List<Event> lookupFutureEvents(String groupIdentifier) throws GtugsException {\n        StringBuilder json = new StringBuilder();\n        String requestUrl = \"http://api.meetup.com/events.json/?group_urlname=\" + groupIdentifier + \"&key=\" + key;\n        try {\n            URL url = new URL(requestUrl.toString());\n            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n            String inputLine;\n            while ((inputLine = in.readLine()) != null) {\n                json.append(inputLine);\n            }\n            in.close();\n        } catch (IOException e) {\n            throw new GtugsException(e);\n        }\n        List<Event> events = new ArrayList<Event>();\n        JSONObject jsonObj = (JSONObject) JSONValue.parse(json.toString());\n        JSONArray results = (JSONArray) jsonObj.get(\"results\");\n        for (int i = 0; i < results.size(); i++) {\n            JSONObject result = (JSONObject) results.get(i);\n            Event e = new Event();\n            e.setAttendeeCount(Integer.parseInt((String) result.get(\"rsvpcount\")));\n            e.setCity((String) result.get(\"venue_city\"));\n            e.setDescription((String) result.get(\"description\"));\n            e.setLatitude(Double.parseDouble((String) result.get(\"venue_lat\")));\n            e.setLongitude(Double.parseDouble((String) result.get(\"venue_lon\")));\n            e.setName((String) result.get(\"name\"));\n            Date myDate = null;\n            String time = (String) result.get(\"time\");\n            try {\n                myDate = meetupDateFormat.parse(time);\n                e.setStartTime(timeDateFormat.format(myDate));\n                e.setEndTime(timeDateFormat.format(myDate));\n                e.setStartDate(myDate);\n                e.setEndDate(myDate);\n                String tz = tzDateFormat.format(myDate);\n                if (tz != null && tz.startsWith(\"+\")) {\n                    tz = tz.substring(1);\n                }\n                e.setTimeZone(Integer.toString(Integer.parseInt(tz) / 100));\n            } catch (ParseException ex) {\n                ex.printStackTrace();\n                continue;\n            }\n            e.setState((String) result.get(\"venue_state\"));\n            StringBuilder addressBuilder = new StringBuilder();\n            if (result.get(\"venue_address1\") != null) {\n                addressBuilder.append((String) result.get(\"venue_address1\") + \" \");\n            }\n            if (result.get(\"venue_address2\") != null) {\n                addressBuilder.append((String) result.get(\"venue_address2\") + \" \");\n            }\n            if (result.get(\"venue_address3\") != null) {\n                addressBuilder.append((String) result.get(\"venue_address3\") + \" \");\n            }\n            if (result.get(\"venue_address4\") != null) {\n                addressBuilder.append((String) result.get(\"venue_address4\"));\n            }\n            e.setStreetAddress(addressBuilder.toString().trim());\n            e.setZipCode((String) result.get(\"venue_zip\"));\n            e.setUrl((String) result.get(\"event_url\"));\n            events.add(e);\n        }\n        return events;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11088622",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copyFile(File sourceFile, File destFile) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copyFile(File sourceFile, File destFile) throws IOException {\n        InputStream is = null;\n        OutputStream os = null;\n        try {\n            is = new FileInputStream(sourceFile);\n            os = new FileOutputStream(destFile);\n            IOUtils.copy(is, os);\n        } finally {\n            try {\n                if (os != null) os.close();\n            } catch (Exception e) {\n            }\n            try {\n                if (is != null) is.close();\n            } catch (Exception e) {\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11088628",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copyWithClose(InputStream is, OutputStream os) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copyWithClose(InputStream is, OutputStream os) throws IOException {\n        try {\n            IOUtils.copy(is, os);\n        } catch (IOException ioe) {\n            try {\n                if (os != null) os.close();\n            } catch (Exception e) {\n            }\n            try {\n                if (is != null) is.close();\n            } catch (Exception e) {\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11090448",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static Object fetchCached(String address, int hours) throws MalformedURLException, IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static Object fetchCached(String address, int hours) throws MalformedURLException, IOException {\n        String cacheName = md5(address);\n        checkAndCreateDirectoryIfNeeded();\n        File r = new File(CACHELOCATION + cacheName);\n        Date d = new Date();\n        long limit = d.getTime() - (1000 * 60 * 60 * hours);\n        if (!r.exists() || (hours != -1 && r.lastModified() < limit)) {\n            InputStream is = (InputStream) fetch(address);\n            FileOutputStream fos = new FileOutputStream(CACHELOCATION + cacheName);\n            int nextChar;\n            while ((nextChar = is.read()) != -1) fos.write((char) nextChar);\n            fos.flush();\n        }\n        FileInputStream fis = new FileInputStream(CACHELOCATION + cacheName);\n        return fis;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11090449",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static Drawable fetchCachedDrawable(String url) throws MalformedURLException, IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static Drawable fetchCachedDrawable(String url) throws MalformedURLException, IOException {\n        Log.d(LOG_TAG, \"Fetching cached : \" + url);\n        String cacheName = md5(url);\n        checkAndCreateDirectoryIfNeeded();\n        File r = new File(CACHELOCATION + cacheName);\n        if (!r.exists()) {\n            InputStream is = (InputStream) fetch(url);\n            FileOutputStream fos = new FileOutputStream(CACHELOCATION + cacheName);\n            int nextChar;\n            while ((nextChar = is.read()) != -1) fos.write((char) nextChar);\n            fos.flush();\n        }\n        FileInputStream fis = new FileInputStream(CACHELOCATION + cacheName);\n        Drawable d = Drawable.createFromStream(fis, \"src\");\n        return d;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11090451",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String md5(String str) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String md5(String str) {\n        try {\n            MessageDigest digest = java.security.MessageDigest.getInstance(\"MD5\");\n            digest.update(str.getBytes());\n            byte messageDigest[] = digest.digest();\n            StringBuffer hexString = new StringBuffer();\n            for (int i = 0; i < messageDigest.length; i++) hexString.append(Integer.toHexString(0xFF & messageDigest[i]));\n            String md5 = hexString.toString();\n            Log.v(FileUtil.class.getName(), md5);\n            return md5;\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n        return \"\";\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11092394",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void copy(final File file) throws IOException {\n        String targetFilename = targetFilename(file);\n        FileInputStream fis = new FileInputStream(file);\n        try {\n            FileChannel source = fis.getChannel();\n            try {\n                FileOutputStream fos = new FileOutputStream(targetFilename);\n                try {\n                    FileChannel target = fos.getChannel();\n                    try {\n                        target.transferFrom(source, 0, source.size());\n                    } finally {\n                        target.close();\n                    }\n                } finally {\n                    fos.close();\n                }\n            } finally {\n                source.close();\n            }\n        } finally {\n            fis.close();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11095249",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void run() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void run() {\n        InputStreamReader in = null;\n        OutputStreamWriter out = null;\n        URL url = null;\n        File net_file = null;\n        long in_length = 0;\n        progress_bar.setValue(0);\n        progress_bar.setString(\"connecting!\");\n        progress_bar.setStringPainted(true);\n        if (sync_host_path_name.length() > 0) {\n            try {\n                try {\n                    if (protocol == Settings.protFTP) {\n                        url = new URL(\"ftp://\" + user_name + \":\" + password + \"@\" + sync_host_path_name);\n                        URLConnection connection = url.openConnection();\n                        in = new InputStreamReader(connection.getInputStream());\n                        in_length = connection.getContentLength();\n                    } else {\n                        net_file = new File(sync_host_path_name);\n                        in = new InputStreamReader(new FileInputStream(net_file), \"US-ASCII\");\n                        in_length = net_file.length();\n                    }\n                    progress_bar.setString(\"synchronising!\");\n                    EventMemory.get_instance(null).import_vCalendar(in, Math.max(in_length, 1), true, progress_bar);\n                    in.close();\n                } catch (Exception x) {\n                    progress_bar.setString(x.getMessage());\n                }\n                progress_bar.setValue(0);\n                progress_bar.setString(\"connecting!\");\n                if (protocol == Settings.protFTP) {\n                    URLConnection connection = url.openConnection();\n                    connection.setDoOutput(true);\n                    out = new OutputStreamWriter(connection.getOutputStream(), \"US-ASCII\");\n                } else if (protocol == Settings.protFile) {\n                    out = new OutputStreamWriter(new FileOutputStream(net_file), \"US-ASCII\");\n                }\n                progress_bar.setString(\"writing!\");\n                int[] i = new int[EventMemory.get_instance(null).get_size()];\n                for (int k = 0; k < i.length; k++) {\n                    i[k] = k;\n                }\n                progress_bar.setStringPainted(true);\n                EventMemory.get_instance(null).export_vCalendar(out, i, true, progress_bar, true);\n                out.close();\n                sync_dialog.sync_panel.unlock_input();\n                sync_dialog.dispose();\n            } catch (Exception e) {\n                progress_bar.setString(e.getMessage());\n                sync_dialog.sync_panel.unlock_input();\n            }\n        } else {\n            progress_bar.setString(\"enter a valid URL!\");\n            sync_dialog.sync_panel.unlock_input();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01109960",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void run() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void run() {\n        logger.info(\"downloading '\" + url.toString() + \"' to: \" + dstFile.getAbsolutePath());\n        Preferences prefs = Preferences.userRoot().node(\"gvsig.downloader\");\n        int timeout = prefs.getInt(\"timeout\", 60000);\n        DataOutputStream dos;\n        try {\n            DataInputStream is;\n            OutputStreamWriter os = null;\n            HttpURLConnection connection = null;\n            if (url.getProtocol().equals(\"https\")) {\n                disableHttsValidation();\n            }\n            connection = (HttpURLConnection) url.openConnection();\n            connection.setConnectTimeout(timeout);\n            if (data != null) {\n                connection.setRequestProperty(\"SOAPAction\", \"post\");\n                connection.setRequestMethod(\"POST\");\n                connection.setDoOutput(true);\n                connection.setRequestProperty(\"Content-Type\", \"text/xml; charset=UTF-8\");\n                os = new OutputStreamWriter(connection.getOutputStream());\n                os.write(data);\n                os.flush();\n                is = new DataInputStream(connection.getInputStream());\n            } else {\n                is = new DataInputStream(url.openStream());\n            }\n            dos = new DataOutputStream(new BufferedOutputStream(new FileOutputStream(dstFile)));\n            byte[] buffer = new byte[1024 * 4];\n            long readed = 0;\n            for (int i = is.read(buffer); !Utilities.getCanceled(groupID) && i > 0; i = is.read(buffer)) {\n                dos.write(buffer, 0, i);\n                readed += i;\n            }\n            if (os != null) {\n                os.close();\n            }\n            dos.close();\n            is.close();\n            is = null;\n            dos = null;\n            if (Utilities.getCanceled(groupID)) {\n                logger.warning(\"[RemoteServices] '\" + url + \"' CANCELED.\");\n                dstFile.delete();\n                dstFile = null;\n            } else {\n                Utilities.addDownloadedURL(url, dstFile.getAbsolutePath());\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n            Utilities.downloadException = e;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11101252",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void handler(Map<String, Match> result, TargetPage target) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n    public void handler(Map<String, Match> result, TargetPage target) {\n        List<String> lines = new LinkedList<String>();\n        List<String> page = new LinkedList<String>();\n        try {\n            URL url = new URL(target.getUrl());\n            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream(), \"utf-8\"));\n            String line = null;\n            while ((line = reader.readLine()) != null) {\n                page.add(line);\n            }\n            reader.close();\n        } catch (MalformedURLException e) {\n        } catch (IOException e) {\n        }\n        try {\n            result.put(\"27 svk par fix\", MatchEventFactory.getFix27());\n            result.put(\"41 svk ita fix\", MatchEventFactory.getFix41());\n            result.put(\"01 rsa mex\", MatchEventFactory.get01());\n            result.put(\"02 uru fra\", MatchEventFactory.get02());\n            result.put(\"04 kor gre\", MatchEventFactory.get04());\n            result.put(\"03 arg ngr\", MatchEventFactory.get03());\n            result.put(\"05 eng usa\", MatchEventFactory.get05());\n            result.put(\"06 alg slo\", MatchEventFactory.get06());\n            result.put(\"08 scg gha\", MatchEventFactory.get08());\n            result.put(\"07 ger aus\", MatchEventFactory.get07());\n            result.put(\"09 end den\", MatchEventFactory.get09());\n            result.put(\"10 jpn cmr\", MatchEventFactory.get10());\n            result.put(\"11 ita par\", MatchEventFactory.get11());\n            result.put(\"12 nzl svk\", MatchEventFactory.get12());\n            result.put(\"13 civ por\", MatchEventFactory.get13());\n            result.put(\"14 bra prk\", MatchEventFactory.get14());\n            result.put(\"15 hon chi\", MatchEventFactory.get15());\n            result.put(\"16 esp sui\", MatchEventFactory.get16());\n            result.put(\"17 rsa uru\", MatchEventFactory.get17());\n            result.put(\"20 arg kor\", MatchEventFactory.get20());\n            result.put(\"19 gre ngr\", MatchEventFactory.get19());\n            result.put(\"18 fra mex\", MatchEventFactory.get18());\n            result.put(\"21 ger scg\", MatchEventFactory.get21());\n            result.put(\"22 slo usa\", MatchEventFactory.get22());\n            result.put(\"23 eng alg\", MatchEventFactory.get23());\n            result.put(\"25 end jpn\", MatchEventFactory.get25());\n            result.put(\"24 gha aus\", MatchEventFactory.get24());\n            result.put(\"26 cmr den\", MatchEventFactory.get26());\n            result.put(\"27 slo par\", MatchEventFactory.get27());\n            result.put(\"28 ita nzl\", MatchEventFactory.get28());\n            result.put(\"29 bra civ\", MatchEventFactory.get29());\n            result.put(\"30 por prk\", MatchEventFactory.get30());\n            result.put(\"31 chi sui\", MatchEventFactory.get31());\n            result.put(\"32 esp hon\", MatchEventFactory.get32());\n            result.put(\"34 fra rsa\", MatchEventFactory.get34());\n            result.put(\"33 mex uru\", MatchEventFactory.get33());\n            result.put(\"35 ngr kor\", MatchEventFactory.get35());\n            result.put(\"36 gre arg\", MatchEventFactory.get36());\n            result.put(\"38 usa alg\", MatchEventFactory.get38());\n            result.put(\"37 slo eng\", MatchEventFactory.get37());\n            result.put(\"39 gha ger\", MatchEventFactory.get39());\n            result.put(\"40 aus scg\", MatchEventFactory.get40());\n            result.put(\"42 par nzl\", MatchEventFactory.get42());\n            result.put(\"41 slo ita\", MatchEventFactory.get41());\n            result.put(\"44 cmr ned\", MatchEventFactory.get44());\n            result.put(\"43 den jpn\", MatchEventFactory.get43());\n            result.put(\"45 por bra\", MatchEventFactory.get45());\n            result.put(\"46 prk civ\", MatchEventFactory.get46());\n            result.put(\"47 chi esp\", MatchEventFactory.get47());\n            result.put(\"48 sui hon\", MatchEventFactory.get48());\n            result.put(\"49 uru kor\", MatchEventFactory.get49Team());\n            result.put(\"50 usa gha\", MatchEventFactory.get50Team());\n            result.put(\"51 ger eng\", MatchEventFactory.get51Team());\n            result.put(\"52 arg mex\", MatchEventFactory.get52Team());\n            result.put(\"53 ned svk\", MatchEventFactory.get53Team());\n            result.put(\"54 bra chi\", MatchEventFactory.get54Team());\n            result.put(\"55 par jpn\", MatchEventFactory.get55Team());\n            result.put(\"56 esp por\", MatchEventFactory.get56Team());\n            result.put(\"57 ned bra\", MatchEventFactory.get57Team());\n            result.put(\"58 uru gha\", MatchEventFactory.get58Team());\n            result.put(\"59 arg ger\", MatchEventFactory.get59Team());\n            result.put(\"49\", MatchEventFactory.get49());\n            result.put(\"50\", MatchEventFactory.get50());\n            result.put(\"51\", MatchEventFactory.get51());\n            result.put(\"52\", MatchEventFactory.get52());\n            result.put(\"53\", MatchEventFactory.get53());\n            result.put(\"54\", MatchEventFactory.get54());\n            this.stage2MatchHandler(\"318295\", \"55\", \"2010-06-29 22:30\", result);\n            this.stage2MatchHandler(\"318296\", \"56\", \"2010-06-30 02:30\", result);\n            this.stage2MatchHandler(\"318297\", \"57\", \"2010-07-02 22:00\", result);\n            this.stage2MatchHandler(\"318298\", \"58\", \"2010-07-03 02:30\", result);\n            this.stage2MatchHandler(\"318299\", \"59\", \"2010-07-03 22:00\", result);\n            this.stage2MatchHandler(\"318300\", \"60\", \"2010-07-04 02:30\", result);\n            this.stage2MatchHandler(\"318301\", \"61\", \"2010-07-07 02:30\", result);\n            this.stage2MatchHandler(\"318302\", \"62\", \"2010-07-08 02:30\", result);\n            this.stage2MatchHandler(\"318303\", \"63\", \"2010-07-11 02:30\", result);\n            this.stage2MatchHandler(\"318304\", \"64\", \"2010-07-12 02:30\", result);\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11101256",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void innerJob(String inFrom, String inTo, String line, Map<String, Match> result) throws UnsupportedEncodingException, IOException {\n        String subline = line.substring(line.indexOf(inTo) + inTo.length());\n        String tempStr = subline.substring(subline.indexOf(inFrom) + inFrom.length(), subline.indexOf(inTo));\n        String inURL = \"http://goal.2010worldcup.163.com/data/match/general/\" + tempStr.substring(tempStr.indexOf(\"/\") + 1) + \".xml\";\n        URL url = new URL(inURL);\n        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream(), \"utf-8\"));\n        String inLine = null;\n        String scoreFrom = \"score=\\\"\";\n        String homeTo = \"\\\" side=\\\"Home\";\n        String awayTo = \"\\\" side=\\\"Away\";\n        String goalInclud = \"Stat\";\n        String playerFrom = \"playerId=\\\"\";\n        String playerTo = \"\\\" position=\";\n        String timeFrom = \"time=\\\"\";\n        String timeTo = \"\\\" period\";\n        String teamFinish = \"</Team>\";\n        boolean homeStart = false;\n        boolean awayStart = false;\n        while ((inLine = reader.readLine()) != null) {\n            if (inLine.indexOf(teamFinish) != -1) {\n                homeStart = false;\n                awayStart = false;\n            }\n            if (inLine.indexOf(homeTo) != -1) {\n                result.get(key).setHomeScore(inLine.substring(inLine.indexOf(scoreFrom) + scoreFrom.length(), inLine.indexOf(homeTo)));\n                homeStart = true;\n            }\n            if (homeStart && inLine.indexOf(goalInclud) != -1) {\n                MatchEvent me = new MatchEvent();\n                me.setPlayerName(getPlayerName(inLine.substring(inLine.indexOf(playerFrom) + playerFrom.length(), inLine.indexOf(playerTo))));\n                me.setTime(inLine.substring(inLine.indexOf(timeFrom) + timeFrom.length(), inLine.indexOf(timeTo)));\n                result.get(key).getHomeEvents().add(me);\n            }\n            if (inLine.indexOf(awayTo) != -1) {\n                result.get(key).setAwayScore(inLine.substring(inLine.indexOf(scoreFrom) + scoreFrom.length(), inLine.indexOf(awayTo)));\n                awayStart = true;\n            }\n            if (awayStart && inLine.indexOf(goalInclud) != -1) {\n                MatchEvent me = new MatchEvent();\n                me.setPlayerName(getPlayerName(inLine.substring(inLine.indexOf(playerFrom) + playerFrom.length(), inLine.indexOf(playerTo))));\n                me.setTime(inLine.substring(inLine.indexOf(timeFrom) + timeFrom.length(), inLine.indexOf(timeTo)));\n                result.get(key).getAwayEvents().add(me);\n            }\n        }\n        reader.close();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11101257",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void innerJob(String inURL, String matchId, Map<String, Match> result) throws UnsupportedEncodingException, IOException {\n        URL url = new URL(inURL);\n        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream(), \"utf-8\"));\n        String inLine = null;\n        String scoreFrom = \"score=\\\"\";\n        String homeTo = \"\\\" side=\\\"Home\";\n        String awayTo = \"\\\" side=\\\"Away\";\n        String goalInclud = \"Stat\";\n        String playerFrom = \"playerId=\\\"\";\n        String playerTo = \"\\\" position=\";\n        String timeFrom = \"time=\\\"\";\n        String timeTo = \"\\\" period\";\n        String teamFinish = \"</Team>\";\n        boolean homeStart = false;\n        boolean awayStart = false;\n        while ((inLine = reader.readLine()) != null) {\n            if (inLine.indexOf(teamFinish) != -1) {\n                homeStart = false;\n                awayStart = false;\n            }\n            if (inLine.indexOf(homeTo) != -1) {\n                result.get(matchId).setHomeScore(inLine.substring(inLine.indexOf(scoreFrom) + scoreFrom.length(), inLine.indexOf(homeTo)));\n                homeStart = true;\n            }\n            if (homeStart && inLine.indexOf(goalInclud) != -1) {\n                MatchEvent me = new MatchEvent();\n                me.setPlayerName(getPlayerName(inLine.substring(inLine.indexOf(playerFrom) + playerFrom.length(), inLine.indexOf(playerTo))));\n                me.setTime(inLine.substring(inLine.indexOf(timeFrom) + timeFrom.length(), inLine.indexOf(timeTo)));\n                List<MatchEvent> mes = result.get(matchId).getHomeEvents();\n                boolean exist = false;\n                for (MatchEvent _me : mes) {\n                    if (_me.getPlayerName().equals(me.getPlayerName()) && _me.getTime().equals(me.getTime())) {\n                        exist = true;\n                        break;\n                    }\n                }\n                if (!exist) {\n                    mes.add(me);\n                }\n            }\n            if (inLine.indexOf(awayTo) != -1) {\n                result.get(matchId).setAwayScore(inLine.substring(inLine.indexOf(scoreFrom) + scoreFrom.length(), inLine.indexOf(awayTo)));\n                awayStart = true;\n            }\n            if (awayStart && inLine.indexOf(goalInclud) != -1) {\n                MatchEvent me = new MatchEvent();\n                me.setPlayerName(getPlayerName(inLine.substring(inLine.indexOf(playerFrom) + playerFrom.length(), inLine.indexOf(playerTo))));\n                me.setTime(inLine.substring(inLine.indexOf(timeFrom) + timeFrom.length(), inLine.indexOf(timeTo)));\n                List<MatchEvent> mes = result.get(matchId).getAwayEvents();\n                boolean exist = false;\n                for (MatchEvent _me : mes) {\n                    if (_me.getPlayerName().equals(me.getPlayerName()) && _me.getTime().equals(me.getTime())) {\n                        exist = true;\n                        break;\n                    }\n                }\n                if (!exist) {\n                    mes.add(me);\n                }\n            }\n        }\n        reader.close();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11101258",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private String getPlayerName(String id) throws UnsupportedEncodingException, IOException {\n        String result = \"\";\n        Map<String, String> players = (Map<String, String>) sc.getAttribute(\"players\");\n        if (players.containsKey(id)) {\n            result = players.get(id);\n            System.out.println(\"skip name:\" + result);\n        } else {\n            String palyerURL = \"http://goal.2010worldcup.163.com/player/\" + id + \".html\";\n            URL url = new URL(palyerURL);\n            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream(), \"utf-8\"));\n            String line = null;\n            String nameFrom = \"\u82f1\u6587\u540d:\";\n            String nameTo = \"</dd>\";\n            while ((line = reader.readLine()) != null) {\n                if (line.indexOf(nameFrom) != -1) {\n                    result = line.substring(line.indexOf(nameFrom) + nameFrom.length(), line.indexOf(nameTo));\n                    break;\n                }\n            }\n            reader.close();\n            players.put(id, result);\n        }\n        return result;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11103449",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void run() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n        public void run() {\n            try {\n                IOUtils.copy(_is, processOutStr);\n            } catch (final IOException ioe) {\n                proc.destroy();\n            } finally {\n                IOUtils.closeQuietly(_is);\n                IOUtils.closeQuietly(processOutStr);\n            }\n        }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11103539",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void compressFile(String filePath) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void compressFile(String filePath) {\n        String outPut = filePath + \".zip\";\n        try {\n            FileInputStream in = new FileInputStream(filePath);\n            GZIPOutputStream out = new GZIPOutputStream(new FileOutputStream(outPut));\n            byte[] buffer = new byte[4096];\n            int bytes_read;\n            while ((bytes_read = in.read(buffer)) != -1) out.write(buffer, 0, bytes_read);\n            in.close();\n            out.close();\n        } catch (Exception c) {\n            c.printStackTrace();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_00111060",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void load(URL urlin) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void load(URL urlin) throws IOException {\n        index = hs.getDoIndex();\n        loaded = false;\n        url = urlin;\n        int c, i;\n        htmlDocLength = 0;\n        HtmlReader in = new HtmlReader(new InputStreamReader(url.openStream(), charset));\n        try {\n            if (debug >= 2) System.out.print(\"Loading \" + urlin.toString() + \" ... \");\n            while ((c = in.read()) >= 0) {\n                htmlDoc[htmlDocLength++] = (char) (c);\n                if (htmlDocLength == htmlDocMaxLength) {\n                    char[] newHtmlDoc = new char[2 * htmlDocMaxLength];\n                    System.arraycopy(htmlDoc, 0, newHtmlDoc, 0, htmlDocMaxLength);\n                    htmlDocMaxLength = 2 * htmlDocMaxLength;\n                    htmlDoc = newHtmlDoc;\n                }\n            }\n            if (debug >= 2) System.out.println(\"done.\");\n        } catch (ArrayIndexOutOfBoundsException aioobe) {\n            if (debug >= 1) System.out.println(\"Error, reading file into memory (too big) - skipping \" + urlin.toString());\n            loaded = false;\n            return;\n        }\n        in.close();\n        fetchURLpos = 0;\n        dumpPos = 0;\n        dumpLastChar = SPACE;\n        loaded = true;\n        frameset = false;\n        titledone = false;\n        headdone = false;\n        checkhead = false;\n        checkbody = false;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11107871",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static Reader getReader(String fname) throws IOException {\n        InputStream is;\n        if (isUrl(fname)) {\n            URL url = new URL(fname);\n            is = url.openStream();\n        } else {\n            is = new FileInputStream(fname);\n        }\n        if (fname.endsWith(\".zip\")) {\n            is = new ZipInputStream(is);\n        } else if (fname.endsWith(\".gz\") || fname.endsWith(\".gzip\")) {\n            is = new GZIPInputStream(is);\n        }\n        return new InputStreamReader(is);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11108280",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String generateCode(String seed) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String generateCode(String seed) {\n        try {\n            Security.addProvider(new FNVProvider());\n            MessageDigest digest = MessageDigest.getInstance(\"FNV-1a\");\n            digest.update((seed + UUID.randomUUID().toString()).getBytes());\n            byte[] hash1 = digest.digest();\n            String sHash1 = \"m\" + (new String(LibraryBase64.encode(hash1))).replaceAll(\"=\", \"\");\n            return sHash1;\n        } catch (NoSuchAlgorithmException e) {\n            System.err.println(\"Internal error:\" + e.getMessage());\n            return null;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11113074",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void backupXML() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void backupXML() {\n        try {\n            TimeStamp timeStamp = new TimeStamp();\n            String fnameIn = this.fnameXML();\n            String pathBackup = this.pathXML + \"\\\\Backup\\\\\";\n            String fnameOut = fnameIn.substring(fnameIn.indexOf(this.fname), fnameIn.length());\n            fnameOut = fnameOut.substring(0, fnameOut.indexOf(\"xml\"));\n            fnameOut = pathBackup + fnameOut + timeStamp.now(\"yyyyMMdd-kkmmss\") + \".xml\";\n            System.out.println(\"fnameIn: \" + fnameIn);\n            System.out.println(\"fnameOut: \" + fnameOut);\n            FileChannel in = new FileInputStream(fnameIn).getChannel();\n            FileChannel out = new FileOutputStream(fnameOut).getChannel();\n            in.transferTo(0, in.size(), out);\n        } catch (Exception e) {\n            central.inform(\"ORM.backupXML: \" + e.toString());\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11117247",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "HttpURLConnection getHttpURLConnection(String bizDocToExecute, boolean doom, boolean cmt) {\n        StringBuffer servletURL = new StringBuffer();\n        servletURL.append(getBaseServletURL());\n        servletURL.append(\"?_BIZVIEW=\").append(bizDocToExecute);\n        if (doom) {\n            servletURL.append(\"&_DOOM=TRUE\");\n        }\n        if (cmt) {\n            servletURL.append(\"&_CMT=TRUE\");\n        }\n        Map<String, Object> inputParms = getInputParams();\n        if (inputParms != null) {\n            Set<Entry<String, Object>> entrySet = inputParms.entrySet();\n            for (Entry<String, Object> entry : entrySet) {\n                String name = entry.getKey();\n                String value = entry.getValue().toString();\n                servletURL.append(\"&\").append(name).append(\"=\").append(value);\n            }\n        }\n        HttpURLConnection connection = null;\n        try {\n            URL url = new URL(servletURL.toString());\n            connection = (HttpURLConnection) url.openConnection();\n        } catch (IOException e) {\n            Assert.fail(\"Failed to connect to the test servlet: \" + e);\n        }\n        return connection;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01111832",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void storeFieldMap(WorkingContent c, Connection conn) throws SQLException {\n        SQLDialect dialect = getDatabase().getSQLDialect();\n        if (TRANSACTIONS_ENABLED) {\n            conn.setAutoCommit(false);\n        }\n        try {\n            Object thisKey = c.getPrimaryKey();\n            deleteFieldContent(thisKey, conn);\n            PreparedStatement ps = null;\n            StructureItem nextItem;\n            Map fieldMap = c.getFieldMap();\n            String type;\n            Object value, siKey;\n            for (Iterator i = c.getStructure().getStructureItems().iterator(); i.hasNext(); ) {\n                nextItem = (StructureItem) i.next();\n                type = nextItem.getDataType().toUpperCase();\n                siKey = nextItem.getPrimaryKey();\n                value = fieldMap.get(nextItem.getName());\n                try {\n                    if (type.equals(StructureItem.DATE)) {\n                        ps = conn.prepareStatement(sqlConstants.get(\"INSERT_DATE_FIELD\"));\n                        ps.setObject(1, thisKey);\n                        ps.setObject(2, siKey);\n                        dialect.setDate(ps, 3, (Date) value);\n                        ps.executeUpdate();\n                    } else if (type.equals(StructureItem.INT) || type.equals(StructureItem.FLOAT) || type.equals(StructureItem.VARCHAR)) {\n                        ps = conn.prepareStatement(sqlConstants.get(\"INSERT_\" + type + \"_FIELD\"));\n                        ps.setObject(1, thisKey);\n                        ps.setObject(2, siKey);\n                        if (value != null) {\n                            ps.setObject(3, value);\n                        } else {\n                            int sqlType = Types.INTEGER;\n                            if (type.equals(StructureItem.FLOAT)) {\n                                sqlType = Types.FLOAT;\n                            } else if (type.equals(StructureItem.VARCHAR)) {\n                                sqlType = Types.VARCHAR;\n                            }\n                            ps.setNull(3, sqlType);\n                        }\n                        ps.executeUpdate();\n                    } else if (type.equals(StructureItem.TEXT)) {\n                        setTextField(c, siKey, (String) value, conn);\n                    }\n                    if (ps != null) {\n                        ps.close();\n                        ps = null;\n                    }\n                } finally {\n                    if (ps != null) ps.close();\n                }\n            }\n            if (TRANSACTIONS_ENABLED) {\n                conn.commit();\n            }\n        } catch (SQLException e) {\n            if (TRANSACTIONS_ENABLED) {\n                conn.rollback();\n            }\n            throw e;\n        } finally {\n            if (TRANSACTIONS_ENABLED) {\n                conn.setAutoCommit(true);\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11121668",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic String computeMD5(String string) throws ServiceException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public String computeMD5(String string) throws ServiceException {\n        try {\n            MessageDigest digest = MessageDigest.getInstance(\"md5\");\n            digest.reset();\n            digest.update(string.getBytes(Invoker.ENCODING));\n            return convertToHex(digest.digest());\n        } catch (NoSuchAlgorithmException exception) {\n            String message = \"Could not create properly the MD5 digest\";\n            log.error(message, exception);\n            throw new ServiceException(message, exception);\n        } catch (UnsupportedEncodingException exception) {\n            String message = \"Could not encode properly the MD5 digest\";\n            log.error(message, exception);\n            throw new ServiceException(message, exception);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11124886",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private URLConnection getURLConnection(String str) {\n        try {\n            if (isHttps) {\n                System.setProperty(\"java.protocol.handler.pkgs\", \"com.sun.net.ssl.internal.www.protocol\");\n                if (isProxy) {\n                    System.setProperty(\"https.proxyHost\", proxyHost);\n                    System.setProperty(\"https.proxyPort\", proxyPort);\n                }\n            } else {\n                if (isProxy) {\n                    System.setProperty(\"http.proxyHost\", proxyHost);\n                    System.setProperty(\"http.proxyPort\", proxyPort);\n                }\n            }\n            URL url = new URL(str);\n            return (url.openConnection());\n        } catch (MalformedURLException me) {\n            System.out.println(\"Malformed URL\");\n            me.printStackTrace();\n            return null;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11128255",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private String doOAIQuery(String request) throws IOException, ProtocolException {\n        DannoClient ac = getClient();\n        HttpGet get = new HttpGet(request);\n        get.setHeader(\"Accept\", \"application/xml\");\n        HttpResponse response = ac.execute(get);\n        if (!ac.isOK()) {\n            throw new DannoRequestFailureException(\"GET\", response);\n        }\n        return massage(new BasicResponseHandler().handleResponse(response));\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11129960",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String getGoGl(final String urlPath, String key) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String getGoGl(final String urlPath, String key) {\n        log.debug(\"getGoGl url \" + urlPath);\n        log.debug(\"getGoGl key \" + key);\n        String shortUrl = null;\n        URL simpleURL = null;\n        HttpsURLConnection url = null;\n        BufferedInputStream bStream = null;\n        StringBuffer resultString = new StringBuffer(\"\");\n        String inputString = \"{\\\"longUrl\\\":\\\"\" + urlPath + \"\\\"}\";\n        log.debug(\"getGoGl inputString \" + inputString);\n        try {\n            simpleURL = new URL(\"https://www.googleapis.com/urlshortener/v1/url?key=\" + key);\n            url = (HttpsURLConnection) simpleURL.openConnection();\n            url.setDoOutput(true);\n            url.setRequestProperty(\"content-type\", \"application/json\");\n            PrintWriter pw = new PrintWriter(url.getOutputStream());\n            pw.print(inputString);\n            pw.close();\n        } catch (Exception ex) {\n            log.error(ex);\n            shortUrl = urlPath;\n        }\n        try {\n            bStream = new BufferedInputStream(url.getInputStream());\n            int i;\n            while ((i = bStream.read()) >= 0) {\n                resultString.append((char) i);\n            }\n        } catch (Exception ex) {\n            SocialUtils.log.error(ex);\n            shortUrl = urlPath;\n        }\n        return shortUrl;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11130567",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static boolean copyFile(File sourceFile, File destFile) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static boolean copyFile(File sourceFile, File destFile) throws IOException {\n        long flag = 0;\n        if (!destFile.exists()) destFile.createNewFile();\n        FileChannel source = null;\n        FileChannel destination = null;\n        try {\n            source = new FileInputStream(sourceFile).getChannel();\n            destination = new FileOutputStream(destFile).getChannel();\n            flag = destination.transferFrom(source, 0, source.size());\n        } catch (Exception e) {\n            Logger.getLogger(FileUtils.class.getPackage().getName()).log(Level.WARNING, \"ERROR: Problem copying file\", e);\n        } finally {\n            if (source != null) source.close();\n            if (destination != null) destination.close();\n        }\n        if (flag == 0) return false; else return true;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01113238",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic ResourceMigrator createDefaultResourceMigrator(NotificationReporter reporter, boolean strictMode) throws ResourceMigrationException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public ResourceMigrator createDefaultResourceMigrator(NotificationReporter reporter, boolean strictMode) throws ResourceMigrationException {\n            return new ResourceMigrator() {\n\n                public void migrate(InputMetadata meta, InputStream inputStream, OutputCreator outputCreator) throws IOException, ResourceMigrationException {\n                    OutputStream outputStream = outputCreator.createOutputStream();\n                    IOUtils.copy(inputStream, outputStream);\n                }\n            };\n        }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01113240",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic RemotePolicyMigrator createRemotePolicyMigrator() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public RemotePolicyMigrator createRemotePolicyMigrator() {\n            return new RemotePolicyMigrator() {\n\n                public String migratePolicy(InputStream stream, String url) throws ResourceMigrationException, IOException {\n                    ByteArrayOutputCreator oc = new ByteArrayOutputCreator();\n                    IOUtils.copyAndClose(stream, oc.getOutputStream());\n                    return oc.getOutputStream().toString();\n                }\n            };\n        }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11139684",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void decorate(Object element, IDecoration decoration) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n    public void decorate(Object element, IDecoration decoration) {\n        if (element != null && element instanceof IProject) {\n            InputStream is = null;\n            try {\n                IProject project = (IProject) element;\n                IFile file = project.getFile(Activator.PLUGIN_CONF);\n                if (file.exists()) {\n                    URL url = bundle.getEntry(\"icons/leaf4e_decorator.gif\");\n                    is = FileLocator.toFileURL(url).openStream();\n                    Image img = new Image(Display.getCurrent(), is);\n                    ImageDescriptor id = ImageDescriptor.createFromImage(img);\n                    decoration.addOverlay(id, IDecoration.TOP_LEFT);\n                }\n            } catch (Exception e) {\n                Status status = new Status(IStatus.WARNING, Activator.PLUGIN_ID, \"Decorating error\", e);\n                logger.log(status);\n            } finally {\n                if (is != null) {\n                    try {\n                        is.close();\n                    } catch (IOException e) {\n                        Status status = new Status(IStatus.WARNING, Activator.PLUGIN_ID, \"\", e);\n                        logger.log(status);\n                    }\n                }\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11139853",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static Image getPluginImage(Object plugin, String name) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static Image getPluginImage(Object plugin, String name) {\n        try {\n            try {\n                URL url = getPluginImageURL(plugin, name);\n                if (m_URLImageMap.containsKey(url)) return m_URLImageMap.get(url);\n                InputStream is = url.openStream();\n                Image image;\n                try {\n                    image = getImage(is);\n                    m_URLImageMap.put(url, image);\n                } finally {\n                    is.close();\n                }\n                return image;\n            } catch (Throwable e) {\n            }\n        } catch (Throwable e) {\n        }\n        return null;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11142914",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private boolean copyAvecProgressNIO(File sRC2, File dEST2, JProgressBar progressEnCours) throws IOException {\n        boolean resultat = false;\n        FileInputStream fis = new FileInputStream(sRC2);\n        FileOutputStream fos = new FileOutputStream(dEST2);\n        java.nio.channels.FileChannel channelSrc = fis.getChannel();\n        java.nio.channels.FileChannel channelDest = fos.getChannel();\n        progressEnCours.setValue(0);\n        progressEnCours.setString(sRC2 + \" : 0 %\");\n        channelSrc.transferTo(0, channelSrc.size(), channelDest);\n        progressEnCours.setValue(100);\n        progressEnCours.setString(sRC2 + \" : 100 %\");\n        if (channelSrc.size() == channelDest.size()) {\n            resultat = true;\n        } else {\n            resultat = false;\n        }\n        fis.close();\n        fos.close();\n        return (resultat);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11143530",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private String readUrl(String feature) {\n        StringBuffer content = new StringBuffer();\n        try {\n            URL url = new URL(feature);\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n            conn.connect();\n            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n            String line;\n            while ((line = rd.readLine()) != null) {\n                content.append(line);\n            }\n            conn.disconnect();\n        } catch (Exception e) {\n        }\n        return content.toString();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11145818",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void copy(File sourceFile, File destinationFile) {\n        try {\n            FileChannel in = new FileInputStream(sourceFile).getChannel();\n            FileChannel out = new FileOutputStream(destinationFile).getChannel();\n            try {\n                in.transferTo(0, in.size(), out);\n                in.close();\n                out.close();\n            } catch (IOException e) {\n            }\n        } catch (FileNotFoundException e) {\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11149084",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void deleteProject(String uid, String home, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        String project = request.getParameter(\"project\");\n        String line;\n        response.setContentType(\"text/html\");\n        PrintWriter out = response.getWriter();\n        htmlHeader(out, \"Project Status\", \"\");\n        try {\n            synchronized (Class.forName(\"com.sun.gep.SunTCP\")) {\n                Vector list = new Vector();\n                String directory = home;\n                Runtime.getRuntime().exec(\"/usr/bin/rm -rf \" + directory + project);\n                FilePermission perm = new FilePermission(directory + SUNTCP_LIST, \"read,write,execute\");\n                File listfile = new File(directory + SUNTCP_LIST);\n                BufferedReader read = new BufferedReader(new FileReader(listfile));\n                while ((line = read.readLine()) != null) {\n                    if (!((new StringTokenizer(line, \"\\t\")).nextToken().equals(project))) {\n                        list.addElement(line);\n                    }\n                }\n                read.close();\n                if (list.size() > 0) {\n                    PrintWriter write = new PrintWriter(new BufferedWriter(new FileWriter(listfile)));\n                    for (int i = 0; i < list.size(); i++) {\n                        write.println((String) list.get(i));\n                    }\n                    write.close();\n                } else {\n                    listfile.delete();\n                }\n                out.println(\"The project was successfully deleted.\");\n            }\n        } catch (Exception e) {\n            out.println(\"Error accessing this project.\");\n        }\n        out.println(\"<center><form><input type=button value=Continue onClick=\\\"opener.location.reload(); window.close()\\\"></form></center>\");\n        htmlFooter(out);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01115284",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n        resp.setContentType(\"text/html\");\n        resp.getWriter().println(\"Getting feed...\");\n        String googleFeed = \"http://news.google.com/news?ned=us&topic=h&output=rss\";\n        String totalFeed = \"\";\n        try {\n            URL url = new URL(googleFeed);\n            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\n            String line = null;\n            while ((line = reader.readLine()) != null) {\n                totalFeed += line;\n            }\n            reader.close();\n            parseFeedandPersist(totalFeed, resp);\n        } catch (MalformedURLException e) {\n        } catch (IOException e) {\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11153282",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static boolean existsURL(String urlStr) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static boolean existsURL(String urlStr) {\n        try {\n            URL url = ProxyURLFactory.createHttpUrl(urlStr);\n            HttpURLConnection con = (HttpURLConnection) url.openConnection();\n            con.connect();\n            int responseCode = con.getResponseCode();\n            con.disconnect();\n            return !(responseCode == HttpURLConnection.HTTP_NOT_FOUND);\n        } catch (IOException e) {\n            e.printStackTrace();\n            return false;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11154758",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void main(String[] args) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void main(String[] args) {\n        FTPClient client = new FTPClient();\n        FileOutputStream fos = null;\n        try {\n            client.connect(\"192.168.1.10\");\n            client.login(\"a\", \"123456\");\n            String filename = \"i.exe\";\n            fos = new FileOutputStream(filename);\n            client.retrieveFile(\"/\" + filename, fos);\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (fos != null) {\n                    fos.close();\n                }\n                client.disconnect();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11156659",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic boolean checkLogin(String pMail, String pMdp) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public boolean checkLogin(String pMail, String pMdp) {\n        boolean vLoginOk = false;\n        if (pMail == null || pMdp == null) {\n            throw new IllegalArgumentException(\"Login and password are mandatory. Null values are forbidden.\");\n        }\n        try {\n            Criteria crit = ((Session) this.entityManager.getDelegate()).createCriteria(Client.class);\n            crit.add(Restrictions.ilike(\"email\", pMail));\n            MessageDigest vMd5Instance;\n            try {\n                vMd5Instance = MessageDigest.getInstance(\"MD5\");\n                vMd5Instance.reset();\n                vMd5Instance.update(pMdp.getBytes());\n                byte[] vDigest = vMd5Instance.digest();\n                BigInteger vBigInt = new BigInteger(1, vDigest);\n                String vHashPassword = vBigInt.toString(16);\n                crit.add(Restrictions.eq(\"mdp\", vHashPassword));\n            } catch (NoSuchAlgorithmException e) {\n                e.printStackTrace();\n            }\n            Client pClient = (Client) crit.uniqueResult();\n            vLoginOk = (pClient != null);\n        } catch (DataAccessException e) {\n            mLogger.error(\"Exception - DataAccessException occurs : {} on complete checkLogin( {}, {} )\", new Object[] { e.getMessage(), pMail, pMdp });\n        }\n        return vLoginOk;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11158190",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copyFile(String fromPath, String toPath) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copyFile(String fromPath, String toPath) {\n        try {\n            File inputFile = new File(fromPath);\n            String dirImg = (new File(toPath)).getParent();\n            File tmp = new File(dirImg);\n            if (!tmp.exists()) {\n                tmp.mkdir();\n            }\n            File outputFile = new File(toPath);\n            if (!inputFile.getCanonicalPath().equals(outputFile.getCanonicalPath())) {\n                FileInputStream in = new FileInputStream(inputFile);\n                FileOutputStream out = new FileOutputStream(outputFile);\n                int c;\n                while ((c = in.read()) != -1) out.write(c);\n                in.close();\n                out.close();\n            }\n        } catch (Exception ex) {\n            ex.printStackTrace();\n            LogHandler.log(ex.getMessage(), Level.INFO, \"LOG_MSG\", isLoggingEnabled());\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11159237",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String hash(final String text) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String hash(final String text) {\n        try {\n            MessageDigest md;\n            md = MessageDigest.getInstance(\"SHA-1\");\n            byte[] sha1hash;\n            md.update(text.getBytes(\"iso-8859-1\"), 0, text.length());\n            sha1hash = md.digest();\n            return Sha1.convertToHex(sha1hash);\n        } catch (NoSuchAlgorithmException e) {\n            return null;\n        } catch (UnsupportedEncodingException e) {\n            return null;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01115931",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void testSetRequestProperty() throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void testSetRequestProperty() throws Exception {\n        MockHTTPServer httpServer = new MockHTTPServer(\"HTTP Server for User-Specified Request Property\", 2);\n        httpServer.start();\n        synchronized (bound) {\n            if (!httpServer.started) {\n                bound.wait(5000);\n            }\n        }\n        HttpURLConnection urlConnection = (HttpURLConnection) new URL(\"http://localhost:\" + httpServer.port()).openConnection();\n        assertEquals(0, urlConnection.getRequestProperties().size());\n        final String PROPERTY1 = \"Accept\";\n        final String PROPERTY2 = \"Connection\";\n        urlConnection.setRequestProperty(PROPERTY1, null);\n        urlConnection.setRequestProperty(PROPERTY1, null);\n        urlConnection.setRequestProperty(PROPERTY2, \"keep-alive\");\n        assertEquals(2, urlConnection.getRequestProperties().size());\n        assertNull(urlConnection.getRequestProperty(PROPERTY1));\n        assertEquals(\"keep-alive\", urlConnection.getRequestProperty(PROPERTY2));\n        urlConnection.setRequestProperty(PROPERTY1, \"/\");\n        urlConnection.setRequestProperty(PROPERTY2, null);\n        assertEquals(\"/\", urlConnection.getRequestProperty(PROPERTY1));\n        assertNull(urlConnection.getRequestProperty(PROPERTY2));\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11163692",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void transfer(File src, File dest, boolean removeSrc) throws FileNotFoundException, IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void transfer(File src, File dest, boolean removeSrc) throws FileNotFoundException, IOException {\n        Log.warning(\"source: \" + src);\n        Log.warning(\"dest: \" + dest);\n        if (!src.canRead()) {\n            throw new IOException(\"can not read src file: \" + src);\n        }\n        if (!dest.getParentFile().isDirectory()) {\n            if (!dest.getParentFile().mkdirs()) {\n                throw new IOException(\"failed to make directories: \" + dest.getParent());\n            }\n        }\n        FileInputStream fis = new FileInputStream(src);\n        FileOutputStream fos = new FileOutputStream(dest);\n        FileChannel fcin = fis.getChannel();\n        FileChannel fcout = fos.getChannel();\n        Log.warning(\"starting transfer from position \" + fcin.position() + \" to size \" + fcin.size());\n        fcout.transferFrom(fcin, 0, fcin.size());\n        Log.warning(\"closing streams and channels\");\n        fcin.close();\n        fcout.close();\n        fis.close();\n        fos.close();\n        if (removeSrc) {\n            Log.warning(\"deleting file \" + src);\n            src.delete();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11167172",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic MovementsPage(EditDomain editDomain, Object contents, final GraphicalViewer viewer) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public MovementsPage(EditDomain editDomain, Object contents, final GraphicalViewer viewer) {\n        super(tree, editDomain, contents);\n        tree.addSelectionChangedListener(new ISelectionChangedListener() {\n\n            public void selectionChanged(SelectionChangedEvent event) {\n                if (event.getSelection() instanceof IStructuredSelection) {\n                    IStructuredSelection selection = (IStructuredSelection) event.getSelection();\n                    if (selection.getFirstElement() instanceof Movement) {\n                        Movement movement = (Movement) selection.getFirstElement();\n                        viewer.setContents(movement);\n                    }\n                }\n            }\n        });\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01118153",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic final synchronized boolean isValidLicenseFile() throws LicenseNotSetupException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public final synchronized boolean isValidLicenseFile() throws LicenseNotSetupException {\n        if (!isSetup()) {\n            throw new LicenseNotSetupException();\n        }\n        boolean returnValue = false;\n        Properties properties = getLicenseFile();\n        logger.debug(\"isValidLicenseFile: License to validate:\");\n        logger.debug(properties);\n        StringBuffer validationStringBuffer = new StringBuffer();\n        validationStringBuffer.append(LICENSE_KEY_KEY + \":\" + properties.getProperty(LICENSE_KEY_KEY) + \",\");\n        validationStringBuffer.append(LICENSE_FILE_STATUS_KEY + \":\" + properties.getProperty(LICENSE_FILE_STATUS_KEY) + \",\");\n        validationStringBuffer.append(LICENSE_FILE_USERS_KEY + \":\" + properties.getProperty(LICENSE_FILE_USERS_KEY) + \",\");\n        validationStringBuffer.append(LICENSE_FILE_MAC_KEY + \":\" + properties.getProperty(LICENSE_FILE_MAC_KEY) + \",\");\n        validationStringBuffer.append(LICENSE_FILE_HOST_NAME_KEY + \":\" + properties.getProperty(LICENSE_FILE_HOST_NAME_KEY) + \",\");\n        validationStringBuffer.append(LICENSE_FILE_OFFSET_KEY + \":\" + properties.getProperty(LICENSE_FILE_OFFSET_KEY) + \",\");\n        validationStringBuffer.append(LICENSE_FILE_EXP_DATE_KEY + \":\" + properties.getProperty(LICENSE_FILE_EXP_DATE_KEY) + \",\");\n        validationStringBuffer.append(LICENSE_EXPIRES_KEY + \":\" + properties.getProperty(LICENSE_EXPIRES_KEY));\n        logger.debug(\"isValidLicenseFile: Validation String Buffer: \" + validationStringBuffer.toString());\n        String validationKey = (String) properties.getProperty(LICENSE_FILE_SHA_KEY);\n        try {\n            MessageDigest messageDigest = MessageDigest.getInstance(\"SHA-1\");\n            messageDigest.update(validationStringBuffer.toString().getBytes());\n            String newValidation = Base64.encode(messageDigest.digest());\n            if (newValidation.equals(validationKey)) {\n                if (getMACAddress().equals(Settings.getInstance().getMACAddress())) {\n                    returnValue = true;\n                }\n            }\n        } catch (Exception exception) {\n            System.out.println(\"Exception in LicenseInstanceVO.isValidLicenseFile\");\n        }\n        return returnValue;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11183087",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        String senha = \"\";\n        String email = request.getParameter(\"EmailLogin\");\n        try {\n            MessageDigest messageDigest = MessageDigest.getInstance(\"MD5\");\n            messageDigest.update(request.getParameter(\"SenhaLogin\").getBytes(), 0, request.getParameter(\"SenhaLogin\").length());\n            senha = new BigInteger(1, messageDigest.digest()).toString(16);\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n        Usuario usuario = UsuarioBll.getUsuarioByEmailAndSenha(email, senha);\n        String redirect = request.getHeader(\"REFERER\").replace(\"?msg=3\", \"\").replace(\"&msg=3\", \"\") + \"?&msg=3\";\n        if (request.getHeader(\"REFERER\").indexOf(\"?\") != -1) {\n            redirect = request.getHeader(\"REFERER\").replace(\"?msg=3\", \"\").replace(\"&msg=3\", \"\") + \"&msg=3\";\n        }\n        if (usuario.getNome() != null) {\n            HttpSession session = request.getSession();\n            session.setAttribute(\"usuario\", usuario);\n            redirect = \"index.jsp\";\n        }\n        response.sendRedirect(redirect);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11188584",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void loadPlugins() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void loadPlugins() {\n        Logger.trace(\"Loading plugins\");\n        Enumeration<URL> urls = null;\n        try {\n            urls = Play.classloader.getResources(\"play.plugins\");\n        } catch (Exception e) {\n        }\n        while (urls != null && urls.hasMoreElements()) {\n            URL url = urls.nextElement();\n            Logger.trace(\"Found one plugins descriptor, %s\", url);\n            try {\n                BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream(), \"utf-8\"));\n                String line = null;\n                while ((line = reader.readLine()) != null) {\n                    String[] infos = line.split(\":\");\n                    PlayPlugin plugin = (PlayPlugin) Play.classloader.loadClass(infos[1].trim()).newInstance();\n                    Logger.trace(\"Loaded plugin %s\", plugin);\n                    plugin.index = Integer.parseInt(infos[0]);\n                    plugins.add(plugin);\n                }\n            } catch (Exception ex) {\n                Logger.error(ex, \"Cannot load %s\", url);\n            }\n        }\n        Collections.sort(plugins);\n        for (PlayPlugin plugin : new ArrayList<PlayPlugin>(plugins)) {\n            plugin.onLoad();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11188585",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void initStaticStuff() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void initStaticStuff() {\n        Enumeration<URL> urls = null;\n        try {\n            urls = Play.class.getClassLoader().getResources(\"play.static\");\n        } catch (Exception e) {\n        }\n        while (urls != null && urls.hasMoreElements()) {\n            URL url = urls.nextElement();\n            try {\n                BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream(), \"utf-8\"));\n                String line = null;\n                while ((line = reader.readLine()) != null) {\n                    try {\n                        Class.forName(line);\n                    } catch (Exception e) {\n                        System.out.println(\"! Cannot init static : \" + line);\n                    }\n                }\n            } catch (Exception ex) {\n                Logger.error(ex, \"Cannot load %s\", url);\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11193872",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static <T> Collection<T> loadFromServices(Class<T> interf) throws Exception {\n        ClassLoader classLoader = DSServiceLoader.class.getClassLoader();\n        Enumeration<URL> e = classLoader.getResources(\"META-INF/services/\" + interf.getName());\n        Collection<T> services = new ArrayList<T>();\n        while (e.hasMoreElements()) {\n            URL url = e.nextElement();\n            InputStream is = url.openStream();\n            try {\n                BufferedReader r = new BufferedReader(new InputStreamReader(is, \"UTF-8\"));\n                while (true) {\n                    String line = r.readLine();\n                    if (line == null) {\n                        break;\n                    }\n                    int comment = line.indexOf('#');\n                    if (comment >= 0) {\n                        line = line.substring(0, comment);\n                    }\n                    String name = line.trim();\n                    if (name.length() == 0) {\n                        continue;\n                    }\n                    Class<?> clz = Class.forName(name, true, classLoader);\n                    Class<? extends T> impl = clz.asSubclass(interf);\n                    Constructor<? extends T> ctor = impl.getConstructor();\n                    T svc = ctor.newInstance();\n                    services.add(svc);\n                }\n            } finally {\n                is.close();\n            }\n        }\n        return services;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11198368",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic boolean accept(File dir, String name) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "static void linkBlocks(File from, File to, int oldLV) throws IOException {\n        if (!from.isDirectory()) {\n            if (from.getName().startsWith(COPY_FILE_PREFIX)) {\n                IOUtils.copyBytes(new FileInputStream(from), new FileOutputStream(to), 16 * 1024, true);\n            } else {\n                if (oldLV >= PRE_GENERATIONSTAMP_LAYOUT_VERSION) {\n                    to = new File(convertMetatadataFileName(to.getAbsolutePath()));\n                }\n                HardLink.createHardLink(from, to);\n            }\n            return;\n        }\n        if (!to.mkdir()) throw new IOException(\"Cannot create directory \" + to);\n        String[] blockNames = from.list(new java.io.FilenameFilter() {\n\n            public boolean accept(File dir, String name) {\n                return name.startsWith(BLOCK_SUBDIR_PREFIX) || name.startsWith(BLOCK_FILE_PREFIX) || name.startsWith(COPY_FILE_PREFIX);\n            }\n        });\n        for (int i = 0; i < blockNames.length; i++) linkBlocks(new File(from, blockNames[i]), new File(to, blockNames[i]), oldLV);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11199367",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void copy(FileInfo inputFile, FileInfo outputFile) {\n        try {\n            FileReader in = new FileReader(inputFile.file);\n            FileWriter out = new FileWriter(outputFile.file);\n            int c;\n            while ((c = in.read()) != -1) out.write(c);\n            in.close();\n            out.close();\n            outputFile.file.setLastModified(inputFile.lastModified);\n        } catch (IOException e) {\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11200354",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private boolean authenticate(String reply) {\n        String user = reply.substring(0, reply.indexOf(\" \"));\n        String resp = reply.substring(reply.indexOf(\" \") + 1);\n        if (!module.users.contains(user)) {\n            error = \"so such user \" + user;\n            return false;\n        }\n        try {\n            LineNumberReader secrets = new LineNumberReader(new FileReader(module.secretsFile));\n            String line;\n            while ((line = secrets.readLine()) != null) {\n                if (line.startsWith(user + \":\")) {\n                    MessageDigest md4 = MessageDigest.getInstance(\"BrokenMD4\");\n                    md4.update(new byte[4]);\n                    md4.update(line.substring(line.indexOf(\":\") + 1).getBytes(\"US-ASCII\"));\n                    md4.update(challenge.getBytes(\"US-ASCII\"));\n                    String hash = Util.base64(md4.digest());\n                    if (hash.equals(resp)) {\n                        secrets.close();\n                        return true;\n                    }\n                }\n            }\n            secrets.close();\n        } catch (Exception e) {\n            logger.fatal(e.toString());\n            error = \"server configuration error\";\n            return false;\n        }\n        error = \"authentication failure for module \" + module.name;\n        return false;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11203339",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void copy(File source, File dest) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void copy(File source, File dest) throws IOException {\n        System.out.println(\"copy \" + source + \" -> \" + dest);\n        FileInputStream in = new FileInputStream(source);\n        try {\n            FileOutputStream out = new FileOutputStream(dest);\n            try {\n                byte[] buf = new byte[1024];\n                int len = 0;\n                while ((len = in.read(buf)) > 0) out.write(buf, 0, len);\n            } finally {\n                out.close();\n            }\n        } finally {\n            in.close();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11213172",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copyFile(File src, File dest) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copyFile(File src, File dest) throws IOException {\n        log.debug(\"Copying file: '\" + src + \"' to '\" + dest + \"'\");\n        FileChannel srcChannel = new FileInputStream(src).getChannel();\n        FileChannel dstChannel = new FileOutputStream(dest).getChannel();\n        dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n        srcChannel.close();\n        dstChannel.close();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11219274",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static void addFolderToZip(File folder, ZipOutputStream zip, String baseName) throws IOException {\n        File[] files = folder.listFiles();\n        for (File file : files) {\n            if (file.isDirectory()) {\n                String name = file.getAbsolutePath().substring(baseName.length());\n                ZipEntry zipEntry = new ZipEntry(name + \"/\");\n                zip.putNextEntry(zipEntry);\n                zip.closeEntry();\n                addFolderToZip(file, zip, baseName);\n            } else {\n                String name = file.getAbsolutePath().substring(baseName.length());\n                ZipEntry zipEntry = new ZipEntry(updateFilename(name));\n                zip.putNextEntry(zipEntry);\n                IOUtils.copy(new FileInputStream(file), zip);\n                zip.closeEntry();\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01122585",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private String copyImageFile(String urlString, String filePath) {\n        FileOutputStream destination = null;\n        File destination_file = null;\n        String inLine;\n        String dest_name = \"\";\n        byte[] buffer;\n        int bytes_read;\n        int last_offset = 0;\n        int offset = 0;\n        InputStream imageFile = null;\n        try {\n            URL url = new URL(urlString);\n            imageFile = url.openStream();\n            dest_name = url.getFile();\n            offset = 0;\n            last_offset = 0;\n            offset = dest_name.indexOf('/', offset + 1);\n            while (offset > -1) {\n                last_offset = offset + 1;\n                offset = dest_name.indexOf('/', offset + 1);\n            }\n            dest_name = filePath + File.separator + dest_name.substring(last_offset);\n            destination_file = new File(dest_name);\n            if (destination_file.exists()) {\n                if (destination_file.isFile()) {\n                    if (!destination_file.canWrite()) {\n                        System.out.println(\"FileCopy: destination \" + \"file is unwriteable: \" + dest_name);\n                    }\n                    System.out.println(\"File \" + dest_name + \" already exists. File will be overwritten.\");\n                } else {\n                    System.out.println(\"FileCopy: destination \" + \"is not a file: \" + dest_name);\n                }\n            } else {\n                File parentdir = parent(destination_file);\n                if (!parentdir.exists()) {\n                    System.out.println(\"FileCopy: destination \" + \"directory doesn't exist: \" + dest_name);\n                }\n                if (!parentdir.canWrite()) {\n                    System.out.println(\"FileCopy: destination \" + \"directory is unwriteable: \" + dest_name);\n                }\n            }\n            destination = new FileOutputStream(dest_name);\n            buffer = new byte[1024];\n            while (true) {\n                bytes_read = imageFile.read(buffer);\n                if (bytes_read == -1) break;\n                destination.write(buffer, 0, bytes_read);\n            }\n        } catch (MalformedURLException ex) {\n            System.out.println(\"Bad URL \" + urlString);\n        } catch (IOException ex) {\n            System.out.println(\" IO error: \" + ex.getMessage());\n        } finally {\n            if (imageFile != null) {\n                try {\n                    imageFile.close();\n                } catch (IOException e) {\n                }\n            }\n            if (destination != null) {\n                try {\n                    destination.close();\n                } catch (IOException e) {\n                }\n            }\n        }\n        return (dest_name);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11228284",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static boolean copy(File src, File dest) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static boolean copy(File src, File dest) {\n        boolean result = true;\n        String files[] = null;\n        if (src.isDirectory()) {\n            files = src.list();\n            result = dest.mkdir();\n        } else {\n            files = new String[1];\n            files[0] = \"\";\n        }\n        if (files == null) {\n            files = new String[0];\n        }\n        for (int i = 0; (i < files.length) && result; i++) {\n            File fileSrc = new File(src, files[i]);\n            File fileDest = new File(dest, files[i]);\n            if (fileSrc.isDirectory()) {\n                result = copy(fileSrc, fileDest);\n            } else {\n                FileChannel ic = null;\n                FileChannel oc = null;\n                try {\n                    ic = (new FileInputStream(fileSrc)).getChannel();\n                    oc = (new FileOutputStream(fileDest)).getChannel();\n                    ic.transferTo(0, ic.size(), oc);\n                } catch (IOException e) {\n                    log.error(sm.getString(\"expandWar.copy\", fileSrc, fileDest), e);\n                    result = false;\n                } finally {\n                    if (ic != null) {\n                        try {\n                            ic.close();\n                        } catch (IOException e) {\n                        }\n                    }\n                    if (oc != null) {\n                        try {\n                            oc.close();\n                        } catch (IOException e) {\n                        }\n                    }\n                }\n            }\n        }\n        return result;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11228956",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "protected Model loadModel(URL url, String filenameBase, SourceModelType modelType, URL baseURL, String skin, float scale, int flags, AppearanceFactory appFactory, GeometryFactory geomFactory, NodeFactory nodeFactory, AnimationFactory animFactory, SpecialItemsHandler siHandler, Model model) throws IOException, IncorrectFormatException, ParsingException {\n        boolean convertZup2Yup = modelType.getConvertFlag(flags);\n        switch(modelType) {\n            case AC3D:\n                AC3DPrototypeLoader.load(url.openStream(), baseURL, appFactory, geomFactory, nodeFactory, true, model, siHandler);\n                break;\n            case ASE:\n                AseReader.load(url.openStream(), baseURL, appFactory, geomFactory, convertZup2Yup, scale, nodeFactory, animFactory, siHandler, model);\n                break;\n            case BSP:\n                BSPPrototypeLoader.load(url.openStream(), filenameBase, baseURL, geomFactory, true, 0.03f, appFactory, nodeFactory, model, GroupType.BSP_TREE, siHandler);\n                break;\n            case CAL3D:\n                break;\n            case COLLADA:\n                convertZup2Yup = true;\n                COLLADALoader.load(baseURL, url.openStream(), appFactory, geomFactory, convertZup2Yup, scale, nodeFactory, animFactory, siHandler, model);\n                break;\n            case MD2:\n                MD2File.load(url.openStream(), baseURL, appFactory, skin, geomFactory, convertZup2Yup, scale, nodeFactory, animFactory, siHandler, model);\n                break;\n            case MD3:\n                MD3File.load(url.openStream(), baseURL, appFactory, geomFactory, convertZup2Yup, scale, nodeFactory, animFactory, siHandler, model);\n                break;\n            case MD5:\n                {\n                    Object[][][] boneWeights = MD5MeshReader.load(url.openStream(), baseURL, appFactory, skin, geomFactory, convertZup2Yup, scale, nodeFactory, animFactory, siHandler, model);\n                    ((SpecialItemsHandlerImpl) siHandler).flush();\n                    List<URL> animResources = new ResourceLocator(baseURL).findAllResources(\"md5anim\", true, false);\n                    for (URL animURL : animResources) {\n                        String filename = LoaderUtils.extractFilenameWithoutExt(animURL);\n                        MD5AnimationReader.load(animURL.openStream(), filename, baseURL, appFactory, geomFactory, convertZup2Yup, scale, nodeFactory, model.getShapes(), boneWeights, animFactory, siHandler, model);\n                    }\n                }\n                break;\n            case MS3D:\n                break;\n            case OBJ:\n                GroupNode rootGroup = model;\n                if (scale != 1.0f) {\n                    TransformGroup scaleGroup = new TransformGroup();\n                    scaleGroup.getTransform().setScale(scale);\n                    model.addChild(scaleGroup);\n                    model.setMainGroup(scaleGroup);\n                    rootGroup = scaleGroup;\n                }\n                OBJPrototypeLoader.load(url.openStream(), baseURL, appFactory, skin, geomFactory, convertZup2Yup, scale, nodeFactory, siHandler, rootGroup);\n                break;\n            case TDS:\n                TDSFile.load(url.openStream(), baseURL, appFactory, geomFactory, convertZup2Yup, nodeFactory, animFactory, siHandler, model);\n        }\n        return (model);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01123199",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic TextureData newTextureData(GLProfile glp, URL url, int internalFormat, int pixelFormat, boolean mipmap, String fileSuffix) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public TextureData newTextureData(GLProfile glp, URL url, int internalFormat, int pixelFormat, boolean mipmap, String fileSuffix) throws IOException {\n            InputStream stream = new BufferedInputStream(url.openStream());\n            try {\n                return newTextureData(glp, stream, internalFormat, pixelFormat, mipmap, fileSuffix);\n            } finally {\n                stream.close();\n            }\n        }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01123203",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic TextureData newTextureData(GLProfile glp, URL url, int internalFormat, int pixelFormat, boolean mipmap, String fileSuffix) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public TextureData newTextureData(GLProfile glp, URL url, int internalFormat, int pixelFormat, boolean mipmap, String fileSuffix) throws IOException {\n            InputStream stream = new BufferedInputStream(url.openStream());\n            try {\n                return newTextureData(glp, stream, internalFormat, pixelFormat, mipmap, fileSuffix);\n            } finally {\n                stream.close();\n            }\n        }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11233252",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void loadTrustAnchors(final String keystoreLocation) {\n        LOG.debug(\"keystore location: \" + keystoreLocation);\n        try {\n            if (keystoreLocation == null) {\n                throw new NullPointerException(\"No TrustAnchor KeyStore name is set\");\n            }\n            InputStream keyStoreStream = null;\n            if (new File(keystoreLocation).exists()) {\n                keyStoreStream = new FileInputStream(keystoreLocation);\n            } else if (new File(\"../trust1.keystore\").exists()) {\n                keyStoreStream = new FileInputStream(new File(\"../trust1.keystore\"));\n            } else if (new File(\"trust1.keystore\").exists()) {\n                keyStoreStream = new FileInputStream(new File(\"../trust1.keystore\"));\n            } else {\n                URL url = Thread.currentThread().getContextClassLoader().getResource(\"trust1.keystore\");\n                if (url != null) keyStoreStream = new BufferedInputStream(url.openStream());\n            }\n            KeyStore ks = KeyStore.getInstance(trustStoreType);\n            ks.load(keyStoreStream, trustStorePassword.toCharArray());\n            Enumeration<String> aliases = ks.aliases();\n            while (aliases.hasMoreElements()) {\n                String alias = aliases.nextElement();\n                LOG.debug(\"inspecting alias \" + alias);\n                if (ks.entryInstanceOf(alias, KeyStore.TrustedCertificateEntry.class)) {\n                    LOG.debug(\"Adding TrustAnchor: \" + ((X509Certificate) ks.getCertificate(alias)).getSubjectX500Principal().getName());\n                    TrustAnchor ta = new TrustAnchor((X509Certificate) (ks.getCertificate(alias)), null);\n                    this.trustAnchors.add(ta);\n                }\n            }\n        } catch (Exception ex) {\n            LOG.error(\"Error loading TrustAnchors\", ex);\n            this.trustAnchors = null;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11237136",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic String hash(String senha) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public String hash(String senha) {\n        String result = \"\";\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            md.update(senha.getBytes());\n            byte[] hashMd5 = md.digest();\n            for (int i = 0; i < hashMd5.length; i++) result += Integer.toHexString((((hashMd5[i] >> 4) & 0xf) << 4) | (hashMd5[i] & 0xf));\n        } catch (NoSuchAlgorithmException ex) {\n            Logger.getInstancia().log(TipoLog.ERRO, ex);\n        }\n        return result;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11237849",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static boolean doExecuteSQL(String sql) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static boolean doExecuteSQL(String sql) {\n        session = currentSession();\n        Connection conn = session.connection();\n        PreparedStatement ps = null;\n        try {\n            conn.setAutoCommit(false);\n            log(\"[SmsManager] sql:\" + sql);\n            ps = conn.prepareStatement(sql);\n            ps.executeUpdate();\n            conn.commit();\n            conn.setAutoCommit(true);\n            return true;\n        } catch (SQLException e) {\n            e.printStackTrace();\n            try {\n                conn.rollback();\n            } catch (SQLException e1) {\n                e1.printStackTrace();\n            }\n            return false;\n        } finally {\n            if (conn != null) try {\n                conn.close();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n            if (ps != null) {\n                try {\n                    ps.close();\n                } catch (SQLException e) {\n                    e.printStackTrace();\n                }\n            }\n            closeHibernateSession();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11237850",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static boolean doExecuteBatchSQL(List<String> sql) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static boolean doExecuteBatchSQL(List<String> sql) {\n        session = currentSession();\n        Connection conn = session.connection();\n        PreparedStatement ps = null;\n        try {\n            conn.setAutoCommit(false);\n            Iterator iter = sql.iterator();\n            while (iter.hasNext()) {\n                String sqlstr = (String) iter.next();\n                log(\"[SmsManager] doing sql:\" + sqlstr);\n                ps = conn.prepareStatement(sqlstr);\n                ps.executeUpdate();\n            }\n            conn.commit();\n            conn.setAutoCommit(true);\n            return true;\n        } catch (SQLException e) {\n            e.printStackTrace();\n            try {\n                conn.rollback();\n            } catch (SQLException e1) {\n                e1.printStackTrace();\n            }\n            return false;\n        } finally {\n            if (conn != null) try {\n                conn.close();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n            if (ps != null) {\n                try {\n                    ps.close();\n                } catch (SQLException e) {\n                    e.printStackTrace();\n                }\n            }\n            closeHibernateSession();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11238195",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void init() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void init() {\n        System.out.println(\"Init applet...\");\n        int port = Integer.parseInt(getParameter(\"port\"));\n        int useUDP = Integer.parseInt(getParameter(\"udp\"));\n        boolean bUseUDP = false;\n        if (useUDP > 0) bUseUDP = true;\n        m_strWorld = getParameter(\"world\");\n        m_strHost = this.getCodeBase().getHost();\n        try {\n            new EnvironmentMap(getParameter(\"vrwmap\"));\n        } catch (Throwable t) {\n            System.out.println(t.getMessage());\n        }\n        URL urlExperiment = null;\n        InputStream expStream = null;\n        try {\n            String strPathExperiment = getParameter(\"experiment\");\n            if (strPathExperiment.length() > 0) {\n                urlExperiment = new URL(getCodeBase(), strPathExperiment);\n                expStream = urlExperiment.openStream();\n            }\n        } catch (java.net.MalformedURLException e) {\n            System.out.println(\"Couldn't open url experiment: badly specified URL \" + e.getMessage());\n        } catch (Throwable t) {\n            System.out.println(\"Couldn't open url experiment: \" + t.getMessage());\n        }\n        try {\n            System.out.println(\"Creating client, logging to \" + m_strWorld);\n            m_VRWClient = new VRWClient(m_strHost, port, true, bUseUDP);\n            m_VRWClient.setInApplet(true);\n            m_VRWClient.login(m_strWorld);\n        } catch (java.io.IOException e) {\n            System.out.println(\"IOException creating the VRWClient\");\n        }\n        try {\n            jsobj = JSObject.getWindow(this);\n        } catch (Throwable t) {\n            System.out.println(\"Exception getting Java Script Interface: \" + t.getMessage());\n        }\n        refApplet = this;\n        m_frmVRWConsole = new VRWConsoleFrame();\n        m_frmVRWConsole.setTitle(\"VRW Client Console\");\n        m_frmVRWConsole.pack();\n        m_frmVRWConsole.setSize(Math.max(300, m_frmVRWConsole.getSize().width), Math.max(200, m_frmVRWConsole.getSize().height));\n        if (expStream != null) {\n            System.out.println(\"Passing experiment stream to VRWConsoleFrame\");\n            m_frmVRWConsole.loadExperiment(expStream);\n        }\n        m_frmVRWConsole.setVisible(true);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11238287",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void main(final String[] args) throws RecognitionException, TokenStreamException, IOException, IllegalOptionValueException, UnknownOptionException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void main(final String[] args) throws RecognitionException, TokenStreamException, IOException, IllegalOptionValueException, UnknownOptionException {\n        try {\n            CmdLineParser cmdLineParser = new CmdLineParser();\n            Option formatOption = cmdLineParser.addStringOption('f', \"format\");\n            Option encodingOption = cmdLineParser.addStringOption('c', \"charset\");\n            cmdLineParser.parse(args);\n            String format = (String) cmdLineParser.getOptionValue(formatOption);\n            String encoding = (String) cmdLineParser.getOptionValue(encodingOption);\n            if (encoding == null || encoding.trim().equals(\"\")) {\n                encoding = \"utf-8\";\n                System.out.println(\"Defaulting to output charset utf-8 as argument -c is missing or not valid.\");\n            }\n            String[] remainingArgs = cmdLineParser.getRemainingArgs();\n            if (remainingArgs.length != 2) {\n                printUsage(\"Input and output file are not specified correctly. \");\n            }\n            File inputFile = new File(remainingArgs[0]);\n            if (!inputFile.exists()) {\n                printUsage(\"Input file \" + remainingArgs[0] + \" does not exist. \");\n            }\n            File outputFile = new File(remainingArgs[1]);\n            if (!outputFile.exists()) {\n                outputFile.createNewFile();\n            }\n            if (format == null || format.trim().equals(\"\")) {\n                format = (String) FileUtil.cutExtension(outputFile.getName()).getValue();\n            }\n            if (\"tex\".equals(format)) {\n                Reader reader = new LatexEncoderReader(new FileReader(inputFile));\n                OutputStreamWriter out = new OutputStreamWriter(new FileOutputStream(outputFile), encoding);\n                char[] buffer = new char[1024];\n                int read;\n                do {\n                    read = reader.read(buffer);\n                    if (read > 0) {\n                        out.write(buffer, 0, read);\n                    }\n                } while (read != -1);\n                out.flush();\n                out.close();\n            } else {\n                printUsage(\"Format not specified via argument -f. Also guessing for the extension of output file \" + outputFile.getName() + \" failed\");\n            }\n        } catch (Exception ex) {\n            ex.printStackTrace();\n            printUsage(ex.getMessage());\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01124190",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private SystemProperties() {\n        Properties p = new Properties();\n        ClassLoader classLoader = getClass().getClassLoader();\n        try {\n            URL url = classLoader.getResource(\"system.properties\");\n            if (url != null) {\n                InputStream is = url.openStream();\n                p.load(is);\n                is.close();\n                System.out.println(\"Loading \" + url);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        try {\n            URL url = classLoader.getResource(\"system-ext.properties\");\n            if (url != null) {\n                InputStream is = url.openStream();\n                p.load(is);\n                is.close();\n                System.out.println(\"Loading \" + url);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        boolean systemPropertiesLoad = GetterUtil.get(System.getProperty(SYSTEM_PROPERTIES_LOAD), true);\n        boolean systemPropertiesFinal = GetterUtil.get(System.getProperty(SYSTEM_PROPERTIES_FINAL), true);\n        if (systemPropertiesLoad) {\n            Enumeration enu = p.propertyNames();\n            while (enu.hasMoreElements()) {\n                String key = (String) enu.nextElement();\n                if (systemPropertiesFinal || Validator.isNull(System.getProperty(key))) {\n                    System.setProperty(key, (String) p.get(key));\n                }\n            }\n        }\n        PropertiesUtil.fromProperties(p, _props);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11245902",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void uploadFile(File in, String out, String host, int port, String path, String login, String password, boolean renameIfExist) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void uploadFile(File in, String out, String host, int port, String path, String login, String password, boolean renameIfExist) throws IOException {\n        FTPClient ftp = null;\n        try {\n            m_logCat.info(\"Uploading \" + in + \" to \" + host + \":\" + port + \" at \" + path);\n            ftp = new FTPClient();\n            int reply;\n            ftp.connect(host, port);\n            m_logCat.info(\"Connected to \" + host + \"... Trying to authenticate\");\n            reply = ftp.getReplyCode();\n            if (!FTPReply.isPositiveCompletion(reply)) {\n                ftp.disconnect();\n                m_logCat.error(\"FTP server \" + host + \" refused connection.\");\n                throw new IOException(\"Cannot connect to the FTP Server: connection refused.\");\n            }\n            if (!ftp.login(login, password)) {\n                ftp.logout();\n                throw new IOException(\"Cannot connect to the FTP Server: login / password is invalid!\");\n            }\n            ftp.setFileType(FTP.BINARY_FILE_TYPE);\n            if (!ftp.changeWorkingDirectory(path)) {\n                m_logCat.warn(\"Remote working directory: \" + path + \"does not exist on the FTP Server ...\");\n                m_logCat.info(\"Trying to create remote directory: \" + path);\n                if (!ftp.makeDirectory(path)) {\n                    m_logCat.error(\"Failed to create remote directory: \" + path);\n                    throw new IOException(\"Failed to store \" + in + \" in the remote directory: \" + path);\n                }\n                if (!ftp.changeWorkingDirectory(path)) {\n                    m_logCat.error(\"Failed to change directory. Unexpected error\");\n                    throw new IOException(\"Failed to change to remote directory : \" + path);\n                }\n            }\n            if (out == null) {\n                out = in.getName();\n                if (out.startsWith(\"/\")) {\n                    out = out.substring(1);\n                }\n            }\n            if (renameIfExist) {\n                String[] files = ftp.listNames();\n                String f = in + out;\n                for (int i = 0; i < files.length; i++) {\n                    if (files[i].equals(out)) {\n                        m_logCat.debug(\"Found existing file on the server: \" + out);\n                        boolean rename_ok = false;\n                        String bak = \"_bak\";\n                        int j = 0;\n                        String newExt = null;\n                        while (!rename_ok) {\n                            if (j == 0) newExt = bak; else newExt = bak + j;\n                            if (ftp.rename(out, out + newExt)) {\n                                m_logCat.info(out + \" renamed to \" + out + newExt);\n                                rename_ok = true;\n                            } else {\n                                m_logCat.warn(\"Renaming to \" + out + newExt + \" has failed!, trying again ...\");\n                                j++;\n                            }\n                        }\n                        break;\n                    }\n                }\n            }\n            InputStream input = new FileInputStream(in);\n            m_logCat.info(\"Starting transfert of \" + in);\n            ftp.storeFile(out, input);\n            m_logCat.info(in + \" uploaded successfully\");\n            input.close();\n            ftp.logout();\n        } catch (FTPConnectionClosedException e) {\n            m_logCat.error(\"Server closed connection.\", e);\n        } finally {\n            if (ftp.isConnected()) {\n                try {\n                    ftp.disconnect();\n                } catch (IOException f) {\n                }\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_00112491",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void convert(File src, File dest) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void convert(File src, File dest) throws IOException {\n        InputStream in = new BufferedInputStream(new FileInputStream(src));\n        DcmParser p = pfact.newDcmParser(in);\n        Dataset ds = fact.newDataset();\n        p.setDcmHandler(ds.getDcmHandler());\n        try {\n            FileFormat format = p.detectFileFormat();\n            if (format != FileFormat.ACRNEMA_STREAM) {\n                System.out.println(\"\\n\" + src + \": not an ACRNEMA stream!\");\n                return;\n            }\n            p.parseDcmFile(format, Tags.PixelData);\n            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n                System.out.println(\"\\n\" + src + \": contains UIDs!\" + \" => probable already DICOM - do not convert\");\n                return;\n            }\n            boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n            int pxlen = p.getReadLength();\n            if (hasPixelData) {\n                if (inflate) {\n                    ds.putUS(Tags.BitsAllocated, 16);\n                    pxlen = pxlen * 4 / 3;\n                }\n                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n                    System.out.println(\"\\n\" + src + \": mismatch pixel data length!\" + \" => do not convert\");\n                    return;\n                }\n            }\n            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n            ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n            ds.putUI(Tags.SOPClassUID, classUID);\n            if (!ds.contains(Tags.NumberOfSamples)) {\n                ds.putUS(Tags.NumberOfSamples, 1);\n            }\n            if (!ds.contains(Tags.PhotometricInterpretation)) {\n                ds.putCS(Tags.PhotometricInterpretation, \"MONOCHROME2\");\n            }\n            if (fmi) {\n                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n            }\n            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n            try {\n            } finally {\n                ds.writeFile(out, encodeParam());\n                if (hasPixelData) {\n                    if (!skipGroupLen) {\n                        out.write(PXDATA_GROUPLEN);\n                        int grlen = pxlen + 8;\n                        out.write((byte) grlen);\n                        out.write((byte) (grlen >> 8));\n                        out.write((byte) (grlen >> 16));\n                        out.write((byte) (grlen >> 24));\n                    }\n                    out.write(PXDATA_TAG);\n                    out.write((byte) pxlen);\n                    out.write((byte) (pxlen >> 8));\n                    out.write((byte) (pxlen >> 16));\n                    out.write((byte) (pxlen >> 24));\n                }\n                if (inflate) {\n                    int b2, b3;\n                    for (; pxlen > 0; pxlen -= 3) {\n                        out.write(in.read());\n                        b2 = in.read();\n                        b3 = in.read();\n                        out.write(b2 & 0x0f);\n                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n                        out.write(b3 >> 4);\n                    }\n                } else {\n                    for (; pxlen > 0; --pxlen) {\n                        out.write(in.read());\n                    }\n                }\n                out.close();\n            }\n            System.out.print('.');\n        } finally {\n            in.close();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11261168",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String encryptPassword(String password) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String encryptPassword(String password) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        final MessageDigest digester = MessageDigest.getInstance(\"sha-256\");\n        digester.reset();\n        digester.update(\"Carmen Sandiago\".getBytes());\n        return asHex(digester.digest(password.getBytes(\"UTF-8\")));\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11261440",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static String func(String sf) {\n        int total = 0, temp;\n        String fnctn[] = { \"sin\", \"cos\", \"tan\", \"log\", \"ln\", \"sqrt\", \"!\" }, temp2 = \"\";\n        int pos[] = new int[7];\n        for (int n = 0; n < fnctn.length; n++) {\n            pos[n] = sf.lastIndexOf(fnctn[n]);\n        }\n        for (int m = 0; m < fnctn.length; m++) {\n            total += pos[m];\n        }\n        if (total == -7) {\n            return sf;\n        }\n        for (int i = pos.length; i > 1; i--) {\n            for (int j = 0; j < i - 1; j++) {\n                if (pos[j] < pos[j + 1]) {\n                    temp = pos[j];\n                    pos[j] = pos[j + 1];\n                    pos[j + 1] = temp;\n                    temp2 = fnctn[j];\n                    fnctn[j] = fnctn[j + 1];\n                    fnctn[j + 1] = temp2;\n                }\n            }\n        }\n        if (fnctn[0].equals(\"sin\")) {\n            if ((pos[0] == 0 || sf.charAt(pos[0] - 1) != 'a')) {\n                return func(Functions.sine(sf, pos[0], false));\n            } else {\n                return func(Functions.asin(sf, pos[0], false));\n            }\n        } else if (fnctn[0].equals(\"cos\")) {\n            if ((pos[0] == 0 || sf.charAt(pos[0] - 1) != 'a')) {\n                return func(Functions.cosine(sf, pos[0], false));\n            } else {\n                return func(Functions.acos(sf, pos[0], false));\n            }\n        } else if (fnctn[0].equals(\"tan\")) {\n            if ((pos[0] == 0 || sf.charAt(pos[0] - 1) != 'a')) {\n                return func(Functions.tangent(sf, pos[0], false));\n            } else {\n                return func(Functions.atan(sf, pos[0], false));\n            }\n        } else if (fnctn[0].equals(\"log\")) {\n            return func(Functions.logarithm(sf, pos[0]));\n        } else if (fnctn[0].equals(\"ln\")) {\n            return func(Functions.lnat(sf, pos[0]));\n        } else if (fnctn[0].equals(\"sqrt\")) {\n            return func(Functions.sqroot(sf, pos[0]));\n        } else {\n            return func(Functions.factorial(sf, pos[0]));\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01126225",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copyFile(File src, File dst) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@SuppressWarnings(\"null\")\n    public static void copyFile(File src, File dst) throws IOException {\n        if (!dst.getParentFile().exists()) {\n            dst.getParentFile().mkdirs();\n        }\n        dst.createNewFile();\n        FileChannel srcC = null;\n        FileChannel dstC = null;\n        try {\n            srcC = new FileInputStream(src).getChannel();\n            dstC = new FileOutputStream(dst).getChannel();\n            dstC.transferFrom(srcC, 0, srcC.size());\n        } finally {\n            try {\n                if (dst != null) {\n                    dstC.close();\n                }\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n            try {\n                if (src != null) {\n                    srcC.close();\n                }\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11265072",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void unzip(File sourceZipFile, File unzipDestinationDirectory, FileFilter filter) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void unzip(File sourceZipFile, File unzipDestinationDirectory, FileFilter filter) throws IOException {\n        unzipDestinationDirectory.mkdirs();\n        if (!unzipDestinationDirectory.exists()) {\n            throw new IOException(\"Unable to create destination directory: \" + unzipDestinationDirectory);\n        }\n        ZipFile zipFile;\n        zipFile = new ZipFile(sourceZipFile, ZipFile.OPEN_READ);\n        Enumeration<? extends ZipEntry> zipFileEntries = zipFile.entries();\n        while (zipFileEntries.hasMoreElements()) {\n            ZipEntry entry = (ZipEntry) zipFileEntries.nextElement();\n            if (!entry.isDirectory()) {\n                String currentEntry = entry.getName();\n                File destFile = new File(unzipDestinationDirectory, currentEntry);\n                if (filter == null || filter.accept(destFile)) {\n                    File destinationParent = destFile.getParentFile();\n                    destinationParent.mkdirs();\n                    BufferedInputStream is = new BufferedInputStream(zipFile.getInputStream(entry));\n                    FileOutputStream fos = new FileOutputStream(destFile);\n                    IOUtils.copyLarge(is, fos);\n                    fos.flush();\n                    IOUtils.closeQuietly(fos);\n                }\n            }\n        }\n        zipFile.close();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11265073",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void zip(File srcDir, File destFile, FileFilter filter) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void zip(File srcDir, File destFile, FileFilter filter) throws IOException {\n        ZipOutputStream out = null;\n        try {\n            out = new ZipOutputStream(new FileOutputStream(destFile));\n            Collection<File> files = FileUtils.listFiles(srcDir, TrueFileFilter.TRUE, TrueFileFilter.TRUE);\n            for (File f : files) {\n                if (filter == null || filter.accept(f)) {\n                    FileInputStream in = FileUtils.openInputStream(f);\n                    out.putNextEntry(new ZipEntry(Util.relativePath(srcDir, f).replace('\\\\', '/')));\n                    IOUtils.copyLarge(in, out);\n                    out.closeEntry();\n                    IOUtils.closeQuietly(in);\n                }\n            }\n            IOUtils.closeQuietly(out);\n        } catch (Throwable t) {\n            throw new IOException(\"Failed to create zip file\", t);\n        } finally {\n            if (out != null) {\n                out.flush();\n                IOUtils.closeQuietly(out);\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11268952",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic Vector split() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public Vector split() {\n        File nextFile = new File(filename);\n        long fileSize = nextFile.length();\n        long parts = fileSize / splitSize;\n        Vector vec = new Vector(new Long(parts).intValue());\n        if (debug) {\n            System.out.println(\"File: \" + nextFile.getName() + \"\\nfileSize: \" + fileSize + \"\\nsplitSize: \" + splitSize + \"\\nparts: \" + parts);\n        }\n        if (fileSize % splitSize > 0) {\n            parts++;\n        }\n        try {\n            FileInputStream fis = new FileInputStream(nextFile);\n            DataInputStream dis = new DataInputStream(fis);\n            long bytesRead = 0;\n            File destinationDirectory = new File(nextFile.getParent());\n            if (!destinationDirectory.exists()) {\n                destinationDirectory.mkdir();\n            }\n            for (long k = 0; k < parts; k++) {\n                if (debug) {\n                    System.out.println(\"Splitting parts: \" + nextFile.getName() + \" into part \" + k);\n                }\n                String filePartName = nextFile.getName();\n                filePartName = filePartName + \".\" + String.valueOf(k);\n                File outputFile = new File(destinationDirectory, filePartName);\n                FileOutputStream fos = new FileOutputStream(outputFile);\n                DataOutputStream dos = new DataOutputStream(fos);\n                long bytesWritten = 0;\n                while ((bytesWritten < splitSize) && (bytesRead < fileSize)) {\n                    dos.writeByte(dis.readByte());\n                    bytesRead++;\n                    bytesWritten++;\n                }\n                dos.close();\n                vec.addElement(outputFile.getAbsolutePath());\n                if (debug) {\n                    System.out.println(\"Wrote \" + bytesWritten + \" bytes.\" + outputFile.getName() + \" created.\");\n                }\n            }\n        } catch (FileNotFoundException fnfe) {\n            System.err.println(\"FileNotFoundException: \" + fnfe.getMessage());\n            vec = null;\n        } catch (IOException ioe) {\n            System.err.println(\"IOException: \" + ioe.getMessage());\n            vec = null;\n        }\n        return vec;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11270196",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String encipherAMessage(String message) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String encipherAMessage(String message) {\n        try {\n            MessageDigest sha1 = MessageDigest.getInstance(java.util.ResourceBundle.getBundle(\"com/jjcp/resources/Strings\").getString(\"SHA1\"));\n            sha1.update(message.getBytes(java.util.ResourceBundle.getBundle(\"com/jjcp/resources/Strings\").getString(\"UTF-16LE\")));\n            byte[] digest = sha1.digest();\n            BASE64Encoder base64encoder = new BASE64Encoder();\n            String cipherTextB64 = base64encoder.encode(digest);\n            return cipherTextB64;\n        } catch (UnsupportedEncodingException ex) {\n            Logger.getLogger(SelectorView.class.getName()).log(Level.SEVERE, null, ex);\n        } catch (NoSuchAlgorithmException ex) {\n            Logger.getLogger(SelectorView.class.getName()).log(Level.SEVERE, null, ex);\n        }\n        return \"\";\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11275834",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void createHomeTab() {\n        Tabpanel homeTab = new Tabpanel();\n        windowContainer.addWindow(homeTab, Msg.getMsg(EnvWeb.getCtx(), \"Home\").replaceAll(\"&\", \"\"), false);\n        Portallayout portalLayout = new Portallayout();\n        portalLayout.setWidth(\"100%\");\n        portalLayout.setHeight(\"100%\");\n        portalLayout.setStyle(\"position: absolute; overflow: auto\");\n        homeTab.appendChild(portalLayout);\n        Portalchildren portalchildren = null;\n        int currentColumnNo = 0;\n        String sql = \"SELECT COUNT(DISTINCT COLUMNNO) \" + \"FROM PA_DASHBOARDCONTENT \" + \"WHERE (AD_CLIENT_ID=0 OR AD_CLIENT_ID=?) AND ISACTIVE='Y'\";\n        int noOfCols = DB.getSQLValue(null, sql, EnvWeb.getCtx().getAD_Client_ID());\n        int width = noOfCols <= 0 ? 100 : 100 / noOfCols;\n        sql = \"SELECT x.*, m.AD_MENU_ID \" + \"FROM PA_DASHBOARDCONTENT x \" + \"LEFT OUTER JOIN AD_MENU m ON x.AD_WINDOW_ID=m.AD_WINDOW_ID \" + \"WHERE (x.AD_CLIENT_ID=0 OR x.AD_CLIENT_ID=?) AND x.ISACTIVE='Y' \" + \"AND x.zulfilepath not in (?, ?, ?) \" + \"ORDER BY x.COLUMNNO, x.AD_CLIENT_ID, x.LINE \";\n        PreparedStatement pstmt = null;\n        ResultSet rs = null;\n        try {\n            pstmt = DB.prepareStatement(sql, null);\n            pstmt.setInt(1, EnvWeb.getCtx().getAD_Client_ID());\n            pstmt.setString(2, ACTIVITIES_PATH);\n            pstmt.setString(3, FAVOURITES_PATH);\n            pstmt.setString(4, VIEWS_PATH);\n            rs = pstmt.executeQuery();\n            while (rs.next()) {\n                int columnNo = rs.getInt(\"ColumnNo\");\n                if (portalchildren == null || currentColumnNo != columnNo) {\n                    portalchildren = new Portalchildren();\n                    portalLayout.appendChild(portalchildren);\n                    portalchildren.setWidth(width + \"%\");\n                    portalchildren.setStyle(\"padding: 5px\");\n                    currentColumnNo = columnNo;\n                }\n                Panel panel = new Panel();\n                panel.setStyle(\"margin-bottom:10px\");\n                panel.setTitle(rs.getString(\"Name\"));\n                String description = rs.getString(\"Description\");\n                if (description != null) panel.setTooltiptext(description);\n                String collapsible = rs.getString(\"IsCollapsible\");\n                panel.setCollapsible(collapsible.equals(\"Y\"));\n                panel.setBorder(\"normal\");\n                portalchildren.appendChild(panel);\n                Panelchildren content = new Panelchildren();\n                panel.appendChild(content);\n                boolean panelEmpty = true;\n                String htmlContent = rs.getString(\"HTML\");\n                if (htmlContent != null) {\n                    StringBuffer result = new StringBuffer(\"<html><head>\");\n                    URL url = getClass().getClassLoader().getResource(\"org/compiere/images/PAPanel.css\");\n                    InputStreamReader ins;\n                    try {\n                        ins = new InputStreamReader(url.openStream());\n                        BufferedReader bufferedReader = new BufferedReader(ins);\n                        String cssLine;\n                        while ((cssLine = bufferedReader.readLine()) != null) result.append(cssLine + \"\\n\");\n                    } catch (IOException e1) {\n                        logger.log(Level.SEVERE, e1.getLocalizedMessage(), e1);\n                    }\n                    result.append(\"</head><body><div class=\\\"content\\\">\\n\");\n                    result.append(stripHtml(htmlContent, false) + \"<br>\\n\");\n                    result.append(\"</div>\\n</body>\\n</html>\\n</html>\");\n                    Html html = new Html();\n                    html.setContent(result.toString());\n                    content.appendChild(html);\n                    panelEmpty = false;\n                }\n                int AD_Window_ID = rs.getInt(\"AD_Window_ID\");\n                if (AD_Window_ID > 0) {\n                    int AD_Menu_ID = rs.getInt(\"AD_Menu_ID\");\n                    ToolBarButton btn = new ToolBarButton(String.valueOf(AD_Menu_ID));\n                    MMenu menu = new MMenu(EnvWeb.getCtx(), AD_Menu_ID, null);\n                    btn.setLabel(menu.getName());\n                    btn.addEventListener(Events.ON_CLICK, this);\n                    content.appendChild(btn);\n                    panelEmpty = false;\n                }\n                int PA_Goal_ID = rs.getInt(\"PA_Goal_ID\");\n                if (PA_Goal_ID > 0) {\n                    StringBuffer result = new StringBuffer(\"<html><head>\");\n                    URL url = getClass().getClassLoader().getResource(\"org/compiere/images/PAPanel.css\");\n                    InputStreamReader ins;\n                    try {\n                        ins = new InputStreamReader(url.openStream());\n                        BufferedReader bufferedReader = new BufferedReader(ins);\n                        String cssLine;\n                        while ((cssLine = bufferedReader.readLine()) != null) result.append(cssLine + \"\\n\");\n                    } catch (IOException e1) {\n                        logger.log(Level.SEVERE, e1.getLocalizedMessage(), e1);\n                    }\n                    result.append(\"</head><body><div class=\\\"content\\\">\\n\");\n                    result.append(renderGoals(PA_Goal_ID, content));\n                    result.append(\"</div>\\n</body>\\n</html>\\n</html>\");\n                    Html html = new Html();\n                    html.setContent(result.toString());\n                    content.appendChild(html);\n                    panelEmpty = false;\n                }\n                String url = rs.getString(\"ZulFilePath\");\n                if (url != null) {\n                    try {\n                        Component component = Executions.createComponents(url, content, null);\n                        if (component != null) {\n                            if (component instanceof DashboardPanel) {\n                                DashboardPanel dashboardPanel = (DashboardPanel) component;\n                                if (!dashboardPanel.getChildren().isEmpty()) {\n                                    content.appendChild(dashboardPanel);\n                                    dashboardRunnable.add(dashboardPanel);\n                                    panelEmpty = false;\n                                }\n                            } else {\n                                content.appendChild(component);\n                                panelEmpty = false;\n                            }\n                        }\n                    } catch (Exception e) {\n                        logger.log(Level.WARNING, \"Failed to create components. zul=\" + url, e);\n                    }\n                }\n                if (panelEmpty) panel.detach();\n            }\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Failed to create dashboard content\", e);\n        } finally {\n            Util.closeCursor(pstmt, rs);\n        }\n        registerWindow(homeTab);\n        if (!portalLayout.getDesktop().isServerPushEnabled()) portalLayout.getDesktop().enableServerPush(true);\n        dashboardRunnable.refreshDashboard();\n        dashboardThread = new Thread(dashboardRunnable, \"UpdateInfo\");\n        dashboardThread.setDaemon(true);\n        dashboardThread.start();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11277510",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void channelCopy(File source, File dest) throws IOException {\n        FileChannel srcChannel = new FileInputStream(source).getChannel();\n        FileChannel dstChannel = new FileOutputStream(dest).getChannel();\n        try {\n            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n        } finally {\n            srcChannel.close();\n            dstChannel.close();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11277690",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "File exportCommunityData(Community community) throws CommunityNotActiveException, FileNotFoundException, IOException, CommunityNotFoundException {\n        try {\n            String communityId = community.getId();\n            if (!community.isActive()) {\n                log.error(\"The community with id \" + communityId + \" is inactive\");\n                throw new CommunityNotActiveException(\"The community with id \" + communityId + \" is inactive\");\n            }\n            new File(CommunityManagerImpl.EXPORTED_COMMUNITIES_PATH).mkdirs();\n            String communityName = community.getName();\n            String communityType = community.getType();\n            String communityTitle = I18NUtils.localize(community.getTitle());\n            File zipOutFilename;\n            if (community.isPersonalCommunity()) {\n                zipOutFilename = new File(CommunityManagerImpl.EXPORTED_COMMUNITIES_PATH + communityName + \".zip\");\n            } else {\n                zipOutFilename = new File(CommunityManagerImpl.EXPORTED_COMMUNITIES_PATH + MANUAL_EXPORTED_COMMUNITY_PREFIX + communityTitle + \".zip\");\n            }\n            ZipOutputStream out = new ZipOutputStream(new FileOutputStream(zipOutFilename));\n            File file = File.createTempFile(\"exported-community\", null);\n            TemporaryFilesHandler.register(null, file);\n            FileOutputStream fos = new FileOutputStream(file);\n            String contentPath = JCRUtil.getNodeById(communityId).getPath();\n            JCRUtil.currentSession().exportSystemView(contentPath, fos, false, false);\n            fos.close();\n            File propertiesFile = File.createTempFile(\"exported-community-properties\", null);\n            TemporaryFilesHandler.register(null, propertiesFile);\n            FileOutputStream fosProperties = new FileOutputStream(propertiesFile);\n            fosProperties.write((\"communityId=\" + communityId).getBytes());\n            fosProperties.write(\";\".getBytes());\n            fosProperties.write((\"externalId=\" + community.getExternalId()).getBytes());\n            fosProperties.write(\";\".getBytes());\n            fosProperties.write((\"title=\" + communityTitle).getBytes());\n            fosProperties.write(\";\".getBytes());\n            fosProperties.write((\"communityType=\" + communityType).getBytes());\n            fosProperties.write(\";\".getBytes());\n            fosProperties.write((\"communityName=\" + communityName).getBytes());\n            fosProperties.close();\n            FileInputStream finProperties = new FileInputStream(propertiesFile);\n            byte[] bufferProperties = new byte[4096];\n            out.putNextEntry(new ZipEntry(\"properties\"));\n            int readProperties = 0;\n            while ((readProperties = finProperties.read(bufferProperties)) > 0) {\n                out.write(bufferProperties, 0, readProperties);\n            }\n            finProperties.close();\n            FileInputStream fin = new FileInputStream(file);\n            byte[] buffer = new byte[4096];\n            out.putNextEntry(new ZipEntry(\"xmlData\"));\n            int read = 0;\n            while ((read = fin.read(buffer)) > 0) {\n                out.write(buffer, 0, read);\n            }\n            fin.close();\n            out.close();\n            community.setActive(Boolean.FALSE);\n            communityPersister.saveCommunity(community);\n            Collection<Community> duplicatedPersonalCommunities = communityPersister.searchCommunitiesByName(communityName);\n            if (CommunityManager.PERSONAL_COMMUNITY_TYPE.equals(communityType)) {\n                for (Community currentCommunity : duplicatedPersonalCommunities) {\n                    if (currentCommunity.isActive()) {\n                        currentCommunity.setActive(Boolean.FALSE);\n                        communityPersister.saveCommunity(currentCommunity);\n                    }\n                }\n            }\n            return zipOutFilename;\n        } catch (RepositoryException e) {\n            log.error(\"Error getting community with id \" + community.getId());\n            throw new GroupwareRuntimeException(\"Error getting community with id \" + community.getId(), e.getCause());\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11279071",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String getSHA1Digest(String inputStr) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String getSHA1Digest(String inputStr) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        MessageDigest md = null;\n        byte[] sha1hash = null;\n        md = MessageDigest.getInstance(\"SHA\");\n        sha1hash = new byte[40];\n        md.update(inputStr.getBytes(\"iso-8859-1\"), 0, inputStr.length());\n        sha1hash = md.digest();\n        return convertToHex(sha1hash);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11288113",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic AssemblyConfig load() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public AssemblyConfig load() {\n        AssemblyConfig assembly = null;\n        Digester digester = createParser();\n        try {\n            if (inputStream != null) {\n                if (logger.isDebugEnabled()) {\n                    logger.debug(\"XML config loader is parsing an inputstream:\" + inputStream);\n                }\n                assembly = (AssemblyConfig) digester.parse(inputStream);\n            } else if (file != null) {\n                if (logger.isDebugEnabled()) {\n                    logger.debug(\"XML config loader is parsing a file:\" + file);\n                }\n                assembly = (AssemblyConfig) digester.parse(file);\n            } else {\n                if (logger.isDebugEnabled()) {\n                    logger.debug(\"XML config loader is parsing a URI:\" + uri);\n                }\n                URL url = new URL(uri);\n                inputStream = url.openStream();\n                assembly = (AssemblyConfig) digester.parse(inputStream);\n            }\n            if (assembly != null) {\n                logger.debug(\"Services from XML configuration are: \");\n                logger.debug(assembly.toString());\n            } else {\n                throw new AssemblyConfigException(\"Unable to parse the XML assembly configuration. \" + \"HINT: Please check the schema/grammar of the supplied \" + \"XML document and verify the XML namespace is correct.\");\n            }\n        } catch (IOException ioe) {\n            throw new AssemblyConfigException(\"I/O failure, unable to process configuration\", ioe);\n        } catch (SAXException sxe) {\n            throw new AssemblyConfigException(\"XML Reader failure, unable to process configuration\", sxe);\n        }\n        return assembly;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11290317",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void trainSRLParser(byte flag, JarArchiveOutputStream zout) throws Exception {\n        AbstractSRLParser labeler = null;\n        AbstractDecoder[] decoder = null;\n        if (flag == SRLParser.FLAG_TRAIN_LEXICON) {\n            System.out.println(\"\\n* Save lexica\");\n            labeler = new SRLParser(flag, s_featureXml);\n        } else if (flag == SRLParser.FLAG_TRAIN_INSTANCE) {\n            System.out.println(\"\\n* Print training instances\");\n            System.out.println(\"- loading lexica\");\n            labeler = new SRLParser(flag, t_xml, s_lexiconFiles);\n        } else if (flag == SRLParser.FLAG_TRAIN_BOOST) {\n            System.out.println(\"\\n* Train boost\");\n            decoder = new AbstractDecoder[m_model.length];\n            for (int i = 0; i < decoder.length; i++) decoder[i] = new OneVsAllDecoder((OneVsAllModel) m_model[i]);\n            labeler = new SRLParser(flag, t_xml, t_map, decoder);\n        }\n        AbstractReader<DepNode, DepTree> reader = new SRLReader(s_trainFile, true);\n        DepTree tree;\n        int n;\n        labeler.setLanguage(s_language);\n        reader.setLanguage(s_language);\n        for (n = 0; (tree = reader.nextTree()) != null; n++) {\n            labeler.parse(tree);\n            if (n % 1000 == 0) System.out.printf(\"\\r- parsing: %dK\", n / 1000);\n        }\n        System.out.println(\"\\r- labeling: \" + n);\n        if (flag == SRLParser.FLAG_TRAIN_LEXICON) {\n            System.out.println(\"- labeling\");\n            labeler.saveTags(s_lexiconFiles);\n            t_xml = labeler.getSRLFtrXml();\n        } else if (flag == SRLParser.FLAG_TRAIN_INSTANCE || flag == SRLParser.FLAG_TRAIN_BOOST) {\n            a_yx = labeler.a_trans;\n            zout.putArchiveEntry(new JarArchiveEntry(ENTRY_FEATURE));\n            IOUtils.copy(new FileInputStream(s_featureXml), zout);\n            zout.closeArchiveEntry();\n            for (String lexicaFile : s_lexiconFiles) {\n                zout.putArchiveEntry(new JarArchiveEntry(lexicaFile));\n                IOUtils.copy(new FileInputStream(lexicaFile), zout);\n                zout.closeArchiveEntry();\n            }\n            if (flag == SRLParser.FLAG_TRAIN_INSTANCE) t_map = labeler.getSRLFtrMap();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11291099",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void visit(BosMember member) throws BosException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void visit(BosMember member) throws BosException {\n        String relative = AddressingUtil.getRelativePath(member.getDataSourceUri(), baseUri);\n        URL resultUrl;\n        try {\n            resultUrl = new URL(outputUrl, relative);\n            File resultFile = new File(resultUrl.toURI());\n            resultFile.getParentFile().mkdirs();\n            log.info(\"Creating result file \\\"\" + resultFile.getAbsolutePath() + \"\\\"...\");\n            IOUtils.copy(member.getInputStream(), new FileOutputStream(resultFile));\n        } catch (Exception e) {\n            throw new BosException(e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11305839",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic boolean setCliente(int IDcliente, String nombre, String paterno, String materno, String ocupacion, String rfc) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public boolean setCliente(int IDcliente, String nombre, String paterno, String materno, String ocupacion, String rfc) {\n        boolean inserto = false;\n        try {\n            stm = conexion.prepareStatement(\"insert into clientes values( '\" + IDcliente + \"' , '\" + nombre.toUpperCase() + \"' , '\" + paterno.toUpperCase() + \"' , '\" + materno.toUpperCase() + \"' , '\" + ocupacion.toUpperCase() + \"' , '\" + rfc + \"' )\");\n            stm.executeUpdate();\n            conexion.commit();\n            inserto = true;\n        } catch (SQLException e) {\n            System.out.println(\"error al insertar registro en la tabla clientes general  \" + e.getMessage());\n            try {\n                conexion.rollback();\n            } catch (SQLException ee) {\n                System.out.println(ee.getMessage());\n            }\n            return inserto = false;\n        }\n        return inserto;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11305840",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic boolean setUpdateCliente(int IDcliente, String nombre, String paterno, String materno, String ocupacion, String rfc) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public boolean setUpdateCliente(int IDcliente, String nombre, String paterno, String materno, String ocupacion, String rfc) {\n        boolean update = false;\n        try {\n            stm = conexion.prepareStatement(\"update clientes set nombre='\" + nombre.toUpperCase().trim() + \"' , paterno='\" + paterno.toUpperCase().trim() + \"' ,\" + \"materno='\" + materno.toUpperCase().trim() + \"',ocupacion='\" + ocupacion.toUpperCase().trim() + \"',rfc='\" + rfc.trim() + \"' where IDcliente ='\" + IDcliente + \"' \");\n            stm.executeUpdate();\n            conexion.commit();\n            update = true;\n        } catch (SQLException e) {\n            System.out.println(\"error al actualizar registro en la tabla clientes  \" + e.getMessage());\n            try {\n                conexion.rollback();\n            } catch (SQLException ee) {\n                System.out.println(ee.getMessage());\n            }\n            return update = false;\n        }\n        return update;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11305841",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic boolean setDeleteCliente(int IDcliente) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public boolean setDeleteCliente(int IDcliente) {\n        boolean delete = false;\n        try {\n            stm = conexion.prepareStatement(\"delete clientes where IDcliente='\" + IDcliente + \"'\");\n            stm.executeUpdate();\n            conexion.commit();\n            delete = true;\n        } catch (SQLException e) {\n            System.out.println(\"Error en la eliminacion del registro en tabla clientes \" + e.getMessage());\n            try {\n                conexion.rollback();\n            } catch (SQLException ee) {\n                System.out.println(ee.getMessage());\n            }\n            return delete = false;\n        }\n        return delete;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11312019",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String sendGetRequest(String endpoint, String requestParameters) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String sendGetRequest(String endpoint, String requestParameters) {\n        String result = null;\n        if (endpoint.startsWith(\"http://\")) {\n            try {\n                System.setProperty(\"java.net.useSystemProxies\", \"true\");\n                String urlStr = endpoint;\n                if (requestParameters != null && requestParameters.length() > 0) {\n                    urlStr += \"?\" + requestParameters;\n                }\n                URL url = new URL(urlStr);\n                URLConnection conn = url.openConnection();\n                BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n                StringBuffer sb = new StringBuffer();\n                String line;\n                while ((line = rd.readLine()) != null) {\n                    sb.append(line + \"\\n\");\n                }\n                rd.close();\n                result = sb.toString();\n            } catch (Exception e) {\n                DebuggerQueue.addDebug(HTTPClient.class.getName(), Level.ERROR, \"Error during download url %s error: %s\", endpoint, e.getMessage());\n            }\n        }\n        return result;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11312020",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void postData(Reader data, URL endpoint, Writer output) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void postData(Reader data, URL endpoint, Writer output) throws Exception {\n        HttpURLConnection urlc = null;\n        try {\n            urlc = (HttpURLConnection) endpoint.openConnection();\n            try {\n                urlc.setRequestMethod(\"POST\");\n            } catch (ProtocolException e) {\n                throw new Exception(\"Shouldn't happen: HttpURLConnection doesn't support POST??\", e);\n            }\n            urlc.setDoOutput(true);\n            urlc.setDoInput(true);\n            urlc.setUseCaches(false);\n            urlc.setAllowUserInteraction(false);\n            urlc.setRequestProperty(\"Content-type\", \"text/xml; charset=\" + \"UTF-8\");\n            OutputStream out = urlc.getOutputStream();\n            try {\n                Writer writer = new OutputStreamWriter(out, \"UTF-8\");\n                pipe(data, writer);\n                writer.close();\n            } catch (IOException e) {\n                throw new Exception(\"IOException while posting data\", e);\n            } finally {\n                if (out != null) out.close();\n            }\n            InputStream in = urlc.getInputStream();\n            try {\n                Reader reader = new InputStreamReader(in);\n                pipe(reader, output);\n                reader.close();\n            } catch (IOException e) {\n                throw new Exception(\"IOException while reading response\", e);\n            } finally {\n                if (in != null) in.close();\n            }\n        } catch (IOException e) {\n            throw new Exception(\"Connection error (is server running at \" + endpoint + \" ?): \" + e);\n        } finally {\n            if (urlc != null) urlc.disconnect();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11312022",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void downloadFromUrl(URL url, String localFilename, String userAgent) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void downloadFromUrl(URL url, String localFilename, String userAgent) throws IOException {\n        InputStream is = null;\n        FileOutputStream fos = null;\n        System.setProperty(\"java.net.useSystemProxies\", \"true\");\n        try {\n            URLConnection urlConn = url.openConnection();\n            if (userAgent != null) {\n                urlConn.setRequestProperty(\"User-Agent\", userAgent);\n            }\n            is = urlConn.getInputStream();\n            fos = new FileOutputStream(localFilename);\n            byte[] buffer = new byte[4096];\n            int len;\n            while ((len = is.read(buffer)) > 0) {\n                fos.write(buffer, 0, len);\n            }\n        } finally {\n            try {\n                if (is != null) {\n                    is.close();\n                }\n            } finally {\n                if (fos != null) {\n                    fos.close();\n                }\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11314000",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String getFileText(URL _url) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String getFileText(URL _url) {\n        try {\n            InputStream input = _url.openStream();\n            String content = IOUtils.toString(input);\n            IOUtils.closeQuietly(input);\n            return content;\n        } catch (Exception err) {\n            LOG.error(_url.toString(), err);\n            return \"\";\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11314012",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static java.io.ByteArrayOutputStream getFileByteStream(URL _url) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static java.io.ByteArrayOutputStream getFileByteStream(URL _url) {\n        java.io.ByteArrayOutputStream buffer = new java.io.ByteArrayOutputStream();\n        try {\n            InputStream input = _url.openStream();\n            IOUtils.copy(input, buffer);\n            IOUtils.closeQuietly(input);\n        } catch (Exception err) {\n            throw new RuntimeException(err);\n        }\n        return buffer;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11314030",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copyFile(File source, File destination) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copyFile(File source, File destination) {\n        if (!source.exists()) {\n            return;\n        }\n        if ((destination.getParentFile() != null) && (!destination.getParentFile().exists())) {\n            destination.getParentFile().mkdirs();\n        }\n        try {\n            FileChannel srcChannel = new FileInputStream(source).getChannel();\n            FileChannel dstChannel = new FileOutputStream(destination).getChannel();\n            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n            srcChannel.close();\n            dstChannel.close();\n        } catch (IOException ioe) {\n            ioe.printStackTrace();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11318551",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static int best(int r, int n, int s) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static int best(int r, int n, int s) {\n        if ((n <= 0) || (r < 0) || (r > n) || (s < 0)) return 0;\n        int[] rolls = new int[n];\n        for (int i = 0; i < n; i++) rolls[i] = d(s);\n        boolean found;\n        do {\n            found = false;\n            for (int x = 0; x < n - 1; x++) {\n                if (rolls[x] < rolls[x + 1]) {\n                    int t = rolls[x];\n                    rolls[x] = rolls[x + 1];\n                    rolls[x + 1] = t;\n                    found = true;\n                }\n            }\n        } while (found);\n        int sum = 0;\n        for (int i = 0; i < r; i++) sum += rolls[i];\n        return sum;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11319479",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static boolean encodeFileToFile(String infile, String outfile) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static boolean encodeFileToFile(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] buffer = new byte[65536];\n            int read = -1;\n            while ((read = in.read(buffer)) >= 0) {\n                out.write(buffer, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11319480",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static boolean decodeFileToFile(String infile, String outfile) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static boolean decodeFileToFile(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] buffer = new byte[65536];\n            int read = -1;\n            while ((read = in.read(buffer)) >= 0) {\n                out.write(buffer, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11322572",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void preprocessImages(GeoImage[] detailedImages) throws IOException {\n        for (int i = 0; i < detailedImages.length; i++) {\n            BufferedImage img = loadImage(detailedImages[i].getPath());\n            detailedImages[i].setLatDim(img.getHeight());\n            detailedImages[i].setLonDim(img.getWidth());\n            freeImage(img);\n            String fileName = detailedImages[i].getPath();\n            int dotindex = fileName.lastIndexOf(\".\");\n            dotindex = dotindex < 0 ? 0 : dotindex;\n            String tmp = dotindex < 1 ? fileName : fileName.substring(0, dotindex + 3) + \"w\";\n            System.out.println(\"filename \" + tmp);\n            File worldFile = new File(tmp);\n            if (!worldFile.exists()) {\n                System.out.println(\"Rez: Could not find file: \" + tmp);\n                debug(\"Rez: Could not find directory: \" + tmp);\n                throw new IOException(\"File not Found\");\n            }\n            BufferedReader worldFileReader = new BufferedReader(new InputStreamReader(new FileInputStream(worldFile)));\n            if (staticDebugOn) debug(\"b4nextline: \");\n            line = worldFileReader.readLine();\n            if (staticDebugOn) debug(\"line: \" + line);\n            if (line != null) {\n                tokenizer = new StringTokenizer(line, \" \\n\\t\\r\\\"\", false);\n                detailedImages[i].setLonSpacing(Double.valueOf(tokenizer.nextToken()).doubleValue());\n                detailedImages[i].setLonExtent(detailedImages[i].getLonSpacing() * ((double) detailedImages[i].getLonDim() - 1d));\n                System.out.println(\"setLonExtent \" + detailedImages[i].getLonExtent());\n                line = worldFileReader.readLine();\n                if (staticDebugOn) debug(\"skip line: \" + line);\n                line = worldFileReader.readLine();\n                if (staticDebugOn) debug(\"skip line: \" + line);\n                line = worldFileReader.readLine();\n                if (staticDebugOn) debug(\"line: \" + line);\n                tokenizer = new StringTokenizer(line, \" \\n\\t\\r\\\"\", false);\n                detailedImages[i].setLatSpacing(Double.valueOf(tokenizer.nextToken()).doubleValue());\n                detailedImages[i].setLatExtent(detailedImages[i].getLatSpacing() * ((double) detailedImages[i].getLatDim() - 1d));\n                line = worldFileReader.readLine();\n                if (staticDebugOn) debug(\"line: \" + line);\n                tokenizer = new StringTokenizer(line, \" \\n\\t\\r\\\"\", false);\n                detailedImages[i].setLon(Double.valueOf(tokenizer.nextToken()).doubleValue());\n                line = worldFileReader.readLine();\n                if (staticDebugOn) debug(\"line: \" + line);\n                tokenizer = new StringTokenizer(line, \" \\n\\t\\r\\\"\", false);\n                detailedImages[i].setLat(Double.valueOf(tokenizer.nextToken()).doubleValue());\n                int slashindex = fileName.lastIndexOf(java.io.File.separator);\n                slashindex = slashindex < 0 ? 0 : slashindex;\n                if (slashindex == 0) {\n                    slashindex = fileName.lastIndexOf(\"/\");\n                    slashindex = slashindex < 0 ? 0 : slashindex;\n                }\n                tmp = slashindex < 1 ? fileName : fileName.substring(slashindex + 1, fileName.length());\n                System.out.println(\"filename \" + destinationDirectory + XPlat.fileSep + tmp);\n                detailedImages[i].setPath(tmp);\n                DataInputStream dataIn = new DataInputStream(new BufferedInputStream(new FileInputStream(fileName)));\n                DataOutputStream dataOut = new DataOutputStream(new BufferedOutputStream(new FileOutputStream(destinationDirectory + XPlat.fileSep + tmp)));\n                System.out.println(\"copying to \" + destinationDirectory + XPlat.fileSep + tmp);\n                for (; ; ) {\n                    try {\n                        dataOut.writeShort(dataIn.readShort());\n                    } catch (EOFException e) {\n                        break;\n                    } catch (IOException e) {\n                        break;\n                    }\n                }\n                dataOut.close();\n            } else {\n                System.out.println(\"Rez: ERROR: World file for image is null\");\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11322573",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void preprocessObjects(GeoObject[] objects) throws IOException {\n        System.out.println(\"objects.length \" + objects.length);\n        for (int i = 0; i < objects.length; i++) {\n            String fileName = objects[i].getPath();\n            int dotindex = fileName.lastIndexOf(\".\");\n            dotindex = dotindex < 0 ? 0 : dotindex;\n            String tmp = dotindex < 1 ? fileName : fileName.substring(0, dotindex + 3) + \"w\";\n            System.out.println(\"i: \" + \" world filename \" + tmp);\n            File worldFile = new File(tmp);\n            if (worldFile.exists()) {\n                BufferedReader worldFileReader = new BufferedReader(new InputStreamReader(new FileInputStream(worldFile)));\n                if (staticDebugOn) debug(\"b4nextline: \");\n                line = worldFileReader.readLine();\n                if (staticDebugOn) debug(\"line: \" + line);\n                if (line != null) {\n                    line = worldFileReader.readLine();\n                    if (staticDebugOn) debug(\"line: \" + line);\n                    tokenizer = new StringTokenizer(line, \" \\n\\t\\r\\\"\", false);\n                    objects[i].setLon(Double.valueOf(tokenizer.nextToken()).doubleValue());\n                    line = worldFileReader.readLine();\n                    if (staticDebugOn) debug(\"line: \" + line);\n                    tokenizer = new StringTokenizer(line, \" \\n\\t\\r\\\"\", false);\n                    objects[i].setLat(Double.valueOf(tokenizer.nextToken()).doubleValue());\n                }\n            }\n            File file = new File(objects[i].getPath());\n            if (file.exists()) {\n                System.out.println(\"object src file found \");\n                int slashindex = fileName.lastIndexOf(java.io.File.separator);\n                slashindex = slashindex < 0 ? 0 : slashindex;\n                if (slashindex == 0) {\n                    slashindex = fileName.lastIndexOf(\"/\");\n                    slashindex = slashindex < 0 ? 0 : slashindex;\n                }\n                tmp = slashindex < 1 ? fileName : fileName.substring(slashindex + 1, fileName.length());\n                System.out.println(\"filename \" + destinationDirectory + XPlat.fileSep + tmp);\n                objects[i].setPath(tmp);\n                file = new File(fileName);\n                if (file.exists()) {\n                    DataInputStream dataIn = new DataInputStream(new BufferedInputStream(new FileInputStream(fileName)));\n                    DataOutputStream dataOut = new DataOutputStream(new BufferedOutputStream(new FileOutputStream(destinationDirectory + XPlat.fileSep + tmp)));\n                    System.out.println(\"copying to \" + destinationDirectory + XPlat.fileSep + tmp);\n                    for (; ; ) {\n                        try {\n                            dataOut.writeShort(dataIn.readShort());\n                        } catch (EOFException e) {\n                            break;\n                        } catch (IOException e) {\n                            break;\n                        }\n                    }\n                    dataOut.close();\n                }\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11324607",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic FileData store(FileData data, InputStream stream) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n    @Transactional\n    public FileData store(FileData data, InputStream stream) {\n        try {\n            FileData file = save(data);\n            file.setPath(file.getGroup() + File.separator + file.getId());\n            file = save(file);\n            File folder = new File(PATH, file.getGroup());\n            if (!folder.exists()) folder.mkdirs();\n            File filename = new File(folder, file.getId() + \"\");\n            IOUtils.copyLarge(stream, new FileOutputStream(filename));\n            return file;\n        } catch (IOException e) {\n            throw new ServiceException(\"storage\", e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11329784",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void init() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@PostConstruct\n    public void init() {\n        logger.info(\"+++++ TRACAuditChecklistWizardMB: init() start ++++++++\");\n        try {\n            tracSectionAll = new ArrayList<TRACCriteriaCheckListItem>();\n            List<TRACCriteriaCheckListItem> tracSectionA = new ArrayList<TRACCriteriaCheckListItem>();\n            List<TRACCriteriaCheckListItem> tracSectionB = new ArrayList<TRACCriteriaCheckListItem>();\n            List<TRACCriteriaCheckListItem> tracSectionC = new ArrayList<TRACCriteriaCheckListItem>();\n            URL url = TRACAuditChecklistManagedBean.class.getResource(tracCriteriaPropertiesFileName);\n            tracCriteriaCheckList = new LinkedProperties();\n            tracCriteriaCheckList.load(url.openStream());\n            Set<String> tmpKeys = tracCriteriaCheckList.stringPropertyNames();\n            List<String> sortWrkList = new ArrayList<String>();\n            sortWrkList.addAll(tmpKeys);\n            sortList(sortWrkList);\n            for (String key : sortWrkList) {\n                String aspectCode = key.substring(aspectCodeOffsetValue);\n                logger.info(\"aspectCode=\" + aspectCode);\n                if (aspectCode.startsWith(\"A\")) {\n                    if (aspectCode.equals(\"A\")) {\n                        sectionAcaption = tracCriteriaCheckList.getProperty(key);\n                    } else {\n                        if (aspectCode.length() == 4) {\n                            tracSectionAll.add(new TRACCriteriaCheckListItem(aspectCode, tracCriteriaCheckList.getProperty(key), \"\", \"\", \"\"));\n                        }\n                    }\n                } else if (aspectCode.startsWith(\"B\")) {\n                    if (aspectCode.equals(\"B\")) {\n                        sectionBcaption = tracCriteriaCheckList.getProperty(key);\n                    } else {\n                        if (aspectCode.length() == 4) {\n                            tracSectionAll.add(new TRACCriteriaCheckListItem(aspectCode, tracCriteriaCheckList.getProperty(key), \"\", \"\", \"\"));\n                        }\n                    }\n                } else if (aspectCode.startsWith(\"C\")) {\n                    if (aspectCode.equals(\"C\")) {\n                        sectionCcaption = tracCriteriaCheckList.getProperty(key);\n                    } else {\n                        if (aspectCode.length() == 4) {\n                            tracSectionAll.add(new TRACCriteriaCheckListItem(aspectCode, tracCriteriaCheckList.getProperty(key), \"\", \"\", \"\"));\n                        }\n                    }\n                } else {\n                    logger.warning(\"offset value is wrong: 16th character must be A or B or C\");\n                }\n            }\n        } catch (FileNotFoundException ex) {\n            logger.log(Level.WARNING, \"specified properties file was not found\", ex);\n        } catch (IOException ex) {\n            logger.log(Level.WARNING, \"IO error occurred\", ex);\n        } finally {\n        }\n        logger.info(\"+++++ TRACAuditChecklistWizardMB: init() end   ++++++++\");\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01133122",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "protected Document fetchResource(String method, String parameter, Locale locale, final FloodLimit limit) throws IOException, SAXException {\n        return getDocument(new CachedPage(getResourceLocation(method, parameter, locale)) {\n\n            @Override\n            protected Reader openConnection(URL url) throws IOException {\n                try {\n                    if (limit != null) {\n                        limit.acquirePermit();\n                    }\n                    return super.openConnection(url);\n                } catch (InterruptedException e) {\n                    throw new IOException(e);\n                }\n            }\n\n            ;\n        }.get());\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01133123",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n            protected Reader openConnection(URL url) throws IOException {\n                try {\n                    if (limit != null) {\n                        limit.acquirePermit();\n                    }\n                    return super.openConnection(url);\n                } catch (InterruptedException e) {\n                    throw new IOException(e);\n                }\n            }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11333342",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic AssessmentItemType getAssessmentItemType(String filename) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public AssessmentItemType getAssessmentItemType(String filename) {\n        if (filename.contains(\" \") && (System.getProperty(\"os.name\").contains(\"Windows\"))) {\n            File source = new File(filename);\n            String tempDir = System.getenv(\"TEMP\");\n            File dest = new File(tempDir + \"/temp.xml\");\n            MQMain.logger.info(\"Importing from \" + dest.getAbsolutePath());\n            FileChannel in = null, out = null;\n            try {\n                in = new FileInputStream(source).getChannel();\n                out = new FileOutputStream(dest).getChannel();\n                long size = in.size();\n                MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);\n                out.write(buf);\n            } catch (Exception e) {\n                e.printStackTrace();\n            } finally {\n                if (in != null) try {\n                    in.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n                if (out != null) try {\n                    out.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n                filename = tempDir + \"/temp.xml\";\n            }\n        }\n        AssessmentItemType assessmentItemType = null;\n        JAXBElement<?> jaxbe = null;\n        try {\n            XMLReader reader = XMLReaderFactory.createXMLReader();\n            ChangeNamespace convertfromv2p0tov2p1 = new ChangeNamespace(reader, \"http://www.imsglobal.org/xsd/imsqti_v2p0\", \"http://www.imsglobal.org/xsd/imsqti_v2p1\");\n            SAXSource source = null;\n            try {\n                FileInputStream fis = new FileInputStream(filename);\n                InputStreamReader isr = null;\n                try {\n                    isr = new InputStreamReader(fis, \"UTF-8\");\n                } catch (UnsupportedEncodingException e) {\n                }\n                InputSource is = new InputSource(isr);\n                source = new SAXSource(convertfromv2p0tov2p1, is);\n            } catch (FileNotFoundException e) {\n                MQMain.logger.error(\"SAX/getAssessmentItemType/file not found\");\n            }\n            jaxbe = (JAXBElement<?>) MQModel.qtiCf.unmarshal(MQModel.imsqtiUnmarshaller, source);\n            assessmentItemType = (AssessmentItemType) jaxbe.getValue();\n        } catch (JAXBException e) {\n            MQMain.logger.error(\"JAX/getAssessmentItemType\", e);\n        } catch (SAXException e) {\n            MQMain.logger.error(\"SAX/getAssessmentItemType\", e);\n        }\n        return assessmentItemType;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11334468",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic final int wordFrequency(String word) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public final int wordFrequency(String word) {\n        String replWebQuery = webQuery.replaceFirst(\"WORDREPLACE\", word);\n        try {\n            URL url = new URL(replWebQuery);\n            String content = url.toString();\n            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n            String inputLine;\n            while ((inputLine = in.readLine()) != null) {\n                if (inputLine.matches(nrResultsPattern)) {\n                    int fr = matchedLine(inputLine);\n                    if (fr >= 0) {\n                        return fr;\n                    }\n                }\n            }\n        } catch (MalformedURLException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return 0;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11334494",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void store(Component component, String componentName, int currentPilot) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void store(Component component, String componentName, int currentPilot) {\n        try {\n            PreparedStatement psta = jdbc.prepareStatement(\"UPDATE component_prop \" + \"SET size_height = ?, size_width = ?, pos_x = ?, pos_y = ? \" + \"WHERE pilot_id = ? \" + \"AND component_name = ?\");\n            psta.setInt(1, component.getHeight());\n            psta.setInt(2, component.getWidth());\n            Point point = component.getLocation();\n            psta.setInt(3, point.x);\n            psta.setInt(4, point.y);\n            psta.setInt(5, currentPilot);\n            psta.setString(6, componentName);\n            int update = psta.executeUpdate();\n            if (update == 0) {\n                psta = jdbc.prepareStatement(\"INSERT INTO component_prop \" + \"(size_height, size_width, pos_x, pos_y, pilot_id, component_name) \" + \"VALUES (?,?,?,?,?,?)\");\n                psta.setInt(1, component.getHeight());\n                psta.setInt(2, component.getWidth());\n                psta.setInt(3, point.x);\n                psta.setInt(4, point.y);\n                psta.setInt(5, currentPilot);\n                psta.setString(6, componentName);\n                psta.executeUpdate();\n            }\n            jdbc.commit();\n        } catch (SQLException e) {\n            jdbc.rollback();\n            log.debug(e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11334496",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void reset(String componentName, int currentPilot) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void reset(String componentName, int currentPilot) {\n        try {\n            PreparedStatement psta = jdbc.prepareStatement(\"DELETE FROM component_prop \" + \"WHERE pilot_id = ? \" + \"AND component_name = ?\");\n            psta.setInt(1, currentPilot);\n            psta.setString(2, componentName);\n            psta.executeUpdate();\n            jdbc.commit();\n        } catch (SQLException e) {\n            jdbc.rollback();\n            log.debug(e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11334497",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void reset(int currentPilot) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void reset(int currentPilot) {\n        try {\n            PreparedStatement psta = jdbc.prepareStatement(\"DELETE FROM component_prop \" + \"WHERE pilot_id = ? \");\n            psta.setInt(1, currentPilot);\n            psta.executeUpdate();\n            jdbc.commit();\n        } catch (SQLException e) {\n            jdbc.rollback();\n            log.debug(e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11334912",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void Connect() throws NpsException {\n        try {\n            client = new FTPClient();\n            client.connect(host.hostname, host.remoteport);\n            int reply = client.getReplyCode();\n            if (!FTPReply.isPositiveCompletion(reply)) {\n                client.disconnect();\n                client = null;\n                nps.util.DefaultLog.error_noexception(\"FTP Server:\" + host.hostname + \"refused connection.\");\n                return;\n            }\n            client.login(host.uname, host.upasswd);\n            client.enterLocalPassiveMode();\n            client.setFileType(FTPClient.BINARY_FILE_TYPE);\n            client.changeWorkingDirectory(host.remotedir);\n        } catch (Exception e) {\n            nps.util.DefaultLog.error(e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11335657",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void sorter() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void sorter() {\n        String inputLine1, inputLine2;\n        String epiNames[] = new String[1000];\n        String epiEpisodes[] = new String[1000];\n        int lineCounter = 0;\n        try {\n            String pluginDir = pluginInterface.getPluginDirectoryName();\n            String eplist_file = pluginDir + System.getProperty(\"file.separator\") + \"EpisodeList.txt\";\n            File episodeList = new File(eplist_file);\n            if (!episodeList.isFile()) {\n                episodeList.createNewFile();\n            }\n            final BufferedReader in = new BufferedReader(new FileReader(episodeList));\n            while ((inputLine1 = in.readLine()) != null) {\n                if ((inputLine2 = in.readLine()) != null) {\n                    epiNames[lineCounter] = inputLine1;\n                    epiEpisodes[lineCounter] = inputLine2;\n                    lineCounter++;\n                }\n            }\n            in.close();\n            int epiLength = epiNames.length;\n            for (int i = 0; i < (lineCounter); i++) {\n                for (int j = 0; j < (lineCounter - 1); j++) {\n                    if (epiNames[j].compareToIgnoreCase(epiNames[j + 1]) > 0) {\n                        String temp = epiNames[j];\n                        epiNames[j] = epiNames[j + 1];\n                        epiNames[j + 1] = temp;\n                        String temp2 = epiEpisodes[j];\n                        epiEpisodes[j] = epiEpisodes[j + 1];\n                        epiEpisodes[j + 1] = temp2;\n                    }\n                }\n            }\n            File episodeList2 = new File(eplist_file);\n            BufferedWriter bufWriter = new BufferedWriter(new FileWriter(episodeList2));\n            for (int i = 0; i <= lineCounter; i++) {\n                if (epiNames[i] == null) {\n                    break;\n                }\n                bufWriter.write(epiNames[i] + \"\\n\");\n                bufWriter.write(epiEpisodes[i] + \"\\n\");\n            }\n            bufWriter.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11337538",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String machineInfo() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String machineInfo() {\n        StringBuilder machineInfo = new StringBuilder();\n        try {\n            Enumeration networkInterfaces = NetworkInterface.getNetworkInterfaces();\n            while (networkInterfaces.hasMoreElements()) {\n                NetworkInterface networkInterface = (NetworkInterface) networkInterfaces.nextElement();\n                if (\"eth0\".equals(networkInterface.getDisplayName())) {\n                    for (byte b : networkInterface.getHardwareAddress()) {\n                        StringTools.appendWithDelimiter(machineInfo, String.format(\"%02x\", b).toUpperCase(), \":\");\n                    }\n                    machineInfo.append(\"\\n\");\n                    break;\n                }\n            }\n        } catch (IOException x) {\n            System.out.println(\"LicenseTools.machineInfo: \" + x.getMessage());\n            x.printStackTrace();\n        }\n        if (machineInfo.length() == 0) {\n            return null;\n        }\n        String info = machineInfo.toString();\n        try {\n            MessageDigest messageDigest = MessageDigest.getInstance(\"MD5\", \"SUN\");\n            messageDigest.update(info.getBytes());\n            byte[] md5 = messageDigest.digest(info.getBytes());\n            return new String(Base64.encodeBase64(md5));\n        } catch (Exception x) {\n            System.out.println(\"LicenseTools.machineInfo: \" + x.getMessage());\n            x.printStackTrace();\n        }\n        return null;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11339042",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {\n        PrintWriter out = null;\n        ServletOutputStream outstream = null;\n        try {\n            String action = req.getParameter(\"nmrshiftdbaction\");\n            String relativepath = ServletUtils.expandRelative(this.getServletConfig(), \"/WEB-INF\");\n            TurbineConfig tc = new TurbineConfig(relativepath + \"..\", relativepath + getServletConfig().getInitParameter(\"properties\"));\n            tc.init();\n            int spectrumId = -1;\n            DBSpectrum spectrum = null;\n            Export export = null;\n            String format = req.getParameter(\"format\");\n            if (action.equals(\"test\")) {\n                try {\n                    res.setContentType(\"text/plain\");\n                    out = res.getWriter();\n                    List l = DBSpectrumPeer.executeQuery(\"select SPECTRUM_ID from SPECTRUM limit 1\");\n                    if (l.size() > 0) spectrumId = ((Record) l.get(0)).getValue(1).asInt();\n                    out.write(\"success\");\n                } catch (Exception ex) {\n                    out.write(\"failure\");\n                }\n            } else if (action.equals(\"rss\")) {\n                int numbertoexport = 10;\n                out = res.getWriter();\n                if (req.getParameter(\"numbertoexport\") != null) {\n                    try {\n                        numbertoexport = Integer.parseInt(req.getParameter(\"numbertoexport\"));\n                        if (numbertoexport < 1 || numbertoexport > 20) throw new NumberFormatException(\"Number to small/large\");\n                    } catch (NumberFormatException ex) {\n                        out.println(\"The parameter <code>numbertoexport</code>must be an integer from 1 to 20\");\n                    }\n                }\n                res.setContentType(\"text/xml\");\n                RssWriter rssWriter = new RssWriter();\n                rssWriter.setWriter(res.getWriter());\n                AtomContainerSet soac = new AtomContainerSet();\n                String query = \"select distinct MOLECULE.MOLECULE_ID from MOLECULE, SPECTRUM where SPECTRUM.MOLECULE_ID = MOLECULE.MOLECULE_ID and SPECTRUM.REVIEW_FLAG =\\\"true\\\" order by MOLECULE.DATE desc;\";\n                List l = NmrshiftdbUserPeer.executeQuery(query);\n                for (int i = 0; i < numbertoexport; i++) {\n                    if (i == l.size()) break;\n                    DBMolecule mol = DBMoleculePeer.retrieveByPK(new NumberKey(((Record) l.get(i)).getValue(1).asInt()));\n                    IMolecule cdkmol = mol.getAsCDKMoleculeAsEntered(1);\n                    soac.addAtomContainer(cdkmol);\n                    rssWriter.getLinkmap().put(cdkmol, mol.getEasylink(req));\n                    rssWriter.getDatemap().put(cdkmol, mol.getDate());\n                    rssWriter.getTitlemap().put(cdkmol, mol.getChemicalNamesAsOneStringWithFallback());\n                    rssWriter.getCreatormap().put(cdkmol, mol.getNmrshiftdbUser().getUserName());\n                    rssWriter.setCreator(GeneralUtils.getAdminEmail(getServletConfig()));\n                    Vector v = mol.getDBCanonicalNames();\n                    for (int k = 0; k < v.size(); k++) {\n                        DBCanonicalName canonName = (DBCanonicalName) v.get(k);\n                        if (canonName.getDBCanonicalNameType().getCanonicalNameType() == \"INChI\") {\n                            rssWriter.getInchimap().put(cdkmol, canonName.getName());\n                            break;\n                        }\n                    }\n                    rssWriter.setTitle(\"NMRShiftDB\");\n                    rssWriter.setLink(\"http://www.nmrshiftdb.org\");\n                    rssWriter.setDescription(\"NMRShiftDB is an open-source, open-access, open-submission, open-content web database for chemical structures and their nuclear magnetic resonance data\");\n                    rssWriter.setPublisher(\"NMRShiftDB.org\");\n                    rssWriter.setImagelink(\"http://www.nmrshiftdb.org/images/nmrshift-logo.gif\");\n                    rssWriter.setAbout(\"http://www.nmrshiftdb.org/NmrshiftdbServlet?nmrshiftdbaction=rss\");\n                    Collection coll = new ArrayList();\n                    Vector spectra = mol.selectSpectra(null);\n                    for (int k = 0; k < spectra.size(); k++) {\n                        Element el = ((DBSpectrum) spectra.get(k)).getCmlSpect();\n                        Element el2 = el.getChildElements().get(0);\n                        el.removeChild(el2);\n                        coll.add(el2);\n                    }\n                    rssWriter.getMultiMap().put(cdkmol, coll);\n                }\n                rssWriter.write(soac);\n            } else if (action.equals(\"getattachment\")) {\n                res.setContentType(\"application/zip\");\n                outstream = res.getOutputStream();\n                DBSample sample = DBSamplePeer.retrieveByPK(new NumberKey(req.getParameter(\"sampleid\")));\n                outstream.write(sample.getAttachment());\n            } else if (action.equals(\"createreport\")) {\n                res.setContentType(\"application/pdf\");\n                outstream = res.getOutputStream();\n                boolean yearly = req.getParameter(\"style\").equals(\"yearly\");\n                int yearstart = Integer.parseInt(req.getParameter(\"yearstart\"));\n                int yearend = Integer.parseInt(req.getParameter(\"yearend\"));\n                int monthstart = 0;\n                int monthend = 0;\n                if (!yearly) {\n                    monthstart = Integer.parseInt(req.getParameter(\"monthstart\"));\n                    monthend = Integer.parseInt(req.getParameter(\"monthend\"));\n                }\n                int type = Integer.parseInt(req.getParameter(\"type\"));\n                JasperReport jasperReport = (JasperReport) JRLoader.loadObject(relativepath + \"/reports/\" + (yearly ? \"yearly\" : \"monthly\") + \"_report_\" + type + \".jasper\");\n                Map parameters = new HashMap();\n                if (yearly) parameters.put(\"HEADER\", \"Report for years \" + yearstart + \" - \" + yearend); else parameters.put(\"HEADER\", \"Report for \" + monthstart + \"/\" + yearstart + \" - \" + monthend + \"/\" + yearend);\n                DBConnection dbconn = TurbineDB.getConnection();\n                Connection conn = dbconn.getConnection();\n                Statement stmt = conn.createStatement();\n                ResultSet rs = null;\n                if (type == 1) {\n                    rs = stmt.executeQuery(\"select YEAR(DATE) as YEAR, \" + (yearly ? \"\" : \" MONTH(DATE) as MONTH, \") + \"AFFILIATION_1, AFFILIATION_2, MACHINE.NAME as NAME, count(*) as C, sum(WISHED_SPECTRUM like '%13C%' or WISHED_SPECTRUM like '%variable temperature%' or WISHED_SPECTRUM like '%ID sel. NOE%' or WISHED_SPECTRUM like '%solvent suppression%' or WISHED_SPECTRUM like '%standard spectrum%') as 1_D, sum(WISHED_SPECTRUM like '%H,H-COSY%' or WISHED_SPECTRUM like '%NOESY%' or WISHED_SPECTRUM like '%HMQC%' or WISHED_SPECTRUM like '%HMBC%') as 2_D, sum(OTHER_WISHED_SPECTRUM!='') as SPECIAL, sum(OTHER_NUCLEI!='') as HETERO, sum(PROCESS='self') as SELF, sum(PROCESS='robot') as ROBOT, sum(PROCESS='worker') as OPERATOR from (SAMPLE join TURBINE_USER using (USER_ID)) join MACHINE on MACHINE.MACHINE_ID=SAMPLE.MACHINE where YEAR(DATE)>=\" + yearstart + \" and YEAR(DATE)<=\" + yearend + \" and LOGIN_NAME<>'testuser' group by YEAR, \" + (yearly ? \"\" : \"MONTH, \") + \"AFFILIATION_1, AFFILIATION_2, MACHINE.NAME\");\n                } else if (type == 2) {\n                    rs = stmt.executeQuery(\"select YEAR(DATE) as YEAR, \" + (yearly ? \"\" : \" MONTH(DATE) as MONTH, \") + \"MACHINE.NAME as NAME, count(*) as C, sum(WISHED_SPECTRUM like '%13C%' or WISHED_SPECTRUM like '%variable temperature%' or WISHED_SPECTRUM like '%ID sel. NOE%' or WISHED_SPECTRUM like '%solvent suppression%' or WISHED_SPECTRUM like '%standard spectrum%') as 1_D, sum(WISHED_SPECTRUM like '%H,H-COSY%' or WISHED_SPECTRUM like '%NOESY%' or WISHED_SPECTRUM like '%HMQC%' or WISHED_SPECTRUM like '%HMBC%') as 2_D, sum(OTHER_WISHED_SPECTRUM!='') as SPECIAL, sum(OTHER_NUCLEI!='') as HETERO, sum(PROCESS='self') as SELF, sum(PROCESS='robot') as ROBOT, sum(PROCESS='worker') as OPERATOR from (SAMPLE join TURBINE_USER using (USER_ID)) join MACHINE on MACHINE.MACHINE_ID=SAMPLE.MACHINE group by YEAR, \" + (yearly ? \"\" : \"MONTH, \") + \"MACHINE.NAME\");\n                }\n                JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters, new JRResultSetDataSource(rs));\n                JasperExportManager.exportReportToPdfStream(jasperPrint, outstream);\n                dbconn.close();\n            } else if (action.equals(\"exportcmlbyinchi\")) {\n                res.setContentType(\"text/xml\");\n                out = res.getWriter();\n                String inchi = req.getParameter(\"inchi\");\n                String spectrumtype = req.getParameter(\"spectrumtype\");\n                Criteria crit = new Criteria();\n                crit.add(DBCanonicalNamePeer.NAME, inchi);\n                crit.addJoin(DBCanonicalNamePeer.MOLECULE_ID, DBSpectrumPeer.MOLECULE_ID);\n                crit.addJoin(DBSpectrumPeer.SPECTRUM_TYPE_ID, DBSpectrumTypePeer.SPECTRUM_TYPE_ID);\n                crit.add(DBSpectrumTypePeer.NAME, spectrumtype);\n                try {\n                    GeneralUtils.logToSql(crit.toString(), null);\n                } catch (Exception ex) {\n                }\n                Vector spectra = DBSpectrumPeer.doSelect(crit);\n                if (spectra.size() == 0) {\n                    out.write(\"No such molecule or spectrum\");\n                } else {\n                    Element cmlElement = new Element(\"cml\");\n                    cmlElement.addAttribute(new Attribute(\"convention\", \"nmrshiftdb-convention\"));\n                    cmlElement.setNamespaceURI(\"http://www.xml-cml.org/schema\");\n                    Element parent = ((DBSpectrum) spectra.get(0)).getDBMolecule().getCML(1);\n                    nu.xom.Node cmldoc = parent.getChild(0);\n                    ((Element) cmldoc).setNamespaceURI(\"http://www.xml-cml.org/schema\");\n                    parent.removeChildren();\n                    cmlElement.appendChild(cmldoc);\n                    for (int k = 0; k < spectra.size(); k++) {\n                        Element parentspec = ((DBSpectrum) spectra.get(k)).getCmlSpect();\n                        Node spectrumel = parentspec.getChild(0);\n                        parentspec.removeChildren();\n                        cmlElement.appendChild(spectrumel);\n                        ((Element) spectrumel).setNamespaceURI(\"http://www.xml-cml.org/schema\");\n                    }\n                    out.write(cmlElement.toXML());\n                }\n            } else if (action.equals(\"namelist\")) {\n                res.setContentType(\"application/zip\");\n                outstream = res.getOutputStream();\n                ByteArrayOutputStream baos = new ByteArrayOutputStream();\n                ZipOutputStream zipout = new ZipOutputStream(baos);\n                Criteria crit = new Criteria();\n                crit.addJoin(DBMoleculePeer.MOLECULE_ID, DBSpectrumPeer.MOLECULE_ID);\n                crit.add(DBSpectrumPeer.REVIEW_FLAG, \"true\");\n                Vector v = DBMoleculePeer.doSelect(crit);\n                for (int i = 0; i < v.size(); i++) {\n                    if (i % 500 == 0) {\n                        if (i != 0) {\n                            zipout.write(new String(\"<p>The list is continued <a href=\\\"nmrshiftdb.names.\" + i + \".html\\\">here</a></p></body></html>\").getBytes());\n                            zipout.closeEntry();\n                        }\n                        zipout.putNextEntry(new ZipEntry(\"nmrshiftdb.names.\" + i + \".html\"));\n                        zipout.write(new String(\"<html><body><h1>This is a list of strcutures in <a href=\\\"http://www.nmrshiftdb.org\\\">NMRShiftDB</a>, starting at \" + i + \", Its main purpose is to be found by search engines</h1>\").getBytes());\n                    }\n                    DBMolecule mol = (DBMolecule) v.get(i);\n                    zipout.write(new String(\"<p><a href=\\\"\" + mol.getEasylink(req) + \"\\\">\").getBytes());\n                    Vector cannames = mol.getDBCanonicalNames();\n                    for (int k = 0; k < cannames.size(); k++) {\n                        zipout.write(new String(((DBCanonicalName) cannames.get(k)).getName() + \" \").getBytes());\n                    }\n                    Vector chemnames = mol.getDBChemicalNames();\n                    for (int k = 0; k < chemnames.size(); k++) {\n                        zipout.write(new String(((DBChemicalName) chemnames.get(k)).getName() + \" \").getBytes());\n                    }\n                    zipout.write(new String(\"</a>. Information we have got: NMR spectra\").getBytes());\n                    Vector spectra = mol.selectSpectra();\n                    for (int k = 0; k < spectra.size(); k++) {\n                        zipout.write(new String(((DBSpectrum) spectra.get(k)).getDBSpectrumType().getName() + \", \").getBytes());\n                    }\n                    if (mol.hasAny3d()) zipout.write(new String(\"3D coordinates, \").getBytes());\n                    zipout.write(new String(\"File formats: CML, mol, png, jpeg\").getBytes());\n                    zipout.write(new String(\"</p>\").getBytes());\n                }\n                zipout.write(new String(\"</body></html>\").getBytes());\n                zipout.closeEntry();\n                zipout.close();\n                InputStream is = new ByteArrayInputStream(baos.toByteArray());\n                byte[] buf = new byte[32 * 1024];\n                int nRead = 0;\n                while ((nRead = is.read(buf)) != -1) {\n                    outstream.write(buf, 0, nRead);\n                }\n            } else if (action.equals(\"predictor\")) {\n                if (req.getParameter(\"symbol\") == null) {\n                    res.setContentType(\"text/plain\");\n                    out = res.getWriter();\n                    out.write(\"please give the symbol to create the predictor for in the request with symbol=X (e. g. symbol=C\");\n                }\n                res.setContentType(\"application/zip\");\n                outstream = res.getOutputStream();\n                ByteArrayOutputStream baos = new ByteArrayOutputStream();\n                ZipOutputStream zipout = new ZipOutputStream(baos);\n                String filename = \"org/openscience/nmrshiftdb/PredictionTool.class\";\n                zipout.putNextEntry(new ZipEntry(filename));\n                JarInputStream jip = new JarInputStream(new FileInputStream(ServletUtils.expandRelative(getServletConfig(), \"/WEB-INF/lib/nmrshiftdb-lib.jar\")));\n                JarEntry entry = jip.getNextJarEntry();\n                while (entry.getName().indexOf(\"PredictionTool.class\") == -1) {\n                    entry = jip.getNextJarEntry();\n                }\n                for (int i = 0; i < entry.getSize(); i++) {\n                    zipout.write(jip.read());\n                }\n                zipout.closeEntry();\n                zipout.putNextEntry(new ZipEntry(\"nmrshiftdb.csv\"));\n                int i = 0;\n                org.apache.turbine.util.db.pool.DBConnection conn = TurbineDB.getConnection();\n                HashMap mapsmap = new HashMap();\n                while (true) {\n                    Statement stmt = conn.createStatement();\n                    ResultSet rs = stmt.executeQuery(\"select HOSE_CODE, VALUE, SYMBOL from HOSE_CODES where CONDITION_TYPE='m' and WITH_RINGS=0 and SYMBOL='\" + req.getParameter(\"symbol\") + \"' limit \" + (i * 1000) + \", 1000\");\n                    int m = 0;\n                    while (rs.next()) {\n                        String code = rs.getString(1);\n                        Double value = new Double(rs.getString(2));\n                        String symbol = rs.getString(3);\n                        if (mapsmap.get(symbol) == null) {\n                            mapsmap.put(symbol, new HashMap());\n                        }\n                        for (int spheres = 6; spheres > 0; spheres--) {\n                            StringBuffer hoseCodeBuffer = new StringBuffer();\n                            StringTokenizer st = new StringTokenizer(code, \"()/\");\n                            for (int k = 0; k < spheres; k++) {\n                                if (st.hasMoreTokens()) {\n                                    String partcode = st.nextToken();\n                                    hoseCodeBuffer.append(partcode);\n                                }\n                                if (k == 0) {\n                                    hoseCodeBuffer.append(\"(\");\n                                } else if (k == 3) {\n                                    hoseCodeBuffer.append(\")\");\n                                } else {\n                                    hoseCodeBuffer.append(\"/\");\n                                }\n                            }\n                            String hoseCode = hoseCodeBuffer.toString();\n                            if (((HashMap) mapsmap.get(symbol)).get(hoseCode) == null) {\n                                ((HashMap) mapsmap.get(symbol)).put(hoseCode, new ArrayList());\n                            }\n                            ((ArrayList) ((HashMap) mapsmap.get(symbol)).get(hoseCode)).add(value);\n                        }\n                        m++;\n                    }\n                    i++;\n                    stmt.close();\n                    if (m == 0) break;\n                }\n                Set keySet = mapsmap.keySet();\n                Iterator it = keySet.iterator();\n                while (it.hasNext()) {\n                    String symbol = (String) it.next();\n                    HashMap hosemap = ((HashMap) mapsmap.get(symbol));\n                    Set keySet2 = hosemap.keySet();\n                    Iterator it2 = keySet2.iterator();\n                    while (it2.hasNext()) {\n                        String hoseCode = (String) it2.next();\n                        ArrayList list = ((ArrayList) hosemap.get(hoseCode));\n                        double[] values = new double[list.size()];\n                        for (int k = 0; k < list.size(); k++) {\n                            values[k] = ((Double) list.get(k)).doubleValue();\n                        }\n                        zipout.write(new String(symbol + \"|\" + hoseCode + \"|\" + Statistics.minimum(values) + \"|\" + Statistics.average(values) + \"|\" + Statistics.maximum(values) + \"\\r\\n\").getBytes());\n                    }\n                }\n                zipout.closeEntry();\n                zipout.close();\n                InputStream is = new ByteArrayInputStream(baos.toByteArray());\n                byte[] buf = new byte[32 * 1024];\n                int nRead = 0;\n                i = 0;\n                while ((nRead = is.read(buf)) != -1) {\n                    outstream.write(buf, 0, nRead);\n                }\n            } else if (action.equals(\"exportspec\") || action.equals(\"exportmol\")) {\n                if (spectrumId > -1) spectrum = DBSpectrumPeer.retrieveByPK(new NumberKey(spectrumId)); else spectrum = DBSpectrumPeer.retrieveByPK(new NumberKey(req.getParameter(\"spectrumid\")));\n                export = new Export(spectrum);\n            } else if (action.equals(\"exportmdl\")) {\n                res.setContentType(\"text/plain\");\n                outstream = res.getOutputStream();\n                DBMolecule mol = DBMoleculePeer.retrieveByPK(new NumberKey(req.getParameter(\"moleculeid\")));\n                outstream.write(mol.getStructureFile(Integer.parseInt(req.getParameter(\"coordsetid\")), false).getBytes());\n            } else if (action.equals(\"exportlastinputs\")) {\n                format = action;\n            } else if (action.equals(\"printpredict\")) {\n                res.setContentType(\"text/html\");\n                out = res.getWriter();\n                HttpSession session = req.getSession();\n                VelocityContext context = PredictPortlet.getContext(session, true, true, new StringBuffer(), getServletConfig(), req, true);\n                StringWriter w = new StringWriter();\n                Velocity.mergeTemplate(\"predictprint.vm\", \"ISO-8859-1\", context, w);\n                out.println(w.toString());\n            } else {\n                res.setContentType(\"text/html\");\n                out = res.getWriter();\n                out.println(\"No valid action\");\n            }\n            if (format == null) format = \"\";\n            if (format.equals(\"pdf\") || format.equals(\"rtf\")) {\n                res.setContentType(\"application/\" + format);\n                out = res.getWriter();\n            }\n            if (format.equals(\"docbook\")) {\n                res.setContentType(\"application/zip\");\n                outstream = res.getOutputStream();\n            }\n            if (format.equals(\"svg\")) {\n                res.setContentType(\"image/x-svg\");\n                out = res.getWriter();\n            }\n            if (format.equals(\"tiff\")) {\n                res.setContentType(\"image/tiff\");\n                outstream = res.getOutputStream();\n            }\n            if (format.equals(\"jpeg\")) {\n                res.setContentType(\"image/jpeg\");\n                outstream = res.getOutputStream();\n            }\n            if (format.equals(\"png\")) {\n                res.setContentType(\"image/png\");\n                outstream = res.getOutputStream();\n            }\n            if (format.equals(\"mdl\") || format.equals(\"txt\") || format.equals(\"cml\") || format.equals(\"cmlboth\") || format.indexOf(\"exsection\") == 0) {\n                res.setContentType(\"text/plain\");\n                out = res.getWriter();\n            }\n            if (format.equals(\"simplehtml\") || format.equals(\"exportlastinputs\")) {\n                res.setContentType(\"text/html\");\n                out = res.getWriter();\n            }\n            if (action.equals(\"exportlastinputs\")) {\n                int numbertoexport = 4;\n                if (req.getParameter(\"numbertoexport\") != null) {\n                    try {\n                        numbertoexport = Integer.parseInt(req.getParameter(\"numbertoexport\"));\n                        if (numbertoexport < 1 || numbertoexport > 20) throw new NumberFormatException(\"Number to small/large\");\n                    } catch (NumberFormatException ex) {\n                        out.println(\"The parameter <code>numbertoexport</code>must be an integer from 1 to 20\");\n                    }\n                }\n                NmrshiftdbUser user = null;\n                try {\n                    user = NmrshiftdbUserPeer.getByName(req.getParameter(\"username\"));\n                } catch (NmrshiftdbException ex) {\n                    out.println(\"Seems <code>username</code> is not OK: \" + ex.getMessage());\n                }\n                if (user != null) {\n                    List l = NmrshiftdbUserPeer.executeQuery(\"SELECT LAST_DOWNLOAD_DATE FROM TURBINE_USER  where LOGIN_NAME=\\\"\" + user.getUserName() + \"\\\";\");\n                    Date lastDownloadDate = ((Record) l.get(0)).getValue(1).asDate();\n                    if (((new Date().getTime() - lastDownloadDate.getTime()) / 3600000) < 24) {\n                        out.println(\"Your last download was at \" + lastDownloadDate + \". You may download your last inputs only once a day. Sorry for this, but we need to be carefull with resources. If you want to put your last inputs on your homepage best use some sort of cache (e. g. use wget for downlaod with crond and link to this static resource))!\");\n                    } else {\n                        NmrshiftdbUserPeer.executeStatement(\"UPDATE TURBINE_USER SET LAST_DOWNLOAD_DATE=NOW() where LOGIN_NAME=\\\"\" + user.getUserName() + \"\\\";\");\n                        Vector<String> parameters = new Vector<String>();\n                        String query = \"select distinct MOLECULE.MOLECULE_ID from MOLECULE, SPECTRUM where SPECTRUM.MOLECULE_ID = MOLECULE.MOLECULE_ID and SPECTRUM.REVIEW_FLAG =\\\"true\\\" and SPECTRUM.USER_ID=\" + user.getUserId() + \" order by MOLECULE.DATE desc;\";\n                        l = NmrshiftdbUserPeer.executeQuery(query);\n                        String url = javax.servlet.http.HttpUtils.getRequestURL(req).toString();\n                        url = url.substring(0, url.length() - 17);\n                        for (int i = 0; i < numbertoexport; i++) {\n                            if (i == l.size()) break;\n                            DBMolecule mol = DBMoleculePeer.retrieveByPK(new NumberKey(((Record) l.get(i)).getValue(1).asInt()));\n                            parameters.add(new String(\"<a href=\\\"\" + url + \"/portal/pane0/Results?nmrshiftdbaction=showDetailsFromHome&molNumber=\" + mol.getMoleculeId() + \"\\\"><img src=\\\"\" + javax.servlet.http.HttpUtils.getRequestURL(req).toString() + \"?nmrshiftdbaction=exportmol&spectrumid=\" + ((DBSpectrum) mol.getDBSpectrums().get(0)).getSpectrumId() + \"&format=jpeg&size=150x150&backcolor=12632256\\\"></a>\"));\n                        }\n                        VelocityContext context = new VelocityContext();\n                        context.put(\"results\", parameters);\n                        StringWriter w = new StringWriter();\n                        Velocity.mergeTemplate(\"lateststructures.vm\", \"ISO-8859-1\", context, w);\n                        out.println(w.toString());\n                    }\n                }\n            }\n            if (action.equals(\"exportspec\")) {\n                if (format.equals(\"txt\")) {\n                    String lastsearchtype = req.getParameter(\"lastsearchtype\");\n                    if (lastsearchtype.equals(NmrshiftdbConstants.TOTALSPECTRUM) || lastsearchtype.equals(NmrshiftdbConstants.SUBSPECTRUM)) {\n                        List l = ParseUtils.parseSpectrumFromSpecFile(req.getParameter(\"lastsearchvalues\"));\n                        spectrum.initSimilarity(l, lastsearchtype.equals(NmrshiftdbConstants.SUBSPECTRUM));\n                    }\n                    Vector v = spectrum.getOptions();\n                    DBMolecule mol = spectrum.getDBMolecule();\n                    out.print(mol.getChemicalNamesAsOneString(false) + mol.getMolecularFormula(false) + \"; \" + mol.getMolecularWeight() + \" Dalton\\n\\r\");\n                    out.print(\"\\n\\rAtom\\t\");\n                    if (spectrum.getDBSpectrumType().getElementSymbol() == (\"H\")) out.print(\"Mult.\\t\");\n                    out.print(\"Meas.\");\n                    if (lastsearchtype.equals(NmrshiftdbConstants.TOTALSPECTRUM) || lastsearchtype.equals(NmrshiftdbConstants.SUBSPECTRUM)) {\n                        out.print(\"\\tInput\\tDiff\");\n                    }\n                    out.print(\"\\n\\r\");\n                    out.print(\"No.\\t\");\n                    if (spectrum.getDBSpectrumType().getElementSymbol() == (\"H\")) out.print(\"\\t\");\n                    out.print(\"Shift\");\n                    if (lastsearchtype.equals(NmrshiftdbConstants.TOTALSPECTRUM) || lastsearchtype.equals(NmrshiftdbConstants.SUBSPECTRUM)) {\n                        out.print(\"\\tShift\\tM-I\");\n                    }\n                    out.print(\"\\n\\r\");\n                    for (int i = 0; i < v.size(); i++) {\n                        out.print(((ValuesForVelocityBean) v.get(i)).getDisplayText() + \"\\t\" + ((ValuesForVelocityBean) v.get(i)).getRange());\n                        if (lastsearchtype.equals(NmrshiftdbConstants.TOTALSPECTRUM) || lastsearchtype.equals(NmrshiftdbConstants.SUBSPECTRUM)) {\n                            out.print(\"\\t\" + ((ValuesForVelocityBean) v.get(i)).getNameForElements() + \"\\t\" + ((ValuesForVelocityBean) v.get(i)).getDelta());\n                        }\n                        out.print(\"\\n\\r\");\n                    }\n                }\n                if (format.equals(\"simplehtml\")) {\n                    String i1 = export.getImage(false, \"jpeg\", ServletUtils.expandRelative(this.getServletConfig(), \"/nmrshiftdbhtml\") + \"/tmp/\" + System.currentTimeMillis(), true);\n                    export.pictures[0] = new File(i1).getName();\n                    String i2 = export.getImage(true, \"jpeg\", ServletUtils.expandRelative(this.getServletConfig(), \"/nmrshiftdbhtml\") + \"/tmp/\" + System.currentTimeMillis(), true);\n                    export.pictures[1] = new File(i2).getName();\n                    String docbook = export.getHtml();\n                    out.print(docbook);\n                }\n                if (format.equals(\"pdf\") || format.equals(\"rtf\")) {\n                    String svgSpec = export.getSpecSvg(400, 200);\n                    String svgspecfile = relativepath + \"/tmp/\" + System.currentTimeMillis() + \"s.svg\";\n                    new FileOutputStream(svgspecfile).write(svgSpec.getBytes());\n                    export.pictures[1] = svgspecfile;\n                    String molSvg = export.getMolSvg(true);\n                    String svgmolfile = relativepath + \"/tmp/\" + System.currentTimeMillis() + \"m.svg\";\n                    new FileOutputStream(svgmolfile).write(molSvg.getBytes());\n                    export.pictures[0] = svgmolfile;\n                    String docbook = export.getDocbook(\"pdf\", \"SVG\");\n                    TransformerFactory tFactory = TransformerFactory.newInstance();\n                    Transformer transformer = tFactory.newTransformer(new StreamSource(\"file:\" + GeneralUtils.getNmrshiftdbProperty(\"docbookxslpath\", getServletConfig()) + \"/fo/docbook.xsl\"));\n                    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n                    transformer.transform(new StreamSource(new StringReader(docbook)), new StreamResult(baos));\n                    FopFactory fopFactory = FopFactory.newInstance();\n                    FOUserAgent foUserAgent = fopFactory.newFOUserAgent();\n                    OutputStream out2 = new ByteArrayOutputStream();\n                    Fop fop = fopFactory.newFop(format.equals(\"rtf\") ? MimeConstants.MIME_RTF : MimeConstants.MIME_PDF, foUserAgent, out2);\n                    TransformerFactory factory = TransformerFactory.newInstance();\n                    transformer = factory.newTransformer();\n                    Source src = new StreamSource(new StringReader(baos.toString()));\n                    Result res2 = new SAXResult(fop.getDefaultHandler());\n                    transformer.transform(src, res2);\n                    out.print(out2.toString());\n                }\n                if (format.equals(\"docbook\")) {\n                    String i1 = relativepath + \"/tmp/\" + System.currentTimeMillis() + \".svg\";\n                    new FileOutputStream(i1).write(export.getSpecSvg(300, 200).getBytes());\n                    export.pictures[0] = new File(i1).getName();\n                    String i2 = relativepath + \"/tmp/\" + System.currentTimeMillis() + \".svg\";\n                    new FileOutputStream(i2).write(export.getMolSvg(true).getBytes());\n                    export.pictures[1] = new File(i2).getName();\n                    String docbook = export.getDocbook(\"pdf\", \"SVG\");\n                    String docbookfile = relativepath + \"/tmp/\" + System.currentTimeMillis() + \".xml\";\n                    new FileOutputStream(docbookfile).write(docbook.getBytes());\n                    ByteArrayOutputStream baos = export.makeZip(new String[] { docbookfile, i1, i2 });\n                    outstream.write(baos.toByteArray());\n                }\n                if (format.equals(\"svg\")) {\n                    out.print(export.getSpecSvg(400, 200));\n                }\n                if (format.equals(\"tiff\") || format.equals(\"jpeg\") || format.equals(\"png\")) {\n                    InputStream is = new FileInputStream(export.getImage(false, format, relativepath + \"/tmp/\" + System.currentTimeMillis(), true));\n                    byte[] buf = new byte[32 * 1024];\n                    int nRead = 0;\n                    while ((nRead = is.read(buf)) != -1) {\n                        outstream.write(buf, 0, nRead);\n                    }\n                }\n                if (format.equals(\"cml\")) {\n                    out.print(spectrum.getCmlSpect().toXML());\n                }\n                if (format.equals(\"cmlboth\")) {\n                    Element cmlElement = new Element(\"cml\");\n                    cmlElement.addAttribute(new Attribute(\"convention\", \"nmrshiftdb-convention\"));\n                    cmlElement.setNamespaceURI(\"http://www.xml-cml.org/schema\");\n                    Element parent = spectrum.getDBMolecule().getCML(1, spectrum.getDBSpectrumType().getName().equals(\"1H\"));\n                    nu.xom.Node cmldoc = parent.getChild(0);\n                    ((Element) cmldoc).setNamespaceURI(\"http://www.xml-cml.org/schema\");\n                    parent.removeChildren();\n                    cmlElement.appendChild(cmldoc);\n                    Element parentspec = spectrum.getCmlSpect();\n                    Node spectrumel = parentspec.getChild(0);\n                    parentspec.removeChildren();\n                    cmlElement.appendChild(spectrumel);\n                    ((Element) spectrumel).setNamespaceURI(\"http://www.xml-cml.org/schema\");\n                    out.write(cmlElement.toXML());\n                }\n                if (format.indexOf(\"exsection\") == 0) {\n                    StringTokenizer st = new StringTokenizer(format, \"-\");\n                    st.nextToken();\n                    String template = st.nextToken();\n                    Criteria crit = new Criteria();\n                    crit.add(DBSpectrumPeer.USER_ID, spectrum.getUserId());\n                    Vector v = spectrum.getDBMolecule().getDBSpectrums(crit);\n                    VelocityContext context = new VelocityContext();\n                    context.put(\"spectra\", v);\n                    context.put(\"molecule\", spectrum.getDBMolecule());\n                    StringWriter w = new StringWriter();\n                    Velocity.mergeTemplate(\"exporttemplates/\" + template, \"ISO-8859-1\", context, w);\n                    out.write(w.toString());\n                }\n            }\n            if (action.equals(\"exportmol\")) {\n                int width = -1;\n                int height = -1;\n                if (req.getParameter(\"size\") != null) {\n                    StringTokenizer st = new StringTokenizer(req.getParameter(\"size\"), \"x\");\n                    width = Integer.parseInt(st.nextToken());\n                    height = Integer.parseInt(st.nextToken());\n                }\n                boolean shownumbers = true;\n                if (req.getParameter(\"shownumbers\") != null && req.getParameter(\"shownumbers\").equals(\"false\")) {\n                    shownumbers = false;\n                }\n                if (req.getParameter(\"backcolor\") != null) {\n                    export.backColor = new Color(Integer.parseInt(req.getParameter(\"backcolor\")));\n                }\n                if (req.getParameter(\"markatom\") != null) {\n                    export.selected = Integer.parseInt(req.getParameter(\"markatom\")) - 1;\n                }\n                if (format.equals(\"svg\")) {\n                    out.print(export.getMolSvg(true));\n                }\n                if (format.equals(\"tiff\") || format.equals(\"jpeg\") || format.equals(\"png\")) {\n                    InputStream is = new FileInputStream(export.getImage(true, format, relativepath + \"/tmp/\" + System.currentTimeMillis(), width, height, shownumbers, null));\n                    byte[] buf = new byte[32 * 1024];\n                    int nRead = 0;\n                    while ((nRead = is.read(buf)) != -1) {\n                        outstream.write(buf, 0, nRead);\n                    }\n                }\n                if (format.equals(\"mdl\")) {\n                    out.println(spectrum.getDBMolecule().getStructureFile(1, false));\n                }\n                if (format.equals(\"cml\")) {\n                    out.println(spectrum.getDBMolecule().getCMLString(1));\n                }\n            }\n            if (out != null) out.flush(); else outstream.flush();\n        } catch (Exception ex) {\n            ex.printStackTrace();\n            out.print(GeneralUtils.logError(ex, \"NmrshiftdbServlet\", null, true));\n            out.flush();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11341711",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void makeBackup(File dir, String sourcedir, String destinationdir, String destinationDirEnding) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void makeBackup(File dir, String sourcedir, String destinationdir, String destinationDirEnding) {\n        String[] files;\n        files = dir.list();\n        File checkdir = new File(destinationdir + System.getProperty(\"file.separator\") + destinationDirEnding);\n        if (!checkdir.isDirectory()) {\n            checkdir.mkdir();\n        }\n        ;\n        Date date = new Date();\n        long msec = date.getTime();\n        checkdir.setLastModified(msec);\n        File checkFile = new File(checkdir + System.getProperty(\"file.separator\") + \"azureus.config\");\n        if (checkFile.exists()) {\n            checkFile.setLastModified(msec);\n        }\n        try {\n            for (int i = 0; i < files.length; i++) {\n                File f = new File(dir, files[i]);\n                File g = new File(files[i]);\n                if (f.isDirectory()) {\n                } else {\n                    String destinationFile = checkdir + System.getProperty(\"file.separator\") + g;\n                    String sourceFile = sourcedir + System.getProperty(\"file.separator\") + g;\n                    FileInputStream infile = new FileInputStream(sourceFile);\n                    FileOutputStream outfile = new FileOutputStream(destinationFile);\n                    int c;\n                    while ((c = infile.read()) != -1) outfile.write(c);\n                    infile.close();\n                    outfile.close();\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11343453",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String getWebpage(String url) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String getWebpage(String url) {\n        String content = \"\";\n        if (!url.trim().toLowerCase().startsWith(\"http://\")) {\n            url = \"http://\" + url;\n        }\n        try {\n            BufferedReader reader = new BufferedReader(new InputStreamReader(new URL(url).openStream()));\n            String line;\n            while ((line = reader.readLine()) != null) {\n                content += line + \"\\n\";\n            }\n            reader.close();\n        } catch (MalformedURLException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } catch (Exception e2) {\n            e2.printStackTrace();\n        }\n        return content;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11346465",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "protected static final void download(String address, File localFileName) {\n        OutputStream out = null;\n        URLConnection conn = null;\n        InputStream in = null;\n        try {\n            URL url = new URL(address);\n            out = new BufferedOutputStream(new FileOutputStream(localFileName));\n            conn = url.openConnection();\n            in = conn.getInputStream();\n            byte[] buffer = new byte[1024];\n            int numRead;\n            long numWritten = 0;\n            while ((numRead = in.read(buffer)) != -1) {\n                out.write(buffer, 0, numRead);\n                numWritten += numRead;\n            }\n            System.out.println(localFileName + \"\\t\" + numWritten);\n        } catch (Exception exception) {\n            exception.printStackTrace();\n        } finally {\n            try {\n                if (in != null) {\n                    in.close();\n                }\n                if (out != null) {\n                    out.close();\n                }\n            } catch (IOException ioe) {\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11346792",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void generate(FileObject outputDirectory, FileObject generatedOutputDirectory, List<Library> libraryModels, String tapdocXml) throws FileSystemException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void generate(FileObject outputDirectory, FileObject generatedOutputDirectory, List<Library> libraryModels, String tapdocXml) throws FileSystemException {\n        if (!generatedOutputDirectory.exists()) {\n            generatedOutputDirectory.createFolder();\n        }\n        if (outputDirectory.exists()) {\n            outputDirectory.createFolder();\n        }\n        ZipUtils.extractZip(new ClasspathResource(classResolver, \"/com/erinors/tapestry/tapdoc/service/xdoc/resources.zip\"), outputDirectory);\n        for (Library library : libraryModels) {\n            String libraryName = library.getName();\n            String libraryLocation = library.getLocation();\n            generatedOutputDirectory.resolveFile(fileNameGenerator.getLibraryDirectory(libraryLocation)).createFolder();\n            try {\n                String result = XsltUtils.xsltTransform(tapdocXml, getClass().getResourceAsStream(\"Library.xsl\"), \"libraryName\", libraryName);\n                FileObject index = generatedOutputDirectory.resolveFile(fileNameGenerator.getLibraryDirectory(libraryLocation)).resolveFile(\"index.xml\");\n                Writer out = new OutputStreamWriter(index.getContent().getOutputStream(), \"UTF-8\");\n                out.write(result);\n                out.close();\n            } catch (Exception e) {\n                throw new RuntimeException(e);\n            }\n            for (Component component : library.getComponents()) {\n                String componentName = component.getName();\n                System.out.println(\"Generating \" + libraryName + \":\" + componentName + \"...\");\n                Map<String, String> parameters = new HashMap<String, String>();\n                parameters.put(\"libraryName\", libraryName);\n                parameters.put(\"componentName\", componentName);\n                String result = XsltUtils.xsltTransform(tapdocXml, getClass().getResourceAsStream(\"Component.xsl\"), parameters);\n                Writer out = null;\n                try {\n                    FileObject index = generatedOutputDirectory.resolveFile(fileNameGenerator.getComponentIndexFile(libraryLocation, componentName, true));\n                    out = new OutputStreamWriter(index.getContent().getOutputStream(), \"UTF-8\");\n                    out.write(result);\n                    out.close();\n                    Resource specificationLocation = component.getSpecificationLocation();\n                    if (specificationLocation.getRelativeResource(componentName + \"_tapdoc/resource\").getResourceURL() != null) {\n                        File srcResourcesDirectory = new File(specificationLocation.getRelativeResource(componentName + \"_tapdoc/resource\").getResourceURL().toURI());\n                        FileObject dstResourcesFileObject = outputDirectory.resolveFile(fileNameGenerator.getComponentDirectory(libraryLocation, componentName)).resolveFile(\"resource\");\n                        if (srcResourcesDirectory.exists() && srcResourcesDirectory.isDirectory()) {\n                            File[] files = srcResourcesDirectory.listFiles();\n                            if (files != null) {\n                                for (File resource : files) {\n                                    if (resource.isFile() && !resource.isHidden()) {\n                                        FileObject resourceFileObject = dstResourcesFileObject.resolveFile(resource.getName());\n                                        resourceFileObject.createFile();\n                                        InputStream inResource = null;\n                                        OutputStream outResource = null;\n                                        try {\n                                            inResource = new FileInputStream(resource);\n                                            outResource = resourceFileObject.getContent().getOutputStream();\n                                            IOUtils.copy(inResource, outResource);\n                                        } finally {\n                                            IOUtils.closeQuietly(inResource);\n                                            IOUtils.closeQuietly(outResource);\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                } catch (Exception e) {\n                    throw new RuntimeException(e);\n                } finally {\n                    IOUtils.closeQuietly(out);\n                }\n            }\n        }\n        {\n            Writer out = null;\n            try {\n                String result = XsltUtils.xsltTransform(tapdocXml, getClass().getResourceAsStream(\"Overview.xsl\"));\n                FileObject index = generatedOutputDirectory.resolveFile(\"index.xml\");\n                out = new OutputStreamWriter(index.getContent().getOutputStream(), \"UTF-8\");\n                out.write(result);\n                out.close();\n            } catch (Exception e) {\n                throw new RuntimeException(e);\n            } finally {\n                IOUtils.closeQuietly(out);\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11352932",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic String generateFilename() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public String generateFilename() {\n        MessageDigest md;\n        byte[] sha1hash = new byte[40];\n        Random r = new Random();\n        String fileName = \"\";\n        String token = \"\";\n        while (true) {\n            token = Long.toString(Math.abs(r.nextLong()), 36) + Long.toString(System.currentTimeMillis());\n            try {\n                md = MessageDigest.getInstance(\"SHA-1\");\n                md.update(token.getBytes(\"iso-8859-1\"), 0, token.length());\n                sha1hash = md.digest();\n            } catch (Exception e) {\n                log.log(Level.WARNING, e.getMessage(), e);\n            }\n            fileName = convertToHex(sha1hash);\n            if (!new File(Configuration.ImageUploadPath + fileName).exists()) {\n                break;\n            }\n        }\n        return fileName;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11353263",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void testToJson() throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Test\n    @Ignore\n    public void testToJson() throws IOException {\n        JsonSerializer js = new StreamingJsonSerializer(new ObjectMapper());\n        BulkOperation op = js.createBulkOperation(createTestData(10000), false);\n        IOUtils.copy(op.getData(), System.out);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11358121",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void run() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void run() {\n            try {\n                putEvent(new DebugEvent(\"about to place HTTP request\"));\n                HttpGet req = new HttpGet(requestURL);\n                req.addHeader(\"Connection\", \"close\");\n                HttpResponse httpResponse = httpClient.execute(req);\n                putEvent(new DebugEvent(\"got response to HTTP request\"));\n                nonSipPort.input(new Integer(httpResponse.getStatusLine().getStatusCode()));\n                HttpEntity entity = httpResponse.getEntity();\n                if (entity != null) {\n                    InputStream in = entity.getContent();\n                    if (in != null) in.close();\n                }\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11358169",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void backupFile(File fromFile, File toFile) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void backupFile(File fromFile, File toFile) {\n        FileInputStream from = null;\n        FileOutputStream to = null;\n        try {\n            from = new FileInputStream(fromFile);\n            to = new FileOutputStream(toFile);\n            byte[] buffer = new byte[4096];\n            int bytesRead;\n            while ((bytesRead = from.read(buffer)) != -1) to.write(buffer, 0, bytesRead);\n        } catch (IOException e) {\n            log.error(e.getMessage());\n        } finally {\n            if (from != null) try {\n                from.close();\n            } catch (IOException e) {\n                log.error(e.getMessage());\n            }\n            if (to != null) try {\n                to.close();\n            } catch (IOException e) {\n                log.error(e.getMessage());\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11358360",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private boolean readRemoteFile() {\n        InputStream inputstream;\n        Concept concept = new Concept();\n        try {\n            inputstream = url.openStream();\n            InputStreamReader inputStreamReader = new InputStreamReader(inputstream);\n            BufferedReader bufferedreader = new BufferedReader(inputStreamReader);\n            String s4;\n            while ((s4 = bufferedreader.readLine()) != null && s4.length() > 0) {\n                if (!parseLine(s4, concept)) {\n                    return false;\n                }\n            }\n        } catch (MalformedURLException e) {\n            logger.fatal(\"malformed URL, trying to read local file\");\n            return readLocalFile();\n        } catch (IOException e1) {\n            logger.fatal(\"Error reading URL file, trying to read local file\");\n            return readLocalFile();\n        } catch (Exception x) {\n            logger.fatal(\"Failed to readRemoteFile \" + x.getMessage() + \", trying to read local file\");\n            return readLocalFile();\n        }\n        return true;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_00113681",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void elimina(Pedido pe) throws errorSQL, errorConexionBD {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void elimina(Pedido pe) throws errorSQL, errorConexionBD {\n        System.out.println(\"GestorPedido.elimina()\");\n        int id = pe.getId();\n        String sql;\n        Statement stmt = null;\n        try {\n            gd.begin();\n            sql = \"DELETE FROM pedido WHERE id=\" + id;\n            System.out.println(\"Ejecutando: \" + sql);\n            stmt = gd.getConexion().createStatement();\n            stmt.executeUpdate(sql);\n            System.out.println(\"executeUpdate\");\n            gd.commit();\n            System.out.println(\"commit\");\n            stmt.close();\n        } catch (SQLException e) {\n            gd.rollback();\n            throw new errorSQL(e.toString());\n        } catch (errorConexionBD e) {\n            System.err.println(\"Error en GestorPedido.elimina(): \" + e);\n        } catch (errorSQL e) {\n            System.err.println(\"Error en GestorPedido.elimina(): \" + e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11370967",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void copyFile(File in, File out) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void copyFile(File in, File out) throws Exception {\n        FileChannel ic = new FileInputStream(in).getChannel();\n        FileChannel oc = new FileOutputStream(out).getChannel();\n        ic.transferTo(0, ic.size(), oc);\n        ic.close();\n        oc.close();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11371486",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static List<String> getContent(URL url) throws IOException {\n        final HttpURLConnection http = (HttpURLConnection) url.openConnection();\n        try {\n            http.connect();\n            final int code = http.getResponseCode();\n            if (code != 200) throw new IOException(\"IP Locator failed to get the location. Http Status code : \" + code + \" [\" + url + \"]\");\n            return getContent(http);\n        } finally {\n            http.disconnect();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11371499",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void sortArray() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void sortArray() {\n        int a;\n        for (int i = 0; i < array.length; i++) {\n            for (int j = 0; j < array.length - 1; j++) {\n                if (array[j] < array[j + 1]) {\n                    a = array[j];\n                    array[j] = array[j + 1];\n                    array[j + 1] = a;\n                }\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11373801",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic boolean resolve(String parameters, Reader in, Writer out, DataFieldResolver dataFieldResolver, int[] arrayPositioner) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public boolean resolve(String parameters, Reader in, Writer out, DataFieldResolver dataFieldResolver, int[] arrayPositioner) throws IOException {\n        PrintWriter printOut = new PrintWriter(out);\n        URL url = new URL(parameters);\n        Reader urlIn = new InputStreamReader(url.openStream());\n        int ch = urlIn.read();\n        while (ch != -1) {\n            out.write(ch);\n            ch = urlIn.read();\n        }\n        out.flush();\n        return false;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11374801",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void init(VerwaltungClient verClient) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void init(VerwaltungClient verClient) {\n        this.setLayout(new BorderLayout());\n        pnl1 = new JPanel();\n        pnl1.setLayout(new FlowLayout());\n        pnl1.add(new JLabel(Localization.getInstance().getString(\"GameOver\")));\n        pnl1.setBounds(10, 10, 200, 10);\n        pnl2 = new JPanel();\n        int a_punkte[];\n        int punkte = 0;\n        String name;\n        String[] a_namen;\n        a_punkte = verClient.getA_spielEndpunkte();\n        a_namen = verClient.getA_Spielernamen();\n        zeilen = new Object[a_punkte.length][2];\n        for (int i = 0; i < a_punkte.length; i++) {\n            for (int j = 0; j < a_punkte.length - 1 - i; j++) {\n                if (a_punkte[j] < a_punkte[j + 1]) {\n                    punkte = a_punkte[j];\n                    a_punkte[j] = a_punkte[j + 1];\n                    a_punkte[j + 1] = punkte;\n                    name = a_namen[j];\n                    a_namen[j] = a_namen[j + 1];\n                    a_namen[j + 1] = name;\n                }\n            }\n        }\n        for (int i = 0; i < a_punkte.length; i++) {\n            zeilen[i][0] = a_namen[i];\n            zeilen[i][1] = new String(\"\" + a_punkte[i]);\n        }\n        tabelle = new JTable(zeilen, spalten);\n        tabelle.setEnabled(false);\n        pane = new JScrollPane(tabelle);\n        pnl2.add(pane);\n        pnl3 = new JPanel();\n        JButton btn = new JButton(Localization.getInstance().getString(\"OK\"));\n        btn.addActionListener(this);\n        pnl3.add(btn);\n        this.add(BorderLayout.CENTER, pnl2);\n        this.add(BorderLayout.NORTH, pnl1);\n        this.add(BorderLayout.SOUTH, pnl3);\n        this.pack();\n        this.setResizable(false);\n        this.setVisible(true);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11377441",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void resolvePlugins() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void resolvePlugins() {\n        try {\n            File cacheDir = XPontusConfigurationConstantsIF.XPONTUS_CACHE_DIR;\n            File pluginsFile = new File(cacheDir, \"plugins.xml\");\n            if (!pluginsFile.exists()) {\n                URL pluginURL = new URL(\"http://xpontus.sourceforge.net/snapshot/plugins.xml\");\n                InputStream is = pluginURL.openStream();\n                OutputStream os = FileUtils.openOutputStream(pluginsFile);\n                IOUtils.copy(is, os);\n                IOUtils.closeQuietly(os);\n                IOUtils.closeQuietly(is);\n            }\n            resolvePlugins(pluginsFile.getAbsolutePath());\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01138276",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void login() throws LoginException {\n        log.info(\"# i\u30e2\u30fc\u30c9.net\u306b\u30ed\u30b0\u30a4\u30f3\");\n        try {\n            this.httpClient.getCookieStore().clear();\n            HttpPost post = new HttpPost(LoginUrl);\n            List<NameValuePair> formparams = new ArrayList<NameValuePair>();\n            formparams.add(new BasicNameValuePair(\"HIDEURL\", \"?WM_AK=https%3a%2f%2fimode.net%2fag&path=%2fimail%2ftop&query=\"));\n            formparams.add(new BasicNameValuePair(\"LOGIN\", \"WM_LOGIN\"));\n            formparams.add(new BasicNameValuePair(\"WM_KEY\", \"0\"));\n            formparams.add(new BasicNameValuePair(\"MDCM_UID\", this.name));\n            formparams.add(new BasicNameValuePair(\"MDCM_PWD\", this.pass));\n            UrlEncodedFormEntity entity = null;\n            try {\n                entity = new UrlEncodedFormEntity(formparams, \"UTF-8\");\n            } catch (Exception e) {\n            }\n            post.setHeader(\"User-Agent\", \"Mozilla/4.0 (compatible;MSIE 7.0; Windows NT 6.0;)\");\n            post.setEntity(entity);\n            try {\n                HttpResponse res = this.executeHttp(post);\n                if (res == null) {\n                    this.logined = Boolean.FALSE;\n                    throw new IOException(\"Redirect Error\");\n                }\n                if (res.getStatusLine().getStatusCode() != 200) {\n                    this.logined = Boolean.FALSE;\n                    throw new IOException(\"http login response bad status code \" + res.getStatusLine().getStatusCode());\n                }\n                String body = toStringBody(res);\n                if (body.indexOf(\"<title>\u8a8d\u8a3c\u30a8\u30e9\u30fc\") > 0) {\n                    this.logined = Boolean.FALSE;\n                    log.info(\"\u8a8d\u8a3c\u30a8\u30e9\u30fc\");\n                    log.debug(body);\n                    this.clearCookie();\n                    throw new LoginException(\"\u8a8d\u8a3c\u30a8\u30e9\u30fc\");\n                }\n            } finally {\n                post.abort();\n            }\n            post = new HttpPost(JsonUrl + \"login\");\n            try {\n                HttpResponse res = this.requestPost(post, null);\n                if (res == null) {\n                    this.logined = Boolean.FALSE;\n                    throw new IOException(\"Login Error\");\n                }\n                if (res.getStatusLine().getStatusCode() != 200) {\n                    this.logined = Boolean.FALSE;\n                    throw new IOException(\"http login2 response bad status code \" + res.getStatusLine().getStatusCode());\n                }\n                this.logined = Boolean.TRUE;\n            } finally {\n                post.abort();\n            }\n        } catch (Exception e) {\n            this.logined = Boolean.FALSE;\n            throw new LoginException(\"Docomo i mode.net Login Error.\", e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11389590",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private String httpGet(String endpoint, String requestParameters) throws IOException {\n        String urlStr = endpoint;\n        if (requestParameters != null && requestParameters.length() > 0) {\n            urlStr += \"?\" + requestParameters;\n        }\n        URL url = new URL(urlStr);\n        URLConnection conn = url.openConnection();\n        BufferedReader rd = null;\n        StringBuffer sb = new StringBuffer();\n        try {\n            rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n            String line;\n            while ((line = rd.readLine()) != null) {\n                sb.append(line);\n            }\n        } finally {\n            if (rd != null) {\n                rd.close();\n            }\n        }\n        return sb.toString();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11389886",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static boolean renderStaticResource(final String requestedResource, HttpServletResponse servletResponse) throws IOException {\n        boolean successfull = true;\n        String fileName = PathTool.getFSPathOfResource(requestedResource);\n        File file = new File(fileName);\n        if (!file.exists()) {\n            logger.error(\"Static resource not found: \" + fileName);\n            return false;\n        }\n        if (fileName.endsWith(\"xml\") || fileName.endsWith(\"asp\")) servletResponse.setContentType(\"text/xml\"); else if (fileName.endsWith(\"css\")) servletResponse.setContentType(\"text/css\"); else if (fileName.endsWith(\"js\")) servletResponse.setContentType(\"text/javascript\");\n        InputStream in = null;\n        try {\n            in = new BufferedInputStream(new FileInputStream(file));\n            IOUtils.copy(in, servletResponse.getOutputStream());\n            logger.debug(\"Static resource rendered: \".concat(fileName));\n        } catch (FileNotFoundException e) {\n            logger.error(\"Static resource not found: \" + fileName);\n            successfull = false;\n        } finally {\n            IOUtils.closeQuietly(in);\n        }\n        return successfull;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01139230",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static File copyFile(File srcFile, File destFolder, FileCopyListener copyListener) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static File copyFile(File srcFile, File destFolder, FileCopyListener copyListener) {\n        File dest = new File(destFolder, srcFile.getName());\n        try {\n            FileInputStream in = new FileInputStream(srcFile);\n            FileOutputStream out = new FileOutputStream(dest);\n            byte[] readBuf = new byte[1024 * 512];\n            int readLength;\n            long totalCopiedSize = 0;\n            long totalSize = srcFile.length();\n            boolean canceled = false;\n            if (copyListener == null) {\n                while ((readLength = in.read(readBuf)) != -1) {\n                    out.write(readBuf, 0, readLength);\n                }\n            } else {\n                while ((readLength = in.read(readBuf)) != -1) {\n                    out.write(readBuf, 0, readLength);\n                    if (!copyListener.updateCheck(readLength, totalSize)) {\n                        canceled = true;\n                        break;\n                    }\n                }\n            }\n            in.close();\n            out.close();\n            if (canceled) {\n                dest.delete();\n            }\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return dest;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11394767",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static byte[] gerarHash(String frase) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static byte[] gerarHash(String frase) {\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n            md.update(frase.getBytes());\n            return md.digest();\n        } catch (NoSuchAlgorithmException e) {\n            return null;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11397480",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void render(Map map, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void render(Map map, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws Exception {\n        ByteArrayOutputStream baos = new ByteArrayOutputStream(OUTPUT_BYTE_ARRAY_INITIAL_SIZE);\n        File file = (File) map.get(\"targetFile\");\n        IOUtils.copy(new FileInputStream(file), baos);\n        httpServletResponse.setContentType(getContentType());\n        httpServletResponse.setContentLength(baos.size());\n        httpServletResponse.addHeader(\"Content-disposition\", \"attachment; filename=\" + file.getName());\n        ServletOutputStream out = httpServletResponse.getOutputStream();\n        baos.writeTo(out);\n        out.flush();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11403723",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copy(final File src, final File dest) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copy(final File src, final File dest) throws IOException {\n        OutputStream stream = new FileOutputStream(dest);\n        FileInputStream fis = new FileInputStream(src);\n        byte[] buffer = new byte[16384];\n        while (fis.available() != 0) {\n            int read = fis.read(buffer);\n            stream.write(buffer, 0, read);\n        }\n        stream.flush();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11404629",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static File downloadFromUrl(String urlString, String ext) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static File downloadFromUrl(String urlString, String ext) throws Exception {\n        URL url = new URL(urlString);\n        InputStream is = url.openStream();\n        byte bytes[] = new byte[20480];\n        File result = File.createTempFile(\"temp_\", ext);\n        FileOutputStream fos = new FileOutputStream(result);\n        BufferedOutputStream bos = new BufferedOutputStream(fos);\n        int nbread = 0;\n        int loops = 0;\n        while ((nbread = is.read(bytes)) > -1) {\n            bos.write(bytes, 0, nbread);\n            loops++;\n            System.out.println(loops);\n        }\n        bos.close();\n        return result;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11404999",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic boolean moveFileSafely(final File in, final File out) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public boolean moveFileSafely(final File in, final File out) throws IOException {\n        FileInputStream fis = null;\n        FileOutputStream fos = null;\n        FileChannel inChannel = null;\n        FileChannel outChannel = null;\n        final File tempOut = File.createTempFile(\"move\", \".tmp\");\n        try {\n            fis = new FileInputStream(in);\n            fos = new FileOutputStream(tempOut);\n            inChannel = fis.getChannel();\n            outChannel = fos.getChannel();\n            inChannel.transferTo(0, inChannel.size(), outChannel);\n        } finally {\n            try {\n                if (inChannel != null) inChannel.close();\n            } catch (IOException e) {\n                LogUtils.debugf(JRobinConverter.class, \"failed to close channel %s\", inChannel);\n            }\n            try {\n                if (outChannel != null) outChannel.close();\n            } catch (IOException e) {\n                LogUtils.debugf(JRobinConverter.class, \"failed to close channel %s\", outChannel);\n            }\n            try {\n                if (fis != null) fis.close();\n            } catch (IOException e) {\n                LogUtils.debugf(JRobinConverter.class, \"failed to close stream %s\", fis);\n            }\n            try {\n                if (fos != null) fos.close();\n            } catch (IOException e) {\n                LogUtils.debugf(JRobinConverter.class, \"failed to close stream %s\", fos);\n            }\n        }\n        out.delete();\n        if (!out.exists()) {\n            tempOut.renameTo(out);\n            return in.delete();\n        }\n        return false;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01141235",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void main(String[] args) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void main(String[] args) {\n        String u = \"http://portal.acm.org/results.cfm?query=%28Author%3A%22\" + \"Boehm%2C+Barry\" + \"%22%29&srt=score%20dsc&short=0&source_disp=&since_month=&since_year=&before_month=&before_year=&coll=ACM&dl=ACM&termshow=matchboolean&range_query=&CFID=22704101&CFTOKEN=37827144&start=1\";\n        URL url = null;\n        AcmSearchresultPageParser_2011Jan cb = new AcmSearchresultPageParser_2011Jan();\n        try {\n            url = new URL(u);\n            HttpURLConnection uc = (HttpURLConnection) url.openConnection();\n            uc.setUseCaches(false);\n            InputStream is = uc.getInputStream();\n            BufferedReader br = new BufferedReader(new InputStreamReader(is));\n            ParserDelegator pd = new ParserDelegator();\n            pd.parse(br, cb, true);\n            br.close();\n        } catch (MalformedURLException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        System.out.println(\"all doc num= \" + cb.getAllDocNum());\n        for (int i = 0; i < cb.getEachResultStartPositions().size(); i++) {\n            HashMap<String, Integer> m = cb.getEachResultStartPositions().get(i);\n            System.out.println(i + \"pos= \" + m);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01141361",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void makeRead(final String user, final long databaseID, final long time) throws SQLException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n    public void makeRead(final String user, final long databaseID, final long time) throws SQLException {\n        final String query = \"insert into fs.read_post (post, user, read_date) values (?, ?, ?)\";\n        ensureConnection();\n        final PreparedStatement statement = m_connection.prepareStatement(query);\n        try {\n            statement.setLong(1, databaseID);\n            statement.setString(2, user);\n            statement.setTimestamp(3, new Timestamp(time));\n            final int count = statement.executeUpdate();\n            if (0 == count) {\n                throw new SQLException(\"Nothing updated.\");\n            }\n            m_connection.commit();\n        } catch (final SQLException e) {\n            m_connection.rollback();\n            throw e;\n        } finally {\n            statement.close();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11418746",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private String buildShaHashOf(String source) {\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"SHA\");\n            md.update(source.getBytes());\n            return new BigInteger(1, md.digest()).toString(16);\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n            return \"\";\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01141875",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static boolean ejecutarDMLTransaccion(List<String> tirasSQL) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static boolean ejecutarDMLTransaccion(List<String> tirasSQL) throws Exception {\n        boolean ok = true;\n        try {\n            getConexion();\n            conexion.setAutoCommit(false);\n            Statement st = conexion.createStatement();\n            for (String cadenaSQL : tirasSQL) {\n                if (st.executeUpdate(cadenaSQL) < 1) {\n                    ok = false;\n                    break;\n                }\n            }\n            if (ok) conexion.commit(); else conexion.rollback();\n            conexion.setAutoCommit(true);\n            conexion.close();\n        } catch (SQLException e) {\n            if (conexion != null && !conexion.isClosed()) {\n                conexion.rollback();\n            }\n            throw new Exception(\"Error en Transaccion\");\n        } catch (Exception e) {\n            throw new Exception(\"Error en Transaccion\");\n        }\n        return ok;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11419428",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static JSGFRuleGrammar newGrammarFromJSGF(URL url, JSGFRuleGrammarFactory factory) throws JSGFGrammarParseException, IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static JSGFRuleGrammar newGrammarFromJSGF(URL url, JSGFRuleGrammarFactory factory) throws JSGFGrammarParseException, IOException {\n        Reader reader;\n        BufferedInputStream stream = new BufferedInputStream(url.openStream(), 256);\n        JSGFEncoding encoding = getJSGFEncoding(stream);\n        if ((encoding != null) && (encoding.encoding != null)) {\n            System.out.println(\"Grammar Character Encoding \\\"\" + encoding.encoding + \"\\\"\");\n            reader = new InputStreamReader(stream, encoding.encoding);\n        } else {\n            if (encoding == null) System.out.println(\"WARNING: Grammar missing self identifying header\");\n            reader = new InputStreamReader(stream);\n        }\n        return newGrammarFromJSGF(reader, factory);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11419588",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String MD5(String text) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String MD5(String text) {\n        try {\n            MessageDigest md;\n            md = MessageDigest.getInstance(\"MD5\");\n            byte[] md5hash = new byte[32];\n            md.update(text.getBytes(\"iso-8859-1\"), 0, text.length());\n            md5hash = md.digest();\n            return convertToHex(md5hash);\n        } catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        return null;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11422574",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "protected boolean update(String sql, int requiredRows, int maxRows) throws SQLException {\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"executing \" + sql + \"...\");\n        }\n        Connection connection = null;\n        boolean oldAutoCommit = true;\n        try {\n            connection = dataSource.getConnection();\n            connection.clearWarnings();\n            oldAutoCommit = connection.getAutoCommit();\n            connection.setAutoCommit(false);\n            Statement statement = connection.createStatement();\n            int rowsAffected = statement.executeUpdate(sql);\n            if (requiredRows != -1 && rowsAffected < requiredRows) {\n                LOG.warn(\"(\" + rowsAffected + \") less than \" + requiredRows + \" rows affected, rolling back...\");\n                connection.rollback();\n                return false;\n            }\n            if (maxRows != -1 && rowsAffected > maxRows) {\n                LOG.warn(\"(\" + rowsAffected + \") more than \" + maxRows + \" rows affected, rolling back...\");\n                connection.rollback();\n                return false;\n            }\n            connection.commit();\n            return true;\n        } catch (SQLException e) {\n            LOG.error(\"Unable to update database using: \" + sql, e);\n            throw e;\n        } finally {\n            try {\n                if (connection != null) {\n                    connection.setAutoCommit(oldAutoCommit);\n                    connection.close();\n                }\n            } catch (SQLException e) {\n                LOG.error(\"Unable to close connection: \" + e, e);\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11423482",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "protected byte[] retrieveImageData() throws IOException {\n        URL url = new URL(imageUrl);\n        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n        int fileSize = connection.getContentLength();\n        Log.d(LOG_TAG, \"fetching image \" + imageUrl + \" (\" + (fileSize <= 0 ? \"size unknown\" : Integer.toString(fileSize)) + \")\");\n        BufferedInputStream istream = new BufferedInputStream(connection.getInputStream());\n        try {\n            if (fileSize <= 0) {\n                Log.w(LOG_TAG, \"Server did not set a Content-Length header, will default to buffer size of \" + defaultBufferSize + \" bytes\");\n                ByteArrayOutputStream buf = new ByteArrayOutputStream(defaultBufferSize);\n                byte[] buffer = new byte[defaultBufferSize];\n                int bytesRead = 0;\n                while (bytesRead != -1) {\n                    bytesRead = istream.read(buffer, 0, defaultBufferSize);\n                    if (bytesRead > 0) buf.write(buffer, 0, bytesRead);\n                }\n                return buf.toByteArray();\n            } else {\n                byte[] imageData = new byte[fileSize];\n                int bytesRead = 0;\n                int offset = 0;\n                while (bytesRead != -1 && offset < fileSize) {\n                    bytesRead = istream.read(imageData, offset, fileSize - offset);\n                    offset += bytesRead;\n                }\n                return imageData;\n            }\n        } finally {\n            try {\n                istream.close();\n                connection.disconnect();\n            } catch (Exception ignore) {\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11426721",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic boolean uploadToUrl(URL url, Map postData) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public boolean uploadToUrl(URL url, Map postData) {\n        boolean success = false;\n        OutputStream oStream;\n        HttpURLConnection urlConn = null;\n        try {\n            urlConn = (HttpURLConnection) url.openConnection();\n            urlConn.setDoOutput(true);\n            urlConn.setDoInput(true);\n            urlConn.setUseCaches(false);\n            urlConn.setAllowUserInteraction(false);\n            String parametersAsString = \"\";\n            Iterator itParams = postData.entrySet().iterator();\n            while (itParams.hasNext()) {\n                Map.Entry param = (Map.Entry) itParams.next();\n                parametersAsString += (String) param.getKey() + \"=\" + URLEncoder.encode((String) param.getValue(), \"UTF-8\") + \"&\";\n            }\n            byte[] parameterAsBytes = parametersAsString.getBytes();\n            urlConn.setRequestProperty(\"Content=length\", String.valueOf(parameterAsBytes.length));\n            oStream = urlConn.getOutputStream();\n            oStream.write(parameterAsBytes);\n            oStream.flush();\n            BufferedReader rd = new BufferedReader(new InputStreamReader(urlConn.getInputStream()));\n            String line;\n            while ((line = rd.readLine()) != null) {\n                System.err.println(\"Response: \" + line);\n            }\n            oStream.close();\n            rd.close();\n            success = true;\n        } catch (MalformedURLException ex) {\n            System.err.println(ex + \" (uploadToUrl)\");\n            success = false;\n        } catch (java.io.IOException iox) {\n            System.out.println(iox + \" (uploadToUrl)\");\n            success = false;\n        } catch (Exception generic) {\n            System.out.println(generic.toString() + \" (uploadToUrl)\");\n            success = false;\n        } finally {\n            success = false;\n        }\n        return success;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11427406",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static String makeLoginRequest(String authenticationUrl, String accountEmail, String accountPassword) throws IOException {\n        URL url = new URL(authenticationUrl);\n        HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();\n        urlConnection.setRequestMethod(\"POST\");\n        urlConnection.setDoInput(true);\n        urlConnection.setDoOutput(true);\n        urlConnection.setUseCaches(false);\n        urlConnection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n        StringBuffer content = new StringBuffer();\n        content.append(\"Email=\").append(URLEncoder.encode(accountEmail, \"UTF-8\"));\n        content.append(\"&Passwd=\").append(URLEncoder.encode(accountPassword, \"UTF-8\"));\n        content.append(\"&source=\").append(URLEncoder.encode(\"Google Base data API for OFBiz\", \"UTF-8\"));\n        content.append(\"&service=\").append(URLEncoder.encode(\"gbase\", \"UTF-8\"));\n        OutputStream outputStream = urlConnection.getOutputStream();\n        outputStream.write(content.toString().getBytes(\"UTF-8\"));\n        outputStream.close();\n        int responseCode = urlConnection.getResponseCode();\n        InputStream inputStream;\n        if (responseCode == HttpURLConnection.HTTP_OK) {\n            inputStream = urlConnection.getInputStream();\n        } else {\n            inputStream = urlConnection.getErrorStream();\n        }\n        return toString(inputStream);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01142775",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic String[] getFriends() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public String[] getFriends() {\n        InputStream is = null;\n        String[] answer = null;\n        String result = \"\";\n        try {\n            HttpClient httpclient = new DefaultHttpClient();\n            HttpPost httppost = new HttpPost(domain);\n            httppost.setEntity(new UrlEncodedFormEntity(library));\n            HttpResponse response = httpclient.execute(httppost);\n            HttpEntity entity = response.getEntity();\n            is = entity.getContent();\n        } catch (Exception e) {\n            Log.e(\"log_tag\", \"Error in http connection \" + e.toString());\n        }\n        try {\n            BufferedReader reader = new BufferedReader(new InputStreamReader(is, \"iso-8859-1\"), 8);\n            StringBuilder sb = new StringBuilder();\n            String line = null;\n            while ((line = reader.readLine()) != null) {\n                sb.append(line + \",\");\n            }\n            is.close();\n            result = sb.toString();\n            if (result.equals(\"null,\")) {\n                answer = new String[1];\n                answer[0] = \"none\";\n                return answer;\n            }\n        } catch (Exception e) {\n            Log.e(\"log_tag\", \"Error converting result \" + e.toString());\n        }\n        try {\n            JSONArray json = new JSONArray(result);\n            answer = new String[json.length()];\n            for (int i = 0; i < json.length(); i++) {\n                JSONObject jsonId = json.getJSONObject(i);\n                answer[i] = jsonId.getString(\"uid\");\n            }\n        } catch (JSONException e) {\n            Log.e(\"log_tag\", \"Error parsing data \" + e.toString());\n        }\n        return answer;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01142776",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic LinkedList<NameValuePair> getScoreboard() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public LinkedList<NameValuePair> getScoreboard() {\n        InputStream is = null;\n        String result = \"\";\n        LinkedList<NameValuePair> scores = new LinkedList<NameValuePair>();\n        try {\n            HttpClient httpclient = new DefaultHttpClient();\n            HttpPost httppost = new HttpPost(domain);\n            httppost.setEntity(new UrlEncodedFormEntity(library));\n            HttpResponse response = httpclient.execute(httppost);\n            HttpEntity entity = response.getEntity();\n            is = entity.getContent();\n        } catch (Exception e) {\n            Log.e(\"log_tag\", \"Error in http connection \" + e.toString());\n        }\n        try {\n            BufferedReader reader = new BufferedReader(new InputStreamReader(is, \"iso-8859-1\"), 8);\n            StringBuilder sb = new StringBuilder();\n            String line = null;\n            while ((line = reader.readLine()) != null) {\n                sb.append(line + \",\");\n            }\n            is.close();\n            result = sb.toString();\n            if (result.equals(\"null,\")) {\n                return null;\n            }\n        } catch (Exception e) {\n            Log.e(\"log_tag\", \"Error converting result \" + e.toString());\n        }\n        try {\n            JSONObject json = new JSONObject(result);\n            JSONArray data = json.getJSONArray(\"data\");\n            JSONArray me = json.getJSONArray(\"me\");\n            for (int i = 0; i < data.length(); i++) {\n                JSONObject single = data.getJSONObject(i);\n                String uid = single.getString(\"uid\");\n                String score = single.getString(\"score\");\n                scores.add(new BasicNameValuePair(uid, score));\n            }\n            for (int i = 0; i < me.length(); i++) {\n                JSONObject single = me.getJSONObject(i);\n                String uid = single.getString(\"uid\");\n                String score = single.getString(\"score\");\n                scores.add(new BasicNameValuePair(uid, score));\n            }\n            System.out.println(json);\n        } catch (JSONException e) {\n            Log.e(\"log_tag\", \"Error parsing data \" + e.toString());\n        }\n        return scores;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01142777",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic LinkedList<NameValuePair> getQuestion() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public LinkedList<NameValuePair> getQuestion() {\n        InputStream is = null;\n        String result = \"\";\n        LinkedList<NameValuePair> question = new LinkedList<NameValuePair>();\n        try {\n            HttpClient httpclient = new DefaultHttpClient();\n            HttpPost httppost = new HttpPost(domain);\n            httppost.setEntity(new UrlEncodedFormEntity(library));\n            HttpResponse response = httpclient.execute(httppost);\n            HttpEntity entity = response.getEntity();\n            is = entity.getContent();\n        } catch (Exception e) {\n            Log.e(\"log_tag\", \"Error in http connection \" + e.toString());\n        }\n        try {\n            BufferedReader reader = new BufferedReader(new InputStreamReader(is, \"iso-8859-1\"), 8);\n            StringBuilder sb = new StringBuilder();\n            String line = null;\n            while ((line = reader.readLine()) != null) {\n                sb.append(line);\n            }\n            is.close();\n            result = sb.toString();\n            if (result.equals(\"null,\")) {\n                return null;\n            }\n        } catch (Exception e) {\n            Log.e(\"log_tag\", \"Error converting result \" + e.toString());\n        }\n        try {\n            JSONObject json = new JSONObject(result);\n            JSONArray data = json.getJSONArray(\"data\");\n            JSONObject quest = data.getJSONObject(0);\n            question.add(new BasicNameValuePair(\"q\", quest.getString(\"q\")));\n            question.add(new BasicNameValuePair(\"a\", quest.getString(\"a\")));\n            question.add(new BasicNameValuePair(\"b\", quest.getString(\"b\")));\n            question.add(new BasicNameValuePair(\"c\", quest.getString(\"c\")));\n            question.add(new BasicNameValuePair(\"d\", quest.getString(\"d\")));\n            question.add(new BasicNameValuePair(\"correct\", quest.getString(\"correct\")));\n            return question;\n        } catch (JSONException e) {\n            Log.e(\"log_tag\", \"Error parsing data \" + e.toString());\n        }\n        return null;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01142778",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic String getChallengers() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public String getChallengers() {\n        InputStream is = null;\n        String result = \"\";\n        try {\n            HttpClient httpclient = new DefaultHttpClient();\n            HttpPost httppost = new HttpPost(domain);\n            httppost.setEntity(new UrlEncodedFormEntity(library));\n            HttpResponse response = httpclient.execute(httppost);\n            HttpEntity entity = response.getEntity();\n            is = entity.getContent();\n        } catch (Exception e) {\n            Log.e(\"log_tag\", \"Error in http connection \" + e.toString());\n        }\n        try {\n            BufferedReader reader = new BufferedReader(new InputStreamReader(is, \"iso-8859-1\"), 8);\n            StringBuilder sb = new StringBuilder();\n            String line = null;\n            while ((line = reader.readLine()) != null) {\n                sb.append(line + \",\");\n            }\n            is.close();\n            result = sb.toString();\n            if (result.equals(\"null,\")) {\n                return \"none\";\n            } else return result;\n        } catch (Exception e) {\n            Log.e(\"log_tag\", \"Error converting result \" + e.toString());\n        }\n        return \"none\";\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11433309",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic File extractID3v2TagDataIntoFile(File outputFile) throws TagNotFoundException, IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public File extractID3v2TagDataIntoFile(File outputFile) throws TagNotFoundException, IOException {\n        int startByte = (int) ((MP3AudioHeader) audioHeader).getMp3StartByte();\n        if (startByte >= 0) {\n            FileInputStream fis = new FileInputStream(file);\n            FileChannel fc = fis.getChannel();\n            ByteBuffer bb = ByteBuffer.allocate(startByte);\n            fc.read(bb);\n            FileOutputStream out = new FileOutputStream(outputFile);\n            out.write(bb.array());\n            out.close();\n            fc.close();\n            fis.close();\n            return outputFile;\n        }\n        throw new TagNotFoundException(\"There is no ID3v2Tag data in this file\");\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11444436",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void run() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void run() {\n        try {\n            FTPClient c = new FTPClient();\n            c.configure(ftpConfig);\n            logger.debug(\"Trying to connect\");\n            c.connect(\"127.0.0.1\", 21211);\n            logger.debug(\"Connected\");\n            c.setSoTimeout(5000);\n            if (!FTPReply.isPositiveCompletion(c.getReplyCode())) {\n                logger.debug(\"Houston, we have a problem. D/C\");\n                c.disconnect();\n                throw new Exception();\n            }\n            if (c.login(\"drftpd\", \"drftpd\")) {\n                logger.debug(\"Logged-in, now waiting 5 secs and kill the thread.\");\n                _sc.addSuccess();\n                Thread.sleep(5000);\n                c.disconnect();\n            } else {\n                logger.debug(\"Login failed, D/C!\");\n                throw new Exception();\n            }\n        } catch (Exception e) {\n            logger.debug(e, e);\n            _sc.addFailure();\n        }\n        logger.debug(\"exiting\");\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11449915",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic TtsTrackImpl(URL url, String voiceName, VoicesCache vc) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public TtsTrackImpl(URL url, String voiceName, VoicesCache vc) throws IOException {\n        this.voiceCache = vc;\n        isReady = false;\n        URLConnection connection = url.openConnection();\n        frameSize = (int) (period * format.getChannels() * format.getSampleSizeInBits() * format.getSampleRate() / 8000);\n        voice = voiceCache.allocateVoice(voiceName);\n        TTSAudioBuffer audioBuffer = new TTSAudioBuffer();\n        this.voice.setAudioPlayer(audioBuffer);\n        this.voice.speak(connection.getInputStream());\n        audioBuffer.flip();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11450174",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void publishPage(URL url, String path, File outputFile) throws IOException {\n        if (debug) {\n            System.out.println(\"      publishing page: \" + path);\n            System.out.println(\"        url == \" + url);\n            System.out.println(\"        file == \" + outputFile);\n        }\n        StringBuffer sb = new StringBuffer();\n        try {\n            InputStream is = url.openStream();\n            InputStreamReader isr = new InputStreamReader(is);\n            BufferedReader br = new BufferedReader(isr);\n            boolean firstLine = true;\n            String line;\n            do {\n                line = br.readLine();\n                if (line != null) {\n                    if (!firstLine) sb.append(\"\\n\"); else firstLine = false;\n                    sb.append(line);\n                }\n            } while (line != null);\n            br.close();\n        } catch (IOException e) {\n            String mess = outputFile.toString() + \": \" + e.getMessage();\n            errors.add(mess);\n        }\n        FileOutputStream fos = new FileOutputStream(outputFile);\n        OutputStreamWriter sw = new OutputStreamWriter(fos);\n        sw.write(sb.toString());\n        sw.close();\n        if (prepareArchive) archiveFiles.add(new ArchiveFile(path, outputFile));\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11452667",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void processData(InputStream raw) {\n        String fileName = remoteName;\n        if (localName != null) {\n            fileName = localName;\n        }\n        try {\n            FileOutputStream fos = new FileOutputStream(new File(fileName), true);\n            IOUtils.copy(raw, fos);\n            LOG.info(\"ok\");\n        } catch (IOException e) {\n            LOG.error(\"error writing file\", e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11453456",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static boolean canWeConnectToInternet() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static boolean canWeConnectToInternet() {\n        String s = \"http://www.google.com/\";\n        URL url = null;\n        boolean can = false;\n        URLConnection conection = null;\n        try {\n            url = new URL(s);\n        } catch (MalformedURLException e) {\n            System.out.println(\"This should never happend. Error in URL name. URL specified was:\" + s + \".\");\n        }\n        try {\n            conection = url.openConnection();\n            conection.connect();\n            can = true;\n        } catch (IOException e) {\n            can = false;\n        }\n        if (can) {\n        }\n        return can;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11457386",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copyFile(File in, File out) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copyFile(File in, File out) throws IOException {\n        FileChannel inChannel = new FileInputStream(in).getChannel();\n        FileChannel outChannel = new FileOutputStream(out).getChannel();\n        try {\n            int maxCount = 67076096;\n            long size = inChannel.size();\n            long position = 0;\n            while (position < size) {\n                position += inChannel.transferTo(position, maxCount, outChannel);\n            }\n        } catch (IOException e) {\n            throw e;\n        } finally {\n            if (inChannel != null) {\n                inChannel.close();\n            }\n            if (outChannel != null) {\n                outChannel.close();\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11467950",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic String getMediaURL(String strLink) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public String getMediaURL(String strLink) {\n        try {\n            String res = de.nomule.mediaproviders.KeepVid.getAnswer(strLink, \"aa\");\n            if (NoMuleRuntime.DEBUG) System.out.println(res);\n            String regexp = \"http:\\\\/\\\\/[^\\\"]+\\\\/get_video[^\\\"]+\";\n            Pattern p = Pattern.compile(regexp);\n            Matcher m = p.matcher(res);\n            m.find();\n            String strRetUrl = res.substring(m.start(), m.end());\n            strRetUrl = URLDecoder.decode(strRetUrl, \"UTF-8\");\n            if (TRY_HIGH_QUALITY) {\n                NoMuleRuntime.showDebug(\"HIGH_QUALITY\");\n                strRetUrl += \"&fmt=18\";\n                try {\n                    URL url = new URL(strRetUrl);\n                    URLConnection conn = url.openConnection();\n                    InputStream in = conn.getInputStream();\n                    in.close();\n                } catch (MalformedURLException e) {\n                    e.printStackTrace();\n                } catch (IOException e) {\n                    strRetUrl = strRetUrl.substring(0, strRetUrl.length() - 7);\n                }\n            }\n            if (NoMuleRuntime.DEBUG) System.out.println(strRetUrl);\n            return strRetUrl;\n        } catch (UnsupportedEncodingException e) {\n            System.out.println(\"Error in Youtube Media Provider. Encoding is not supported. (How would that happen?!)\");\n            e.printStackTrace();\n        }\n        return \"\";\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11475527",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "void addDataFromURL(URL theurl) {\n        String line;\n        InputStream in = null;\n        try {\n            in = theurl.openStream();\n            BufferedReader data = new BufferedReader(new InputStreamReader(in));\n            while ((line = data.readLine()) != null) {\n                thetext.append(line + \"\\n\");\n            }\n        } catch (Exception e) {\n            System.out.println(e.toString());\n            thetext.append(theurl.toString());\n        }\n        try {\n            in.close();\n        } catch (Exception e) {\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11477906",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static void loadDefaultSettings(final String configFileName) {\n        InputStream in = null;\n        OutputStream out = null;\n        try {\n            in = Thread.currentThread().getContextClassLoader().getResourceAsStream(META_INF_DEFAULT_CONFIG_PROPERTIES);\n            out = new FileOutputStream(configFileName);\n            IOUtils.copy(in, out);\n        } catch (final Exception e) {\n            log.warn(\"Unable to pull out the default.\", e);\n            throw new RuntimeException(e);\n        } finally {\n            IOUtils.closeQuietly(in);\n            IOUtils.closeQuietly(out);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11481709",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic boolean copy(File fromFile) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public boolean copy(File fromFile) throws IOException {\n        FileUtility toFile = this;\n        if (!fromFile.exists()) {\n            abort(\"FileUtility: no such source file: \" + fromFile.getAbsolutePath());\n            return false;\n        }\n        if (!fromFile.isFile()) {\n            abort(\"FileUtility: can't copy directory: \" + fromFile.getAbsolutePath());\n            return false;\n        }\n        if (!fromFile.canRead()) {\n            abort(\"FileUtility: source file is unreadable: \" + fromFile.getAbsolutePath());\n            return false;\n        }\n        if (this.isDirectory()) toFile = (FileUtility) (new File(this, fromFile.getName()));\n        if (toFile.exists()) {\n            if (!toFile.canWrite()) {\n                abort(\"FileUtility: destination file is unwriteable: \" + pathName);\n                return false;\n            }\n        } else {\n            String parent = toFile.getParent();\n            File dir = new File(parent);\n            if (!dir.exists()) {\n                abort(\"FileUtility: destination directory doesn't exist: \" + parent);\n                return false;\n            }\n            if (dir.isFile()) {\n                abort(\"FileUtility: destination is not a directory: \" + parent);\n                return false;\n            }\n            if (!dir.canWrite()) {\n                abort(\"FileUtility: destination directory is unwriteable: \" + parent);\n                return false;\n            }\n        }\n        FileInputStream from = null;\n        FileOutputStream to = null;\n        try {\n            from = new FileInputStream(fromFile);\n            to = new FileOutputStream(toFile);\n            byte[] buffer = new byte[4096];\n            int bytes_read;\n            while ((bytes_read = from.read(buffer)) != -1) to.write(buffer, 0, bytes_read);\n        } finally {\n            if (from != null) try {\n                from.close();\n            } catch (IOException e) {\n                ;\n            }\n            if (to != null) try {\n                to.close();\n            } catch (IOException e) {\n                ;\n            }\n        }\n        return true;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11482931",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void generate(FileObject outputDirectory, FileObject generatedOutputDirectory, List<Library> libraryModels, String tapdocXml) throws FileSystemException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void generate(FileObject outputDirectory, FileObject generatedOutputDirectory, List<Library> libraryModels, String tapdocXml) throws FileSystemException {\n        if (!outputDirectory.exists()) {\n            outputDirectory.createFolder();\n        }\n        ZipUtils.extractZip(new ClasspathResource(classResolver, \"/com/erinors/tapestry/tapdoc/standalone/resources.zip\"), outputDirectory);\n        for (Library library : libraryModels) {\n            String libraryName = library.getName();\n            String libraryLocation = library.getLocation();\n            outputDirectory.resolveFile(fileNameGenerator.getLibraryDirectory(libraryLocation)).createFolder();\n            try {\n                {\n                    String result = XsltUtils.xsltTransform(tapdocXml, getClass().getResourceAsStream(\"Library.xsl\"), \"libraryName\", libraryName);\n                    FileObject index = outputDirectory.resolveFile(fileNameGenerator.getLibraryDirectory(libraryLocation)).resolveFile(\"index.html\");\n                    Writer out = new OutputStreamWriter(index.getContent().getOutputStream(), \"UTF-8\");\n                    out.write(result);\n                    out.close();\n                }\n                {\n                    String result = XsltUtils.xsltTransform(tapdocXml, getClass().getResourceAsStream(\"ComponentIndex.xsl\"), \"libraryName\", libraryName);\n                    FileObject index = outputDirectory.resolveFile(fileNameGenerator.getLibraryDirectory(libraryLocation)).resolveFile(\"components.html\");\n                    Writer out = new OutputStreamWriter(index.getContent().getOutputStream(), \"UTF-8\");\n                    out.write(result);\n                    out.close();\n                }\n            } catch (Exception e) {\n                throw new RuntimeException(e);\n            }\n            for (Component component : library.getComponents()) {\n                String componentName = component.getName();\n                System.out.println(\"Generating \" + libraryName + \":\" + componentName + \"...\");\n                Map<String, String> parameters = new HashMap<String, String>();\n                parameters.put(\"libraryName\", libraryName);\n                parameters.put(\"componentName\", componentName);\n                String result = XsltUtils.xsltTransform(tapdocXml, getClass().getResourceAsStream(\"Component.xsl\"), parameters);\n                Writer out = null;\n                try {\n                    FileObject index = outputDirectory.resolveFile(fileNameGenerator.getComponentIndexFile(libraryLocation, componentName, true));\n                    out = new OutputStreamWriter(index.getContent().getOutputStream(), \"UTF-8\");\n                    out.write(result);\n                    out.close();\n                    Resource specificationLocation = component.getSpecificationLocation();\n                    if (specificationLocation.getRelativeResource(componentName + \"_tapdoc/resource\").getResourceURL() != null) {\n                        File srcResourcesDirectory = new File(specificationLocation.getRelativeResource(componentName + \"_tapdoc/resource\").getResourceURL().toURI());\n                        FileObject dstResourcesFileObject = outputDirectory.resolveFile(fileNameGenerator.getComponentDirectory(libraryLocation, componentName)).resolveFile(\"resource\");\n                        if (srcResourcesDirectory.exists() && srcResourcesDirectory.isDirectory()) {\n                            File[] files = srcResourcesDirectory.listFiles();\n                            if (files != null) {\n                                for (File resource : files) {\n                                    if (resource.isFile() && !resource.isHidden()) {\n                                        FileObject resourceFileObject = dstResourcesFileObject.resolveFile(resource.getName());\n                                        resourceFileObject.createFile();\n                                        InputStream inResource = null;\n                                        OutputStream outResource = null;\n                                        try {\n                                            inResource = new FileInputStream(resource);\n                                            outResource = resourceFileObject.getContent().getOutputStream();\n                                            IOUtils.copy(inResource, outResource);\n                                        } finally {\n                                            IOUtils.closeQuietly(inResource);\n                                            IOUtils.closeQuietly(outResource);\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                } catch (Exception e) {\n                    throw new RuntimeException(e);\n                } finally {\n                    if (out != null) {\n                        try {\n                            out.close();\n                        } catch (IOException e) {\n                            e.printStackTrace();\n                        }\n                    }\n                }\n            }\n        }\n        {\n            Writer out = null;\n            try {\n                {\n                    String result = XsltUtils.xsltTransform(tapdocXml, getClass().getResourceAsStream(\"LibraryIndex.xsl\"));\n                    FileObject index = outputDirectory.resolveFile(\"libraries.html\");\n                    out = new OutputStreamWriter(index.getContent().getOutputStream(), \"UTF-8\");\n                    out.write(result);\n                    out.close();\n                }\n                {\n                    String result = XsltUtils.xsltTransform(tapdocXml, getClass().getResourceAsStream(\"Overview.xsl\"));\n                    FileObject index = outputDirectory.resolveFile(\"overview.html\");\n                    out = new OutputStreamWriter(index.getContent().getOutputStream(), \"UTF-8\");\n                    out.write(result);\n                    out.close();\n                }\n                {\n                    String result = XsltUtils.xsltTransform(tapdocXml, getClass().getResourceAsStream(\"AllComponents.xsl\"));\n                    FileObject index = outputDirectory.resolveFile(\"allcomponents.html\");\n                    out = new OutputStreamWriter(index.getContent().getOutputStream(), \"UTF-8\");\n                    out.write(result);\n                    out.close();\n                }\n            } catch (Exception e) {\n                throw new RuntimeException(e);\n            } finally {\n                IOUtils.closeQuietly(out);\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11484416",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void moveFile(File orig, File target) throws IOException {\n        byte buffer[] = new byte[1000];\n        int bread = 0;\n        FileInputStream fis = new FileInputStream(orig);\n        FileOutputStream fos = new FileOutputStream(target);\n        while (bread != -1) {\n            bread = fis.read(buffer);\n            if (bread != -1) fos.write(buffer, 0, bread);\n        }\n        fis.close();\n        fos.close();\n        orig.delete();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11487428",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void loadHtmlHeader() {\n        String skinUrl = getClass().getResource(\"/\" + Properties.defaultSkinFileName).toString();\n        if (Properties.headerSkin != null && !Properties.headerSkin.equals(\"\")) {\n            try {\n                URL url = new URL(Properties.headerSkin);\n                if (url.getProtocol().equalsIgnoreCase(\"http\")) {\n                    isHttpUrl = true;\n                    HttpURLConnection.setFollowRedirects(false);\n                    HttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n                    httpConn.setRequestMethod(\"HEAD\");\n                    boolean urlExists = (httpConn.getResponseCode() == HttpURLConnection.HTTP_OK);\n                    if (urlExists) skinUrl = Properties.headerSkin;\n                } else if (url.getProtocol().equalsIgnoreCase(\"jar\")) {\n                    String jarFile = Properties.headerSkin.substring(9).split(\"!\")[0];\n                    File skinFile = new File(jarFile);\n                    if (skinFile.exists() && skinFile.canRead()) skinUrl = Properties.headerSkin;\n                } else if (url.getProtocol().equalsIgnoreCase(\"file\")) {\n                    File skinFile = new File(Properties.headerSkin.substring(5));\n                    if (skinFile.exists() && skinFile.canRead()) skinUrl = Properties.headerSkin;\n                } else {\n                    File skinFile = new File(Properties.headerSkin);\n                    if (skinFile.exists() && skinFile.canRead()) skinUrl = Properties.headerSkin;\n                }\n            } catch (Exception ex) {\n                XohmLogger.debugPrintln(\"Header skin url not valid. \" + ex.getMessage());\n                XohmLogger.debugPrintln(\"Loading the default skin.\");\n                ex.printStackTrace();\n            }\n        }\n        XohmLogger.debugPrintln(\"Header skin file = \" + skinUrl);\n        try {\n            LocalHtmlRendererContext rendererContext = new LocalHtmlRendererContext(htmlHeaderPanel, new SimpleUserAgentContext());\n            rendererContext.navigate(skinUrl);\n            headerLoaded = true;\n        } catch (IOException urlEx) {\n            XohmLogger.debugPrintln(\"Exception occured while loading the skin. \" + urlEx.getMessage());\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11499032",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void outputSignedOpenDocument(byte[] signatureData) throws IOException {\n        LOG.debug(\"output signed open document\");\n        OutputStream signedOdfOutputStream = getSignedOpenDocumentOutputStream();\n        if (null == signedOdfOutputStream) {\n            throw new NullPointerException(\"signedOpenDocumentOutputStream is null\");\n        }\n        ZipOutputStream zipOutputStream = new ZipOutputStream(signedOdfOutputStream);\n        ZipInputStream zipInputStream = new ZipInputStream(this.getOpenDocumentURL().openStream());\n        ZipEntry zipEntry;\n        while (null != (zipEntry = zipInputStream.getNextEntry())) {\n            if (!zipEntry.getName().equals(ODFUtil.SIGNATURE_FILE)) {\n                zipOutputStream.putNextEntry(zipEntry);\n                IOUtils.copy(zipInputStream, zipOutputStream);\n            }\n        }\n        zipInputStream.close();\n        zipEntry = new ZipEntry(ODFUtil.SIGNATURE_FILE);\n        zipOutputStream.putNextEntry(zipEntry);\n        IOUtils.write(signatureData, zipOutputStream);\n        zipOutputStream.close();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11499799",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic InputLattice(String file, int type, boolean convertJoinMeet) throws FileNotFoundException, IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public InputLattice(String file, int type, boolean convertJoinMeet) throws FileNotFoundException, IOException {\n        InputStream latStream = null;\n        labels = new Vector();\n        upperCoversVector = new Vector();\n        Vector upperCovers = new Vector();\n        edgeColors = new Hashtable();\n        Vector upperCovering = new Vector();\n        int level = 0;\n        String str;\n        String currentElt = null;\n        String cover = null;\n        boolean first = true;\n        StreamTokenizer in;\n        switch(type) {\n            case FILE:\n                latStream = new FileInputStream(file);\n                break;\n            case STRING:\n                latStream = new StringBufferInputStream(file);\n                break;\n            case URL:\n                URL url = new URL(\"http\", Config.HOST, Config.PORT, \"/\" + Config.HASSE + \"/\" + Config.URL_STREAMER + file);\n                System.out.println(\"url is \" + url);\n                URLConnection connection = url.openConnection();\n                latStream = new DataInputStream(connection.getInputStream());\n                break;\n        }\n        in = new StreamTokenizer(latStream);\n        in.wordChars('^', '_');\n        in.wordChars('*', '.');\n        while (in.nextToken() != StreamTokenizer.TT_EOF) {\n            if (in.ttype == StreamTokenizer.TT_WORD || in.ttype == StreamTokenizer.TT_NUMBER || in.ttype == '\"') {\n                if (in.ttype == StreamTokenizer.TT_NUMBER) {\n                    str = \"\" + Math.round(in.nval);\n                } else {\n                    str = in.sval;\n                }\n                if (convertJoinMeet && level > 1) {\n                    str = stringSubstitute(str, joinStr, joinSign);\n                    str = stringSubstitute(str, meetStr, meetSign);\n                }\n                if (level == 1) {\n                    name = new String(str);\n                }\n                if (level == 2) {\n                    labels.addElement(str);\n                    currentElt = str;\n                }\n                if (level == 3) {\n                    upperCovers.addElement(str);\n                }\n                if (level == 4) {\n                    if (first) {\n                        upperCovers.addElement(str);\n                        cover = str;\n                        first = false;\n                    } else {\n                        edgeColors.put(new Edge(currentElt, cover), str);\n                    }\n                }\n            }\n            if (in.ttype == '(') {\n                level++;\n                if (level == 3) upperCovers = new Vector();\n            }\n            if (in.ttype == ')') {\n                level--;\n                if (level == 3) first = true;\n                if (level == 2) upperCoversVector.addElement(upperCovers);\n                if (level == 0) {\n                    if (latStream != null) latStream.close();\n                    return;\n                }\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11501486",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void mouseClicked(MouseEvent e) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void mouseClicked(MouseEvent e) {\n            String userNameString;\n            String passwordString;\n            String md5String = \"\";\n            MessageDigest md;\n            userNameString = userNameJTextField.getText();\n            passwordString = passwordJTextField.getText();\n            try {\n                md = MessageDigest.getInstance(\"MD5\");\n                md.update(passwordString.getBytes());\n                md5String = new String(md.digest());\n                md5String = Base64.encode(md5String.getBytes());\n                System.out.println(md5String);\n            } catch (NoSuchAlgorithmException e1) {\n                e1.printStackTrace();\n                System.out.println(\"\u02a7\ufffd\ufffd\");\n            }\n            if (userNameString.equals(\"zouwulingde\") && md5String.equals(\"aKdtP09kSTkWCD/cylk=\")) {\n                JOptionPane.showMessageDialog(null, \"\ufffd\ufffd\u04ed\u02b9\ufffd\ufffd\u0467\ufffd\ufffd\ufffd\u06b9\ufffd\ufffd\ufffd\u03f5\u0373\ufffd\ufffd\");\n            } else {\n                JOptionPane.showMessageDialog(null, \"\ufffd\u00fb\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ubcbb\ufffd\ufffd\u0237!!!!\");\n            }\n        }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11504871",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String encrypt(String password) throws NoSuchAlgorithmException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String encrypt(String password) throws NoSuchAlgorithmException {\n        java.security.MessageDigest d = null;\n        d = java.security.MessageDigest.getInstance(\"MD5\");\n        d.reset();\n        d.update(password.getBytes());\n        byte[] cr = d.digest();\n        return getString(cr).toLowerCase();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11506365",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic boolean setupDatabaseSchema() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n    public boolean setupDatabaseSchema() {\n        Configuration cfg = Configuration.getInstance();\n        Connection con = getConnection();\n        if (null == con) return false;\n        try {\n            String sql = FileTool.readFile(cfg.getProperty(\"database.sql.rootdir\") + System.getProperty(\"file.separator\") + cfg.getProperty(\"database.sql.mysql.setupschema\"));\n            sql = sql.replaceAll(MYSQL_SQL_SCHEMA_REPLACEMENT, StateSaver.getInstance().getDatabaseSettings().getSchema());\n            con.setAutoCommit(false);\n            Statement stmt = con.createStatement();\n            String[] sqlParts = sql.split(\";\");\n            for (String sqlPart : sqlParts) {\n                if (sqlPart.trim().length() > 0) stmt.executeUpdate(sqlPart);\n            }\n            con.commit();\n            JOptionPane.showMessageDialog(null, language.getProperty(\"database.messages.executionsuccess\"), language.getProperty(\"dialog.information.title\"), JOptionPane.INFORMATION_MESSAGE);\n            return true;\n        } catch (SQLException e) {\n            Logger.logException(e);\n        }\n        try {\n            if (con != null) con.rollback();\n        } catch (SQLException e) {\n            Logger.logException(e);\n        }\n        JOptionPane.showMessageDialog(null, language.getProperty(\"database.messages.executionerror\"), language.getProperty(\"dialog.error.title\"), JOptionPane.ERROR_MESSAGE);\n        return false;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11507466",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic PollSetMessage(String username, String question, String title, String[] choices) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public PollSetMessage(String username, String question, String title, String[] choices) {\n        this.username = username;\n        MessageDigest m = null;\n        try {\n            m = MessageDigest.getInstance(\"SHA-1\");\n        } catch (NoSuchAlgorithmException ex) {\n            ex.printStackTrace();\n        }\n        String id = username + String.valueOf(System.nanoTime());\n        m.update(id.getBytes(), 0, id.length());\n        voteId = new BigInteger(1, m.digest()).toString(16);\n        this.question = question;\n        this.title = title;\n        this.choices = choices;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11511985",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void test() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void test() {\n        try {\n            Pattern pattern = Pattern.compile(\"[0-9]{3}\\\\. <a href='(.*)\\\\.html'>(.*)</a><br />\");\n            URL url = new URL(\"http://farmfive.com/\");\n            BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));\n            String line;\n            int count = 0;\n            while ((line = br.readLine()) != null) {\n                Matcher match = pattern.matcher(line);\n                if (match.matches()) {\n                    System.out.println(match.group(1) + \" \" + match.group(2));\n                    count++;\n                }\n            }\n            System.out.println(count + \" counted\");\n            br.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_00115129",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void bubbleSort(String[] a) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void bubbleSort(String[] a) {\n        Collator myCollator = Collator.getInstance();\n        boolean switched = true;\n        for (int pass = 0; pass < a.length - 1 && switched; pass++) {\n            switched = false;\n            for (int i = 0; i < a.length - pass - 1; i++) {\n                if (myCollator.compare(a[i], a[i + 1]) > 0) {\n                    switched = true;\n                    String temp = a[i];\n                    a[i] = a[i + 1];\n                    a[i + 1] = temp;\n                }\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11513043",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic String hash(String password) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public String hash(String password) {\n        MessageDigest sha1Digest;\n        try {\n            sha1Digest = MessageDigest.getInstance(\"SHA-1\");\n        } catch (NoSuchAlgorithmException e) {\n            throw NestedException.wrap(e);\n        }\n        sha1Digest.update(password.getBytes());\n        StringBuilder retval = new StringBuilder(\"sha1:\");\n        retval.append(new String(Base64.encodeBase64(sha1Digest.digest())));\n        return retval.toString();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11513369",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private RSSFeed getFeed(String urlToRssFeed) {\n        try {\n            URL url = new URL(urlToRssFeed);\n            SAXParserFactory factory = SAXParserFactory.newInstance();\n            SAXParser parser = factory.newSAXParser();\n            XMLReader xmlreader = parser.getXMLReader();\n            RSSHandler theRssHandler = new RSSHandler();\n            xmlreader.setContentHandler(theRssHandler);\n            InputSource is = new InputSource(url.openStream());\n            xmlreader.parse(is);\n            return theRssHandler.getFeed();\n        } catch (Exception ee) {\n            return null;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11514180",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void copyFile(File sourceFile, String toDir, boolean create, boolean overwrite) throws FileNotFoundException, IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void copyFile(File sourceFile, String toDir, boolean create, boolean overwrite) throws FileNotFoundException, IOException {\n        FileInputStream source = null;\n        FileOutputStream destination = null;\n        byte[] buffer;\n        int bytes_read;\n        File toFile = new File(toDir);\n        if (create && !toFile.exists()) toFile.mkdirs();\n        if (toFile.exists()) {\n            File destFile = new File(toDir + \"/\" + sourceFile.getName());\n            try {\n                if (!destFile.exists() || overwrite) {\n                    source = new FileInputStream(sourceFile);\n                    destination = new FileOutputStream(destFile);\n                    buffer = new byte[1024];\n                    while (true) {\n                        bytes_read = source.read(buffer);\n                        if (bytes_read == -1) break;\n                        destination.write(buffer, 0, bytes_read);\n                    }\n                }\n            } catch (Exception exx) {\n                exx.printStackTrace();\n            } finally {\n                if (source != null) try {\n                    source.close();\n                } catch (IOException e) {\n                }\n                if (destination != null) try {\n                    destination.close();\n                } catch (IOException e) {\n                }\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11517213",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static void copyFile(File sourceFile, File destFile) {\n        try {\n            if (!destFile.exists()) {\n                destFile.createNewFile();\n            }\n            FileChannel source = null;\n            FileChannel destination = null;\n            try {\n                source = new FileInputStream(sourceFile).getChannel();\n                destination = new FileOutputStream(destFile).getChannel();\n                destination.transferFrom(source, 0, source.size());\n            } finally {\n                if (source != null) {\n                    source.close();\n                }\n                if (destination != null) {\n                    destination.close();\n                }\n            }\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11519124",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "protected static void copyFile(File in, File out) throws IOException {\n        java.io.FileWriter filewriter = null;\n        java.io.FileReader filereader = null;\n        try {\n            filewriter = new java.io.FileWriter(out);\n            filereader = new java.io.FileReader(in);\n            char[] buf = new char[4096];\n            int nread = filereader.read(buf, 0, 4096);\n            while (nread >= 0) {\n                filewriter.write(buf, 0, nread);\n                nread = filereader.read(buf, 0, 4096);\n            }\n            buf = null;\n        } finally {\n            try {\n                filereader.close();\n            } catch (Throwable t) {\n            }\n            try {\n                filewriter.close();\n            } catch (Throwable t) {\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01152136",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic ArrayList<GmailContact> getAllContacts() throws GmailException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@SuppressWarnings(\"unchecked\")\n    public ArrayList<GmailContact> getAllContacts() throws GmailException {\n        String query = properties.getString(\"export_page\");\n        query = query.replace(\"[RANDOM_INT]\", \"\" + random.nextInt());\n        int statusCode = -1;\n        GetMethod get = new GetMethod(query);\n        if (log.isInfoEnabled()) log.info(\"getting all contacts ...\");\n        try {\n            statusCode = client.executeMethod(get);\n            if (statusCode != 200) throw new GmailException(\"In contacts export page: Status code expected: 200 -> Status code returned: \" + statusCode);\n        } catch (HttpException e) {\n            throw new GmailException(\"HttpException in contacts export page:\" + e.getMessage());\n        } catch (IOException e) {\n            throw new GmailException(\"IOException in contacts export page:\" + e.getMessage());\n        } finally {\n            get.releaseConnection();\n        }\n        if (log.isTraceEnabled()) log.trace(\"accessing contacts export page successful...\");\n        String query_post = properties.getString(\"outlook_export_page\");\n        PostMethod post = new PostMethod(query_post);\n        post.addRequestHeader(\"Accept-Encoding\", \"gzip,deflate\");\n        post.addRequestHeader(\"Accept-Charset\", \"ISO-8859-1,utf-8;q=0.7,*;q=0.8\");\n        NameValuePair[] data = { new NameValuePair(\"at\", getCookie(\"GMAIL_AT\")), new NameValuePair(\"ecf\", \"o\"), new NameValuePair(\"ac\", \"Export Contacts\") };\n        post.setRequestBody(data);\n        if (log.isTraceEnabled()) log.trace(\"getting contacts csv file...\");\n        try {\n            statusCode = client.executeMethod(post);\n            if (statusCode != 200) throw new GmailException(\"In csv file post: Status code expected: 200 -> Status code returned: \" + statusCode);\n            if (log.isTraceEnabled()) log.trace(\"Gmail: csv charset: \" + post.getResponseCharSet());\n            GMAIL_OUTPUT_CHARSET = post.getResponseCharSet();\n            InputStreamReader isr = new InputStreamReader(new GZIPInputStream(post.getResponseBodyAsStream()), post.getResponseCharSet());\n            CSVReader reader = new CSVReader(isr);\n            List csvEntries = reader.readAll();\n            reader.close();\n            ArrayList<GmailContact> contacts = new ArrayList<GmailContact>();\n            MessageDigest m = MessageDigest.getInstance(\"MD5\");\n            if (log.isTraceEnabled()) log.trace(\"creating Gmail contacts...\");\n            for (int i = 1; i < csvEntries.size(); i++) {\n                GmailContact contact = new GmailContact();\n                String[] value = (String[]) csvEntries.get(i);\n                for (int j = 0; j < value.length; j++) {\n                    switch(j) {\n                        case 0:\n                            contact.setName(value[j]);\n                            break;\n                        case 1:\n                            contact.setEmail(value[j]);\n                            if (contact.getName() == null) contact.setIdName(value[j]); else contact.setIdName(contact.getName() + value[j]);\n                            break;\n                        case 2:\n                            contact.setNotes(value[j]);\n                            break;\n                        case 3:\n                            contact.setEmail2(value[j]);\n                            break;\n                        case 4:\n                            contact.setEmail3(value[j]);\n                            break;\n                        case 5:\n                            contact.setMobilePhone(value[j]);\n                            break;\n                        case 6:\n                            contact.setPager(value[j]);\n                            break;\n                        case 7:\n                            contact.setCompany(value[j]);\n                            break;\n                        case 8:\n                            contact.setJobTitle(value[j]);\n                            break;\n                        case 9:\n                            contact.setHomePhone(value[j]);\n                            break;\n                        case 10:\n                            contact.setHomePhone2(value[j]);\n                            break;\n                        case 11:\n                            contact.setHomeFax(value[j]);\n                            break;\n                        case 12:\n                            contact.setHomeAddress(value[j]);\n                            break;\n                        case 13:\n                            contact.setBusinessPhone(value[j]);\n                            break;\n                        case 14:\n                            contact.setBusinessPhone2(value[j]);\n                            break;\n                        case 15:\n                            contact.setBusinessFax(value[j]);\n                            break;\n                        case 16:\n                            contact.setBusinessAddress(value[j]);\n                            break;\n                        case 17:\n                            contact.setOtherPhone(value[j]);\n                            break;\n                        case 18:\n                            contact.setOtherFax(value[j]);\n                            break;\n                        case 19:\n                            contact.setOtherAddress(value[j]);\n                            break;\n                    }\n                }\n                m.update(contact.toString().getBytes());\n                if (log.isTraceEnabled()) log.trace(\"setting Md5 Hash...\");\n                contact.setMd5Hash(new BigInteger(m.digest()).toString());\n                contacts.add(contact);\n            }\n            if (log.isTraceEnabled()) log.trace(\"Mapping contacts uid...\");\n            Collections.sort(contacts);\n            ArrayList<GmailContact> idList = getAllContactsID();\n            for (int i = 0; i < idList.size(); i++) {\n                contacts.get(i).setId(idList.get(i).getId());\n            }\n            if (log.isInfoEnabled()) log.info(\"getting all contacts info successful...\");\n            return contacts;\n        } catch (HttpException e) {\n            throw new GmailException(\"HttpException in csv file post:\" + e.getMessage());\n        } catch (IOException e) {\n            throw new GmailException(\"IOException in csv file post:\" + e.getMessage());\n        } catch (NoSuchAlgorithmException e) {\n            throw new GmailException(\"No such md5 algorithm \" + e.getMessage());\n        } finally {\n            post.releaseConnection();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11521416",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static void sentRequest() {\n        try {\n            URLConnection urlConn;\n            URL url = new URL(gatewayURL);\n            urlConn = url.openConnection();\n            urlConn.setRequestProperty(\"Content-Type\", \"text/xml\");\n            urlConn.setDoOutput(true);\n            OutputStream ostream = urlConn.getOutputStream();\n            PrintWriter out = new PrintWriter(ostream);\n            out.print(request);\n            out.close();\n            ostream.close();\n            InputStream inStream = urlConn.getInputStream();\n            File myFile = new File(styleSheetLocation);\n            if (type.equals(\"A\") && myFile.exists()) {\n                TransformerFactory tFactory = TransformerFactory.newInstance();\n                Transformer transformer = tFactory.newTransformer(new StreamSource(styleSheetLocation));\n                transformer.transform(new StreamSource(inStream), new StreamResult(System.out));\n            } else {\n                BufferedReader in = new BufferedReader(new InputStreamReader(inStream));\n                String inputLine;\n                while ((inputLine = in.readLine()) != null) {\n                    System.out.println(inputLine);\n                }\n                in.close();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11522419",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copyFile(File in, File out) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copyFile(File in, File out) {\n        int len;\n        byte[] buffer = new byte[1024];\n        try {\n            FileInputStream fin = new FileInputStream(in);\n            FileOutputStream fout = new FileOutputStream(out);\n            while ((len = fin.read(buffer)) >= 0) fout.write(buffer, 0, len);\n            fin.close();\n            fout.close();\n        } catch (IOException ex) {\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11527585",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic final void testImportODScontentXml() throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Test\n    public final void testImportODScontentXml() throws Exception {\n        URL url = ODSTableImporterTest.class.getResource(\"/Messages.ods_FILES/content.xml\");\n        String systemId = url.getPath();\n        InputStream in = url.openStream();\n        ODSTableImporter b = new ODSTableImporter();\n        b.importODSContentXml(systemId, in, null);\n        assertMessagesOds(b);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11527586",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic final void testImportODS() throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Test\n    public final void testImportODS() throws Exception {\n        URL url = ODSTableImporterTest.class.getResource(\"/Messages.ods\");\n        InputStream in = url.openStream();\n        ODSTableImporter b = new ODSTableImporter();\n        b.importODS(in, null);\n        assertMessagesOds(b);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11540200",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic File uploadImage(InputStream inputStream, String fileName, String sessionId) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public File uploadImage(InputStream inputStream, String fileName, String sessionId) {\n        File file = new File(PathConfig.getInstance().sessionFolder(sessionId) + File.separator + fileName);\n        FileOutputStream fileOutputStream = null;\n        try {\n            FileUtils.touch(file);\n            fileOutputStream = new FileOutputStream(file);\n            IOUtils.copy(inputStream, fileOutputStream);\n        } catch (IOException e) {\n            logger.error(\"Save uploaded image to file occur IOException.\", e);\n            throw new FileOperationException(\"Save uploaded image to file occur IOException.\", e);\n        } finally {\n            try {\n                if (fileOutputStream != null) {\n                    fileOutputStream.close();\n                }\n            } catch (IOException e) {\n                logger.error(\"Close FileOutputStream Occur IOException while save a uploaded image.\", e);\n            }\n        }\n        return file;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11541529",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void initFiles() throws IOException {\n        if (!tempDir.exists()) {\n            if (!tempDir.mkdir()) throw new IOException(\"Temp dir '' can not be created\");\n        }\n        File tmp = new File(tempDir, TORRENT_FILENAME);\n        if (!tmp.exists()) {\n            FileChannel in = new FileInputStream(torrentFile).getChannel();\n            FileChannel out = new FileOutputStream(tmp).getChannel();\n            in.transferTo(0, in.size(), out);\n            in.close();\n            out.close();\n        }\n        torrentFile = tmp;\n        if (!stateFile.exists()) {\n            FileChannel out = new FileOutputStream(stateFile).getChannel();\n            int numChunks = metadata.getPieceHashes().size();\n            ByteBuffer zero = ByteBuffer.wrap(new byte[] { 0, 0, 0, 0 });\n            for (int i = 0; i < numChunks; i++) {\n                out.write(zero);\n                zero.clear();\n            }\n            out.close();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11546108",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void run() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n    public void run() {\n        try {\n            BufferedReader in = new BufferedReader(new InputStreamReader(new URL(urlInfo).openStream()));\n            String ligneEnCours;\n            int i = 0;\n            informations = \"\";\n            while ((ligneEnCours = in.readLine()) != null) {\n                switch(i) {\n                    case 0:\n                        version = ligneEnCours;\n                        break;\n                    case 1:\n                        url = ligneEnCours;\n                        break;\n                    default:\n                        informations += ligneEnCours + '\\n';\n                        break;\n                }\n                i++;\n            }\n            in.close();\n            erreur = false;\n        } catch (IOException e) {\n            erreur = true;\n            texteErreur = e.getMessage();\n            if (texteErreur.equals(\"Network is unreachable\")) {\n                texteErreur = \"Pas de r\u00e9seau\";\n                numErreur = 1;\n            }\n            if (e instanceof FileNotFoundException) {\n                texteErreur = \"Probl\u00e8me param\u00e9trage\";\n                numErreur = 2;\n            }\n            e.printStackTrace();\n        } finally {\n            for (ActionListener al : listeners) {\n                al.actionPerformed(null);\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11548510",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static boolean encodeFileToFile(String infile, String outfile) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static boolean encodeFileToFile(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] buffer = new byte[65536];\n            int read = -1;\n            while ((read = in.read(buffer)) >= 0) {\n                out.write(buffer, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11548511",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static boolean decodeFileToFile(String infile, String outfile) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static boolean decodeFileToFile(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] buffer = new byte[65536];\n            int read = -1;\n            while ((read = in.read(buffer)) >= 0) {\n                out.write(buffer, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11550398",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void loadDefaultDrivers() {\n        final URL url = _app.getResources().getDefaultDriversUrl();\n        try {\n            InputStreamReader isr = new InputStreamReader(url.openStream());\n            try {\n                _cache.load(isr);\n            } finally {\n                isr.close();\n            }\n        } catch (Exception ex) {\n            final Logger logger = _app.getLogger();\n            logger.showMessage(Logger.ILogTypes.ERROR, \"Error loading default driver file: \" + url != null ? url.toExternalForm() : \"\");\n            logger.showMessage(Logger.ILogTypes.ERROR, ex);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11552288",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void run() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void run() {\n        Thread.currentThread().setName(\"zhongwen.com watcher\");\n        String url = getURL();\n        try {\n            while (m_shouldBeRunning) {\n                try {\n                    BufferedReader reader = new BufferedReader(new InputStreamReader(new URL(url).openStream(), \"ISO8859_1\"));\n                    String line;\n                    Vector chatLines = new Vector();\n                    boolean startGrabbing = false;\n                    while ((line = reader.readLine()) != null) {\n                        if (line.indexOf(\"</style>\") >= 0) {\n                            startGrabbing = true;\n                        } else if (startGrabbing) {\n                            if (line.equals(m_mostRecentKnownLine)) {\n                                break;\n                            }\n                            chatLines.addElement(line);\n                        }\n                    }\n                    reader.close();\n                    for (int i = chatLines.size() - 1; i >= 0; --i) {\n                        String chatLine = (String) chatLines.elementAt(i);\n                        m_mostRecentKnownLine = chatLine;\n                        if (chatLine.indexOf(\":\") >= 0) {\n                            String from = chatLine.substring(0, chatLine.indexOf(\":\"));\n                            String message = stripTags(chatLine.substring(chatLine.indexOf(\":\")));\n                            m_source.pushMessage(new ZhongWenMessage(m_source, from, message));\n                        } else {\n                            m_source.pushMessage(new ZhongWenMessage(m_source, null, stripTags(chatLine)));\n                        }\n                    }\n                    Thread.sleep(SLEEP_TIME);\n                } catch (InterruptedIOException e) {\n                } catch (InterruptedException e) {\n                }\n            }\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } catch (RuntimeException e) {\n            m_source.disconnect();\n            throw e;\n        } catch (Error e) {\n            m_source.disconnect();\n            throw e;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11556231",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static Document ByURL(String urlstr) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static Document ByURL(String urlstr) throws IOException {\n        String uri = urlstr;\n        URL url = new URL(uri);\n        URLConnection connection = url.openConnection();\n        InputStream in = connection.getInputStream();\n        Reader reader = new InputStreamReader(in);\n        InputSource is = new InputSourceImpl(reader, uri);\n        System.out.println(is.toString());\n        Document document = new Document() {\n\n            @Override\n            public Node adoptNode(Node source) throws DOMException {\n                return null;\n            }\n\n            @Override\n            public Attr createAttribute(String name) throws DOMException {\n                return null;\n            }\n\n            @Override\n            public Attr createAttributeNS(String namespaceURI, String qualifiedName) throws DOMException {\n                return null;\n            }\n\n            @Override\n            public CDATASection createCDATASection(String data) throws DOMException {\n                return null;\n            }\n\n            @Override\n            public Comment createComment(String data) {\n                return null;\n            }\n\n            @Override\n            public DocumentFragment createDocumentFragment() {\n                return null;\n            }\n\n            @Override\n            public Element createElement(String tagName) throws DOMException {\n                return null;\n            }\n\n            @Override\n            public Element createElementNS(String namespaceURI, String qualifiedName) throws DOMException {\n                return null;\n            }\n\n            @Override\n            public EntityReference createEntityReference(String name) throws DOMException {\n                return null;\n            }\n\n            @Override\n            public ProcessingInstruction createProcessingInstruction(String target, String data) throws DOMException {\n                return null;\n            }\n\n            @Override\n            public Text createTextNode(String data) {\n                return null;\n            }\n\n            @Override\n            public DocumentType getDoctype() {\n                return null;\n            }\n\n            @Override\n            public Element getDocumentElement() {\n                return null;\n            }\n\n            @Override\n            public String getDocumentURI() {\n                return null;\n            }\n\n            @Override\n            public DOMConfiguration getDomConfig() {\n                return null;\n            }\n\n            @Override\n            public Element getElementById(String elementId) {\n                return null;\n            }\n\n            @Override\n            public NodeList getElementsByTagName(String tagname) {\n                return null;\n            }\n\n            @Override\n            public NodeList getElementsByTagNameNS(String namespaceURI, String localName) {\n                return null;\n            }\n\n            @Override\n            public DOMImplementation getImplementation() {\n                return null;\n            }\n\n            @Override\n            public String getInputEncoding() {\n                return null;\n            }\n\n            @Override\n            public boolean getStrictErrorChecking() {\n                return false;\n            }\n\n            @Override\n            public String getXmlEncoding() {\n                return null;\n            }\n\n            @Override\n            public boolean getXmlStandalone() {\n                return false;\n            }\n\n            @Override\n            public String getXmlVersion() {\n                return null;\n            }\n\n            @Override\n            public Node importNode(Node importedNode, boolean deep) throws DOMException {\n                return null;\n            }\n\n            @Override\n            public void normalizeDocument() {\n            }\n\n            @Override\n            public Node renameNode(Node n, String namespaceURI, String qualifiedName) throws DOMException {\n                return null;\n            }\n\n            @Override\n            public void setDocumentURI(String documentURI) {\n            }\n\n            @Override\n            public void setStrictErrorChecking(boolean strictErrorChecking) {\n            }\n\n            @Override\n            public void setXmlStandalone(boolean xmlStandalone) throws DOMException {\n            }\n\n            @Override\n            public void setXmlVersion(String xmlVersion) throws DOMException {\n            }\n\n            public Node appendChild(Node arg0) throws DOMException {\n                return null;\n            }\n\n            public Node cloneNode(boolean arg0) {\n                return null;\n            }\n\n            public short compareDocumentPosition(Node arg0) throws DOMException {\n                return 0;\n            }\n\n            public NamedNodeMap getAttributes() {\n                return null;\n            }\n\n            public String getBaseURI() {\n                return null;\n            }\n\n            public NodeList getChildNodes() {\n                return null;\n            }\n\n            public Object getFeature(String arg0, String arg1) {\n                return null;\n            }\n\n            public Node getFirstChild() {\n                return null;\n            }\n\n            public Node getLastChild() {\n                return null;\n            }\n\n            public String getLocalName() {\n                return null;\n            }\n\n            public String getNamespaceURI() {\n                return null;\n            }\n\n            public Node getNextSibling() {\n                return null;\n            }\n\n            public String getNodeName() {\n                return null;\n            }\n\n            public short getNodeType() {\n                return 0;\n            }\n\n            public String getNodeValue() throws DOMException {\n                return null;\n            }\n\n            public Document getOwnerDocument() {\n                return null;\n            }\n\n            public Node getParentNode() {\n                return null;\n            }\n\n            public String getPrefix() {\n                return null;\n            }\n\n            public Node getPreviousSibling() {\n                return null;\n            }\n\n            public String getTextContent() throws DOMException {\n                return null;\n            }\n\n            public Object getUserData(String arg0) {\n                return null;\n            }\n\n            public boolean hasAttributes() {\n                return false;\n            }\n\n            public boolean hasChildNodes() {\n                return false;\n            }\n\n            public Node insertBefore(Node arg0, Node arg1) throws DOMException {\n                return null;\n            }\n\n            public boolean isDefaultNamespace(String arg0) {\n                return false;\n            }\n\n            public boolean isEqualNode(Node arg0) {\n                return false;\n            }\n\n            public boolean isSameNode(Node arg0) {\n                return false;\n            }\n\n            public boolean isSupported(String arg0, String arg1) {\n                return false;\n            }\n\n            public String lookupNamespaceURI(String arg0) {\n                return null;\n            }\n\n            public String lookupPrefix(String arg0) {\n                return null;\n            }\n\n            public void normalize() {\n            }\n\n            public Node removeChild(Node arg0) throws DOMException {\n                return null;\n            }\n\n            public Node replaceChild(Node arg0, Node arg1) throws DOMException {\n                return null;\n            }\n\n            public void setNodeValue(String arg0) throws DOMException {\n            }\n\n            public void setPrefix(String arg0) throws DOMException {\n            }\n\n            public void setTextContent(String arg0) throws DOMException {\n            }\n\n            public Object setUserData(String arg0, Object arg1, UserDataHandler arg2) {\n                return null;\n            }\n        };\n        return document;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11560551",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static void extract(ZipFile zipFile) throws Exception {\n        FileUtils.deleteQuietly(WEBKIT_DIR);\n        WEBKIT_DIR.mkdirs();\n        Enumeration<? extends ZipEntry> entries = zipFile.entries();\n        while (entries.hasMoreElements()) {\n            ZipEntry entry = entries.nextElement();\n            if (entry.isDirectory()) {\n                new File(WEBKIT_DIR, entry.getName()).mkdirs();\n                continue;\n            }\n            InputStream inputStream = zipFile.getInputStream(entry);\n            File outputFile = new File(WEBKIT_DIR, entry.getName());\n            FileOutputStream outputStream = new FileOutputStream(outputFile);\n            IOUtils.copy(inputStream, outputStream);\n            IOUtils.closeQuietly(inputStream);\n            IOUtils.closeQuietly(outputStream);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11562158",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private File writeResourceToFile(String resource) throws IOException {\n        File tmp = File.createTempFile(\"zfppt\" + resource, null);\n        InputStream res = Thread.currentThread().getContextClassLoader().getResourceAsStream(resource);\n        OutputStream out = new FileOutputStream(tmp);\n        IOUtils.copy(res, out);\n        out.close();\n        return tmp;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11562165",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void streamContains(String in, InputStream stream) throws IOException {\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        IOUtils.copy(stream, baos);\n        byte[] bytes = baos.toByteArray();\n        String cmp = new String(bytes, \"UTF-8\");\n        assertTrue(cmp.contains(in));\n        baos.close();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11562173",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void checkInputStream(InputStream in, byte[] cmp, boolean all) throws IOException {\n        ByteArrayOutputStream stream = new ByteArrayOutputStream();\n        IOUtils.copy(in, stream);\n        byte[] out = stream.toByteArray();\n        if (all) assertEquals(cmp.length, out.length);\n        for (int i = 0; i < cmp.length; i++) assertEquals(cmp[i], out[i]);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11566433",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void write(File file) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void write(File file) throws Exception {\n        if (getGEDCOMFile() != null) {\n            size = getGEDCOMFile().length();\n            if (!getGEDCOMFile().renameTo(file)) {\n                BufferedInputStream in = null;\n                BufferedOutputStream out = null;\n                try {\n                    in = new BufferedInputStream(new FileInputStream(getGEDCOMFile()));\n                    out = new BufferedOutputStream(new FileOutputStream(file));\n                    IOUtils.copy(in, out);\n                } finally {\n                    if (in != null) {\n                        try {\n                            in.close();\n                        } catch (IOException e) {\n                        }\n                    }\n                    if (out != null) {\n                        try {\n                            out.close();\n                        } catch (IOException e) {\n                        }\n                    }\n                }\n            }\n        } else {\n            throw new FileUploadException(\"Cannot write uploaded file to disk!\");\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11568400",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private InputStream getInputStream(URI uri) throws IOException {\n        if (Logging.SHOW_FINE && LOG.isLoggable(Level.FINE)) {\n            LOG.fine(\"Loading ACL : \" + uri.toString());\n        }\n        URL url = uri.toURL();\n        URLConnection connection = url.openConnection();\n        connection.setDoInput(true);\n        return connection.getInputStream();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01156851",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void runWeb(String beginURL, String contextRoot, String pageURI) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void runWeb(String beginURL, String contextRoot, String pageURI) {\n        if (bDebug) System.out.println(\"WEB Path\");\n        List<String> vtURLs = new ArrayList<String>();\n        List<String> vtRobots = getRobots(beginURL, contextRoot);\n        vtURLs.add(\"/\" + contextRoot + \"/\" + pageURI);\n        Indexer indexer = null;\n        IndexDocument indexDoc = null;\n        try {\n            indexer = new Indexer(\"/tmp/tmp/index\");\n            for (String sxURL : vtURLs) {\n                if (bDebug) System.out.println(\"\\n\\n*** INDEXING \" + sxURL);\n                if (bDebug) System.out.println(\"Have - \" + sxURL);\n                boolean bIndexPage = true;\n                if (vtRobots != null) {\n                    for (String sxRobotURL : vtRobots) {\n                        if (bDebug) System.out.println(\"Comparing to - \" + sxRobotURL);\n                        if (sxURL.startsWith(sxRobotURL)) {\n                            if (bDebug) System.out.println(\"Found URL - \" + sxRobotURL + \" - \" + sxURL);\n                            bIndexPage = false;\n                            break;\n                        }\n                    }\n                } else {\n                    bIndexPage = true;\n                }\n                sxURL = beginURL + sxURL;\n                ParserDelegator pd = new ParserDelegator();\n                CallbackHandler cb = new CallbackHandler(vtURLs, bIndexPage, contextRoot);\n                try {\n                    URLConnection urlConn = new URL(sxURL).openConnection();\n                    urlConn.setUseCaches(false);\n                    Date modDate = new Date(urlConn.getLastModified());\n                    if (bDebug) System.out.println(\"\\nMatch - \" + sxURL + \" - Modified Date - \" + modDate);\n                    BufferedReader bfReader = new BufferedReader(new InputStreamReader(urlConn.getInputStream()));\n                    pd.parse(bfReader, cb, true);\n                    if (bIndexPage) {\n                        if (bDebug) System.out.println(\"Adding Index - \" + sxURL + \"\\nContent:\" + cb.getText() + \"\\nSummary:\" + cb.getSummary() + \"\\nTitle:\" + cb.getTitle());\n                        indexDoc = new IndexDocument();\n                        indexDoc.setUID(sxURL + modDate.toString());\n                        indexDoc.setPageURL(sxURL);\n                        indexDoc.setModifiedDate(modDate.toString());\n                        indexDoc.setContents(cb.getText());\n                        indexDoc.setTitle(cb.getTitle());\n                        indexDoc.setSummary(cb.getSummary());\n                        indexer.addDocument(indexDoc);\n                    }\n                } catch (Exception ee) {\n                    PetstoreUtil.getLogger().log(Level.SEVERE, \"Inner Exception\" + ee);\n                }\n            }\n        } catch (Exception e) {\n            PetstoreUtil.getLogger().log(Level.SEVERE, \"Outer Exception\" + e);\n        } finally {\n            try {\n                if (indexer != null) {\n                    indexer.close();\n                }\n            } catch (Exception ee) {\n                ee.printStackTrace();\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01156852",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private List<String> getRobots(String beginURL, String contextRoot) {\n        List<String> vtRobots = new ArrayList<String>();\n        BufferedReader bfReader = null;\n        try {\n            URL urlx = new URL(beginURL + \"/\" + contextRoot + \"/\" + \"robots.txt\");\n            URLConnection urlConn = urlx.openConnection();\n            urlConn.setUseCaches(false);\n            bfReader = new BufferedReader(new InputStreamReader(urlConn.getInputStream()));\n            String sxLine = \"\";\n            while ((sxLine = bfReader.readLine()) != null) {\n                if (sxLine.startsWith(\"Disallow:\")) {\n                    vtRobots.add(sxLine.substring(10));\n                }\n            }\n        } catch (Exception e) {\n            PetstoreUtil.getLogger().log(Level.SEVERE, \"Exception\" + e);\n            vtRobots = null;\n        } finally {\n            try {\n                if (bfReader != null) {\n                    bfReader.close();\n                }\n            } catch (Exception ee) {\n            }\n        }\n        return vtRobots;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01156882",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void onClick(View v) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n            public void onClick(View v) {\n                Log.d(Config.SS_TAG, \"Sending POST request to server...\");\n                DefaultHttpClient httpClient = new DefaultHttpClient();\n                HttpPost httpPost = new HttpPost(Config.RPC_SERVLET_URL);\n                JSONObject requestJson = new JSONObject();\n                JSONArray callsJson = new JSONArray();\n                try {\n                    JSONObject callJson = new JSONObject();\n                    callJson.put(\"method\", \"ping\");\n                    callJson.put(\"void\", \"null\");\n                    callsJson.put(0, callJson);\n                    requestJson.put(\"calls\", callsJson);\n                    httpPost.setEntity(new StringEntity(requestJson.toString(), \"UTF-8\"));\n                    HttpResponse httpResponse = httpClient.execute(httpPost);\n                    final int responseStatusCode = httpResponse.getStatusLine().getStatusCode();\n                    if (200 <= responseStatusCode && responseStatusCode < 300) {\n                        Log.d(Config.SS_TAG, \"Successful ping - status code: \" + responseStatusCode);\n                        BufferedReader reader = new BufferedReader(new InputStreamReader(httpResponse.getEntity().getContent(), \"UTF-8\"), 8 * 1024);\n                        StringBuilder sb = new StringBuilder();\n                        String line;\n                        while ((line = reader.readLine()) != null) {\n                            sb.append(line).append(\"\\n\");\n                        }\n                        JSONTokener tokener = new JSONTokener(sb.toString());\n                        JSONObject responseJson = new JSONObject(tokener);\n                        JSONArray resultsJson = responseJson.getJSONArray(\"results\");\n                        JSONObject result = resultsJson.getJSONObject(0);\n                        String returnValue = result.getJSONObject(\"data\").getString(\"return\");\n                        Log.d(Config.SS_TAG, \"Response message: \" + returnValue);\n                    } else {\n                        Log.e(Config.SS_TAG, \"Unsuccessful ping...\");\n                    }\n                } catch (Exception e) {\n                    Log.e(Config.SS_TAG, \"Error while trying to ping rpc servlet\");\n                    e.printStackTrace();\n                }\n            }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11572565",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static final boolean copy(File source, File target, boolean overwrite) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static final boolean copy(File source, File target, boolean overwrite) {\n        if (!overwrite && target.exists()) {\n            LOGGER.error(\"Target file exist and it not permitted to overwrite it !\");\n            return false;\n        }\n        FileChannel in = null;\n        FileChannel out = null;\n        try {\n            in = new FileInputStream(source).getChannel();\n            out = new FileOutputStream(target).getChannel();\n            in.transferTo(0, in.size(), out);\n        } catch (FileNotFoundException e) {\n            LOGGER.error(e.getLocalizedMessage());\n            if (LOGGER.isDebugEnabled()) e.printStackTrace();\n            return false;\n        } catch (IOException e) {\n            LOGGER.error(e.getLocalizedMessage());\n            if (LOGGER.isDebugEnabled()) e.printStackTrace();\n            return false;\n        } finally {\n            try {\n                in.close();\n            } catch (Exception e) {\n            }\n            try {\n                out.close();\n            } catch (Exception e) {\n            }\n        }\n        return true;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11582923",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic Object run() throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static InputStream openStream(final URL url) throws IOException {\n        try {\n            return (InputStream) AccessController.doPrivileged(new PrivilegedExceptionAction() {\n\n                public Object run() throws IOException {\n                    return url.openStream();\n                }\n            });\n        } catch (PrivilegedActionException e) {\n            throw (IOException) e.getException();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01158840",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static int zipFile(File file_input, File dir_output) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static int zipFile(File file_input, File dir_output) {\n        File zip_output = new File(dir_output, file_input.getName() + \".zip\");\n        ZipOutputStream zip_out_stream;\n        try {\n            FileOutputStream out = new FileOutputStream(zip_output);\n            zip_out_stream = new ZipOutputStream(new BufferedOutputStream(out));\n        } catch (IOException e) {\n            return STATUS_OUT_FAIL;\n        }\n        byte[] input_buffer = new byte[BUF_SIZE];\n        int len = 0;\n        try {\n            ZipEntry zip_entry = new ZipEntry(file_input.getName());\n            zip_out_stream.putNextEntry(zip_entry);\n            FileInputStream in = new FileInputStream(file_input);\n            BufferedInputStream source = new BufferedInputStream(in, BUF_SIZE);\n            while ((len = source.read(input_buffer, 0, BUF_SIZE)) != -1) zip_out_stream.write(input_buffer, 0, len);\n            in.close();\n        } catch (IOException e) {\n            return STATUS_ZIP_FAIL;\n        }\n        try {\n            zip_out_stream.close();\n        } catch (IOException e) {\n        }\n        return STATUS_OK;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01158841",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static int gzipFile(File file_input, String file_output) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static int gzipFile(File file_input, String file_output) {\n        File gzip_output = new File(file_output);\n        GZIPOutputStream gzip_out_stream;\n        try {\n            FileOutputStream out = new FileOutputStream(gzip_output);\n            gzip_out_stream = new GZIPOutputStream(new BufferedOutputStream(out));\n        } catch (IOException e) {\n            return STATUS_OUT_FAIL;\n        }\n        byte[] input_buffer = new byte[BUF_SIZE];\n        int len = 0;\n        try {\n            FileInputStream in = new FileInputStream(file_input);\n            BufferedInputStream source = new BufferedInputStream(in, BUF_SIZE);\n            while ((len = source.read(input_buffer, 0, BUF_SIZE)) != -1) gzip_out_stream.write(input_buffer, 0, len);\n            in.close();\n        } catch (IOException e) {\n            return STATUS_GZIP_FAIL;\n        }\n        try {\n            gzip_out_stream.close();\n        } catch (IOException e) {\n        }\n        return STATUS_OK;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01158842",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static int unzipFile(File file_input, File dir_output) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static int unzipFile(File file_input, File dir_output) {\n        ZipInputStream zip_in_stream;\n        try {\n            FileInputStream in = new FileInputStream(file_input);\n            BufferedInputStream source = new BufferedInputStream(in);\n            zip_in_stream = new ZipInputStream(source);\n        } catch (IOException e) {\n            return STATUS_IN_FAIL;\n        }\n        byte[] input_buffer = new byte[BUF_SIZE];\n        int len = 0;\n        do {\n            try {\n                ZipEntry zip_entry = zip_in_stream.getNextEntry();\n                if (zip_entry == null) break;\n                File output_file = new File(dir_output, zip_entry.getName());\n                FileOutputStream out = new FileOutputStream(output_file);\n                BufferedOutputStream destination = new BufferedOutputStream(out, BUF_SIZE);\n                while ((len = zip_in_stream.read(input_buffer, 0, BUF_SIZE)) != -1) destination.write(input_buffer, 0, len);\n                destination.flush();\n                out.close();\n            } catch (IOException e) {\n                return STATUS_GUNZIP_FAIL;\n            }\n        } while (true);\n        try {\n            zip_in_stream.close();\n        } catch (IOException e) {\n        }\n        return STATUS_OK;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01158843",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static int gunzipFile(File file_input, File dir_output) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static int gunzipFile(File file_input, File dir_output) {\n        GZIPInputStream gzip_in_stream;\n        try {\n            FileInputStream in = new FileInputStream(file_input);\n            BufferedInputStream source = new BufferedInputStream(in);\n            gzip_in_stream = new GZIPInputStream(source);\n        } catch (IOException e) {\n            return STATUS_IN_FAIL;\n        }\n        String file_input_name = file_input.getName();\n        String file_output_name = file_input_name.substring(0, file_input_name.length() - 3);\n        File output_file = new File(dir_output, file_output_name);\n        byte[] input_buffer = new byte[BUF_SIZE];\n        int len = 0;\n        try {\n            FileOutputStream out = new FileOutputStream(output_file);\n            BufferedOutputStream destination = new BufferedOutputStream(out, BUF_SIZE);\n            while ((len = gzip_in_stream.read(input_buffer, 0, BUF_SIZE)) != -1) destination.write(input_buffer, 0, len);\n            destination.flush();\n            out.close();\n        } catch (IOException e) {\n            return STATUS_GUNZIP_FAIL;\n        }\n        try {\n            gzip_in_stream.close();\n        } catch (IOException e) {\n        }\n        return STATUS_OK;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11591514",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic HashCash(String cash) throws NoSuchAlgorithmException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public HashCash(String cash) throws NoSuchAlgorithmException {\n        myToken = cash;\n        String[] parts = cash.split(\":\");\n        myVersion = Integer.parseInt(parts[0]);\n        if (myVersion < 0 || myVersion > 1) throw new IllegalArgumentException(\"Only supported versions are 0 and 1\");\n        if ((myVersion == 0 && parts.length != 6) || (myVersion == 1 && parts.length != 7)) throw new IllegalArgumentException(\"Improperly formed HashCash\");\n        try {\n            int index = 1;\n            if (myVersion == 1) myValue = Integer.parseInt(parts[index++]); else myValue = 0;\n            SimpleDateFormat dateFormat = new SimpleDateFormat(dateFormatString);\n            Calendar tempCal = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"));\n            tempCal.setTime(dateFormat.parse(parts[index++]));\n            myResource = parts[index++];\n            myExtensions = deserializeExtensions(parts[index++]);\n            MessageDigest md = MessageDigest.getInstance(\"SHA1\");\n            md.update(cash.getBytes());\n            byte[] tempBytes = md.digest();\n            int tempValue = numberOfLeadingZeros(tempBytes);\n            if (myVersion == 0) myValue = tempValue; else if (myVersion == 1) myValue = (tempValue > myValue ? myValue : tempValue);\n        } catch (java.text.ParseException ex) {\n            throw new IllegalArgumentException(\"Improperly formed HashCash\", ex);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11591523",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static HashCash mintCash(String resource, Map<String, List<String>> extensions, Calendar date, int value, int version) throws NoSuchAlgorithmException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static HashCash mintCash(String resource, Map<String, List<String>> extensions, Calendar date, int value, int version) throws NoSuchAlgorithmException {\n        if (version < 0 || version > 1) throw new IllegalArgumentException(\"Only supported versions are 0 and 1\");\n        if (value < 0 || value > hashLength) throw new IllegalArgumentException(\"Value must be between 0 and \" + hashLength);\n        if (resource.contains(\":\")) throw new IllegalArgumentException(\"Resource must not contain ':'\");\n        HashCash result = new HashCash();\n        MessageDigest md = MessageDigest.getInstance(\"SHA1\");\n        result.myResource = resource;\n        result.myExtensions = (null == extensions ? new HashMap<String, List<String>>() : extensions);\n        result.myDate = date;\n        result.myVersion = version;\n        String prefix;\n        SimpleDateFormat dateFormat = new SimpleDateFormat(dateFormatString);\n        switch(version) {\n            case 0:\n                prefix = version + \":\" + dateFormat.format(date.getTime()) + \":\" + resource + \":\" + serializeExtensions(extensions) + \":\";\n                result.myToken = generateCash(prefix, value, md);\n                md.reset();\n                md.update(result.myToken.getBytes());\n                result.myValue = numberOfLeadingZeros(md.digest());\n                break;\n            case 1:\n                result.myValue = value;\n                prefix = version + \":\" + value + \":\" + dateFormat.format(date.getTime()) + \":\" + resource + \":\" + serializeExtensions(extensions) + \":\";\n                result.myToken = generateCash(prefix, value, md);\n                break;\n            default:\n                throw new IllegalArgumentException(\"Only supported versions are 0 and 1\");\n        }\n        return result;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11592707",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String getBiopaxId(Reaction reaction) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String getBiopaxId(Reaction reaction) {\n        String id = null;\n        if (reaction.getId() > Reaction.NO_ID_ASSIGNED) {\n            id = reaction.getId().toString();\n        } else {\n            try {\n                MessageDigest md = MessageDigest.getInstance(\"MD5\");\n                md.update(reaction.getTextualRepresentation().getBytes());\n                byte[] digestBytes = md.digest();\n                StringBuilder digesterSb = new StringBuilder(32);\n                for (int i = 0; i < digestBytes.length; i++) {\n                    int intValue = digestBytes[i] & 0xFF;\n                    if (intValue < 0x10) digesterSb.append('0');\n                    digesterSb.append(Integer.toHexString(intValue));\n                }\n                id = digesterSb.toString();\n            } catch (NoSuchAlgorithmException e) {\n            }\n        }\n        return id;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11594590",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic <T extends FetionResponse> T executeAction(FetionAction<T> fetionAction) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public <T extends FetionResponse> T executeAction(FetionAction<T> fetionAction) throws IOException {\n        URL url = new URL(fetionAction.getProtocol().name().toLowerCase() + \"://\" + fetionUrl + fetionAction.getRequestData());\n        URLConnection connection = url.openConnection();\n        InputStream in = connection.getInputStream();\n        byte[] buffer = new byte[10240];\n        ByteArrayOutputStream bout = new ByteArrayOutputStream();\n        int read = 0;\n        while ((read = in.read(buffer)) > 0) {\n            bout.write(buffer, 0, read);\n        }\n        return fetionAction.processResponse(parseRawResponse(bout.toByteArray()));\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11603577",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void run() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void analyseCorpus(final IStatusDisplayer fStatus) {\n        final String sDistrosFile = \"Distros.tmp\";\n        final String sSymbolsFile = \"Symbols.tmp\";\n        Chunker = new EntropyChunker();\n        int Levels = 2;\n        sgOverallGraph = new SymbolicGraph(1, Levels);\n        siIndex = new SemanticIndex(sgOverallGraph);\n        try {\n            siIndex.MeaningExtractor = new LocalWordNetMeaningExtractor();\n        } catch (IOException ioe) {\n            siIndex.MeaningExtractor = null;\n        }\n        try {\n            DocumentSet dsSet = new DocumentSet(FilePathEdt.getText(), 1.0);\n            dsSet.createSets(true, (double) 100 / 100);\n            int iCurCnt, iTotal;\n            String sFile = \"\";\n            Iterator iIter = dsSet.getTrainingSet().iterator();\n            iTotal = dsSet.getTrainingSet().size();\n            if (iTotal == 0) {\n                appendToLog(\"No input documents.\\n\");\n                appendToLog(\"======DONE=====\\n\");\n                return;\n            }\n            appendToLog(\"Training chunker...\");\n            Chunker.train(dsSet.toFilenameSet(DocumentSet.FROM_WHOLE_SET));\n            appendToLog(\"Setting delimiters...\");\n            setDelimiters(Chunker.getDelimiters());\n            iCurCnt = 0;\n            cdDoc = new DistributionDocument[Levels];\n            for (int iCnt = 0; iCnt < Levels; iCnt++) cdDoc[iCnt] = new DistributionDocument(1, MinLevel + iCnt);\n            fStatus.setVisible(true);\n            ThreadList t = new ThreadList(Runtime.getRuntime().availableProcessors() + 1);\n            appendToLog(\"(Pass 1/3) Loading files...\" + sFile);\n            TreeSet tsOverallSymbols = new TreeSet();\n            while (iIter.hasNext()) {\n                sFile = ((CategorizedFileEntry) iIter.next()).getFileName();\n                fStatus.setStatus(\"(Pass 1/3) Loading file...\" + sFile, (double) iCurCnt / iTotal);\n                final DistributionDocument[] cdDocArg = cdDoc;\n                final String sFileArg = sFile;\n                for (int iCnt = 0; iCnt < cdDoc.length; iCnt++) {\n                    final int iCntArg = iCnt;\n                    while (!t.addThreadFor(new Runnable() {\n\n                        public void run() {\n                            if (!RightToLeftText) cdDocArg[iCntArg].loadDataStringFromFile(sFileArg, false); else {\n                                cdDocArg[iCntArg].setDataString(utils.reverseString(utils.loadFileToString(sFileArg)), iCntArg, false);\n                            }\n                        }\n                    })) Thread.yield();\n                }\n                try {\n                    t.waitUntilCompletion();\n                } catch (InterruptedException ex) {\n                    ex.printStackTrace(System.err);\n                    appendToLog(\"Interrupted...\");\n                    sgOverallGraph.removeNotificationListener();\n                    return;\n                }\n                sgOverallGraph.setDataString(((new StringBuffer().append((char) StreamTokenizer.TT_EOF))).toString());\n                sgOverallGraph.loadFromFile(sFile);\n                fStatus.setStatus(\"Loaded file...\" + sFile, (double) ++iCurCnt / iTotal);\n                Thread.yield();\n            }\n            Set sSymbols = null;\n            File fPreviousSymbols = new File(sSymbolsFile);\n            boolean bSymbolsLoadedOK = false;\n            if (fPreviousSymbols.exists()) {\n                System.err.println(\"ATTENTION: Using previous symbols...\");\n                try {\n                    FileInputStream fis = new FileInputStream(fPreviousSymbols);\n                    ObjectInputStream ois = new ObjectInputStream(fis);\n                    sSymbols = (Set) ois.readObject();\n                    ois.close();\n                    bSymbolsLoadedOK = true;\n                } catch (FileNotFoundException ex) {\n                    ex.printStackTrace(System.err);\n                } catch (IOException ex) {\n                    ex.printStackTrace(System.err);\n                } catch (ClassNotFoundException ex) {\n                    ex.printStackTrace(System.err);\n                }\n            }\n            if (!bSymbolsLoadedOK) sSymbols = getSymbolsByProbabilities(sgOverallGraph.getDataString(), fStatus);\n            int iMinSymbolSize = Integer.MAX_VALUE;\n            int iMaxSymbolSize = Integer.MIN_VALUE;\n            Iterator iSymbol = sSymbols.iterator();\n            while (iSymbol.hasNext()) {\n                String sCurSymbol = (String) iSymbol.next();\n                if (iMaxSymbolSize < sCurSymbol.length()) iMaxSymbolSize = sCurSymbol.length();\n                if (iMinSymbolSize > sCurSymbol.length()) iMinSymbolSize = sCurSymbol.length();\n            }\n            try {\n                FileOutputStream fos = new FileOutputStream(sSymbolsFile);\n                ObjectOutputStream oos = new ObjectOutputStream(fos);\n                oos.writeObject(sSymbols);\n                oos.close();\n            } catch (FileNotFoundException ex) {\n                ex.printStackTrace(System.err);\n            } catch (IOException ex) {\n                ex.printStackTrace(System.err);\n            }\n            appendToLog(\"(Pass 2/3) Determining symbol distros per n-gram size...\");\n            iIter = dsSet.getTrainingSet().iterator();\n            iTotal = dsSet.getTrainingSet().size();\n            if (iTotal == 0) {\n                appendToLog(\"No input documents.\\n\");\n                appendToLog(\"======DONE=====\\n\");\n                return;\n            }\n            iCurCnt = 0;\n            Distribution dSymbolsPerSize = new Distribution();\n            Distribution dNonSymbolsPerSize = new Distribution();\n            Distribution dSymbolSizes = new Distribution();\n            File fPreviousRun = new File(sDistrosFile);\n            boolean bDistrosLoadedOK = false;\n            if (fPreviousRun.exists()) {\n                System.err.println(\"ATTENTION: Using previous distros...\");\n                try {\n                    FileInputStream fis = new FileInputStream(fPreviousRun);\n                    ObjectInputStream ois = new ObjectInputStream(fis);\n                    dSymbolsPerSize = (Distribution) ois.readObject();\n                    dNonSymbolsPerSize = (Distribution) ois.readObject();\n                    dSymbolSizes = (Distribution) ois.readObject();\n                    ois.close();\n                    bDistrosLoadedOK = true;\n                } catch (FileNotFoundException ex) {\n                    ex.printStackTrace(System.err);\n                } catch (IOException ex) {\n                    ex.printStackTrace(System.err);\n                    dSymbolsPerSize = new Distribution();\n                    dNonSymbolsPerSize = new Distribution();\n                    dSymbolSizes = new Distribution();\n                } catch (ClassNotFoundException ex) {\n                    ex.printStackTrace(System.err);\n                    dSymbolsPerSize = new Distribution();\n                    dNonSymbolsPerSize = new Distribution();\n                    dSymbolSizes = new Distribution();\n                }\n            }\n            if (!bDistrosLoadedOK) while (iIter.hasNext()) {\n                fStatus.setStatus(\"(Pass 2/3) Parsing file...\" + sFile, (double) iCurCnt++ / iTotal);\n                sFile = ((CategorizedFileEntry) iIter.next()).getFileName();\n                String sDataString = \"\";\n                try {\n                    ByteArrayOutputStream bsOut = new ByteArrayOutputStream();\n                    FileInputStream fiIn = new FileInputStream(sFile);\n                    int iData = 0;\n                    while ((iData = fiIn.read()) > -1) bsOut.write(iData);\n                    sDataString = bsOut.toString();\n                } catch (IOException ioe) {\n                    ioe.printStackTrace(System.err);\n                }\n                final Distribution dSymbolsPerSizeArg = dSymbolsPerSize;\n                final Distribution dNonSymbolsPerSizeArg = dNonSymbolsPerSize;\n                final Distribution dSymbolSizesArg = dSymbolSizes;\n                final String sDataStringArg = sDataString;\n                final Set sSymbolsArg = sSymbols;\n                for (int iSymbolSize = iMinSymbolSize; iSymbolSize <= iMaxSymbolSize; iSymbolSize++) {\n                    final int iSymbolSizeArg = iSymbolSize;\n                    while (!t.addThreadFor(new Runnable() {\n\n                        public void run() {\n                            NGramDocument ndCur = new NGramDocument(iSymbolSizeArg, iSymbolSizeArg, 1, iSymbolSizeArg, iSymbolSizeArg);\n                            ndCur.setDataString(sDataStringArg);\n                            int iSymbolCnt = 0;\n                            int iNonSymbolCnt = 0;\n                            Iterator iExtracted = ndCur.getDocumentGraph().getGraphLevel(0).getVertexSet().iterator();\n                            while (iExtracted.hasNext()) {\n                                String sCur = ((Vertex) iExtracted.next()).toString();\n                                if (sSymbolsArg.contains(sCur)) {\n                                    iSymbolCnt++;\n                                    synchronized (dSymbolSizesArg) {\n                                        dSymbolSizesArg.setValue(sCur.length(), dSymbolSizesArg.getValue(sCur.length()) + 1.0);\n                                    }\n                                } else iNonSymbolCnt++;\n                            }\n                            synchronized (dSymbolsPerSizeArg) {\n                                dSymbolsPerSizeArg.setValue(iSymbolSizeArg, dSymbolsPerSizeArg.getValue(iSymbolSizeArg) + iSymbolCnt);\n                            }\n                            synchronized (dNonSymbolsPerSizeArg) {\n                                dNonSymbolsPerSizeArg.setValue(iSymbolSizeArg, dNonSymbolsPerSizeArg.getValue(iSymbolSizeArg) + iNonSymbolCnt);\n                            }\n                        }\n                    })) Thread.yield();\n                }\n            }\n            if (!bDistrosLoadedOK) try {\n                t.waitUntilCompletion();\n                try {\n                    FileOutputStream fos = new FileOutputStream(sDistrosFile);\n                    ObjectOutputStream oos = new ObjectOutputStream(fos);\n                    oos.writeObject(dSymbolsPerSize);\n                    oos.writeObject(dNonSymbolsPerSize);\n                    oos.writeObject(dSymbolSizes);\n                    oos.close();\n                } catch (FileNotFoundException ex) {\n                    ex.printStackTrace(System.err);\n                } catch (IOException ex) {\n                    ex.printStackTrace(System.err);\n                }\n            } catch (InterruptedException ex) {\n                appendToLog(\"Interrupted...\");\n                sgOverallGraph.removeNotificationListener();\n                return;\n            }\n            appendToLog(\"\\n(Pass 3/3) Determining optimal n-gram range...\\n\");\n            NGramSizeEstimator nseEstimator = new NGramSizeEstimator(dSymbolsPerSize, dNonSymbolsPerSize);\n            IntegerPair p = nseEstimator.getOptimalRange();\n            appendToLog(\"\\nProposed n-gram sizes:\" + p.first() + \",\" + p.second());\n            fStatus.setStatus(\"Determining optimal distance...\", 0.0);\n            DistanceEstimator de = new DistanceEstimator(dSymbolsPerSize, dNonSymbolsPerSize, nseEstimator);\n            int iBestDist = de.getOptimalDistance(1, nseEstimator.getMaxRank() * 2, p.first(), p.second());\n            fStatus.setStatus(\"Determining optimal distance...\", 1.0);\n            appendToLog(\"\\nOptimal distance:\" + iBestDist);\n            appendToLog(\"======DONE=====\\n\");\n        } finally {\n            sgOverallGraph.removeNotificationListener();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_00116038",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static void readAndRewrite(File inFile, File outFile) throws IOException {\n        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n        Dataset ds = DcmObjectFactory.getInstance().newDataset();\n        dcmParser.setDcmHandler(ds.getDcmHandler());\n        dcmParser.parseDcmFile(null, Tags.PixelData);\n        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        System.out.println(\"reading \" + inFile + \"...\");\n        pdReader.readPixelData(false);\n        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n        ds.writeDataset(out, dcmEncParam);\n        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n        System.out.println(\"writing \" + outFile + \"...\");\n        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        pdWriter.writePixelData();\n        out.flush();\n        out.close();\n        System.out.println(\"done!\");\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11604443",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void getRandomGUID(boolean secure) {\n        MessageDigest md5 = null;\n        StringBuffer sbValueBeforeMD5 = new StringBuffer(128);\n        try {\n            md5 = MessageDigest.getInstance(\"MD5\");\n        } catch (NoSuchAlgorithmException e) {\n            logger.error(\"Error: \" + e);\n        }\n        try {\n            long time = System.currentTimeMillis();\n            long rand = 0;\n            if (secure) {\n                rand = mySecureRand.nextLong();\n            } else {\n                rand = myRand.nextLong();\n            }\n            sbValueBeforeMD5.append(s_id);\n            sbValueBeforeMD5.append(\":\");\n            sbValueBeforeMD5.append(Long.toString(time));\n            sbValueBeforeMD5.append(\":\");\n            sbValueBeforeMD5.append(Long.toString(rand));\n            valueBeforeMD5 = sbValueBeforeMD5.toString();\n            md5.update(valueBeforeMD5.getBytes());\n            byte[] array = md5.digest();\n            StringBuffer sb = new StringBuffer(32);\n            for (int j = 0; j < array.length; ++j) {\n                int b = array[j] & TWO_BYTES;\n                if (b < PAD_BELOW) sb.append('0');\n                sb.append(Integer.toHexString(b));\n            }\n            valueAfterMD5 = sb.toString();\n        } catch (Exception e) {\n            logger.error(\"Error:\" + e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11608926",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "void ProcessRequests(DataInputStream in, PrintStream out) {\n        String sQuery;\n        while (true) {\n            try {\n                sQuery = in.readLine();\n                if (sQuery == null) return;\n                if (sQuery.startsWith(\"select\")) {\n                    ProcessQuery(sQuery, out);\n                } else if (sQuery.startsWith(\"insert\")) {\n                    Statement stmt = con.createStatement();\n                    stmt.executeUpdate(sQuery);\n                } else if (sQuery.startsWith(\"update\")) {\n                    Statement stmt = con.createStatement();\n                    stmt.executeUpdate(sQuery);\n                } else if (sQuery.startsWith(\"commit\")) {\n                    con.commit();\n                } else if (sQuery.startsWith(\"autocommit true\")) {\n                    con.setAutoCommit(true);\n                } else if (sQuery.startsWith(\"autocommit false\")) {\n                    con.setAutoCommit(false);\n                } else if (sQuery.startsWith(\"delete\")) {\n                    Statement stmt = con.createStatement();\n                    stmt.executeUpdate(sQuery);\n                } else if (sQuery.startsWith(\"rollback\")) {\n                    con.rollback();\n                } else {\n                    out.println(\"What ?\");\n                }\n                out.println(\">\");\n            } catch (SQLException ex) {\n                out.println(\"\\n*** SQLException caught ***\\n\");\n                while (ex != null) {\n                    out.println(\"SQLState: \" + ex.getSQLState());\n                    out.println(\"Message:  \" + ex.getMessage());\n                    out.println(\"Vendor:   \" + ex.getErrorCode());\n                    ex = ex.getNextException();\n                    out.println(\"\");\n                }\n            } catch (java.lang.Exception ex) {\n                ex.printStackTrace();\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01160946",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic KeySelectorResult select(KeyInfo keyInfo, Purpose purpose, AlgorithmMethod method, XMLCryptoContext context) throws KeySelectorException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n    public KeySelectorResult select(KeyInfo keyInfo, Purpose purpose, AlgorithmMethod method, XMLCryptoContext context) throws KeySelectorException {\n        try {\n            return super.select(keyInfo, purpose, method, context);\n        } catch (KeySelectorException e) {\n            LOG.debug(\"no key found via ds:KeyInfo key selector\");\n        }\n        LOG.debug(\"signature resource name: \" + this.signatureResourceName);\n        String signatureSegment = this.signatureResourceName.substring(0, this.signatureResourceName.lastIndexOf(\"/\"));\n        LOG.debug(\"signature segment: \" + signatureSegment);\n        String signatureBase = this.signatureResourceName.substring(this.signatureResourceName.lastIndexOf(\"/\") + 1);\n        LOG.debug(\"signature base: \" + signatureBase);\n        String signatureRelationshipResourceName = signatureSegment + \"/_rels/\" + signatureBase + \".rels\";\n        LOG.debug(\"signature relationship resource name: \" + signatureRelationshipResourceName);\n        ZipArchiveInputStream zipInputStream;\n        try {\n            zipInputStream = new ZipArchiveInputStream(this.opcUrl.openStream(), \"UTF8\", true, true);\n        } catch (IOException e) {\n            throw new KeySelectorException(e);\n        }\n        ZipArchiveEntry zipEntry;\n        try {\n            while (null != (zipEntry = zipInputStream.getNextZipEntry())) {\n                if (signatureRelationshipResourceName.equals(zipEntry.getName())) {\n                    break;\n                }\n            }\n        } catch (IOException e) {\n            throw new KeySelectorException(e);\n        }\n        if (null == zipEntry) {\n            LOG.warn(\"relationship part not present: \" + signatureRelationshipResourceName);\n            throw new KeySelectorException(\"no key found\");\n        }\n        LOG.debug(\"signature relationship part found\");\n        JAXBElement<CTRelationships> signatureRelationshipsElement;\n        try {\n            signatureRelationshipsElement = (JAXBElement<CTRelationships>) this.relationshipsUnmarshaller.unmarshal(zipInputStream);\n        } catch (JAXBException e) {\n            throw new KeySelectorException(e);\n        }\n        CTRelationships signatureRelationships = signatureRelationshipsElement.getValue();\n        List<CTRelationship> signatureRelationshipList = signatureRelationships.getRelationship();\n        List<String> certificateResourceNames = new LinkedList<String>();\n        for (CTRelationship signatureRelationship : signatureRelationshipList) {\n            if (DIGITAL_SIGNATURE_CERTIFICATE_REL_TYPE.equals(signatureRelationship.getType())) {\n                String certificateResourceName = signatureRelationship.getTarget().substring(1);\n                certificateResourceNames.add(certificateResourceName);\n            }\n        }\n        X509Certificate endEntityCertificate = null;\n        for (String certificateResourceName : certificateResourceNames) {\n            try {\n                zipInputStream = new ZipArchiveInputStream(this.opcUrl.openStream(), \"UTF8\", true, true);\n            } catch (IOException e) {\n                throw new KeySelectorException(e);\n            }\n            try {\n                while (null != (zipEntry = zipInputStream.getNextZipEntry())) {\n                    if (certificateResourceName.equals(zipEntry.getName())) {\n                        break;\n                    }\n                }\n            } catch (IOException e) {\n                throw new KeySelectorException(e);\n            }\n            if (null == zipEntry) {\n                LOG.warn(\"certificate part not present: \" + certificateResourceName);\n                continue;\n            }\n            X509Certificate certificate;\n            try {\n                certificate = (X509Certificate) this.certificateFactory.generateCertificate(zipInputStream);\n            } catch (CertificateException e) {\n                throw new KeySelectorException(e);\n            }\n            LOG.debug(\"certificate subject: \" + certificate.getSubjectX500Principal());\n            if (-1 != certificate.getBasicConstraints()) {\n                LOG.debug(\"skipping CA certificate\");\n                continue;\n            }\n            if (null != endEntityCertificate) {\n                throw new KeySelectorException(\"two possible end entity certificates\");\n            }\n            endEntityCertificate = certificate;\n        }\n        if (null == endEntityCertificate) {\n            throw new KeySelectorException(\"no key found\");\n        }\n        this.certificate = endEntityCertificate;\n        return this;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11611503",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void readDefault() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void readDefault() {\n        ClassLoader l = Skeleton.class.getClassLoader();\n        URL url;\n        if (l != null) {\n            url = l.getResource(DEFAULT_LOC);\n        } else {\n            url = ClassLoader.getSystemResource(DEFAULT_LOC);\n        }\n        if (url == null) {\n            Out.error(ErrorMessages.SKEL_IO_ERROR_DEFAULT);\n            throw new GeneratorException();\n        }\n        try {\n            InputStreamReader reader = new InputStreamReader(url.openStream());\n            readSkel(new BufferedReader(reader));\n        } catch (IOException e) {\n            Out.error(ErrorMessages.SKEL_IO_ERROR_DEFAULT);\n            throw new GeneratorException();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11616716",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static InputStream getCMSResultAsStream(String rqlQuery) throws RQLException {\n        OutputStreamWriter osr = null;\n        try {\n            URL url = new URL(\"http\", HOST, FILE);\n            URLConnection conn = url.openConnection();\n            conn.setDoOutput(true);\n            osr = new OutputStreamWriter(conn.getOutputStream());\n            osr.write(rqlQuery);\n            osr.flush();\n            return conn.getInputStream();\n        } catch (IOException ioe) {\n            throw new RQLException(\"IO Exception reading result from server\", ioe);\n        } finally {\n            if (osr != null) {\n                try {\n                    osr.close();\n                } catch (IOException ioe) {\n                }\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11617413",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private boolean postCorrecao() {\n        boolean valido = false;\n        Integer newCodCorrecao = null;\n        String sqlmaxac = \"SELECT MAX(SEQAC) FROM PPOPACAOCORRET WHERE CODEMP=? AND CODFILIAL=? AND CODOP=? AND SEQOP=?\";\n        String sqlmaxcq = \"SELECT MAX(SEQOPCQ) + 1 FROM PPOPCQ WHERE CODEMP=? AND CODFILIAL=? AND CODOP=? AND SEQOP=?\";\n        try {\n            for (Entry<Integer, JCheckBoxPad> ek : analises.entrySet()) {\n                JCheckBoxPad cb = ek.getValue();\n                if (\"S\".equals(cb.getVlrString())) {\n                    valido = true;\n                    keysItens[2] = ek.getKey();\n                    break;\n                }\n            }\n            if (!valido) {\n                Funcoes.mensagemInforma(this, \"Selecione as analises para aplicar a corre\ufffd\ufffdo!\");\n                return false;\n            }\n            if (txaCausa.getVlrString().trim().length() == 0) {\n                Funcoes.mensagemInforma(this, \"Informe as causas!\");\n                return false;\n            }\n            if (txaAcao.getVlrString().trim().length() == 0) {\n                Funcoes.mensagemInforma(this, \"Detalhe a a\ufffd\ufffdo corretiva!\");\n                return false;\n            }\n            PreparedStatement ps = con.prepareStatement(sqlmaxac);\n            ps.setInt(1, Aplicativo.iCodEmp);\n            ps.setInt(2, ListaCampos.getMasterFilial(\"PPOPACAOCORRET\"));\n            ps.setInt(3, txtCodOP.getVlrInteger());\n            ps.setInt(4, txtSeqOP.getVlrInteger());\n            ResultSet rs = ps.executeQuery();\n            if (rs.next()) {\n                newCodCorrecao = rs.getInt(1) + 1;\n                keysItens[3] = newCodCorrecao;\n            }\n            rs.close();\n            ps.close();\n            if (newCodCorrecao != null) {\n                StringBuilder sql = new StringBuilder();\n                sql.append(\"INSERT INTO PPOPACAOCORRET \");\n                sql.append(\"( CODEMP, CODFILIAL, CODOP, SEQOP, SEQAC, TPCAUSA, OBSCAUSA, TPACAO, OBSACAO ) \");\n                sql.append(\"VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ? )\");\n                ps = con.prepareStatement(sql.toString());\n                ps.setInt(1, Aplicativo.iCodEmp);\n                ps.setInt(2, ListaCampos.getMasterFilial(\"PPOPACAOCORRET\"));\n                ps.setInt(3, txtCodOP.getVlrInteger());\n                ps.setInt(4, txtSeqOP.getVlrInteger());\n                ps.setInt(5, newCodCorrecao);\n                ps.setString(6, m.getCode());\n                ps.setString(7, txaCausa.getVlrString());\n                ps.setString(8, rgSolucao.getVlrString());\n                ps.setString(9, txaAcao.getVlrString());\n                ps.execute();\n                ps.close();\n                String strAnalises = \"\";\n                for (Entry<Integer, JCheckBoxPad> ek : analises.entrySet()) {\n                    JCheckBoxPad cb = ek.getValue();\n                    if (\"S\".equals(cb.getVlrString())) {\n                        if (strAnalises.trim().length() > 0) {\n                            strAnalises += \",\";\n                        }\n                        strAnalises += String.valueOf(ek.getKey());\n                    }\n                }\n                sql = new StringBuilder();\n                sql.append(\"UPDATE PPOPCQ SET SEQAC=? \");\n                sql.append(\"WHERE CODEMP=? AND CODFILIAL=? AND CODOP=? AND SEQOP=? AND SEQOPCQ IN ( \" + strAnalises + \" )\");\n                ps = con.prepareStatement(sql.toString());\n                ps.setInt(1, newCodCorrecao);\n                ps.setInt(2, Aplicativo.iCodEmp);\n                ps.setInt(3, ListaCampos.getMasterFilial(\"PPOPACAOCORRET\"));\n                ps.setInt(4, txtCodOP.getVlrInteger());\n                ps.setInt(5, txtSeqOP.getVlrInteger());\n                ps.executeUpdate();\n                ps.close();\n                sql.delete(0, sql.length());\n                sql.append(\"INSERT INTO PPOPCQ (CODEMP,CODFILIAL,CODOP,SEQOP,SEQOPCQ,\");\n                sql.append(\"CODEMPEA,CODFILIALEA,CODESTANALISE) \");\n                sql.append(\"SELECT CODEMP,CODFILIAL,CODOP,SEQOP,(\");\n                sql.append(sqlmaxcq);\n                sql.append(\"),CODEMPEA,CODFILIALEA,CODESTANALISE \");\n                sql.append(\"FROM PPOPCQ \");\n                sql.append(\"WHERE CODEMP=? AND CODFILIAL=? AND CODOP=? AND \");\n                sql.append(\"SEQOP=? AND SEQOPCQ IN ( \" + strAnalises + \" )\");\n                System.out.println(sql.toString());\n                ps = con.prepareStatement(sql.toString());\n                ps = con.prepareStatement(sql.toString());\n                ps.setInt(1, Aplicativo.iCodEmp);\n                ps.setInt(2, ListaCampos.getMasterFilial(\"PPOPCQ\"));\n                ps.setInt(3, txtCodOP.getVlrInteger());\n                ps.setInt(4, txtSeqOP.getVlrInteger());\n                ps.setInt(5, Aplicativo.iCodEmp);\n                ps.setInt(6, ListaCampos.getMasterFilial(\"PPOPCQ\"));\n                ps.setInt(7, txtCodOP.getVlrInteger());\n                ps.setInt(8, txtSeqOP.getVlrInteger());\n                ps.executeUpdate();\n                ps.close();\n                montaAnalises();\n                Funcoes.mensagemInforma(this, \"A\ufffd\ufffdo corretiva aplicada com sucesso!\");\n            }\n            con.commit();\n        } catch (Exception err) {\n            try {\n                con.rollback();\n            } catch (SQLException e) {\n                System.out.println(\"Erro ao realizar rollback!\\n\" + err.getMessage());\n            }\n            err.printStackTrace();\n            Funcoes.mensagemErro(this, \"Erro ao atualizar analises!\\n\" + err.getMessage(), true, con, err);\n            valido = false;\n        }\n        return valido;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11622990",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic ContourGenerator(URL url, float modelMean, float modelStddev) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public ContourGenerator(URL url, float modelMean, float modelStddev) throws IOException {\n        this.modelMean = modelMean;\n        this.modelStddev = modelStddev;\n        List termsList = new ArrayList();\n        String line;\n        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\n        line = reader.readLine();\n        while (line != null) {\n            if (!line.startsWith(\"***\")) {\n                parseAndAdd(termsList, line);\n            }\n            line = reader.readLine();\n        }\n        terms = (F0ModelTerm[]) termsList.toArray(terms);\n        reader.close();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01162514",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private LSInput resolveResource(String aPublicId, String aSystemId, String aBaseURI, boolean baseUsed) {\n        LSInput lsInput = new DefaultLSInput();\n        lsInput.setPublicId(aPublicId);\n        lsInput.setSystemId(aSystemId);\n        String base = null;\n        try {\n            int baseEndPos = -1;\n            if (aBaseURI != null) {\n                baseEndPos = aBaseURI.lastIndexOf(\"/\");\n            }\n            if (baseEndPos <= 0) {\n                if (baseUsed) {\n                    return null;\n                } else {\n                    return resolveResource(aPublicId, aSystemId, schemaBasePath + \"/\" + aSystemId, true);\n                }\n            }\n            base = aBaseURI.substring(0, baseEndPos);\n            URL url = new URL(base + \"/\" + aSystemId);\n            lsInput.setByteStream(url.openConnection().getInputStream());\n            return lsInput;\n        } catch (IOException e) {\n            return resolveResource(aPublicId, aSystemId, base, baseUsed);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11627705",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copyFile(File src, File dst) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copyFile(File src, File dst) throws IOException {\n        InputStream in = new FileInputStream(src);\n        OutputStream out = new FileOutputStream(dst);\n        byte[] buf = new byte[1024];\n        int len;\n        while ((len = in.read(buf)) > 0) out.write(buf, 0, len);\n        in.close();\n        out.close();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01162904",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic byte[] computeMD5(String plainText) throws VHException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public byte[] computeMD5(String plainText) throws VHException {\n        MessageDigest md = null;\n        try {\n            md = MessageDigest.getInstance(\"MD5\");\n        } catch (NoSuchAlgorithmException ex) {\n            throw new VHException(\"The MD5 hash algorithm is not available.\", ex);\n        }\n        try {\n            md.update(plainText.getBytes(\"UTF-8\"));\n        } catch (UnsupportedEncodingException ex) {\n            throw new VHException(\"The UTF-8 encoding is not supported.\", ex);\n        }\n        return md.digest();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11634448",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic int run() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n    public int run() {\n        Enumeration<?> e;\n        try {\n            e = About.class.getClassLoader().getResources(\"META-INF/MANIFEST.MF\");\n            while (e.hasMoreElements()) {\n                final URL url = (URL) e.nextElement();\n                if (url.toString().indexOf(\"renaissance\") != -1) {\n                    final InputStream is = url.openStream();\n                    Properties p = new Properties();\n                    p.load(is);\n                    for (Entry<?, ?> entry : p.entrySet()) {\n                        System.err.println(entry);\n                    }\n                }\n            }\n        } catch (IOException e1) {\n            logger.fatal(\"Caught an exception \" + e1);\n            return 1;\n        }\n        System.err.println(\"Classpath is \" + System.getProperty(\"java.class.path\"));\n        return 0;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11645260",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        String target = null;\n        boolean allowedToAccess = false;\n        try {\n            URL requestUrl = new URL(\"http:/\" + request.getPathInfo());\n            for (Enumeration en = allowedUrls.elements(); en.hasMoreElements(); ) {\n                URL nextUrl = (URL) en.nextElement();\n                if ((nextUrl).getHost().equalsIgnoreCase(requestUrl.getHost())) {\n                    allowedToAccess = true;\n                }\n            }\n        } catch (MalformedURLException ex) {\n            System.err.println(\"Error in url: \" + \"http:/\" + request.getPathInfo());\n            return;\n        }\n        if (!allowedToAccess) {\n            response.setStatus(407);\n            return;\n        }\n        if (request.getPathInfo() != null && !request.getPathInfo().equals(\"\")) {\n            target = \"http:/\" + request.getPathInfo() + \"?\" + request.getQueryString();\n        } else {\n            response.setStatus(404);\n            return;\n        }\n        InputStream is = null;\n        ServletOutputStream out = null;\n        try {\n            URL url = new URL(target);\n            URLConnection uc = url.openConnection();\n            response.setContentType(uc.getContentType());\n            is = uc.getInputStream();\n            out = response.getOutputStream();\n            byte[] buf = new byte[4096];\n            int bytesRead;\n            while ((bytesRead = is.read(buf)) != -1) {\n                out.write(buf, 0, bytesRead);\n            }\n        } catch (MalformedURLException e) {\n            response.setStatus(404);\n        } catch (IOException e) {\n            response.setStatus(404);\n        } finally {\n            if (is != null) {\n                is.close();\n            }\n            if (out != null) {\n                out.close();\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11645345",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private List<String> createProjectInfoFile() throws SocketException, IOException {\n        FTPClient client = new FTPClient();\n        Set<String> projects = new HashSet<String>();\n        client.connect(\"ftp.drupal.org\");\n        System.out.println(\"Connected to ftp.drupal.org\");\n        System.out.println(client.getReplyString());\n        boolean loggedIn = client.login(\"anonymous\", \"info@regilo.org\");\n        if (loggedIn) {\n            FTPFile[] files = client.listFiles(\"pub/drupal/files/projects\");\n            for (FTPFile file : files) {\n                String name = file.getName();\n                Pattern p = Pattern.compile(\"([a-zAZ_]*)-(\\\\d.x)-(.*)\");\n                Matcher m = p.matcher(name);\n                if (m.matches()) {\n                    String projectName = m.group(1);\n                    String version = m.group(2);\n                    if (version.equals(\"6.x\")) {\n                        projects.add(projectName);\n                    }\n                }\n            }\n        }\n        List<String> projectList = new ArrayList<String>();\n        for (String project : projects) {\n            projectList.add(project);\n        }\n        Collections.sort(projectList);\n        return projectList;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11646823",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic String getContentAsString(String url) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public String getContentAsString(String url) {\n        StringBuffer sb = new StringBuffer(\"\");\n        try {\n            URL urlmy = new URL(url);\n            HttpURLConnection con = (HttpURLConnection) urlmy.openConnection();\n            HttpURLConnection.setFollowRedirects(true);\n            con.setInstanceFollowRedirects(false);\n            con.connect();\n            BufferedReader br = new BufferedReader(new InputStreamReader(con.getInputStream(), \"UTF-8\"));\n            String s = \"\";\n            while ((s = br.readLine()) != null) {\n                sb.append(s + \"\\r\\n\");\n            }\n            con.disconnect();\n        } catch (Exception ex) {\n            this.logException(ex);\n        }\n        return sb.toString();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11647643",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void actionPerformed(ActionEvent e) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void actionPerformed(ActionEvent e) {\n            try {\n                URL url = new URL(\"http://mailsomething.sf.net/helppages.xml\");\n                try {\n                    File file = File.createTempFile(\"temp\", \"xml\");\n                    InputStream in = new BufferedInputStream(url.openStream());\n                    OutputStream out = new FileOutputStream(file);\n                    byte[] buf = new byte[1024];\n                    int n;\n                    while ((n = in.read(buf)) > 0) out.write(buf, 0, n);\n                    out.flush();\n                    out.close();\n                    module.merge(file);\n                } catch (IOException f) {\n                }\n            } catch (MalformedURLException f) {\n            }\n        }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11650020",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String encrypt(String message) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String encrypt(String message) {\n        try {\n            MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n            digest.update(message.getBytes());\n            BASE64Encoder encoder = new BASE64Encoder();\n            return encoder.encode(digest.digest());\n        } catch (NoSuchAlgorithmException ex) {\n            ex.printStackTrace();\n            return null;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11650951",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private Properties loadProperties(final String propertiesName) throws IOException {\n        Properties bundle = null;\n        final ClassLoader loader = Thread.currentThread().getContextClassLoader();\n        final URL url = loader.getResource(propertiesName);\n        if (url == null) {\n            throw new IOException(\"Properties file \" + propertiesName + \" not found\");\n        }\n        final InputStream is = url.openStream();\n        if (is != null) {\n            bundle = new Properties();\n            bundle.load(is);\n        } else {\n            throw new IOException(\"Properties file \" + propertiesName + \" not avilable\");\n        }\n        return bundle;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11651293",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void render(final HttpServletRequest request, final HttpServletResponse response, final byte[] bytes, final Throwable t, final String contentType, final String encoding) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void render(final HttpServletRequest request, final HttpServletResponse response, final byte[] bytes, final Throwable t, final String contentType, final String encoding) throws Exception {\n        if (contentType != null) {\n            response.setContentType(contentType);\n        }\n        if (encoding != null) {\n            response.setCharacterEncoding(encoding);\n        }\n        response.setContentLength(bytes.length);\n        IOUtils.copy(new ByteArrayInputStream(bytes), response.getOutputStream());\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11651364",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private File extractSiteFile() {\n        final URL url = TestCrueCONF.class.getResource(CONFIG_SITE);\n        final File confFile = new File(createTempDir(), \"FudaaCrue_Site.xml\");\n        try {\n            CtuluLibFile.copyStream(url.openStream(), new FileOutputStream(confFile), true, true);\n        } catch (Exception e) {\n            Logger.getLogger(TestCrueCONF.class.getName()).log(Level.SEVERE, \"erreur while extracting FudaaCrue_Site.xml\", e);\n            fail(e.getMessage());\n        }\n        return confFile;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11655351",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void testMark() throws IllegalArgumentException, IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Test\n    public void testMark() throws IllegalArgumentException, IOException {\n        Assert.assertNotNull(this.m_detector);\n        File f = new File(\"testdocuments/voiddocument/Voiderror.htm\");\n        Assert.assertTrue(\"Test file \" + f.getAbsolutePath() + \" does not exist. \", f.exists());\n        URL url = f.toURL();\n        this.m_detector.detectCodepage(url.openStream(), 200);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11656036",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void createInstance(ExternProtoDeclare externProtoDeclare) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@SuppressWarnings(\"unchecked\")\n    public static void createInstance(ExternProtoDeclare externProtoDeclare) {\n        ExternProtoDeclareImport epdi = new ExternProtoDeclareImport();\n        HashMap<String, ProtoDeclareImport> protoMap = X3DImport.getTheImport().getCurrentParser().getProtoMap();\n        boolean loadedFromWeb = false;\n        File f = null;\n        URL url = null;\n        List<String> urls = externProtoDeclare.getUrl();\n        String tmpUrls = urls.toString();\n        urls = Util.splitStringToListOfStrings(tmpUrls);\n        String protoName = null;\n        int urlCount = urls.size();\n        for (int urlIndex = 0; urlIndex < urlCount; urlIndex++) {\n            try {\n                String path = urls.get(urlIndex);\n                if (path.startsWith(\"\\\"\") && path.endsWith(\"\\\"\")) path = path.substring(1, path.length() - 1);\n                int hashMarkPos = path.indexOf(\"#\");\n                int urlLength = path.length();\n                if (hashMarkPos == -1) path = path.substring(0, urlLength); else {\n                    protoName = path.substring(hashMarkPos + 1, urlLength);\n                    path = path.substring(0, hashMarkPos);\n                }\n                if (path.toLowerCase().startsWith(\"http://\")) {\n                    String filename = path.substring(path.lastIndexOf(\"/\") + 1, path.lastIndexOf(\".\"));\n                    String fileext = path.substring(path.lastIndexOf(\".\"), path.length());\n                    f = File.createTempFile(filename, fileext);\n                    url = new URL(path);\n                    InputStream is = url.openStream();\n                    FileOutputStream os = new FileOutputStream(f);\n                    byte[] buffer = new byte[0xFFFF];\n                    for (int len; (len = is.read(buffer)) != -1; ) os.write(buffer, 0, len);\n                    is.close();\n                    os.close();\n                    url = f.toURI().toURL();\n                    loadedFromWeb = true;\n                } else {\n                    if (path.startsWith(\"/\") || (path.charAt(1) == ':')) {\n                    } else {\n                        File x3dfile = X3DImport.getTheImport().getCurrentParser().getFile();\n                        path = Util.getRealPath(x3dfile) + path;\n                    }\n                    f = new File(path);\n                    url = f.toURI().toURL();\n                    Object testContent = url.getContent();\n                    if (testContent == null) continue;\n                    loadedFromWeb = false;\n                }\n                X3DDocument x3dDocument = null;\n                try {\n                    x3dDocument = X3DDocument.Factory.parse(f);\n                } catch (XmlException e) {\n                    e.printStackTrace();\n                    return;\n                } catch (IOException e) {\n                    e.printStackTrace();\n                    return;\n                }\n                Scene scene = x3dDocument.getX3D().getScene();\n                ProtoDeclare[] protos = scene.getProtoDeclareArray();\n                ProtoDeclare protoDeclare = null;\n                if (protoName == null) {\n                    protoDeclare = protos[0];\n                } else {\n                    for (ProtoDeclare proto : protos) {\n                        if (proto.getName().equals(protoName)) {\n                            protoDeclare = proto;\n                            break;\n                        }\n                    }\n                }\n                if (protoDeclare == null) continue;\n                ProtoBody protoBody = protoDeclare.getProtoBody();\n                epdi.protoBody = protoBody;\n                protoMap.put(externProtoDeclare.getName(), epdi);\n                break;\n            } catch (MalformedURLException e) {\n            } catch (IOException e) {\n            } finally {\n                if (loadedFromWeb && f != null) {\n                    f.delete();\n                }\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11656405",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String addWeibo(String weibo, File pic, String uid) throws Throwable {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String addWeibo(String weibo, File pic, String uid) throws Throwable {\n        List<NameValuePair> qparams = new ArrayList<NameValuePair>();\n        qparams.add(new BasicNameValuePair(\"_surl\", \"\"));\n        qparams.add(new BasicNameValuePair(\"_t\", \"0\"));\n        qparams.add(new BasicNameValuePair(\"location\", \"home\"));\n        qparams.add(new BasicNameValuePair(\"module\", \"stissue\"));\n        if (pic != null) {\n            String picId = upLoadImg(pic, uid);\n            qparams.add(new BasicNameValuePair(\"pic_id\", picId));\n        }\n        qparams.add(new BasicNameValuePair(\"rank\", \"weibo\"));\n        qparams.add(new BasicNameValuePair(\"text\", weibo));\n        HttpPost post = getHttpPost(\"http://weibo.com/aj/mblog/add?__rnd=1333611402611\", uid);\n        UrlEncodedFormEntity params = new UrlEncodedFormEntity(qparams, HTTP.UTF_8);\n        post.setEntity(params);\n        HttpResponse response = client.execute(post);\n        HttpEntity entity = response.getEntity();\n        String content = EntityUtils.toString(entity, HTTP.UTF_8);\n        post.abort();\n        return content;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11656406",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String upLoadImg(File pic, String uid) throws Throwable {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String upLoadImg(File pic, String uid) throws Throwable {\n        System.out.println(\"\u5f00\u59cb\u4e0a\u4f20=======================================================\");\n        HttpPost post = getHttpPost(getUploadUrl(uid), uid);\n        FileBody file = new FileBody(pic, \"image/jpg\");\n        MultipartEntity reqEntity = new MultipartEntity();\n        reqEntity.addPart(\"pic1\", file);\n        post.setEntity(reqEntity);\n        HttpResponse response = client.execute(post);\n        int status = response.getStatusLine().getStatusCode();\n        post.abort();\n        if (status == HttpStatus.SC_MOVED_TEMPORARILY || status == HttpStatus.SC_MOVED_PERMANENTLY) {\n            String newuri = response.getHeaders(\"location\")[0].getValue();\n            System.out.println(newuri);\n            return newuri.substring(newuri.indexOf(\"pid=\") + 4, newuri.indexOf(\"&token=\"));\n        }\n        return null;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11658686",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "protected void processRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        response.setContentType(\"application/zip\");\n        response.setHeader(\"Content-Disposition\", \"inline; filename=c:/server1.zip\");\n        try {\n            BufferedInputStream origin = null;\n            FileOutputStream dest = new FileOutputStream(\"server.zip\");\n            ZipOutputStream zipOut = new ZipOutputStream(new BufferedOutputStream(dest));\n            byte data[] = new byte[BUFFER];\n            java.util.Properties props = new java.util.Properties();\n            props.load(new java.io.FileInputStream(ejb.bprocess.util.NewGenLibRoot.getRoot() + \"/SystemFiles/ENV_VAR.txt\"));\n            String jbossHomePath = props.getProperty(\"JBOSS_HOME\");\n            jbossHomePath = jbossHomePath.replaceAll(\"deploy\", \"log\");\n            FileInputStream fis = new FileInputStream(new File(jbossHomePath + \"/server.log\"));\n            origin = new BufferedInputStream(fis, BUFFER);\n            ZipEntry entry = new ZipEntry(jbossHomePath + \"/server.log\");\n            zipOut.putNextEntry(entry);\n            int count;\n            while ((count = origin.read(data, 0, BUFFER)) != -1) {\n                zipOut.write(data, 0, count);\n            }\n            origin.close();\n            zipOut.closeEntry();\n            java.io.FileInputStream fis1 = new java.io.FileInputStream(new java.io.File(\"server.zip\"));\n            java.nio.channels.FileChannel fc1 = fis1.getChannel();\n            int length1 = (int) fc1.size();\n            byte buffer[] = new byte[length1];\n            System.out.println(\"size of zip file = \" + length1);\n            fis1.read(buffer);\n            OutputStream out1 = response.getOutputStream();\n            out1.write(buffer);\n            fis1.close();\n            out1.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11658790",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static void _readAllRegionMDFiles(ClassLoader loader, RegionMetadata bean, String regionMDFile) {\n        if (_LOG.isFinest()) {\n            _LOG.finest(\"searching for region-metadata with resource:{0}\", regionMDFile);\n        }\n        try {\n            Enumeration<URL> files = loader.getResources(regionMDFile);\n            while (files.hasMoreElements()) {\n                URL url = files.nextElement();\n                String publicId = url.toString();\n                try {\n                    InputStream in = url.openStream();\n                    _readRegionMetadata(bean, in, publicId);\n                    in.close();\n                } catch (IOException e) {\n                    _error(publicId, e);\n                }\n            }\n        } catch (IOException e) {\n            _LOG.warning(\"ERR_GET_REGION_METADATA_FILE\", __CONFIG_FILE_OTHER);\n            _LOG.warning(e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11664406",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {\n        String version = req.getParameter(\"version\");\n        String cdn = req.getParameter(\"cdn\");\n        String dependencies = req.getParameter(\"dependencies\");\n        String optimize = req.getParameter(\"optimize\");\n        String cacheFile = null;\n        String result = null;\n        boolean isCached = false;\n        Boolean isError = true;\n        if (!version.equals(\"1.3.2\")) {\n            result = \"invalid version: \" + version;\n        }\n        if (!cdn.equals(\"google\") && !cdn.equals(\"aol\")) {\n            result = \"invalide CDN type: \" + cdn;\n        }\n        if (!optimize.equals(\"comments\") && !optimize.equals(\"shrinksafe\") && !optimize.equals(\"none\") && !optimize.equals(\"shrinksafe.keepLines\")) {\n            result = \"invalid optimize type: \" + optimize;\n        }\n        if (!dependencies.matches(\"^[\\\\w\\\\-\\\\,\\\\s\\\\.]+$\")) {\n            result = \"invalid dependency list: \" + dependencies;\n        }\n        try {\n            MessageDigest md = null;\n            try {\n                md = MessageDigest.getInstance(\"SHA\");\n            } catch (NoSuchAlgorithmException e) {\n                result = e.getMessage();\n            }\n            if (result == null) {\n                md.update(dependencies.getBytes());\n                String digest = (new BASE64Encoder()).encode(md.digest()).replace('+', '~').replace('/', '_').replace('=', '_');\n                cacheFile = cachePath + \"/\" + version + \"/\" + cdn + \"/\" + digest + \"/\" + optimize + \".js\";\n                File file = new File(cacheFile);\n                if (file.exists()) {\n                    isCached = true;\n                    isError = false;\n                }\n            }\n            if (result == null && !isCached) {\n                BuilderContextAction contextAction = new BuilderContextAction(builderPath, version, cdn, dependencies, optimize);\n                ContextFactory.getGlobal().call(contextAction);\n                Exception exception = contextAction.getException();\n                if (exception != null) {\n                    result = exception.getMessage();\n                } else {\n                    result = contextAction.getResult();\n                    FileUtil.writeToFile(cacheFile, result, null, true);\n                    isError = false;\n                }\n            }\n        } catch (Exception e) {\n            result = e.getMessage();\n        }\n        res.setCharacterEncoding(\"utf-8\");\n        if (isError) {\n            result = result.replaceAll(\"\\\\\\\"\", \"\\\\\\\"\");\n            result = \"<html><head><script type=\\\"text/javascript\\\">alert(\\\"\" + result + \"\\\");</script></head><body></body></html>\";\n            PrintWriter writer = res.getWriter();\n            writer.append(result);\n        } else {\n            res.setHeader(\"Content-Type\", \"application/x-javascript\");\n            res.setHeader(\"Content-disposition\", \"attachment; filename=dojo.js\");\n            res.setHeader(\"Content-Encoding\", \"gzip\");\n            File file = new File(cacheFile);\n            BufferedInputStream in = new java.io.BufferedInputStream(new DataInputStream(new FileInputStream(file)));\n            OutputStream out = res.getOutputStream();\n            byte[] bytes = new byte[64000];\n            int bytesRead = 0;\n            while (bytesRead != -1) {\n                bytesRead = in.read(bytes);\n                if (bytesRead != -1) {\n                    out.write(bytes, 0, bytesRead);\n                }\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11664487",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void main(String[] args) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void main(String[] args) throws IOException {\n        ReadableByteChannel in = Channels.newChannel((new FileInputStream(\"/home/sannies/suckerpunch-distantplanet_h1080p/suckerpunch-distantplanet_h1080p.mov\")));\n        Movie movie = MovieCreator.build(in);\n        in.close();\n        List<Track> tracks = movie.getTracks();\n        movie.setTracks(new LinkedList<Track>());\n        double startTime = 35.000;\n        double endTime = 145.000;\n        boolean timeCorrected = false;\n        for (Track track : tracks) {\n            if (track.getSyncSamples() != null && track.getSyncSamples().length > 0) {\n                if (timeCorrected) {\n                    throw new RuntimeException(\"The startTime has already been corrected by another track with SyncSample. Not Supported.\");\n                }\n                startTime = correctTimeToNextSyncSample(track, startTime);\n                endTime = correctTimeToNextSyncSample(track, endTime);\n                timeCorrected = true;\n            }\n        }\n        for (Track track : tracks) {\n            long currentSample = 0;\n            double currentTime = 0;\n            long startSample = -1;\n            long endSample = -1;\n            for (int i = 0; i < track.getDecodingTimeEntries().size(); i++) {\n                TimeToSampleBox.Entry entry = track.getDecodingTimeEntries().get(i);\n                for (int j = 0; j < entry.getCount(); j++) {\n                    if (currentTime <= startTime) {\n                        startSample = currentSample;\n                    }\n                    if (currentTime <= endTime) {\n                        endSample = currentSample;\n                    } else {\n                        break;\n                    }\n                    currentTime += (double) entry.getDelta() / (double) track.getTrackMetaData().getTimescale();\n                    currentSample++;\n                }\n            }\n            movie.addTrack(new CroppedTrack(track, startSample, endSample));\n        }\n        long start1 = System.currentTimeMillis();\n        IsoFile out = new DefaultMp4Builder().build(movie);\n        long start2 = System.currentTimeMillis();\n        FileOutputStream fos = new FileOutputStream(String.format(\"output-%f-%f.mp4\", startTime, endTime));\n        FileChannel fc = fos.getChannel();\n        out.getBox(fc);\n        fc.close();\n        fos.close();\n        long start3 = System.currentTimeMillis();\n        System.err.println(\"Building IsoFile took : \" + (start2 - start1) + \"ms\");\n        System.err.println(\"Writing IsoFile took  : \" + (start3 - start2) + \"ms\");\n        System.err.println(\"Writing IsoFile speed : \" + (new File(String.format(\"output-%f-%f.mp4\", startTime, endTime)).length() / (start3 - start2) / 1000) + \"MB/s\");\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11670354",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic ABIFile(URL url) throws FileFormatException, IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public ABIFile(URL url) throws FileFormatException, IOException {\n        URLConnection connection = url.openConnection();\n        int contentLength = connection.getContentLength();\n        if (contentLength <= 0) throw new RuntimeException(url + \" contained no content\");\n        byte[] content = new byte[contentLength];\n        DataInputStream dis = new DataInputStream(connection.getInputStream());\n        dis.readFully(content);\n        dis.close();\n        dis = new DataInputStream(new ByteArrayInputStream(content));\n        if (!isABI(dis)) {\n            throw new FileFormatException(url + \" is not an ABI trace file\");\n        }\n        char[] fwo = null;\n        dis.reset();\n        dis.skipBytes(18);\n        int len = dis.readInt();\n        dis.skipBytes(4);\n        int off = dis.readInt();\n        ABIRecord[] data = new ABIRecord[12];\n        ABIRecord[] pbas = new ABIRecord[2];\n        ABIRecord[] ploc = new ABIRecord[2];\n        dis.reset();\n        dis.skipBytes(off);\n        for (; len > 0; len--) {\n            ABIRecord rec = new ABIRecord(dis);\n            if (rec.tag.equals(\"DATA\")) {\n                try {\n                    data[rec.n - 1] = rec;\n                } catch (ArrayIndexOutOfBoundsException e) {\n                    System.err.println(\"ABI record contains erroneous n field\");\n                }\n            } else if (rec.tag.equals(\"FWO_\")) {\n                fwo = ((String) rec.data).toCharArray();\n            } else if (rec.tag.equals(\"PBAS\")) {\n                pbas[rec.n - 1] = rec;\n            } else if (rec.tag.equals(\"PLOC\")) {\n                ploc[rec.n - 1] = rec;\n            }\n        }\n        traceLength = data[8].len;\n        sequenceLength = pbas[1].len;\n        A = new short[traceLength];\n        C = new short[traceLength];\n        G = new short[traceLength];\n        T = new short[traceLength];\n        max = Short.MIN_VALUE;\n        for (int i = 0; i < 4; i++) {\n            dis.reset();\n            dis.skipBytes(data[8 + i].off);\n            short[] current = traceArray(fwo[i]);\n            for (int j = 0; j < traceLength; j++) {\n                current[j] = dis.readShort();\n                if (current[j] > max) max = current[j];\n            }\n        }\n        byte[] buf = new byte[sequenceLength];\n        dis.reset();\n        dis.skipBytes(pbas[1].off);\n        dis.readFully(buf);\n        sequence = new String(buf);\n        centers = new short[sequenceLength];\n        dis.reset();\n        dis.skipBytes(ploc[1].off);\n        for (int i = 0; i < sequenceLength; i++) centers[i] = dis.readShort();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11673906",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void _resetLanguages(ActionRequest req, ActionResponse res, PortletConfig config, ActionForm form) throws Exception {\n        List list = (List) req.getAttribute(WebKeys.LANGUAGE_MANAGER_LIST);\n        for (int i = 0; i < list.size(); i++) {\n            long langId = ((Language) list.get(i)).getId();\n            try {\n                String filePath = getGlobalVariablesPath() + \"cms_language_\" + langId + \".properties\";\n                File from = new java.io.File(filePath);\n                from.createNewFile();\n                String tmpFilePath = getTemporyDirPath() + \"cms_language_\" + langId + \"_properties.tmp\";\n                File to = new java.io.File(tmpFilePath);\n                to.createNewFile();\n                FileChannel srcChannel = new FileInputStream(from).getChannel();\n                FileChannel dstChannel = new FileOutputStream(to).getChannel();\n                dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n                srcChannel.close();\n                dstChannel.close();\n            } catch (IOException e) {\n                Logger.debug(this, \"Property File copy Failed \" + e, e);\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11673907",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void _checkLanguagesFiles(ActionRequest req, ActionResponse res, PortletConfig config, ActionForm form) throws Exception {\n        List list = (List) req.getAttribute(WebKeys.LANGUAGE_MANAGER_LIST);\n        for (int i = 0; i < list.size(); i++) {\n            long langId = ((Language) list.get(i)).getId();\n            try {\n                String filePath = getGlobalVariablesPath() + \"cms_language_\" + langId + \".properties\";\n                boolean copy = false;\n                File from = new java.io.File(filePath);\n                if (!from.exists()) {\n                    from.createNewFile();\n                    copy = true;\n                }\n                String tmpFilePath = getTemporyDirPath() + \"cms_language_\" + langId + \"_properties.tmp\";\n                File to = new java.io.File(tmpFilePath);\n                if (!to.exists()) {\n                    to.createNewFile();\n                    copy = true;\n                }\n                if (copy) {\n                    FileChannel srcChannel = new FileInputStream(from).getChannel();\n                    FileChannel dstChannel = new FileOutputStream(to).getChannel();\n                    dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n                    srcChannel.close();\n                    dstChannel.close();\n                }\n            } catch (IOException e) {\n                Logger.error(this, \"_checkLanguagesFiles:Property File Copy Failed \" + e, e);\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11673911",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void _save(ActionRequest req, ActionResponse res, PortletConfig config, ActionForm form) throws Exception {\n        List list = (List) req.getAttribute(WebKeys.LANGUAGE_MANAGER_LIST);\n        for (int i = 0; i < list.size(); i++) {\n            long langId = ((Language) list.get(i)).getId();\n            try {\n                String filePath = getGlobalVariablesPath() + \"cms_language_\" + langId + \".properties\";\n                String tmpFilePath = getTemporyDirPath() + \"cms_language_\" + langId + \"_properties.tmp\";\n                File from = new java.io.File(tmpFilePath);\n                from.createNewFile();\n                File to = new java.io.File(filePath);\n                to.createNewFile();\n                FileChannel srcChannel = new FileInputStream(from).getChannel();\n                FileChannel dstChannel = new FileOutputStream(to).getChannel();\n                dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n                srcChannel.close();\n                dstChannel.close();\n            } catch (NonWritableChannelException we) {\n            } catch (IOException e) {\n                Logger.error(this, \"Property File save Failed \" + e, e);\n            }\n        }\n        SessionMessages.add(req, \"message\", \"message.languagemanager.save\");\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11677415",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void behaveTest() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Test\n    public void behaveTest() {\n        InputStream is = this.getClass().getResourceAsStream(\"safetyCaseTest.mdf\");\n        ByteArrayOutputStream out = new ByteArrayOutputStream();\n        try {\n            IOUtils.copy(is, out);\n        } catch (IOException e) {\n            throw new RuntimeException(\"Unable to read mdf\", e);\n        }\n        TrafficSimulationEngine engine = new TrafficSimulationEngine();\n        TrafficModelDefinition def = MDFReader.read(out.toByteArray());\n        engine.init(def);\n        Map<Integer, Set<Integer>> linkSegments = new HashMap<Integer, Set<Integer>>();\n        Set<Integer> segments = new HashSet<Integer>();\n        segments.add(0);\n        linkSegments.put(0, segments);\n        FrameProperties frameProperties = new FrameProperties(linkSegments, new HashSet<Integer>());\n        engine.setFrameProperties(frameProperties);\n        RegularVehicle vehicle = (RegularVehicle) engine.getDynamicObjects().iterator().next();\n        CompositeDriver driver = (CompositeDriver) vehicle.getDriver();\n        driver.drive(0.1f);\n        SafetyCase safety = new SafetyCase(driver);\n        RectangleCCRange ccRange = (RectangleCCRange) safety.behave(0.1f);\n        HandRange turnRange = ccRange.getTurnRange();\n        HandRange probeRange = new HandRange();\n        probeRange.remove(Hand.Left);\n        assertTrue(turnRange.equals(probeRange));\n        assertTrue(ccRange.getPriority() == Priority.SafetyCase);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11683526",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static boolean moveFiles(String sourceDir, String targetDir) {\n        boolean isFinished = false;\n        boolean fileMoved = false;\n        File stagingDir = new File(sourceDir);\n        if (!stagingDir.exists()) {\n            System.out.println(getTimeStamp() + \"ERROR - source directory does not exist.\");\n            return true;\n        }\n        if (stagingDir.listFiles() == null) {\n            System.out.println(getTimeStamp() + \"ERROR - Empty file list. Possible permission error on source directory \" + sourceDir);\n            return true;\n        }\n        File[] fileList = stagingDir.listFiles();\n        for (int x = 0; x < fileList.length; x++) {\n            File f = fileList[x];\n            if (f.getName().startsWith(\".\")) {\n                continue;\n            }\n            String targetFileName = targetDir + File.separator + f.getName();\n            String operation = \"move\";\n            boolean success = f.renameTo(new File(targetFileName));\n            if (success) {\n                fileMoved = true;\n            } else {\n                operation = \"mv\";\n                try {\n                    Process process = Runtime.getRuntime().exec(new String[] { \"mv\", f.getCanonicalPath(), targetFileName });\n                    process.waitFor();\n                    process.destroy();\n                    if (!new File(targetFileName).exists()) {\n                        success = false;\n                    } else {\n                        success = true;\n                        fileMoved = true;\n                    }\n                } catch (Exception e) {\n                    success = false;\n                }\n                if (!success) {\n                    operation = \"copy\";\n                    FileChannel in = null;\n                    FileChannel out = null;\n                    try {\n                        in = new FileInputStream(f).getChannel();\n                        File outFile = new File(targetFileName);\n                        out = new FileOutputStream(outFile).getChannel();\n                        in.transferTo(0, in.size(), out);\n                        in.close();\n                        in = null;\n                        out.close();\n                        out = null;\n                        f.delete();\n                        success = true;\n                    } catch (Exception e) {\n                        success = false;\n                    } finally {\n                        if (in != null) {\n                            try {\n                                in.close();\n                            } catch (Exception e) {\n                            }\n                        }\n                        if (out != null) {\n                            try {\n                                out.close();\n                            } catch (Exception e) {\n                            }\n                        }\n                    }\n                }\n            }\n            if (success) {\n                System.out.println(getTimeStamp() + operation + \" \" + f.getAbsolutePath() + \" to \" + targetDir);\n                fileMoved = true;\n            } else {\n                System.out.println(getTimeStamp() + \"ERROR - \" + operation + \" \" + f.getName() + \" to \" + targetFileName + \" failed.\");\n                isFinished = true;\n            }\n        }\n        if (fileMoved && !isFinished) {\n            try {\n                currentLastActivity = System.currentTimeMillis();\n                updateLastActivity(currentLastActivity);\n            } catch (NumberFormatException e) {\n                System.out.println(getTimeStamp() + \"ERROR: NumberFormatException when trying to update lastActivity.\");\n                isFinished = true;\n            } catch (IOException e) {\n                System.out.println(getTimeStamp() + \"ERROR: IOException when trying to update lastActivity. \" + e.toString());\n                isFinished = true;\n            }\n        }\n        return isFinished;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01168512",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "protected Resolver queryResolver(String resolver, String command, String arg1, String arg2) {\n        InputStream iStream = null;\n        String RFC2483 = resolver + \"?command=\" + command + \"&format=tr9401&uri=\" + arg1 + \"&uri2=\" + arg2;\n        String line = null;\n        try {\n            URL url = new URL(RFC2483);\n            URLConnection urlCon = url.openConnection();\n            urlCon.setUseCaches(false);\n            Resolver r = (Resolver) newCatalog();\n            String cType = urlCon.getContentType();\n            if (cType.indexOf(\";\") > 0) {\n                cType = cType.substring(0, cType.indexOf(\";\"));\n            }\n            r.parseCatalog(cType, urlCon.getInputStream());\n            return r;\n        } catch (CatalogException cex) {\n            if (cex.getExceptionType() == CatalogException.UNPARSEABLE) {\n                catalogManager.debug.message(1, \"Unparseable catalog: \" + RFC2483);\n            } else if (cex.getExceptionType() == CatalogException.UNKNOWN_FORMAT) {\n                catalogManager.debug.message(1, \"Unknown catalog format: \" + RFC2483);\n            }\n            return null;\n        } catch (MalformedURLException mue) {\n            catalogManager.debug.message(1, \"Malformed resolver URL: \" + RFC2483);\n            return null;\n        } catch (IOException ie) {\n            catalogManager.debug.message(1, \"I/O Exception opening resolver: \" + RFC2483);\n            return null;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11689375",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        String requestPath = req.getRequestURI();\n        String cdecUrl = \"http://cdec.water.ca.gov\" + requestPath + \"?\" + req.getQueryString();\n        System.out.println(\"CDEC URL: \" + cdecUrl);\n        URL url = new URL(cdecUrl);\n        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\n        StringBuffer buffer = new StringBuffer();\n        String line = null;\n        int ncolumnInner = 0;\n        while ((line = reader.readLine()) != null) {\n            if (line.contains(\"<div class=\\\"column_inner\\\"\")) {\n                ncolumnInner++;\n            }\n            if (ncolumnInner == 2) {\n                if (line.contains(\"</div>\")) {\n                    break;\n                }\n                if (line.contains(\"href\")) {\n                    line = line.replaceAll(\"href\", \"  target=\\\"external_page\\\" href\");\n                }\n                if (line.contains(\"http://cdec.water.ca.gov:80\")) {\n                    line = line.replaceAll(\"http://cdec.water.ca.gov:80/\", \"/\");\n                }\n                if (line.contains(\"href=\")) {\n                    line = line.replaceAll(\"(href=\\\"|href=)\", \"$1http://cdec.water.ca.gov\");\n                }\n                buffer.append(line);\n            } else {\n                continue;\n            }\n        }\n        resp.getWriter().write(buffer.toString());\n        resp.getWriter().flush();\n        reader.close();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01169633",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void reset() throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void reset() throws Exception {\n        Session session = DataStaticService.getHibernateSessionFactory().openSession();\n        try {\n            Connection connection = session.connection();\n            try {\n                Statement statement = connection.createStatement();\n                try {\n                    statement.executeUpdate(\"delete from Bundle\");\n                    connection.commit();\n                } finally {\n                    statement.close();\n                }\n            } catch (HibernateException e) {\n                connection.rollback();\n                throw new Exception(e);\n            } catch (SQLException e) {\n                connection.rollback();\n                throw new Exception(e);\n            }\n        } catch (SQLException e) {\n            throw new Exception(e);\n        } finally {\n            session.close();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01169642",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void run() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n    public void run() {\n        String key = getKey();\n        synchronized (this.lauchedHTTPRequests) {\n            if (this.lauchedHTTPRequests.contains(key)) return;\n            this.lauchedHTTPRequests.add(key);\n        }\n        String st = this.dataSource.getTileURL(this.x, this.y, this.z);\n        URL url;\n        try {\n            url = new URL(st);\n        } catch (MalformedURLException e1) {\n            logger.warning(\"Error in URL: \" + st);\n            return;\n        }\n        String geoJSON = \"\";\n        try {\n            InputStream is;\n            if (\"file\".equals(url.getProtocol())) is = new FileInputStream(url.getFile()); else if (\"http\".equals(url.getProtocol())) is = url.openStream(); else {\n                logger.warning(\"Impossible to load settings from \" + url + \". Unsupported protocol \" + url.getProtocol());\n                return;\n            }\n            BufferedReader in = new BufferedReader(new InputStreamReader(is));\n            String line;\n            while ((line = in.readLine()) != null) geoJSON += line;\n            in.close();\n        } catch (FileNotFoundException e) {\n            return;\n        } catch (IOException e) {\n            e.printStackTrace();\n            return;\n        }\n        VectorTile tile = new VectorTile(geoJSON, x, y, z);\n        Geometry[] geoms = new Geometry[tile.getPieces().size()];\n        int i = 0;\n        for (MfGeo geo : tile.getPieces()) {\n            if (geo.getGeoType() == GeoType.GEOMETRY) {\n                geoms[i++] = ((MfGeometry) geo).getInternalGeometry();\n            } else if (geo.getGeoType() == GeoType.FEATURE) {\n                MfFeature mf = (MfFeature) geo;\n                geoms[i++] = mf.getMfGeometry().getInternalGeometry();\n            }\n        }\n        GeometryCollection gc = new GeometryFactory().createGeometryCollection(geoms);\n        this.dataSource.getDataLoader().add(new OpenCartoFeature(this.dataSource.getLayer(), new Rep(gc), this.z));\n        this.dataSource.getLayer().getDisplayCacheLoader().coin();\n        synchronized (this.lauchedHTTPRequests) {\n            this.lauchedHTTPRequests.remove(key);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11698013",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void listAndInstantiateServiceProviders() {\n        final Enumeration<URL> resources = ClassLoaderHelper.getResources(SERVICES_FILE, ServiceManager.class);\n        String name;\n        try {\n            while (resources.hasMoreElements()) {\n                URL url = resources.nextElement();\n                InputStream stream = url.openStream();\n                try {\n                    BufferedReader reader = new BufferedReader(new InputStreamReader(stream), 100);\n                    name = reader.readLine();\n                    while (name != null) {\n                        name = name.trim();\n                        if (!name.startsWith(\"#\")) {\n                            final ServiceProvider<?> serviceProvider = ClassLoaderHelper.instanceFromName(ServiceProvider.class, name, ServiceManager.class, \"service provider\");\n                            @SuppressWarnings(\"unchecked\") final Class<ServiceProvider<?>> serviceProviderClass = (Class<ServiceProvider<?>>) serviceProvider.getClass();\n                            managedProviders.put(serviceProviderClass, new ServiceProviderWrapper(serviceProvider));\n                        }\n                        name = reader.readLine();\n                    }\n                } finally {\n                    stream.close();\n                }\n            }\n        } catch (IOException e) {\n            throw new SearchException(\"Unable to read \" + SERVICES_FILE, e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11701818",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static void copyFile(File source, File destination) throws IOException, SecurityException {\n        if (!destination.exists()) destination.createNewFile();\n        FileChannel sourceChannel = null;\n        FileChannel destinationChannel = null;\n        try {\n            sourceChannel = new FileInputStream(source).getChannel();\n            destinationChannel = new FileOutputStream(destination).getChannel();\n            long count = 0;\n            long size = sourceChannel.size();\n            while ((count += destinationChannel.transferFrom(sourceChannel, 0, size - count)) < size) ;\n        } finally {\n            if (sourceChannel != null) sourceChannel.close();\n            if (destinationChannel != null) destinationChannel.close();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11704429",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void run() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void run() {\n        RandomAccessFile file = null;\n        InputStream stream = null;\n        try {\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n            connection.setRequestProperty(\"Range\", \"bytes=\" + downloaded + \"-\");\n            connection.connect();\n            if (connection.getResponseCode() / 100 != 2) {\n                error();\n            }\n            int contentLength = connection.getContentLength();\n            if (contentLength < 1) {\n                error();\n            }\n            if (size == -1) {\n                size = contentLength;\n                stateChanged();\n            }\n            file = new RandomAccessFile(destination, \"rw\");\n            file.seek(downloaded);\n            stream = connection.getInputStream();\n            while (status == DOWNLOADING) {\n                byte buffer[];\n                if (size - downloaded > MAX_BUFFER_SIZE) {\n                    buffer = new byte[MAX_BUFFER_SIZE];\n                } else {\n                    buffer = new byte[size - downloaded];\n                }\n                int read = stream.read(buffer);\n                if (read == -1) break;\n                file.write(buffer, 0, read);\n                downloaded += read;\n                stateChanged();\n            }\n            if (status == DOWNLOADING) {\n                status = COMPLETE;\n                stateChanged();\n            }\n        } catch (Exception e) {\n            error();\n        } finally {\n            if (file != null) {\n                try {\n                    file.close();\n                } catch (Exception e) {\n                }\n            }\n            if (stream != null) {\n                try {\n                    stream.close();\n                } catch (Exception e) {\n                }\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11710005",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void main(String[] args) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void main(String[] args) {\n        try {\n            URL url = new URL(\"http://www.lineadecodigo.com\");\n            BufferedReader in = null;\n            try {\n                in = new BufferedReader(new InputStreamReader(url.openStream()));\n            } catch (Throwable t) {\n            }\n            String inputLine;\n            String inputText = \"\";\n            while ((inputLine = in.readLine()) != null) {\n                inputText = inputText + inputLine;\n            }\n            System.out.println(\"El contenido de la URL es: \" + inputText);\n            in.close();\n        } catch (MalformedURLException me) {\n            System.out.println(\"URL erronea\");\n        } catch (IOException ioe) {\n            System.out.println(\"Error IO\");\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11711888",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic synchronized void readConfiguration() throws IOException, SecurityException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public synchronized void readConfiguration() throws IOException, SecurityException {\n        String path;\n        InputStream inputStream;\n        path = System.getProperty(\"java.util.logging.config.file\");\n        if ((path == null) || (path.length() == 0)) {\n            String url = (System.getProperty(\"gnu.classpath.home.url\") + \"/logging.properties\");\n            inputStream = new URL(url).openStream();\n        } else inputStream = new java.io.FileInputStream(path);\n        try {\n            readConfiguration(inputStream);\n        } finally {\n            inputStream.close();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11716816",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void updateFile(File file) throws FileNotFoundException, IOException {\n        File destFile = new File(file.getPath().replace(URL_UNZIPPED_PREFIX + latestVersion, \"\"));\n        FileChannel in = null;\n        FileChannel out = null;\n        try {\n            if (!destFile.exists()) {\n                destFile.getParentFile().mkdirs();\n                destFile.createNewFile();\n            }\n            in = new FileInputStream(file).getChannel();\n            out = new FileOutputStream(destFile).getChannel();\n            in.transferTo(0, in.size(), out);\n        } finally {\n            if (out != null) out.close();\n            if (in != null) in.close();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11717079",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "void copyFile(File inputFile, File outputFile) {\n        try {\n            FileReader in;\n            in = new FileReader(inputFile);\n            FileWriter out = new FileWriter(outputFile);\n            int c;\n            while ((c = in.read()) != -1) out.write(c);\n            in.close();\n            out.close();\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11719103",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String hash(final String text) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String hash(final String text) {\n        try {\n            MessageDigest md;\n            md = MessageDigest.getInstance(\"SHA-1\");\n            byte[] sha1hash = new byte[40];\n            md.update(text.getBytes(\"iso-8859-1\"), 0, text.length());\n            sha1hash = md.digest();\n            return Sha1.convertToHex(sha1hash);\n        } catch (final Exception e) {\n            return null;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11722050",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic byte[] authClient(String host, String user, String passwd, String realm, String serverChallenge) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public byte[] authClient(String host, String user, String passwd, String realm, String serverChallenge) throws IOException {\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n        OutputStream b64os = new BASE64EncoderStream(bos, Integer.MAX_VALUE);\n        SecureRandom random;\n        try {\n            random = new SecureRandom();\n            md5 = MessageDigest.getInstance(\"MD5\");\n        } catch (NoSuchAlgorithmException ex) {\n            if (debugout != null) debugout.println(\"DEBUG DIGEST-MD5: \" + ex);\n            throw new IOException(ex.toString());\n        }\n        StringBuffer result = new StringBuffer();\n        uri = \"smtp/\" + host;\n        String nc = \"00000001\";\n        String qop = \"auth\";\n        byte[] bytes = new byte[32];\n        int resp;\n        if (debugout != null) debugout.println(\"DEBUG DIGEST-MD5: Begin authentication ...\");\n        Hashtable map = tokenize(serverChallenge);\n        if (realm == null) {\n            String text = (String) map.get(\"realm\");\n            realm = text != null ? new StringTokenizer(text, \",\").nextToken() : host;\n        }\n        String nonce = (String) map.get(\"nonce\");\n        random.nextBytes(bytes);\n        b64os.write(bytes);\n        b64os.flush();\n        String cnonce = bos.toString();\n        bos.reset();\n        md5.update(md5.digest(ASCIIUtility.getBytes(user + \":\" + realm + \":\" + passwd)));\n        md5.update(ASCIIUtility.getBytes(\":\" + nonce + \":\" + cnonce));\n        clientResponse = toHex(md5.digest()) + \":\" + nonce + \":\" + nc + \":\" + cnonce + \":\" + qop + \":\";\n        md5.update(ASCIIUtility.getBytes(\"AUTHENTICATE:\" + uri));\n        md5.update(ASCIIUtility.getBytes(clientResponse + toHex(md5.digest())));\n        result.append(\"username=\\\"\" + user + \"\\\"\");\n        result.append(\",realm=\\\"\" + realm + \"\\\"\");\n        result.append(\",qop=\" + qop);\n        result.append(\",nc=\" + nc);\n        result.append(\",nonce=\\\"\" + nonce + \"\\\"\");\n        result.append(\",cnonce=\\\"\" + cnonce + \"\\\"\");\n        result.append(\",digest-uri=\\\"\" + uri + \"\\\"\");\n        result.append(\",response=\" + toHex(md5.digest()));\n        if (debugout != null) debugout.println(\"DEBUG DIGEST-MD5: Response => \" + result.toString());\n        b64os.write(ASCIIUtility.getBytes(result.toString()));\n        b64os.flush();\n        return bos.toByteArray();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11723383",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void getImage(String filename) throws MalformedURLException, IOException, SAXException, FileNotFoundException {\n        String url = Constants.STRATEGICDOMINATION_URL + \"/images/gameimages/\" + filename;\n        WebRequest req = new GetMethodWebRequest(url);\n        SiteResponse response = getSiteResponse(req);\n        File file = new File(\"etc/images/\" + filename);\n        FileOutputStream outputStream = new FileOutputStream(file);\n        IOUtils.copy(response.getInputStream(), outputStream);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01172494",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String encrypt(String input) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String encrypt(String input) {\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"SHA1\");\n            md.update(input.getBytes(\"UTF-8\"));\n            return toHexString(md.digest());\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11729511",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic boolean run() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public boolean run() {\n        String url;\n        try {\n            url = getFileName();\n        } catch (NoSuchFieldException e) {\n            return false;\n        }\n        if (url == null) {\n            logger.error(\"URL not specified! Cannot continue.\");\n            return false;\n        }\n        try {\n            URL newURL = new URL(url);\n            String extension = url.substring((url.lastIndexOf(\".\")) + 1, url.length());\n            File temp = File.createTempFile(\"temp\", \".\" + extension);\n            System.out.printf(\"Storing URL contents to a temp file : %s\\n\", temp);\n            temp.deleteOnExit();\n            InputStream urlINS = new BufferedInputStream(newURL.openConnection().getInputStream());\n            BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(temp));\n            int len = 0;\n            for (int singleByte = urlINS.read(); singleByte != -1; singleByte = urlINS.read()) {\n                out.write(singleByte);\n                len++;\n            }\n            System.out.printf(\"Stored %d bytes from URL contents\\n\", len);\n            out.flush();\n            out.close();\n            System.out.printf(\"URL/Temp extension : %s\\n\", extension);\n            if (extension.equalsIgnoreCase(\"gz\")) {\n                String shorterName = url.substring(0, url.lastIndexOf(\".\"));\n                String extension2 = shorterName.substring((shorterName.lastIndexOf(\".\")) + 1, shorterName.length());\n                File temp2 = File.createTempFile(\"temp\", \".\" + extension2);\n                temp2.deleteOnExit();\n                System.out.printf(\"URL/Temp extension after decompressing gzip : %s\\n\", extension2);\n                GZIPInputStream decompressor = new GZIPInputStream(new FileInputStream(temp));\n                OutputStream target = new FileOutputStream(temp2);\n                byte[] buffer = new byte[1024];\n                int length;\n                while ((length = decompressor.read(buffer)) > 0) {\n                    target.write(buffer, 0, length);\n                }\n                target.flush();\n                target.close();\n                temp = temp2;\n            }\n            String tempName = temp.getName();\n            extension = tempName.substring((tempName.lastIndexOf(\".\")) + 1, tempName.length());\n            Preprocessor fileLoader = null;\n            BasePreprocessorConfig configObject = null;\n            if (MethodCallTable.containsKey(extension) == false) {\n                fileLoader = MethodCallTable.get(\"default\");\n            } else {\n                fileLoader = MethodCallTable.get(extension);\n            }\n            System.out.printf(\"Calling filter '%s' for extension: %s\\n\", fileLoader.getPreprocessingMethodName(), extension);\n            configObject = new LoadCSVPreprocessorConfig();\n            configObject.setValueByName(\"FileName\", temp.getAbsolutePath());\n            fileLoader.setConfigurationClass(configObject);\n            return fileLoader.run();\n        } catch (Exception e) {\n            logger.error(e);\n            return false;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11730227",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void copy(File source, File target) throws IOException {\n        FileChannel in = (new FileInputStream(source)).getChannel();\n        FileChannel out = (new FileOutputStream(target)).getChannel();\n        in.transferTo(0, source.length(), out);\n        in.close();\n        out.close();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11731587",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic File createFileFromClasspathResource(String resourceUrl) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public File createFileFromClasspathResource(String resourceUrl) throws IOException {\n        File fichierTest = File.createTempFile(\"xmlFieldTestFile\", \"\");\n        FileOutputStream fos = new FileOutputStream(fichierTest);\n        InputStream is = XmlFieldDomSelectorTest.class.getResourceAsStream(resourceUrl);\n        IOUtils.copy(is, fos);\n        is.close();\n        fos.close();\n        return fichierTest;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11733067",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String sha1(String src) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String sha1(String src) {\n        MessageDigest md1 = null;\n        try {\n            md1 = MessageDigest.getInstance(\"SHA-1\");\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n        try {\n            md1.update(src.getBytes(\"UTF-8\"));\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n        return hex(md1.digest());\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11738613",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic String move(Integer param) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public String move(Integer param) {\n        LOG.debug(\"move \" + param);\n        StringBuffer ret = new StringBuffer();\n        try {\n            URL url = new URL(\"http://\" + host + \"/decoder_control.cgi?command=\" + param + \"&user=\" + user + \"&pwd=\" + password);\n            URLConnection con = url.openConnection();\n            BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));\n            String inputLine;\n            while ((inputLine = in.readLine()) != null) {\n                ret.append(inputLine);\n            }\n            in.close();\n        } catch (Exception e) {\n            logException(e);\n            connect(host, user, password);\n        }\n        return ret.toString();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11750117",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static LinkedList<String> read(URL url) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static LinkedList<String> read(URL url) throws IOException {\n        LinkedList<String> data = new LinkedList<String>();\n        HttpURLConnection con = (HttpURLConnection) url.openConnection();\n        BufferedReader br = new BufferedReader(new InputStreamReader(con.getInputStream()));\n        String input = \"\";\n        while (true) {\n            input = br.readLine();\n            if (input == null) break;\n            data.add(input);\n        }\n        br.close();\n        return data;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11750118",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static LinkedList<String> read(URL url, String exc) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static LinkedList<String> read(URL url, String exc) throws IOException {\n        LinkedList<String> data = new LinkedList<String>();\n        HttpURLConnection con = (HttpURLConnection) url.openConnection();\n        BufferedReader br = new BufferedReader(new InputStreamReader(con.getInputStream()));\n        String input = \"\";\n        while (true) {\n            input = br.readLine();\n            if (input == null) break;\n            if (!input.startsWith(exc)) {\n                data.add(input);\n            }\n        }\n        br.close();\n        return data;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11751791",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void connect(URL url) throws IOException {\n        String protocol = url.getProtocol();\n        if (!protocol.equals(\"http\")) throw new IllegalArgumentException(\"URL must use 'http:' protocol\");\n        int port = url.getPort();\n        if (port == -1) port = 80;\n        fileName = url.getFile();\n        conn = (HttpURLConnection) url.openConnection();\n        conn.setRequestMethod(\"POST\");\n        conn.setDoOutput(true);\n        conn.setDoInput(true);\n        toServer = new OutputStreamWriter(conn.getOutputStream());\n        fromServer = conn.getInputStream();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11751886",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void run() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void run() {\n                waiting(200);\n                try {\n                    URL url = new URL(urlAddress);\n                    SAXParserFactory spf = SAXParserFactory.newInstance();\n                    SAXParser sp = spf.newSAXParser();\n                    XMLReader xr = sp.getXMLReader();\n                    XMLHandlerSingleAlbum myXMLHandler = new XMLHandlerSingleAlbum();\n                    xr.setContentHandler(myXMLHandler);\n                    xr.parse(new InputSource(url.openStream()));\n                    statuscode = myXMLHandler.statuscode;\n                    if (statuscode != 200 && statuscode != 206) {\n                        throw new Exception();\n                    }\n                    genre = myXMLHandler.genre;\n                    genreId = myXMLHandler.genreId;\n                    labelId = myXMLHandler.labelId;\n                    label = myXMLHandler.label;\n                    date = myXMLHandler.releaseDate;\n                    rating = myXMLHandler.rating;\n                    imageURL = myXMLHandler.imageURL;\n                    artist = myXMLHandler.artist;\n                    artistId = myXMLHandler.artistId;\n                    numberOfTracks = myXMLHandler.nItems;\n                    trackNames = myXMLHandler.tracks;\n                    handlerSetContent.sendEmptyMessage(0);\n                    dialog.dismiss();\n                    updateImage();\n                } catch (Exception e) {\n                    final Exception ef = e;\n                    nameTextView.post(new Runnable() {\n\n                        public void run() {\n                            nameTextView.setText(R.string.couldnt_get_album_info);\n                        }\n                    });\n                }\n                if (dialog.isShowing()) {\n                    dialog.dismiss();\n                }\n                handlerDoneLoading.sendEmptyMessage(0);\n            }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11752189",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void main(String[] args) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void main(String[] args) {\n        FileDialog fd = new FileDialog(new Frame(), \"Find a .def file\", FileDialog.LOAD);\n        boolean proceed = true;\n        String input = \"\";\n        DataInputStream dis;\n        OutputStream out;\n        InputStream in;\n        File out_file, in_file;\n        byte[] buffer = new byte[2048];\n        int bytes_read;\n        while (proceed) {\n            fd.show();\n            if (fd.getFile() != null) {\n                try {\n                    in_file = new File(fd.getDirectory(), fd.getFile());\n                    out_file = new File(fd.getDirectory(), fd.getFile() + \".out\");\n                    out = new FileOutputStream(out_file);\n                    in = new MSZipInputStream(new FileInputStream(in_file));\n                    while ((bytes_read = in.read(buffer)) != -1) out.write(buffer, 0, bytes_read);\n                    in.close();\n                    out.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n            System.out.println(\"Do another (y/n)?\");\n            dis = new DataInputStream(System.in);\n            try {\n                input = dis.readLine();\n            } catch (Exception blah) {\n            }\n            if (input.toLowerCase().startsWith(\"n\")) proceed = false;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01175821",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String criptografar(String senha) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String criptografar(String senha) {\n        if (senha == null) {\n            return null;\n        }\n        try {\n            MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n            digest.update(senha.getBytes());\n            BASE64Encoder encoder = new BASE64Encoder();\n            return encoder.encode(digest.digest());\n        } catch (NoSuchAlgorithmException ns) {\n            LoggerFactory.getLogger(UtilAdrs.class).error(Msg.EXCEPTION_MESSAGE, UtilAdrs.class.getSimpleName(), ns);\n            return senha;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01175822",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String novoMetodoDeCriptografarParaMD5QueNaoFoiUtilizadoAinda(String input) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String novoMetodoDeCriptografarParaMD5QueNaoFoiUtilizadoAinda(String input) {\n        if (input == null) {\n            return null;\n        }\n        try {\n            MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n            digest.update(input.getBytes(\"UTF-8\"));\n            BigInteger hash = new BigInteger(1, digest.digest());\n            String output = hash.toString(16);\n            if (output.length() < 32) {\n                int sizeDiff = 32 - output.length();\n                do {\n                    output = \"0\" + output;\n                } while (--sizeDiff > 0);\n            }\n            return output;\n        } catch (NoSuchAlgorithmException ns) {\n            LoggerFactory.getLogger(UtilAdrs.class).error(Msg.EXCEPTION_MESSAGE, UtilAdrs.class.getSimpleName(), ns);\n            return input;\n        } catch (UnsupportedEncodingException e) {\n            LoggerFactory.getLogger(UtilAdrs.class).error(Msg.EXCEPTION_MESSAGE, UtilAdrs.class.getSimpleName(), e);\n            return input;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11758299",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "void readData() {\n        String[] nextLine;\n        int line;\n        double value;\n        URL url = null;\n        String FileToRead;\n        try {\n            for (int i = 0; i < names.length; i++) {\n                FileToRead = \"data/\" + names[i] + \".csv\";\n                url = new URL(ja.getCodeBase(), FileToRead);\n                System.out.println(url.toString());\n                InputStream in = url.openStream();\n                CSVReader reader = new CSVReader(new InputStreamReader(in));\n                line = 0;\n                while ((nextLine = reader.readNext()) != null) {\n                    allset.months[line] = Integer.parseInt(nextLine[0].substring(0, 2));\n                    allset.years[line] = Integer.parseInt(nextLine[0].substring(6, 10));\n                    value = Double.parseDouble(nextLine[1]);\n                    allset.values.getDataRef()[line][i] = value;\n                    line++;\n                }\n            }\n        } catch (IOException e) {\n            System.err.println(\"File Read Exception\");\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11771875",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private synchronized jdbcResultSet executeHTTP(String s) throws SQLException {\n        byte result[];\n        try {\n            URL url = new URL(sConnect);\n            String p = StringConverter.unicodeToHexString(sUser);\n            p += \"+\" + StringConverter.unicodeToHexString(sPassword);\n            p += \"+\" + StringConverter.unicodeToHexString(s);\n            URLConnection c = url.openConnection();\n            c.setDoOutput(true);\n            OutputStream os = c.getOutputStream();\n            os.write(p.getBytes(ENCODING));\n            os.close();\n            c.connect();\n            InputStream is = (InputStream) c.getContent();\n            BufferedInputStream in = new BufferedInputStream(is);\n            int len = c.getContentLength();\n            result = new byte[len];\n            for (int i = 0; i < len; i++) {\n                int r = in.read();\n                result[i] = (byte) r;\n            }\n        } catch (Exception e) {\n            throw Trace.error(Trace.CONNECTION_IS_BROKEN, e.getMessage());\n        }\n        return new jdbcResultSet(new Result(result));\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11776522",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "protected File getFile(NameCategory category) throws IOException {\n        File home = new File(System.getProperty(\"user.dir\"));\n        String fileName = String.format(\"%s.txt\", category);\n        File file = new File(home, fileName);\n        if (file.exists()) {\n            return file;\n        } else {\n            URL url = DefaultNameGenerator.class.getResource(\"/sc/common/\" + fileName);\n            if (url == null) {\n                throw new IllegalStateException(String.format(\"Cannot find resource at %s\", fileName));\n            } else {\n                InputStream in = url.openStream();\n                try {\n                    BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file));\n                    try {\n                        IOUtils.copy(in, out);\n                    } finally {\n                        out.close();\n                    }\n                } finally {\n                    in.close();\n                }\n                return file;\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11779245",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void zip(String input, OutputStream out) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@SuppressWarnings(\"unchecked\")\n    public static void zip(String input, OutputStream out) {\n        File file = new File(input);\n        ZipOutputStream zip = null;\n        FileInputStream in = null;\n        try {\n            if (file.exists()) {\n                Collection<File> items = new ArrayList();\n                if (file.isDirectory()) {\n                    items = FileUtils.listFiles(file, TrueFileFilter.INSTANCE, TrueFileFilter.INSTANCE);\n                    zip = new ZipOutputStream(out);\n                    zip.putNextEntry(new ZipEntry(file.getName() + \"/\"));\n                    Iterator iter = items.iterator();\n                    while (iter.hasNext()) {\n                        File item = (File) iter.next();\n                        in = new FileInputStream(item);\n                        zip.putNextEntry(new ZipEntry(file.getName() + \"/\" + item.getName()));\n                        IOUtils.copy(in, zip);\n                        IOUtils.closeQuietly(in);\n                        zip.closeEntry();\n                    }\n                    IOUtils.closeQuietly(zip);\n                }\n            } else {\n                log.info(\"-->>\ufffd\ufffd\ufffd\u013c\ufffd\ufffd\ufffd\u00fb\ufffd\ufffd\ufffd\u013c\ufffd\");\n            }\n        } catch (Exception e) {\n            log.error(\"\ufffd\ufffd\ufffd\ufffd\u0479\ufffd\ufffd\" + input + \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", e);\n            throw new RuntimeException(\"\ufffd\ufffd\ufffd\ufffd\u0479\ufffd\ufffd\" + input + \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", e);\n        } finally {\n            try {\n                if (null != zip) {\n                    zip.close();\n                    zip = null;\n                }\n                if (null != in) {\n                    in.close();\n                    in = null;\n                }\n            } catch (Exception e) {\n                log.error(\"\ufffd\u0631\ufffd\ufffd\u013c\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11779246",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void unzip(String input, String output) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@SuppressWarnings(\"unchecked\")\n    public static void unzip(String input, String output) {\n        try {\n            if (!output.endsWith(\"/\")) output = output + \"/\";\n            ZipFile zip = new ZipFile(input);\n            Enumeration entries = zip.entries();\n            while (entries.hasMoreElements()) {\n                ZipEntry entry = (ZipEntry) entries.nextElement();\n                if (entry.isDirectory()) {\n                    FileUtils.forceMkdir(new File(output + entry.getName()));\n                } else {\n                    FileOutputStream out = new FileOutputStream(output + entry.getName());\n                    IOUtils.copy(zip.getInputStream(entry), out);\n                    IOUtils.closeQuietly(out);\n                }\n            }\n        } catch (Exception e) {\n            log.error(\"\ufffd\ufffd\ufffd\ufffd\ufffd\u04b5\ufffd\ufffd\u013c\ufffd:\" + output, e);\n            throw new RuntimeException(\"\ufffd\ufffd\ufffd\ufffd\ufffd\u04b5\ufffd\ufffd\u013c\ufffd:\" + output, e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11787058",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException {\n        login = login.trim().toLowerCase();\n        long userId = GetterUtil.getLong(login);\n        if (authType.equals(CompanyImpl.AUTH_TYPE_EA)) {\n            if (!Validator.isEmailAddress(login)) {\n                throw new UserEmailAddressException();\n            }\n        } else if (authType.equals(CompanyImpl.AUTH_TYPE_SN)) {\n            if (Validator.isNull(login)) {\n                throw new UserScreenNameException();\n            }\n        } else if (authType.equals(CompanyImpl.AUTH_TYPE_ID)) {\n            if (Validator.isNull(login)) {\n                throw new UserIdException();\n            }\n        }\n        if (Validator.isNull(password)) {\n            throw new UserPasswordException(UserPasswordException.PASSWORD_INVALID);\n        }\n        int authResult = Authenticator.FAILURE;\n        String[] authPipelinePre = PropsUtil.getArray(PropsUtil.AUTH_PIPELINE_PRE);\n        if (authType.equals(CompanyImpl.AUTH_TYPE_EA)) {\n            authResult = AuthPipeline.authenticateByEmailAddress(authPipelinePre, companyId, login, password, headerMap, parameterMap);\n        } else if (authType.equals(CompanyImpl.AUTH_TYPE_SN)) {\n            authResult = AuthPipeline.authenticateByScreenName(authPipelinePre, companyId, login, password, headerMap, parameterMap);\n        } else if (authType.equals(CompanyImpl.AUTH_TYPE_ID)) {\n            authResult = AuthPipeline.authenticateByUserId(authPipelinePre, companyId, userId, password, headerMap, parameterMap);\n        }\n        User user = null;\n        try {\n            if (authType.equals(CompanyImpl.AUTH_TYPE_EA)) {\n                user = UserUtil.findByC_EA(companyId, login);\n            } else if (authType.equals(CompanyImpl.AUTH_TYPE_SN)) {\n                user = UserUtil.findByC_SN(companyId, login);\n            } else if (authType.equals(CompanyImpl.AUTH_TYPE_ID)) {\n                user = UserUtil.findByC_U(companyId, GetterUtil.getLong(login));\n            }\n        } catch (NoSuchUserException nsue) {\n            return Authenticator.DNE;\n        }\n        if (user.isDefaultUser()) {\n            _log.error(\"The default user should never be allowed to authenticate\");\n            return Authenticator.DNE;\n        }\n        if (!user.isPasswordEncrypted()) {\n            user.setPassword(PwdEncryptor.encrypt(user.getPassword()));\n            user.setPasswordEncrypted(true);\n            UserUtil.update(user);\n        }\n        checkLockout(user);\n        checkPasswordExpired(user);\n        if (authResult == Authenticator.SUCCESS) {\n            if (GetterUtil.getBoolean(PropsUtil.get(PropsUtil.AUTH_PIPELINE_ENABLE_LIFERAY_CHECK))) {\n                String encPwd = PwdEncryptor.encrypt(password, user.getPassword());\n                if (user.getPassword().equals(encPwd)) {\n                    authResult = Authenticator.SUCCESS;\n                } else if (GetterUtil.getBoolean(PropsUtil.get(PropsUtil.AUTH_MAC_ALLOW))) {\n                    try {\n                        MessageDigest digester = MessageDigest.getInstance(PropsUtil.get(PropsUtil.AUTH_MAC_ALGORITHM));\n                        digester.update(login.getBytes(\"UTF8\"));\n                        String shardKey = PropsUtil.get(PropsUtil.AUTH_MAC_SHARED_KEY);\n                        encPwd = Base64.encode(digester.digest(shardKey.getBytes(\"UTF8\")));\n                        if (password.equals(encPwd)) {\n                            authResult = Authenticator.SUCCESS;\n                        } else {\n                            authResult = Authenticator.FAILURE;\n                        }\n                    } catch (NoSuchAlgorithmException nsae) {\n                        throw new SystemException(nsae);\n                    } catch (UnsupportedEncodingException uee) {\n                        throw new SystemException(uee);\n                    }\n                } else {\n                    authResult = Authenticator.FAILURE;\n                }\n            }\n        }\n        if (authResult == Authenticator.SUCCESS) {\n            String[] authPipelinePost = PropsUtil.getArray(PropsUtil.AUTH_PIPELINE_POST);\n            if (authType.equals(CompanyImpl.AUTH_TYPE_EA)) {\n                authResult = AuthPipeline.authenticateByEmailAddress(authPipelinePost, companyId, login, password, headerMap, parameterMap);\n            } else if (authType.equals(CompanyImpl.AUTH_TYPE_SN)) {\n                authResult = AuthPipeline.authenticateByScreenName(authPipelinePost, companyId, login, password, headerMap, parameterMap);\n            } else if (authType.equals(CompanyImpl.AUTH_TYPE_ID)) {\n                authResult = AuthPipeline.authenticateByUserId(authPipelinePost, companyId, userId, password, headerMap, parameterMap);\n            }\n        }\n        if (authResult == Authenticator.FAILURE) {\n            try {\n                String[] authFailure = PropsUtil.getArray(PropsUtil.AUTH_FAILURE);\n                if (authType.equals(CompanyImpl.AUTH_TYPE_EA)) {\n                    AuthPipeline.onFailureByEmailAddress(authFailure, companyId, login, headerMap, parameterMap);\n                } else if (authType.equals(CompanyImpl.AUTH_TYPE_SN)) {\n                    AuthPipeline.onFailureByScreenName(authFailure, companyId, login, headerMap, parameterMap);\n                } else if (authType.equals(CompanyImpl.AUTH_TYPE_ID)) {\n                    AuthPipeline.onFailureByUserId(authFailure, companyId, userId, headerMap, parameterMap);\n                }\n                if (!PortalLDAPUtil.isPasswordPolicyEnabled(user.getCompanyId())) {\n                    PasswordPolicy passwordPolicy = user.getPasswordPolicy();\n                    int failedLoginAttempts = user.getFailedLoginAttempts();\n                    int maxFailures = passwordPolicy.getMaxFailure();\n                    if ((failedLoginAttempts >= maxFailures) && (maxFailures != 0)) {\n                        String[] authMaxFailures = PropsUtil.getArray(PropsUtil.AUTH_MAX_FAILURES);\n                        if (authType.equals(CompanyImpl.AUTH_TYPE_EA)) {\n                            AuthPipeline.onMaxFailuresByEmailAddress(authMaxFailures, companyId, login, headerMap, parameterMap);\n                        } else if (authType.equals(CompanyImpl.AUTH_TYPE_SN)) {\n                            AuthPipeline.onMaxFailuresByScreenName(authMaxFailures, companyId, login, headerMap, parameterMap);\n                        } else if (authType.equals(CompanyImpl.AUTH_TYPE_ID)) {\n                            AuthPipeline.onMaxFailuresByUserId(authMaxFailures, companyId, userId, headerMap, parameterMap);\n                        }\n                    }\n                }\n            } catch (Exception e) {\n                _log.error(e, e);\n            }\n        }\n        return authResult;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11792098",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void createNewFile(String filePath, InputStream in) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void createNewFile(String filePath, InputStream in) throws IOException {\n        FileOutputStream out = null;\n        try {\n            File file = newFileRef(filePath);\n            FileHelper.createNewFile(file, true);\n            out = new FileOutputStream(file);\n            IOUtils.copy(in, out);\n        } finally {\n            IOUtils.closeQuietly(in);\n            IOUtils.closeQuietly(out);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11793834",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void addProviders(URL url) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void addProviders(URL url) {\n        Reader reader = null;\n        Properties prop = new Properties();\n        try {\n            reader = new InputStreamReader(url.openStream());\n            prop.load(reader);\n        } catch (Throwable t) {\n        } finally {\n            if (reader != null) {\n                try {\n                    reader.close();\n                } catch (Throwable t) {\n                }\n            }\n        }\n        for (Map.Entry<Object, Object> entry : prop.entrySet()) {\n            try {\n                Class<?> cla = Class.forName((String) entry.getValue(), true, Thread.currentThread().getContextClassLoader());\n                providers.put(((String) entry.getKey()).toUpperCase(), (CharsetProvider) cla.newInstance());\n            } catch (Throwable t) {\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01179431",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private String fetchHTML(String s) {\n        String str;\n        StringBuffer sb = new StringBuffer();\n        try {\n            URL url = new URL(s);\n            InputStream is = url.openStream();\n            InputStreamReader isr = new InputStreamReader(is);\n            BufferedReader br = new BufferedReader(isr);\n            while ((str = br.readLine()) != null) {\n                sb.append(str);\n            }\n        } catch (MalformedURLException e) {\n        } catch (IOException e) {\n        }\n        return sb.toString();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11796920",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic boolean check(Object credentials) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public boolean check(Object credentials) {\n            String password = (credentials instanceof String) ? (String) credentials : credentials.toString();\n            try {\n                MessageDigest md = MessageDigest.getInstance(\"MD5\");\n                byte[] ha1;\n                if (credentials instanceof Credential.MD5) {\n                    ha1 = ((Credential.MD5) credentials).getDigest();\n                } else {\n                    md.update(username.getBytes(StringUtil.__ISO_8859_1));\n                    md.update((byte) ':');\n                    md.update(realm.getBytes(StringUtil.__ISO_8859_1));\n                    md.update((byte) ':');\n                    md.update(password.getBytes(StringUtil.__ISO_8859_1));\n                    ha1 = md.digest();\n                }\n                md.reset();\n                md.update(method.getBytes(StringUtil.__ISO_8859_1));\n                md.update((byte) ':');\n                md.update(uri.getBytes(StringUtil.__ISO_8859_1));\n                byte[] ha2 = md.digest();\n                md.update(TypeUtil.toString(ha1, 16).getBytes(StringUtil.__ISO_8859_1));\n                md.update((byte) ':');\n                md.update(nonce.getBytes(StringUtil.__ISO_8859_1));\n                md.update((byte) ':');\n                md.update(nc.getBytes(StringUtil.__ISO_8859_1));\n                md.update((byte) ':');\n                md.update(cnonce.getBytes(StringUtil.__ISO_8859_1));\n                md.update((byte) ':');\n                md.update(qop.getBytes(StringUtil.__ISO_8859_1));\n                md.update((byte) ':');\n                md.update(TypeUtil.toString(ha2, 16).getBytes(StringUtil.__ISO_8859_1));\n                byte[] digest = md.digest();\n                return (TypeUtil.toString(digest, 16).equalsIgnoreCase(response));\n            } catch (Exception e) {\n                Log.warn(e);\n            }\n            return false;\n        }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11798810",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private synchronized Document executeHttpMethod(final HttpUriRequest httpRequest) throws UnauthorizedException, ThrottledException, ApiException {\n        if (!isNextRequestAllowed()) {\n            try {\n                if (LOGGER.isDebugEnabled()) {\n                    LOGGER.debug(\"Wait \" + WAITING_TIME + \"ms for request.\");\n                }\n                wait(WAITING_TIME);\n            } catch (InterruptedException ie) {\n                throw new ApiException(\"Waiting for request interrupted.\", ie);\n            }\n        }\n        try {\n            if (LOGGER.isDebugEnabled()) {\n                LOGGER.debug(\"Perform request.\");\n            }\n            HttpResponse httpResponse = httpClient.execute(httpRequest);\n            switch(httpResponse.getStatusLine().getStatusCode()) {\n                case HTTP_OK:\n                    HttpEntity httpEntity = httpResponse.getEntity();\n                    if (httpEntity != null) {\n                        InputStream responseStream = httpEntity.getContent();\n                        if (responseStream == null) {\n                            throw new ApiException(\"TODO\");\n                        } else {\n                            String response = null;\n                            try {\n                                response = IOUtils.toString(responseStream, RESPONSE_ENCODING);\n                            } catch (IOException ioe) {\n                                throw new ApiException(\"Problem reading response\", ioe);\n                            } catch (RuntimeException re) {\n                                httpRequest.abort();\n                                throw new ApiException(\"Problem reading response\", re);\n                            } finally {\n                                responseStream.close();\n                            }\n                            StringReader responseReader = new StringReader(response);\n                            Document document = documentBuilder.parse(new InputSource(responseReader));\n                            return document;\n                        }\n                    }\n                case HTTP_UNAVAILABLE:\n                    throw new ThrottledException(\"TODO\");\n                case HTTP_UNAUTHORIZED:\n                    throw new UnauthorizedException(\"TODO\");\n                default:\n                    throw new ApiException(\"Unexpected HTTP status code: \" + httpResponse.getStatusLine().getStatusCode());\n            }\n        } catch (SAXException se) {\n            throw new ApiException(\"TODO\", se);\n        } catch (IOException ioe) {\n            throw new ApiException(\"TODO\", ioe);\n        } finally {\n            updateLastRequestTimestamp();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11799025",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic Document duplicate() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n    public Document duplicate() {\n        BinaryDocument b = new BinaryDocument(this.name, this.content.getContentType());\n        try {\n            IOUtils.copy(this.getContent().getInputStream(), this.getContent().getOutputStream());\n            return b;\n        } catch (IOException e) {\n            throw ManagedIOException.manage(e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11807467",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private File copyFromURL(URL url, String dir) throws IOException {\n        File urlFile = new File(url.getFile());\n        File dest = new File(dir, urlFile.getName());\n        logger.log(\"Extracting \" + urlFile.getName() + \" to \" + dir + \"...\");\n        FileOutputStream os = new FileOutputStream(dest);\n        InputStream is = url.openStream();\n        byte data[] = new byte[4096];\n        int ct;\n        while ((ct = is.read(data)) >= 0) os.write(data, 0, ct);\n        is.close();\n        os.close();\n        logger.log(\"ok\\n\");\n        return dest;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01180865",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void runTask(HashMap pjobParameters) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n    public void runTask(HashMap pjobParameters) throws Exception {\n        if (hasRequiredResources(isSubTask())) {\n            String lstrSource = getSourceFilename();\n            String lstrTarget = getTargetFilename();\n            if (getSourceDirectory() != null) {\n                lstrSource = getSourceDirectory() + File.separator + getSourceFilename();\n            }\n            if (getTargetDirectory() != null) {\n                lstrTarget = getTargetDirectory() + File.separator + getTargetFilename();\n            }\n            GZIPInputStream lgzipInput = new GZIPInputStream(new FileInputStream(lstrSource));\n            OutputStream lfosGUnzip = new FileOutputStream(lstrTarget);\n            byte[] buf = new byte[1024];\n            int len;\n            while ((len = lgzipInput.read(buf)) > 0) lfosGUnzip.write(buf, 0, len);\n            lgzipInput.close();\n            lfosGUnzip.close();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01180878",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static byte[] fetchURLData(String url, String proxyHost, int proxyPort) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static byte[] fetchURLData(String url, String proxyHost, int proxyPort) throws IOException {\n        HttpURLConnection con = null;\n        InputStream is = null;\n        try {\n            URL u = new URL(url);\n            if (url.startsWith(\"file://\")) {\n                is = new BufferedInputStream(u.openStream());\n            } else {\n                Proxy proxy;\n                if (proxyHost != null) {\n                    proxy = new Proxy(Type.HTTP, new InetSocketAddress(proxyHost, proxyPort));\n                } else {\n                    proxy = Proxy.NO_PROXY;\n                }\n                con = (HttpURLConnection) u.openConnection(proxy);\n                con.addRequestProperty(\"User-Agent\", \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1092.0 Safari/536.6\");\n                con.addRequestProperty(\"Accept-Charset\", \"UTF-8\");\n                con.addRequestProperty(\"Accept-Language\", \"en-US,en\");\n                con.addRequestProperty(\"Accept\", \"text/html,image/*\");\n                con.setDoInput(true);\n                con.setDoOutput(false);\n                con.connect();\n                is = new BufferedInputStream(con.getInputStream());\n            }\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            IOUtils.copy(is, baos);\n            return baos.toByteArray();\n        } finally {\n            IOUtils.closeQuietly(is);\n            if (con != null) {\n                con.disconnect();\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11810425",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static String createBoundary(int number) {\n        MessageDigest digest;\n        try {\n            digest = MessageDigest.getInstance(\"MD5\");\n        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n        }\n        digest.update(String.valueOf(Math.random()).getBytes());\n        digest.update(String.valueOf(System.currentTimeMillis()).getBytes());\n        digest.update(String.valueOf(digest.hashCode()).getBytes());\n        byte[] bytes = digest.digest();\n        String paddedNumber = Integer.toString(number);\n        paddedNumber = (\"0000000000\".substring(0, 10 - paddedNumber.length()) + paddedNumber);\n        StringBuffer buffer = new StringBuffer();\n        buffer.append(\"---------------------------------=__\");\n        for (int i = 0; i < 8; i++) {\n            String hex = Integer.toHexString((bytes[i] & 0xff) + 0x100).substring(1);\n            buffer.append(hex);\n        }\n        buffer.append('_');\n        buffer.append(paddedNumber);\n        return buffer.toString();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11817524",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void addServices(Bundle bundle) {\n        if (!resolvedBundles.containsKey(bundle)) {\n            Enumeration enumeration = bundle.findEntries(\"META-INF\", \"*services.xml\", false);\n            int i = 0;\n            List<AxisServiceGroup> axisServiceGroupList = null;\n            if (enumeration != null) {\n                axisServiceGroupList = new ArrayList<AxisServiceGroup>();\n            }\n            while (enumeration != null && enumeration.hasMoreElements()) {\n                try {\n                    URL url = (URL) enumeration.nextElement();\n                    AxisServiceGroup serviceGroup = new AxisServiceGroup(configCtx.getAxisConfiguration());\n                    serviceGroup.addParameter(\"last.updated\", bundle.getLastModified());\n                    ClassLoader loader = new BundleClassLoader(bundle, Registry.class.getClassLoader());\n                    serviceGroup.setServiceGroupClassLoader(loader);\n                    InputStream inputStream = url.openStream();\n                    DescriptionBuilder builder = new DescriptionBuilder(inputStream, configCtx);\n                    OMElement rootElement = builder.buildOM();\n                    String elementName = rootElement.getLocalName();\n                    Dictionary headers = bundle.getHeaders();\n                    String bundleSymbolicName = (String) headers.get(\"Bundle-SymbolicName\");\n                    bundleSymbolicName = bundleSymbolicName + \"_\" + i;\n                    serviceGroup.setServiceGroupName(bundleSymbolicName);\n                    HashMap wsdlServicesMap = new HashMap();\n                    if (DeploymentConstants.TAG_SERVICE.equals(elementName)) {\n                        AxisService axisService = new AxisService(bundleSymbolicName);\n                        axisService.setParent(serviceGroup);\n                        axisService.setClassLoader(loader);\n                        ServiceBuilder serviceBuilder = new OSGiServiceBuilder(configCtx, axisService);\n                        serviceBuilder.setWsdlServiceMap(wsdlServicesMap);\n                        AxisService service = serviceBuilder.populateService(rootElement);\n                        ArrayList<AxisService> serviceList = new ArrayList<AxisService>();\n                        serviceList.add(service);\n                        DeploymentEngine.addServiceGroup(serviceGroup, serviceList, null, null, configCtx.getAxisConfiguration());\n                        log.info(\"[Axis2/OSGi] Deployed axis2 service:\" + service.getName() + \" in Bundle: \" + bundle.getSymbolicName());\n                    } else if (DeploymentConstants.TAG_SERVICE_GROUP.equals(elementName)) {\n                        ServiceGroupBuilder groupBuilder = new OSGiServiceGroupBuilder(rootElement, wsdlServicesMap, configCtx);\n                        ArrayList serviceList = groupBuilder.populateServiceGroup(serviceGroup);\n                        DeploymentEngine.addServiceGroup(serviceGroup, serviceList, null, null, configCtx.getAxisConfiguration());\n                        log.info(\"[Axis2/OSGi] Deployed axis2 service group:\" + serviceGroup.getServiceGroupName() + \" in Bundle: \" + bundle.getSymbolicName());\n                    }\n                    serviceGroup.addParameter(OSGi_BUNDLE_ID, bundle.getBundleId());\n                    axisServiceGroupList.add(serviceGroup);\n                    if (unreslovedBundles.contains(bundle)) {\n                        unreslovedBundles.remove(bundle);\n                    }\n                    i++;\n                } catch (Throwable e) {\n                    String msg = \"Error while reading from the bundle\";\n                    if (e instanceof DeploymentException) {\n                        String message = e.getMessage();\n                        if (message != null && message.length() != 0) {\n                            if (message.indexOf(MODULE_NOT_FOUND_ERROR) > -1) {\n                                if (!unreslovedBundles.contains(bundle)) {\n                                    log.info(\"A service being found with unmeant module \" + \"dependency. Hence, moved it to UNRESOLVED state.\");\n                                    unreslovedBundles.add(bundle);\n                                } else {\n                                    log.info(\"A service being found in UNRESOLVED state.\");\n                                }\n                            } else {\n                                log.error(msg, e);\n                                break;\n                            }\n                        } else {\n                            log.error(msg, e);\n                            break;\n                        }\n                    } else {\n                        log.error(msg, e);\n                        break;\n                    }\n                }\n            }\n            if (axisServiceGroupList != null && axisServiceGroupList.size() > 0) {\n                resolvedBundles.put(bundle, axisServiceGroupList);\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11818436",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void zip_compressFiles() throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void zip_compressFiles() throws Exception {\n        FileInputStream in = null;\n        File f1 = new File(\"C:\\\\WINDOWS\\\\regedit.exe\");\n        File f2 = new File(\"C:\\\\WINDOWS\\\\win.ini\");\n        File file = new File(\"C:\\\\\" + NTUtil.class.getName() + \".zip\");\n        ZipOutputStream out = new ZipOutputStream(new FileOutputStream(file));\n        out.putNextEntry(new ZipEntry(\"regedit.exe\"));\n        in = new FileInputStream(f1);\n        while (in.available() > 0) {\n            out.write(in.read());\n        }\n        in.close();\n        out.closeEntry();\n        out.putNextEntry(new ZipEntry(\"win.ini\"));\n        in = new FileInputStream(f2);\n        while (in.available() > 0) {\n            out.write(in.read());\n        }\n        in.close();\n        out.closeEntry();\n        out.close();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11821056",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic Image getImage(Object element) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void constructDialogContent(Composite parent) {\n        SashForm splitter = new SashForm(parent, SWT.HORIZONTAL);\n        splitter.setLayoutData(new GridData(GridData.FILL_BOTH));\n        Group fragmentsGroup = new Group(splitter, SWT.NONE);\n        fragmentsGroup.setLayout(new GridLayout(1, false));\n        fragmentsGroup.setText(\"Result Fragments\");\n        fragmentsTable = CheckboxTableViewer.newCheckList(fragmentsGroup, SWT.NONE);\n        fragmentsTable.getTable().setLayoutData(new GridData(GridData.FILL_BOTH));\n        fragmentsTable.setContentProvider(new ArrayContentProvider());\n        fragmentsTable.setLabelProvider(new LabelProvider() {\n\n            public Image getImage(Object element) {\n                return JFaceResources.getImage(WsmoImageRegistry.INSTANCE_ICON);\n            }\n\n            public String getText(Object element) {\n                if (element == null) {\n                    return \"\";\n                }\n                if (element instanceof ProcessFragment) {\n                    ProcessFragment frag = (ProcessFragment) element;\n                    String label = (frag.getName() == null) ? \" <no-fragment-name>\" : frag.getName();\n                    if (frag.getDescription() != null) {\n                        label += \"  [\" + Utils.normalizeSpaces(frag.getDescription()) + ']';\n                    }\n                    return label;\n                }\n                return element.toString();\n            }\n        });\n        fragmentsTable.setInput(results.toArray());\n        final MenuManager menuMgr = new MenuManager();\n        menuMgr.setRemoveAllWhenShown(true);\n        menuMgr.addMenuListener(new IMenuListener() {\n\n            public void menuAboutToShow(IMenuManager mgr) {\n                if (false == GUIHelper.containsCursor(fragmentsTable.getTable())) {\n                    return;\n                }\n                if (false == fragmentsTable.getSelection().isEmpty()) {\n                    menuMgr.add(new Action(\"Edit Name\") {\n\n                        public void run() {\n                            doEditName();\n                        }\n                    });\n                    menuMgr.add(new Action(\"Edit Description\") {\n\n                        public void run() {\n                            doEditDescription();\n                        }\n                    });\n                    menuMgr.add(new Separator());\n                }\n                menuMgr.add(new Action(\"Select All\") {\n\n                    public void run() {\n                        fragmentsTable.setAllChecked(true);\n                        updateSelectionMonitor();\n                    }\n                });\n                menuMgr.add(new Separator());\n                menuMgr.add(new Action(\"Unselect All\") {\n\n                    public void run() {\n                        fragmentsTable.setAllChecked(false);\n                        updateSelectionMonitor();\n                    }\n                });\n            }\n        });\n        fragmentsTable.getTable().setMenu(menuMgr.createContextMenu(fragmentsTable.getTable()));\n        fragmentsTable.addSelectionChangedListener(new ISelectionChangedListener() {\n\n            public void selectionChanged(SelectionChangedEvent event) {\n                updatePreviewPanel((IStructuredSelection) event.getSelection());\n            }\n        });\n        new FragmentsToolTipProvider(this.fragmentsTable.getTable());\n        Group previewGroup = new Group(splitter, SWT.NONE);\n        previewGroup.setLayout(new GridLayout(1, false));\n        previewGroup.setText(\"Fragment Preview\");\n        createZoomToolbar(previewGroup);\n        previewArea = new Composite(previewGroup, SWT.BORDER);\n        previewArea.setLayoutData(new GridData(GridData.FILL_BOTH));\n        previewArea.setLayout(new GridLayout(1, false));\n        viewer = new ScrollingGraphicalViewer();\n        viewer.createControl(previewArea);\n        ScalableFreeformRootEditPart rootEditPart = new ScalableFreeformRootEditPart();\n        viewer.setRootEditPart(rootEditPart);\n        viewer.setEditPartFactory(new GraphicalPartFactory());\n        viewer.getControl().setBackground(ColorConstants.listBackground);\n        viewer.getControl().setLayoutData(new GridData(GridData.FILL_BOTH));\n        ZoomManager zoomManager = rootEditPart.getZoomManager();\n        ArrayList<String> zoomContributions = new ArrayList<String>();\n        zoomContributions.add(ZoomManager.FIT_ALL);\n        zoomContributions.add(ZoomManager.FIT_HEIGHT);\n        zoomContributions.add(ZoomManager.FIT_WIDTH);\n        zoomManager.setZoomLevelContributions(zoomContributions);\n        zoomManager.setZoomLevels(new double[] { 0.25, 0.33, 0.5, 0.75, 1.0 });\n        zoomManager.setZoom(1.0);\n        Composite businessGoalPanel = new Composite(previewGroup, SWT.NONE);\n        businessGoalPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n        businessGoalPanel.setLayout(new GridLayout(4, false));\n        Label lab = new Label(businessGoalPanel, SWT.NONE);\n        lab.setText(\"Process goal:\");\n        bpgIRI = new Text(businessGoalPanel, SWT.BORDER | SWT.READ_ONLY);\n        bpgIRI.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n        selectBpgButton = new Button(businessGoalPanel, SWT.NONE);\n        selectBpgButton.setText(\"Select\");\n        selectBpgButton.setEnabled(false);\n        selectBpgButton.addSelectionListener(new SelectionAdapter() {\n\n            public void widgetSelected(SelectionEvent s) {\n                doSelectProcessGoal();\n            }\n        });\n        clearBpgButton = new Button(businessGoalPanel, SWT.NONE);\n        clearBpgButton.setText(\"Clear\");\n        clearBpgButton.setEnabled(false);\n        clearBpgButton.addSelectionListener(new SelectionAdapter() {\n\n            public void widgetSelected(SelectionEvent s) {\n                IStructuredSelection sel = (IStructuredSelection) fragmentsTable.getSelection();\n                if (sel.isEmpty() || false == sel.getFirstElement() instanceof ProcessFragment) {\n                    return;\n                }\n                ((ProcessFragment) sel.getFirstElement()).setBusinessProcessGoal(null);\n                updatePreviewPanel(sel);\n            }\n        });\n        splitter.setWeights(new int[] { 1, 2 });\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11825739",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copyFile(String from, String to, boolean append) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copyFile(String from, String to, boolean append) throws IOException {\n        FileChannel in = new FileInputStream(from).getChannel();\n        FileChannel out = new FileOutputStream(to, append).getChannel();\n        ByteBuffer buffer = ByteBuffer.allocate(BSIZE);\n        while (in.read(buffer) != -1) {\n            buffer.flip();\n            out.write(buffer);\n            buffer.clear();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_00118288",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void fetchFile(String ID) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void fetchFile(String ID) {\n        String url = \"http://www.nal.usda.gov/cgi-bin/agricola-ind?bib=\" + ID + \"&conf=010000++++++++++++++&screen=MA\";\n        System.out.println(url);\n        try {\n            PrintWriter pw = new PrintWriter(new FileWriter(\"MARC\" + ID + \".txt\"));\n            if (!id.contains(\"MARC\" + ID + \".txt\")) {\n                id.add(\"MARC\" + ID + \".txt\");\n            }\n            in = new BufferedReader(new InputStreamReader((new URL(url)).openStream()));\n            in.readLine();\n            String inputLine, stx = \"\";\n            StringBuffer sb = new StringBuffer();\n            while ((inputLine = in.readLine()) != null) {\n                if (inputLine.startsWith(\"<TR><TD><B>\")) {\n                    String sts = (inputLine.substring(inputLine.indexOf(\"B>\") + 2, inputLine.indexOf(\"</\")));\n                    int i = 0;\n                    try {\n                        i = Integer.parseInt(sts);\n                    } catch (NumberFormatException nfe) {\n                    }\n                    if (i > 0) {\n                        stx = stx + \"\\n\" + sts + \" - \";\n                    } else {\n                        stx += sts;\n                    }\n                }\n                if (!(inputLine.startsWith(\"<\") || inputLine.startsWith(\" <\") || inputLine.startsWith(\">\"))) {\n                    String tx = inputLine.trim();\n                    stx += tx;\n                }\n            }\n            pw.println(stx);\n            pw.close();\n        } catch (Exception e) {\n            System.out.println(\"Couldn't open stream\");\n            System.out.println(e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11830587",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void afficherMetar(String oaci) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void afficherMetar(String oaci) {\n        if (oaci.length() != 4) {\n            System.out.println(\"un code METAR est compos\u00e9 de 4 caracteres\");\n        }\n        oaci.toUpperCase();\n        try {\n            URL url = new URL(\"http://weather.noaa.gov/pub/data/observations/metar/stations/\" + oaci + \".TXT\");\n            System.out.println(url.toString());\n            Proxy acReunion = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(\"proxy.ac-reunion.fr\", 8080));\n            HttpURLConnection con = (HttpURLConnection) url.openConnection(acReunion);\n            InputStreamReader isr = new InputStreamReader(con.getInputStream());\n            BufferedReader in = new BufferedReader(isr);\n            Vector vListe = new Vector();\n            String line;\n            System.out.println(\"Affichage METAR\");\n            System.out.println(\"--------\");\n            while ((line = in.readLine()) != null) {\n                System.out.println(line);\n                vListe.add(line);\n            }\n            System.out.println(\"--------\");\n            in.close();\n        } catch (java.io.FileNotFoundException e) {\n            System.out.println(\"Impossible de trouver le METAR\");\n            System.out.println(e);\n        } catch (Exception e) {\n            System.out.println(e.toString());\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11834952",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void downloadTranslationsAndReload() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void downloadTranslationsAndReload() {\n        File languages = new File(this.translationsFile);\n        try {\n            URL languageURL = new URL(languageServer);\n            InputStream is = languageURL.openStream();\n            OutputStream os = new FileOutputStream(languages);\n            byte[] read = new byte[512000];\n            int bytesRead = 0;\n            do {\n                bytesRead = is.read(read);\n                if (bytesRead > 0) {\n                    os.write(read, 0, bytesRead);\n                }\n            } while (bytesRead > 0);\n            is.close();\n            os.close();\n            this.loadTranslations();\n        } catch (Exception e) {\n            System.err.println(\"Remote languages file not found!\");\n            if (languages.exists()) {\n                try {\n                    XMLDecoder loader = new XMLDecoder(new FileInputStream(languages));\n                    this.languages = (Hashtable) loader.readObject();\n                    loader.close();\n                } catch (Exception ex) {\n                    ex.printStackTrace();\n                    this.languages.put(naiveLanguage, new Hashtable());\n                }\n            } else this.languages.put(naiveLanguage, new Hashtable());\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11838691",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void externalizeFiles(Document doc, File out) throws IOException {\n        File[] files = doc.getImages();\n        if (files.length > 0) {\n            File dir = new File(out.getParentFile(), out.getName() + \".images\");\n            if (!dir.mkdirs()) throw new IOException(\"cannot create directory \" + dir);\n            if (dir.exists()) {\n                for (int i = 0; i < files.length; i++) {\n                    File file = files[i];\n                    File copy = new File(dir, file.getName());\n                    FileChannel from = null, to = null;\n                    long count = -1;\n                    try {\n                        from = new FileInputStream(file).getChannel();\n                        count = from.size();\n                        to = new FileOutputStream(copy).getChannel();\n                        from.transferTo(0, count, to);\n                        doc.setImage(file, dir.getName() + \"/\" + copy.getName());\n                    } catch (Throwable t) {\n                        LOG.log(Level.WARNING, \"Copying '\" + file + \"' to '\" + copy + \"' failed (size=\" + count + \")\", t);\n                    } finally {\n                        try {\n                            to.close();\n                        } catch (Throwable t) {\n                        }\n                        try {\n                            from.close();\n                        } catch (Throwable t) {\n                        }\n                    }\n                }\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11840277",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "protected static void clearTables() throws SQLException {\n        Connection conn = null;\n        Statement stmt = null;\n        try {\n            conn = FidoDataSource.getConnection();\n            conn.setAutoCommit(false);\n            stmt = conn.createStatement();\n            ClearData.clearTables(stmt);\n            stmt.executeUpdate(\"delete from Objects\");\n            stmt.executeUpdate(\"insert into Objects (ObjectId, Description) values (1, 'Money value')\");\n            stmt.executeUpdate(\"insert into Objects (ObjectId, Description) values (2, 'Date')\");\n            stmt.executeUpdate(\"insert into Objects (ObjectId, Description) values (3, 'Unix path')\");\n            stmt.executeUpdate(\"insert into Objects (ObjectId, Description) values (4, 'Dos path')\");\n            stmt.executeUpdate(\"insert into Objects (ObjectId, Description) values (5, 'Time')\");\n            stmt.executeUpdate(\"insert into Objects (ObjectId, Description) values (6, 'IP address')\");\n            stmt.executeUpdate(\"insert into Objects (ObjectId, Description) values (7, 'Internet hostname')\");\n            stmt.executeUpdate(\"insert into Objects (ObjectId, Description) values (8, 'Number')\");\n            conn.commit();\n        } catch (SQLException e) {\n            if (conn != null) conn.rollback();\n            throw e;\n        } finally {\n            if (stmt != null) stmt.close();\n            if (conn != null) conn.close();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11840745",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic final void close() throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public final void close() throws IOException {\n        if (dataStream == null) throw new NullPointerException(\"Write stream is null.\");\n        dataStream.flush();\n        dataStream.close();\n        dataStream = null;\n        File tmpFile = new File(packPath + \".tmp\");\n        FileOutputStream packStream = new FileOutputStream(packPath);\n        try {\n            String nbFiles = Long.toString(currentNbFiles) + \"\\0\";\n            packStream.write(FLAT_PACK_HEADER.getBytes(Charsets.ISO_8859_1));\n            structBufferWriter.flush();\n            structBufferWriter.close();\n            int headerSize = structBuffer.size() + nbFiles.length();\n            packStream.write(Integer.toString(headerSize).getBytes(Charsets.ISO_8859_1));\n            packStream.write('\\0');\n            packStream.write(nbFiles.getBytes(Charsets.ISO_8859_1));\n            structBuffer.writeTo(packStream);\n            structBufferWriter = null;\n            structBuffer = null;\n            FileInputStream in = new FileInputStream(tmpFile);\n            try {\n                byte[] buffer = new byte[FILE_COPY_BUFFER_LEN];\n                int read;\n                while ((read = in.read(buffer)) > 0) packStream.write(buffer, 0, read);\n                packStream.flush();\n                packStream.close();\n            } finally {\n                Utilities.closeStream(in);\n            }\n        } finally {\n            Utilities.closeStream(packStream);\n        }\n        if (tmpFile.isFile()) Utilities.deleteFile(tmpFile);\n        packPath = null;\n        structBuffer = null;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11843018",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic RespID(PublicKey key) throws OCSPException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public RespID(PublicKey key) throws OCSPException {\n        try {\n            MessageDigest digest = MessageDigest.getInstance(\"SHA1\");\n            ASN1InputStream aIn = new ASN1InputStream(key.getEncoded());\n            SubjectPublicKeyInfo info = SubjectPublicKeyInfo.getInstance(aIn.readObject());\n            digest.update(info.getPublicKeyData().getBytes());\n            ASN1OctetString keyHash = new DEROctetString(digest.digest());\n            this.id = new ResponderID(keyHash);\n        } catch (Exception e) {\n            throw new OCSPException(\"problem creating ID: \" + e, e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11846837",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copyFile(File source, File destination, boolean lazy) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copyFile(File source, File destination, boolean lazy) {\n        if (!source.exists()) {\n            return;\n        }\n        if (lazy) {\n            String oldContent = null;\n            try {\n                oldContent = read(source);\n            } catch (Exception e) {\n                return;\n            }\n            String newContent = null;\n            try {\n                newContent = read(destination);\n            } catch (Exception e) {\n            }\n            if (oldContent == null || !oldContent.equals(newContent)) {\n                copyFile(source, destination, false);\n            }\n        } else {\n            if ((destination.getParentFile() != null) && (!destination.getParentFile().exists())) {\n                destination.getParentFile().mkdirs();\n            }\n            try {\n                FileChannel srcChannel = new FileInputStream(source).getChannel();\n                FileChannel dstChannel = new FileOutputStream(destination).getChannel();\n                dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n                srcChannel.close();\n                dstChannel.close();\n            } catch (IOException ioe) {\n                ioe.printStackTrace();\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11854456",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static int copy(File src, int amount, File dst) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static int copy(File src, int amount, File dst) {\n        final int BUFFER_SIZE = 1024;\n        int amountToRead = amount;\n        boolean ok = true;\n        InputStream in = null;\n        OutputStream out = null;\n        try {\n            in = new BufferedInputStream(new FileInputStream(src));\n            out = new BufferedOutputStream(new FileOutputStream(dst));\n            byte[] buf = new byte[BUFFER_SIZE];\n            while (amountToRead > 0) {\n                int read = in.read(buf, 0, Math.min(BUFFER_SIZE, amountToRead));\n                if (read == -1) break;\n                amountToRead -= read;\n                out.write(buf, 0, read);\n            }\n        } catch (IOException e) {\n        } finally {\n            if (in != null) try {\n                in.close();\n            } catch (IOException e) {\n            }\n            if (out != null) {\n                try {\n                    out.flush();\n                } catch (IOException e) {\n                }\n                try {\n                    out.close();\n                } catch (IOException e) {\n                }\n            }\n        }\n        return amount - amountToRead;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11865905",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void testRegister() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Test\n    public void testRegister() {\n        try {\n            String username = \"muchu\";\n            String password = \"123\";\n            MessageDigest md5 = MessageDigest.getInstance(\"MD5\");\n            md5.update(password.getBytes());\n            String passwordMd5 = new String(md5.digest());\n            LogService logServiceMock = EasyMock.createMock(LogService.class);\n            DbService dbServiceMock = EasyMock.createMock(DbService.class);\n            userServ.setDbServ(dbServiceMock);\n            userServ.setLogger(logServiceMock);\n            IFeelerUser user = new FeelerUserImpl();\n            user.setUsername(username);\n            user.setPassword(passwordMd5);\n            logServiceMock.info(DbUserServiceImpl.class, \">>>rigister \" + username + \"<<<\");\n            EasyMock.expect(dbServiceMock.queryFeelerUser(username)).andReturn(null);\n            dbServiceMock.addFeelerUser(username, passwordMd5);\n            logServiceMock.info(DbUserServiceImpl.class, \">>>identification \" + username + \"<<<\");\n            EasyMock.expect(dbServiceMock.queryFeelerUser(username)).andReturn(user);\n            EasyMock.replay(dbServiceMock, logServiceMock);\n            Assert.assertTrue(userServ.register(username, password));\n            EasyMock.verify(dbServiceMock, logServiceMock);\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11865906",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void testIdentification() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Test\n    public void testIdentification() {\n        try {\n            String username = \"muchu\";\n            String password = \"123\";\n            MessageDigest md5 = MessageDigest.getInstance(\"MD5\");\n            md5.update(password.getBytes());\n            LogService logServiceMock = EasyMock.createMock(LogService.class);\n            DbService dbServiceMock = EasyMock.createMock(DbService.class);\n            userServ.setDbServ(dbServiceMock);\n            userServ.setLogger(logServiceMock);\n            logServiceMock.info(DbUserServiceImpl.class, \">>>identification \" + username + \"<<<\");\n            IFeelerUser user = new FeelerUserImpl();\n            user.setUsername(username);\n            user.setPassword(new String(md5.digest()));\n            EasyMock.expect(dbServiceMock.queryFeelerUser(username)).andReturn(user);\n            EasyMock.replay(logServiceMock, dbServiceMock);\n            Assert.assertTrue(userServ.identification(username, password));\n            EasyMock.verify(logServiceMock, dbServiceMock);\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11872567",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "protected HttpResponseImpl makeRequest(final HttpMethod m, final String requestId) {\n        try {\n            HttpResponseImpl ri = new HttpResponseImpl();\n            ri.setRequestMethod(m);\n            ri.setResponseCode(_client.executeMethod(m));\n            ByteArrayOutputStream bos = new ByteArrayOutputStream();\n            IOUtils.copy(m.getResponseBodyAsStream(), bos);\n            ri.setResponseBody(bos.toByteArray());\n            notifyOfRequestSuccess(requestId, m, ri);\n            return ri;\n        } catch (HttpException ex) {\n            notifyOfRequestFailure(requestId, m, ex);\n        } catch (IOException ex) {\n            notifyOfRequestFailure(requestId, m, ex);\n        }\n        return null;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11875445",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static void loadFromZip() {\n        InputStream in = Resources.class.getResourceAsStream(\"data.zip\");\n        if (in == null) {\n            return;\n        }\n        ZipInputStream zipIn = new ZipInputStream(in);\n        try {\n            while (true) {\n                ZipEntry entry = zipIn.getNextEntry();\n                if (entry == null) {\n                    break;\n                }\n                String entryName = entry.getName();\n                if (!entryName.startsWith(\"/\")) {\n                    entryName = \"/\" + entryName;\n                }\n                ByteArrayOutputStream out = new ByteArrayOutputStream();\n                IOUtils.copy(zipIn, out);\n                zipIn.closeEntry();\n                FILES.put(entryName, out.toByteArray());\n            }\n            zipIn.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11879780",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic MD2Model loadModel(URL url, String skin) throws IOException, IncorrectFormatException, ParsingErrorException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n    public MD2Model loadModel(URL url, String skin) throws IOException, IncorrectFormatException, ParsingErrorException {\n        boolean baseURLWasNull = setBaseURLFromModelURL(url);\n        MD2Model model = loadModel(url.openStream(), skin);\n        if (baseURLWasNull) {\n            popBaseURL();\n        }\n        return (model);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01188100",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void test() throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void test() throws Exception {\n        StorageStringWriter s = new StorageStringWriter(2048, \"UTF-8\");\n        s.addText(\"Test\");\n        try {\n            s.getOutputStream();\n            fail(\"Should throw IOException as method not supported.\");\n        } catch (IOException e) {\n        }\n        s.getWriter().write(\"ing is important\");\n        s.close(ResponseStateOk.getInstance());\n        assertEquals(\"Testing is important\", s.getText());\n        InputStream input = s.getInputStream();\n        StringWriter writer = new StringWriter();\n        IOUtils.copy(input, writer, \"UTF-8\");\n        assertEquals(\"Testing is important\", writer.toString());\n        try {\n            s.getWriter();\n            fail(\"Should throw IOException as storage is closed.\");\n        } catch (IOException e) {\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01188160",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String urlContentToString(URL url, String encoding) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String urlContentToString(URL url, String encoding) throws IOException {\n        String out = \"\";\n        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream(), Constants.ENCODING));\n        String line;\n        while ((line = in.readLine()) != null) {\n            out += line;\n        }\n        in.close();\n        return out;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11892341",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static byte[] getHashValue(INewEntryDescriptor descriptor) {\n        String timeStamp = Calendar.getInstance().getTime().toString();\n        MessageDigest sha1;\n        byte[] digest = { 0 };\n        try {\n            sha1 = MessageDigest.getInstance(\"SHA-1\");\n            sha1.update(descriptor.getContactName().getBytes());\n            sha1.update(descriptor.getAlgorithmName().getBytes());\n            sha1.update(descriptor.getProvider().getBytes());\n            return digest = sha1.digest(timeStamp.getBytes());\n        } catch (NoSuchAlgorithmException e) {\n            logger.error(\"NoSuchAlgorithmException while digesting\", e);\n        }\n        return digest;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11892441",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "protected void handleUrl(URL url) throws Exception {\n        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n        String s;\n        boolean moreResults = false;\n        while ((s = in.readLine()) != null) {\n            if (s.indexOf(\"<h1>Search Results</h1>\") > -1) {\n                System.err.println(\"found severals result\");\n                moreResults = true;\n            } else if (s.indexOf(\"Download <a href=\") > -1) {\n                if (s.indexOf(\"in JCAMP-DX format.\") > -1) {\n                    System.err.println(\"download masspec\");\n                    super.handleUrl(new URL((url.getProtocol() + \"://\" + url.getHost() + s.substring(s.indexOf(\"\\\"\") + 1, s.lastIndexOf(\"\\\"\"))).replaceAll(\"amp;\", \"\")));\n                }\n                moreResults = false;\n            }\n            if (moreResults == true) {\n                if (s.indexOf(\"<li><a href=\\\"/cgi/cbook.cgi?ID\") > -1) {\n                    System.err.println(\"\\tdownloading new url \" + new URL((url.getProtocol() + \"://\" + url.getHost() + s.substring(s.indexOf(\"\\\"\") + 1, s.lastIndexOf(\"\\\"\"))).replaceAll(\"amp;\", \"\")));\n                    this.handleUrl(new URL((url.getProtocol() + \"://\" + url.getHost() + s.substring(s.indexOf(\"\\\"\") + 1, s.lastIndexOf(\"\\\"\"))).replaceAll(\"amp;\", \"\")));\n                }\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11892804",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private int[] Tri(int[] pertinence, int taille) {\n        boolean change = true;\n        int tmp;\n        while (change) {\n            change = false;\n            for (int i = 0; i < taille - 2; i++) {\n                if (pertinence[i] < pertinence[i + 1]) {\n                    tmp = pertinence[i];\n                    pertinence[i] = pertinence[i + 1];\n                    pertinence[i + 1] = tmp;\n                    change = true;\n                }\n            }\n        }\n        return pertinence;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11893997",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private String digestPassword(String password) {\n        StringBuffer hexString = new StringBuffer();\n        try {\n            MessageDigest algorithm = MessageDigest.getInstance(\"MD5\");\n            algorithm.reset();\n            algorithm.update(password.getBytes());\n            byte[] messageDigest = algorithm.digest();\n            for (byte b : messageDigest) {\n                hexString.append(Integer.toHexString(0xFF & b));\n            }\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n        return hexString.toString();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01189509",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void testRoundTrip_1(String resource) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void testRoundTrip_1(String resource) throws Exception {\n        long start1 = System.currentTimeMillis();\n        File originalFile = File.createTempFile(\"RoundTripTest\", \"testRoundTrip_1\");\n        FileOutputStream fos = new FileOutputStream(originalFile);\n        IOUtils.copy(getClass().getResourceAsStream(resource), fos);\n        fos.close();\n        long start2 = System.currentTimeMillis();\n        IsoFile isoFile = new IsoFile(new FileInputStream(originalFile).getChannel());\n        long start3 = System.currentTimeMillis();\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        WritableByteChannel wbc = Channels.newChannel(baos);\n        long start4 = System.currentTimeMillis();\n        Walk.through(isoFile);\n        long start5 = System.currentTimeMillis();\n        isoFile.getBox(wbc);\n        wbc.close();\n        long start6 = System.currentTimeMillis();\n        System.err.println(\"Preparing tmp copy took: \" + (start2 - start1) + \"ms\");\n        System.err.println(\"Parsing took           : \" + (start3 - start2) + \"ms\");\n        System.err.println(\"Writing took           : \" + (start6 - start3) + \"ms\");\n        System.err.println(\"Walking took           : \" + (start5 - start4) + \"ms\");\n        byte[] a = IOUtils.toByteArray(getClass().getResourceAsStream(resource));\n        byte[] b = baos.toByteArray();\n        Assert.assertArrayEquals(a, b);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11896430",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "protected InputStream createIconType(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {\n        JavaliController.debug(JavaliController.LG_VERBOSE, \"Creating iconType\");\n        String cHash = PRM_TYPE + \"=\" + TP_ICON;\n        String iconName = req.getParameter(\"iconName\");\n        if (iconName == null) {\n            res.sendError(res.SC_NOT_FOUND);\n            return null;\n        }\n        Locale loc = null;\n        HttpSession sess = req.getSession(false);\n        JavaliSession jsess = null;\n        int menuType = -1;\n        String menuTypeString = req.getParameter(PRM_MENU_TYPE);\n        try {\n            menuType = new Integer(menuTypeString).intValue();\n        } catch (Exception e) {\n        }\n        if (sess != null) jsess = (JavaliSession) sess.getAttribute(FormConstants.SESSION_BINDING);\n        if (jsess != null && jsess.getUser() != null) loc = jsess.getUser().getLocale(); else if (sess != null) loc = (Locale) sess.getAttribute(FormConstants.LOCALE_BINDING);\n        if (loc == null) loc = Locale.getDefault();\n        if (menuType == -1) menuType = MENU_TYPE_TEXTICON;\n        String iconText = JavaliResource.getString(\"icon.\" + iconName, loc);\n        if (iconText == null) {\n            iconText = req.getParameter(PRM_MENU_NAME);\n            if (iconText == null) iconText = \"\";\n        }\n        cHash += \", \" + PRM_ICON_NAME + \"=\" + iconName + \", text=\" + iconText + \", menuType=\" + menuType;\n        String iconFileName = null;\n        String fontName = req.getParameter(PRM_FONT_NAME);\n        if (fontName == null) {\n            fontName = \"Helvetica\";\n        }\n        cHash += \",\" + PRM_FONT_NAME + \"=\" + fontName;\n        String fontSizeString = req.getParameter(PRM_FONT_SIZE);\n        int fontSize;\n        try {\n            fontSize = Integer.parseInt(fontSizeString);\n        } catch (NumberFormatException nfe) {\n            fontSize = 12;\n        }\n        cHash += \",\" + PRM_FONT_SIZE + \"=\" + fontSize;\n        String fontTypeString = req.getParameter(PRM_FONT_TYPE);\n        int fontType = Font.BOLD;\n        if (\"PLAIN\".equalsIgnoreCase(fontTypeString)) fontType = Font.PLAIN;\n        if (\"BOLD\".equalsIgnoreCase(fontTypeString)) fontType = Font.BOLD;\n        if (\"ITALIC\".equalsIgnoreCase(fontTypeString)) fontType = Font.ITALIC;\n        if (\"ITALICBOLD\".equalsIgnoreCase(fontTypeString) || \"BOLDITALIC\".equalsIgnoreCase(fontTypeString) || \"BOLD_ITALIC\".equalsIgnoreCase(fontTypeString) || \"ITALIC_BOLD\".equalsIgnoreCase(fontTypeString)) {\n            fontType = Font.ITALIC | Font.BOLD;\n        }\n        cHash += \",\" + PRM_FONT_TYPE + \"=\" + fontType;\n        String fontColor = req.getParameter(PRM_FONT_COLOR);\n        if (fontColor == null || fontColor.equals(\"\")) fontColor = \"0x000000\";\n        cHash += \",\" + PRM_FONT_COLOR + \"=\" + fontColor;\n        String fName = cacheInfo.file(cHash);\n        JavaliController.debug(JavaliController.LG_VERBOSE, \"Called for: \" + fName);\n        if (fName == null) {\n            JavaliController.debug(JavaliController.LG_VERBOSE, \"No cache found for: \" + cHash);\n            if (getServletConfig() != null && getServletConfig().getServletContext() != null) {\n                if (iconName != null && iconName.startsWith(\"/\")) iconFileName = getServletConfig().getServletContext().getRealPath(iconName + \".gif\"); else iconFileName = getServletConfig().getServletContext().getRealPath(\"/icons/\" + iconName + \".gif\");\n                File iconFile = new File(iconFileName);\n                if (!iconFile.exists()) {\n                    JavaliController.debug(JavaliController.LG_VERBOSE, \"Could not find: \" + iconFileName);\n                    res.sendError(res.SC_NOT_FOUND);\n                    return null;\n                }\n                iconFileName = iconFile.getAbsolutePath();\n                JavaliController.debug(JavaliController.LG_VERBOSE, \"file: \" + iconFileName + \" and cHash=\" + cHash);\n            } else {\n                JavaliController.debug(JavaliController.LG_VERBOSE, \"No ServletConfig=\" + getServletConfig() + \" or servletContext\");\n                res.sendError(res.SC_NOT_FOUND);\n                return null;\n            }\n            File tmp = File.createTempFile(PREFIX, SUFIX, cacheDir);\n            OutputStream out = new FileOutputStream(tmp);\n            if (menuType == MENU_TYPE_ICON) {\n                FileInputStream in = new FileInputStream(iconFileName);\n                byte buf[] = new byte[2048];\n                int read = -1;\n                while ((read = in.read(buf)) != -1) out.write(buf, 0, read);\n            } else if (menuType == MENU_TYPE_TEXT) MessageImage.sendAsGIF(MessageImage.makeMessageImage(iconText, fontName, fontSize, fontType, fontColor, false, \"0x000000\", true), out); else MessageImage.sendAsGIF(MessageImage.makeIconImage(iconFileName, iconText, fontName, fontColor, fontSize, fontType), out);\n            out.close();\n            cacheInfo.putFile(cHash, tmp);\n            fName = cacheInfo.file(cHash);\n        }\n        return new FileInputStream(new File(cacheDir, fName));\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11902597",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void main(String[] args) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void main(String[] args) {\n        System.out.println(\"Start filtering zgps...\");\n        final Config config = Gbl.createConfig(args);\n        final String CONFIG_MODULE = \"GPSFilterZGPS\";\n        File sourceFileSelectedStages = new File(config.findParam(CONFIG_MODULE, \"sourceFileSelectedStages\"));\n        File sourceFileZGPS = new File(config.findParam(CONFIG_MODULE, \"sourceFileZGPS\"));\n        File targetFile = new File(config.findParam(CONFIG_MODULE, \"targetFile\"));\n        System.out.println(\"Start reading selected stages...\");\n        FilterZGPSSelectedStages selectedStages = new FilterZGPSSelectedStages();\n        selectedStages.createSelectedStages(sourceFileSelectedStages);\n        System.out.println(\"Done. \" + selectedStages.getSelectedStages().size() + \" stages were stored\");\n        System.out.println(\"Start reading and writing zgps...\");\n        try {\n            BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(sourceFileZGPS)));\n            BufferedWriter out = new BufferedWriter(new FileWriter(targetFile));\n            out.write(in.readLine());\n            out.newLine();\n            String lineFromInputFile;\n            while ((lineFromInputFile = in.readLine()) != null) {\n                String[] entries = lineFromInputFile.split(\"\\t\");\n                if (selectedStages.containsStage(Integer.parseInt(entries[0]), Integer.parseInt(entries[1]), Integer.parseInt(entries[2]))) {\n                    out.write(lineFromInputFile);\n                    out.newLine();\n                    out.flush();\n                }\n            }\n            in.close();\n            out.close();\n        } catch (FileNotFoundException e) {\n            System.out.println(\"Could not find source file for selected stages.\");\n            e.printStackTrace();\n        } catch (IOException e) {\n            System.out.println(\"IO Exception while reading or writing zgps.\");\n            e.printStackTrace();\n        }\n        System.out.println(\"Done.\");\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11903969",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private ShaderProgram loadShaderProgram() {\n        ShaderProgram sp = null;\n        String vertexProgram = null;\n        String fragmentProgram = null;\n        Shader[] shaders = new Shader[2];\n        try {\n            ClassLoader cl = this.getClass().getClassLoader();\n            URL url = cl.getResource(\"Shaders/simple.vert\");\n            System.out.println(\"url \" + url);\n            InputStream inputSteam = cl.getResourceAsStream(\"Shaders/simple.vert\");\n            Reader reader = null;\n            if (inputSteam != null) {\n                reader = new InputStreamReader(inputSteam);\n            } else {\n                File file = new File(\"lib\");\n                URL url2 = new URL(\"jar:file:\" + file.getAbsolutePath() + \"/j3d-vrml97-i3mainz.jar!/Shaders/simple.vert\");\n                InputStream inputSteam2 = url2.openStream();\n                reader = new InputStreamReader(inputSteam2);\n            }\n            char[] buffer = new char[10000];\n            int len = reader.read(buffer);\n            vertexProgram = new String(buffer);\n            vertexProgram = vertexProgram.substring(0, len);\n        } catch (Exception e) {\n            System.err.println(\"could'nt load simple.vert\");\n            e.printStackTrace();\n        }\n        try {\n            ClassLoader cl = this.getClass().getClassLoader();\n            URL url = cl.getResource(\"Shaders/simple.frag\");\n            System.out.println(\"url \" + url);\n            InputStream inputSteam = cl.getResourceAsStream(\"Shaders/simple.frag\");\n            Reader reader = null;\n            if (inputSteam != null) {\n                reader = new InputStreamReader(inputSteam);\n            } else {\n                File file = new File(\"lib\");\n                URL url2 = new URL(\"jar:file:\" + file.getAbsolutePath() + \"/j3d-vrml97-i3mainz.jar!/Shaders/simple.frag\");\n                InputStream inputSteam2 = url2.openStream();\n                reader = new InputStreamReader(inputSteam2);\n            }\n            char[] buffer = new char[10000];\n            int len = reader.read(buffer);\n            fragmentProgram = new String(buffer);\n            fragmentProgram = fragmentProgram.substring(0, len);\n        } catch (Exception e) {\n            System.err.println(\"could'nt load simple.frag\");\n            e.printStackTrace();\n        }\n        if (vertexProgram != null && fragmentProgram != null) {\n            shaders[0] = new SourceCodeShader(Shader.SHADING_LANGUAGE_GLSL, Shader.SHADER_TYPE_VERTEX, vertexProgram);\n            shaders[1] = new SourceCodeShader(Shader.SHADING_LANGUAGE_GLSL, Shader.SHADER_TYPE_FRAGMENT, fragmentProgram);\n            sp = new GLSLShaderProgram();\n            sp.setShaders(shaders);\n        }\n        return sp;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11904056",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void convertEncoding(File infile, File outfile, String from, String to) throws IOException, UnsupportedEncodingException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void convertEncoding(File infile, File outfile, String from, String to) throws IOException, UnsupportedEncodingException {\n        InputStream in;\n        if (infile != null) in = new FileInputStream(infile); else in = System.in;\n        OutputStream out;\n        outfile.createNewFile();\n        if (outfile != null) out = new FileOutputStream(outfile); else out = System.out;\n        if (from == null) from = System.getProperty(\"file.encoding\");\n        if (to == null) to = \"Unicode\";\n        Reader r = new BufferedReader(new InputStreamReader(in, from));\n        Writer w = new BufferedWriter(new OutputStreamWriter(out, to));\n        char[] buffer = new char[4096];\n        int len;\n        while ((len = r.read(buffer)) != -1) w.write(buffer, 0, len);\n        r.close();\n        w.close();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11904774",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void testFileSystem() throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void testFileSystem() throws IOException {\n        Fragment f = Fragment.EMPTY;\n        Fragment g = f.plus(System.getProperty(\"java.io.tmpdir\"));\n        Fragment h = f.plus(\"april\", \"1971\", \"data.txt\");\n        Fragment i = f.plus(g, h);\n        InOutLocation iol = locs.fs.plus(i);\n        PrintStream ps = new PrintStream(iol.openOutput());\n        List<String> expected = new ArrayList<String>();\n        expected.add(\"So I am stepping out this old brown shoe\");\n        expected.add(\"Maybe I'm in love with you\");\n        for (String s : expected) ps.println(s);\n        ps.close();\n        InLocation inRoot = locs.fs;\n        List<String> lst = read(inRoot.plus(i).openInput());\n        assertEquals(expected, lst);\n        URL url = iol.toUrl();\n        lst = read(url.openStream());\n        assertEquals(expected, lst);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11907560",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String hash(String text) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String hash(String text) {\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n            md.update(text.getBytes());\n            byte[] digest = md.digest();\n            StringBuffer sb = new StringBuffer(digest.length * 2);\n            for (int i = 0; i < digest.length; ++i) {\n                byte b = digest[i];\n                int high = (b & 0xF0) >> 4;\n                int low = b & 0xF;\n                sb.append(DECIMAL_HEX[high]);\n                sb.append(DECIMAL_HEX[low]);\n            }\n            return sb.toString();\n        } catch (NoSuchAlgorithmException e) {\n            throw new NonBusinessException(\"Error hashing string\", e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01190846",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private HttpURLConnection connect() throws MalformedURLException, IOException {\n        HttpURLConnection connection = null;\n        if (repositoryLocation == null) {\n            Utils.debug(\"RemoteRepository\", \"repository Location unspecified\");\n            return null;\n        }\n        URL url = new URL(repositoryLocation);\n        connection = (HttpURLConnection) url.openConnection();\n        return connection;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11910132",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static byte[] calcMd5(String pass) {\n        try {\n            MessageDigest digest = java.security.MessageDigest.getInstance(\"MD5\");\n            digest.update(pass.getBytes(), 0, pass.length());\n            byte[] hash = digest.digest();\n            return hash;\n        } catch (NoSuchAlgorithmException e) {\n            System.err.println(\"No MD5 algorithm found\");\n            System.exit(1);\n        }\n        return null;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11915880",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static void cut() {\n        File inputFile = new File(inputFileName);\n        BufferedReader in = null;\n        try {\n            in = new BufferedReader(new InputStreamReader(new FileInputStream(inputFile), inputCharSet));\n        } catch (FileNotFoundException e) {\n            System.err.print(\"Invalid File Name!\");\n            System.err.flush();\n            System.exit(1);\n        } catch (UnsupportedEncodingException e) {\n            System.err.print(\"Invalid Char Set Name!\");\n            System.err.flush();\n            System.exit(1);\n        }\n        switch(cutMode) {\n            case charMode:\n                {\n                    int outputFileIndex = 1;\n                    char[] readBuf = new char[charPerFile];\n                    while (true) {\n                        int readCount = 0;\n                        try {\n                            readCount = in.read(readBuf);\n                        } catch (IOException e) {\n                            System.err.println(\"Read IO Error!\");\n                            System.err.flush();\n                            System.exit(1);\n                        }\n                        if (-1 == readCount) break; else {\n                            try {\n                                int ppos = inputFileName.lastIndexOf(\".\");\n                                String prefixInputFileName = inputFileName.substring(0, ppos);\n                                String postfixInputFileName = \"html\";\n                                DecimalFormat outputFileIndexFormat = new DecimalFormat(\"0000\");\n                                File outputFile = new File(prefixInputFileName + \"-\" + outputFileIndexFormat.format(outputFileIndex) + \".\" + postfixInputFileName);\n                                BufferedWriter out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(outputFile), outputCharSet));\n                                out.write(readBuf, 0, readCount);\n                                out.flush();\n                                out.close();\n                                outputFileIndex++;\n                            } catch (IOException e) {\n                                System.err.println(\"Write IO Error!\");\n                                System.err.flush();\n                                System.exit(1);\n                            }\n                        }\n                    }\n                    break;\n                }\n            case lineMode:\n                {\n                    boolean isFileEnd = false;\n                    int outputFileIndex = 1;\n                    while (!isFileEnd) {\n                        try {\n                            int ppos = inputFileName.lastIndexOf(\".\");\n                            String prefixInputFileName = inputFileName.substring(0, ppos);\n                            String postfixInputFileName = inputFileName.substring(ppos + 1);\n                            DecimalFormat outputFileIndexFormat = new DecimalFormat(\"0000\");\n                            File outputFile = new File(prefixInputFileName + outputFileIndexFormat.format(outputFileIndex) + \".\" + postfixInputFileName);\n                            PrintStream out = new PrintStream(new FileOutputStream(outputFile), false, outputCharSet);\n                            int p = 0;\n                            while (p < linePerFile) {\n                                String line = in.readLine();\n                                if (null == line) {\n                                    isFileEnd = true;\n                                    break;\n                                }\n                                out.println(line);\n                                ++p;\n                            }\n                            out.flush();\n                            out.close();\n                        } catch (IOException e) {\n                            System.err.println(\"Write IO Error!\");\n                            System.err.flush();\n                            System.exit(1);\n                        }\n                        ++outputFileIndex;\n                    }\n                    break;\n                }\n            case htmlMode:\n                {\n                    boolean isFileEnd = false;\n                    int outputFileIndex = 1;\n                    int ppos = inputFileName.lastIndexOf(\".\");\n                    String prefixInputFileName = inputFileName.substring(0, ppos);\n                    String postfixInputFileName = \"html\";\n                    DecimalFormat df = new DecimalFormat(\"0000\");\n                    while (!isFileEnd) {\n                        try {\n                            File outputFile = new File(prefixInputFileName + \"-\" + df.format(outputFileIndex) + \".\" + postfixInputFileName);\n                            PrintStream out = new PrintStream(new FileOutputStream(outputFile), false, outputCharSet);\n                            out.println(\"<html><head><title>\" + prefixInputFileName + \"-\" + df.format(outputFileIndex) + \"</title>\" + \"<meta http-equiv=\\\"Content-Type\\\"\" + \" content=\\\"text/html; \" + \"charset=\" + outputCharSet + \"\\\" />\" + \"<link rel =\\\"stylesheet\\\" \" + \"type=\\\"text/css\\\" \" + \"href=\\\"stylesheet.css\\\" />\" + \"</head><body><div id=\\\"content\\\">\");\n                            int p = 0;\n                            while (p < pPerFile) {\n                                String line = in.readLine();\n                                if (null == line) {\n                                    isFileEnd = true;\n                                    break;\n                                }\n                                if (line.length() > 0) out.println(\"<p>\" + line + \"</p>\");\n                                ++p;\n                            }\n                            out.println(\"</div><a href=\\\"\" + prefixInputFileName + \"-\" + df.format(outputFileIndex + 1) + \".\" + postfixInputFileName + \"\\\">NEXT</a></body></html>\");\n                            out.flush();\n                            out.close();\n                        } catch (IOException e) {\n                            System.err.println(\"Write IO Error!\");\n                            System.err.flush();\n                            System.exit(1);\n                        }\n                        ++outputFileIndex;\n                    }\n                    try {\n                        File indexFile = new File(\"index.html\");\n                        PrintStream out = new PrintStream(new FileOutputStream(indexFile), false, outputCharSet);\n                        out.println(\"<html><head><title>\" + \"Index\" + \"</title>\" + \"<meta http-equiv=\\\"Content-Type\\\"\" + \" content=\\\"text/html; \" + \"charset=\" + outputCharSet + \"\\\" />\" + \"<link rel =\\\"stylesheet\\\" \" + \"type=\\\"text/css\\\" \" + \"href=\\\"stylesheet.css\\\" />\" + \"</head><body><h2>\" + htmlTitle + \"</h2><div id=\\\"content\\\"><ul>\");\n                        for (int i = 1; i < outputFileIndex; i++) {\n                            out.println(\"<li><a href=\\\"\" + prefixInputFileName + \"-\" + df.format(i) + \".\" + postfixInputFileName + \"\\\">\" + df.format(i) + \"</a></li>\");\n                        }\n                        out.println(\"</ul></body></html>\");\n                        out.flush();\n                        out.close();\n                    } catch (IOException e) {\n                        System.err.println(\"Write IO Error!\");\n                        System.err.flush();\n                        System.exit(1);\n                    }\n                    break;\n                }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11917163",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void addConfigurationResource(final String fileName, NotFoundPolicy notFoundPolicy) {\n        try {\n            final ClassLoader cl = this.getClass().getClassLoader();\n            final Properties p = new Properties();\n            final URL url = cl.getResource(fileName);\n            if (url == null) {\n                throw new NakedObjectException(\"Failed to load configuration resource: \" + fileName);\n            }\n            p.load(url.openStream());\n            LOG.info(\"configuration resource \" + fileName + \" loaded\");\n            configuration.add(p);\n        } catch (final Exception e) {\n            if (notFoundPolicy == NotFoundPolicy.FAIL_FAST) {\n                throw new NakedObjectException(e);\n            }\n            LOG.info(\"configuration resource \" + fileName + \" not found, but not needed\");\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11918313",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic String[] retrieveFasta(String id) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public String[] retrieveFasta(String id) throws Exception {\n        URL url = new URL(\"http://www.ebi.ac.uk/ena/data/view/\" + id + \"&display=fasta\");\n        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\n        String header = reader.readLine();\n        StringBuffer seq = new StringBuffer();\n        String line = \"\";\n        while ((line = reader.readLine()) != null) {\n            seq.append(line);\n        }\n        reader.close();\n        return new String[] { header, seq.toString() };\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11918338",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic FTPClient connect(String host, String userId, String password, String alias) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public FTPClient connect(String host, String userId, String password, String alias) throws IOException {\n        FTPClient client = null;\n        if (connections.get(alias) != null) {\n            client = (FTPClient) connections.get(alias);\n            if (client.isConnected() == false) {\n                client.connect(host);\n            }\n        } else {\n            client = new FTPClient();\n            client.connect(host);\n            client.login(userId, password);\n            connections.put(alias, client);\n        }\n        return client;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11919249",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "protected void doGet(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException {\n        Session session = HibernateUtil.getInstance().getSession();\n        response.setBufferSize(65536);\n        ServletOutputStream outStream = response.getOutputStream();\n        File file = null;\n        FileData fileData = null;\n        try {\n            String fileParameter = request.getParameter(\"file\");\n            String disposition = request.getParameter(\"disposition\");\n            if (fileParameter == null || fileParameter.equals(\"\")) {\n                String pi = request.getPathInfo();\n                int lastSlashIndex = pi.lastIndexOf(\"/\") + 1;\n                fileParameter = pi.substring(lastSlashIndex, pi.indexOf(\"_\", pi.lastIndexOf(\"/\")));\n            }\n            if (fileParameter == null || fileParameter.equals(\"\")) {\n                response.sendError(HttpServletResponse.SC_BAD_REQUEST);\n                response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n                response.flushBuffer();\n                Logger.log(\"file parameter not specified\");\n                return;\n            }\n            if (disposition == null || disposition.equals(\"\")) {\n                String pi = request.getPathInfo();\n                String filename = pi.substring(pi.lastIndexOf(\"/\") + 1);\n                int underscoreIndex = filename.indexOf(\"_\") + 1;\n                disposition = filename.substring(underscoreIndex, filename.indexOf(\"_\", underscoreIndex));\n            }\n            file = (File) session.load(File.class, new Long(fileParameter));\n            Logger.log(\"Content requested=\" + file.getName() + \":\" + fileParameter + \" Referral: \" + request.getParameter(\"referer\"));\n            long ifModifiedSince = request.getDateHeader(\"If-Modified-Since\");\n            long fileDate = file.getLastModifiedDate() - (file.getLastModifiedDate() % 1000);\n            if (fileDate <= ifModifiedSince) {\n                response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n                if (\"attachment\".equals(disposition)) {\n                    response.setHeader(\"Content-Disposition\", \"attachment; filename=\\\"\" + file.getName() + \"\\\"\");\n                } else {\n                    response.setHeader(\"Content-Disposition\", \"inline; filename=\\\"\" + file.getName() + \"\\\"\");\n                }\n                response.setContentType(file.getContentType());\n                response.setHeader(\"Content-Description\", file.getName());\n                response.setDateHeader(\"Last-Modified\", file.getLastModifiedDate());\n                response.setDateHeader(\"Expires\", System.currentTimeMillis() + 31536000000L);\n                response.setContentLength((int) file.getSize());\n                response.flushBuffer();\n                Logger.log(\"Conditional GET: \" + file.getName());\n                return;\n            }\n            User authUser = baseService.getAuthenticatedUser(session, request, response);\n            if (!SecurityHelper.doesUserHavePermission(session, authUser, file, Permission.PERM.READ)) {\n                response.sendError(HttpServletResponse.SC_FORBIDDEN, \"Forbidden\");\n                response.setStatus(HttpServletResponse.SC_FORBIDDEN);\n                response.flushBuffer();\n                Logger.log(\"Forbidden content requested: \" + fileParameter);\n                return;\n            }\n            String contentType = file.getContentType();\n            response.setContentType(contentType);\n            if (\"attachment\".equals(disposition)) {\n                response.setHeader(\"Content-Disposition\", \"attachment; filename=\\\"\" + file.getName() + \"\\\"\");\n            } else {\n                response.setHeader(\"Content-Disposition\", \"inline; filename=\\\"\" + file.getName() + \"\\\"\");\n            }\n            String name = file.getName();\n            response.setHeader(\"Content-Description\", name);\n            response.setDateHeader(\"Last-Modified\", file.getLastModifiedDate());\n            response.setDateHeader(\"Expires\", System.currentTimeMillis() + 31536000000L);\n            response.setContentLength((int) file.getSize());\n            java.io.File possibleDataFile = new java.io.File(BaseSystem.getTempDir() + file.getNameOnDisk());\n            if (possibleDataFile.exists()) {\n                Logger.log(\"File exists in \" + BaseSystem.getTempDir() + \" pulling \" + possibleDataFile.getName());\n                FileInputStream fileInputStream = new FileInputStream(possibleDataFile);\n                try {\n                    IOUtils.copy(fileInputStream, outStream);\n                } finally {\n                    try {\n                        fileInputStream.close();\n                    } catch (Throwable t) {\n                    }\n                }\n            } else {\n                List<FileData> fileDataList = HibernateUtil.getInstance().executeQuery(session, \"from \" + FileData.class.getSimpleName() + \" where permissibleObject.id = \" + file.getId());\n                if (fileDataList.size() == 0) {\n                    response.sendError(HttpServletResponse.SC_NOT_FOUND);\n                    response.setStatus(HttpServletResponse.SC_NOT_FOUND);\n                    Logger.log(\"Requested content not found: \" + fileParameter);\n                    response.flushBuffer();\n                    return;\n                }\n                fileData = (FileData) fileDataList.get(0);\n                FileOutputStream fileOutputStream = null;\n                try {\n                    java.io.File tmpDir = new java.io.File(BaseSystem.getTempDir());\n                    tmpDir.mkdirs();\n                    fileOutputStream = new FileOutputStream(possibleDataFile);\n                    IOUtils.write(fileData.getData(), fileOutputStream);\n                } catch (Throwable t) {\n                    Logger.log(t);\n                } finally {\n                    try {\n                        fileOutputStream.close();\n                    } catch (Throwable t) {\n                    }\n                }\n                IOUtils.write(fileData.getData(), outStream);\n            }\n        } catch (Throwable t) {\n            Logger.log(t);\n            try {\n                response.sendError(HttpServletResponse.SC_NOT_FOUND);\n                response.setStatus(HttpServletResponse.SC_NOT_FOUND);\n                response.flushBuffer();\n            } catch (Throwable tt) {\n            }\n            try {\n                response.reset();\n                response.resetBuffer();\n            } catch (Throwable tt) {\n            }\n        } finally {\n            file = null;\n            fileData = null;\n            try {\n                outStream.flush();\n            } catch (Throwable t) {\n            }\n            try {\n                outStream.close();\n            } catch (Throwable t) {\n            }\n            try {\n                session.close();\n            } catch (Throwable t) {\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11922877",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void chooseGame(DefaultHttpClient httpclient) throws IOException, ClientProtocolException {\n        HttpGet httpget = new HttpGet(Constants.STRATEGICDOMINATION_URL + \"/gameboard.cgi?gameid=\" + 1687);\n        HttpResponse response = httpclient.execute(httpget);\n        HttpEntity entity = response.getEntity();\n        System.out.println(\"cg form get: \" + response.getStatusLine());\n        if (entity != null) {\n            InputStream inStream = entity.getContent();\n            IOUtils.copy(inStream, System.out);\n        }\n        System.out.println(\"cg set of cookies:\");\n        List<Cookie> cookies = httpclient.getCookieStore().getCookies();\n        if (cookies.isEmpty()) {\n            System.out.println(\"None\");\n        } else {\n            for (int i = 0; i < cookies.size(); i++) {\n                System.out.println(\"- \" + cookies.get(i).toString());\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11923843",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic String getLastVersion() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public String getLastVersion() {\n        try {\n            String server = icescrum2Properties.get(\"check.url\").toString();\n            Boolean useProxy = new Boolean(icescrum2Properties.get(\"proxy.active\").toString());\n            Boolean authProxy = new Boolean(icescrum2Properties.get(\"proxy.auth.active\").toString());\n            URL url = new URL(server);\n            if (useProxy) {\n                String proxy = icescrum2Properties.get(\"proxy.url\").toString();\n                String port = icescrum2Properties.get(\"proxy.port\").toString();\n                Properties systemProperties = System.getProperties();\n                systemProperties.setProperty(\"http.proxyHost\", proxy);\n                systemProperties.setProperty(\"http.proxyPort\", port);\n            }\n            URLConnection connection = url.openConnection();\n            if (authProxy) {\n                String username = icescrum2Properties.get(\"proxy.auth.username\").toString();\n                String password = icescrum2Properties.get(\"proxy.auth.password\").toString();\n                String login = username + \":\" + password;\n                String encodedLogin = Base64.base64Encode(login);\n                connection.setRequestProperty(\"Proxy-Authorization\", \"Basic \" + encodedLogin);\n            }\n            connection.setConnectTimeout(Integer.parseInt(icescrum2Properties.get(\"check.timeout\").toString()));\n            InputStream input = connection.getInputStream();\n            StringWriter writer = new StringWriter();\n            InputStreamReader streamReader = new InputStreamReader(input);\n            BufferedReader buffer = new BufferedReader(streamReader);\n            String value = \"\";\n            while (null != (value = buffer.readLine())) {\n                writer.write(value);\n            }\n            return writer.toString();\n        } catch (IOException e) {\n        }\n        return null;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_00119263",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void convert(File src, File dest) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void convert(File src, File dest) throws IOException {\n        InputStream in = new BufferedInputStream(new FileInputStream(src));\n        DcmParser p = pfact.newDcmParser(in);\n        Dataset ds = fact.newDataset();\n        p.setDcmHandler(ds.getDcmHandler());\n        try {\n            FileFormat format = p.detectFileFormat();\n            if (format != FileFormat.ACRNEMA_STREAM) {\n                System.out.println(\"\\n\" + src + \": not an ACRNEMA stream!\");\n                return;\n            }\n            p.parseDcmFile(format, Tags.PixelData);\n            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n                System.out.println(\"\\n\" + src + \": contains UIDs!\" + \" => probable already DICOM - do not convert\");\n                return;\n            }\n            boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n            int pxlen = p.getReadLength();\n            if (hasPixelData) {\n                if (inflate) {\n                    ds.putUS(Tags.BitsAllocated, 16);\n                    pxlen = pxlen * 4 / 3;\n                }\n                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n                    System.out.println(\"\\n\" + src + \": mismatch pixel data length!\" + \" => do not convert\");\n                    return;\n                }\n            }\n            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n            ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n            ds.putUI(Tags.SOPClassUID, classUID);\n            if (!ds.contains(Tags.NumberOfSamples)) {\n                ds.putUS(Tags.NumberOfSamples, 1);\n            }\n            if (!ds.contains(Tags.PhotometricInterpretation)) {\n                ds.putCS(Tags.PhotometricInterpretation, \"MONOCHROME2\");\n            }\n            if (fmi) {\n                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n            }\n            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n            try {\n            } finally {\n                ds.writeFile(out, encodeParam());\n                if (hasPixelData) {\n                    if (!skipGroupLen) {\n                        out.write(PXDATA_GROUPLEN);\n                        int grlen = pxlen + 8;\n                        out.write((byte) grlen);\n                        out.write((byte) (grlen >> 8));\n                        out.write((byte) (grlen >> 16));\n                        out.write((byte) (grlen >> 24));\n                    }\n                    out.write(PXDATA_TAG);\n                    out.write((byte) pxlen);\n                    out.write((byte) (pxlen >> 8));\n                    out.write((byte) (pxlen >> 16));\n                    out.write((byte) (pxlen >> 24));\n                }\n                if (inflate) {\n                    int b2, b3;\n                    for (; pxlen > 0; pxlen -= 3) {\n                        out.write(in.read());\n                        b2 = in.read();\n                        b3 = in.read();\n                        out.write(b2 & 0x0f);\n                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n                        out.write(b3 >> 4);\n                    }\n                } else {\n                    for (; pxlen > 0; --pxlen) {\n                        out.write(in.read());\n                    }\n                }\n                out.close();\n            }\n            System.out.print('.');\n        } finally {\n            in.close();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11929030",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic T_Result unmarshall(URL url) throws SAXException, ParserConfigurationException, IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public T_Result unmarshall(URL url) throws SAXException, ParserConfigurationException, IOException {\n        XMLReader parser = getParserFactory().newSAXParser().getXMLReader();\n        parser.setContentHandler(getContentHandler());\n        parser.setDTDHandler(getContentHandler());\n        parser.setEntityResolver(getContentHandler());\n        parser.setErrorHandler(getContentHandler());\n        InputSource inputSource = new InputSource(url.openStream());\n        inputSource.setSystemId(url.toString());\n        parser.parse(inputSource);\n        return contentHandler.getRootObject();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11930427",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static String getServiceResponse(final String requestName, final Template template, final Map variables) {\n        OutputStreamWriter outputWriter = null;\n        try {\n            final StringWriter writer = new StringWriter();\n            final VelocityContext context = new VelocityContext(variables);\n            template.merge(context, writer);\n            final String request = writer.toString();\n            final URLConnection urlConnection = new URL(SERVICE_URL).openConnection();\n            urlConnection.setUseCaches(false);\n            urlConnection.setDoOutput(true);\n            urlConnection.setRequestProperty(\"User-Agent\", \"Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.2b4) Gecko/20091124 Firefox/3.6b4\");\n            urlConnection.setRequestProperty(\"Accept\", \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\");\n            urlConnection.setRequestProperty(\"Accept-Language\", \"en-us,en;q=0.5\");\n            urlConnection.setRequestProperty(\"Accept-Charset\", \"ISO-8859-1,utf-8;q=0.7,*;q=0.7\");\n            urlConnection.setRequestProperty(\"Accept-Encoding\", \"gzip,deflate\");\n            urlConnection.setRequestProperty(\"Keep-Alive\", \"115\");\n            urlConnection.setRequestProperty(\"Connection\", \"keep-alive\");\n            urlConnection.setRequestProperty(\"Content-Type\", \"text/xml; charset=utf-8\");\n            urlConnection.setRequestProperty(\"Content-Length\", \"\" + request.length());\n            urlConnection.setRequestProperty(\"SOAPAction\", requestName);\n            outputWriter = new OutputStreamWriter(urlConnection.getOutputStream(), \"UTF-8\");\n            outputWriter.write(request);\n            outputWriter.flush();\n            final InputStream result = urlConnection.getInputStream();\n            return IOUtils.toString(result);\n        } catch (Exception ex) {\n            throw new RuntimeException(ex);\n        } finally {\n            if (outputWriter != null) {\n                try {\n                    outputWriter.close();\n                } catch (IOException logOrIgnore) {\n                }\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11933797",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void CopyFile(String in, String out) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void CopyFile(String in, String out) throws Exception {\n        FileChannel sourceChannel = new FileInputStream(new File(in)).getChannel();\n        FileChannel destinationChannel = new FileOutputStream(new File(out)).getChannel();\n        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\n        sourceChannel.close();\n        destinationChannel.close();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11939185",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String getMD5(String password) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String getMD5(String password) {\n        MessageDigest md5;\n        try {\n            md5 = MessageDigest.getInstance(\"MD5\");\n            md5.update(password.getBytes());\n            String pwd = new BigInteger(1, md5.digest()).toString(16);\n            return pwd;\n        } catch (Exception e) {\n            logger.error(e.getMessage());\n        }\n        return password;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11939522",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String[] bubbleSort(String[] unsortedString, boolean ascending) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String[] bubbleSort(String[] unsortedString, boolean ascending) {\n        if (unsortedString.length < 2) return unsortedString;\n        String[] sortedString = new String[unsortedString.length];\n        for (int i = 0; i < unsortedString.length; i++) {\n            sortedString[i] = unsortedString[i];\n        }\n        if (ascending) {\n            for (int i = 0; i < sortedString.length - 1; i++) {\n                for (int j = 1; j < sortedString.length - 1 - i; j++) if (sortedString[j + 1].compareToIgnoreCase(sortedString[j]) < 0) {\n                    String swap = sortedString[j];\n                    sortedString[j] = sortedString[j + 1];\n                    sortedString[j + 1] = swap;\n                }\n            }\n        } else {\n            for (int i = sortedString.length - 2; i >= 0; i--) {\n                for (int j = sortedString.length - 2 - i; j >= 0; j--) if (sortedString[j + 1].compareToIgnoreCase(sortedString[j]) > 0) {\n                    String swap = sortedString[j];\n                    sortedString[j] = sortedString[j + 1];\n                    sortedString[j + 1] = swap;\n                }\n            }\n        }\n        return sortedString;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11940679",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic ActionForward uploadFile(ActionMapping mapping, ActionForm actForm, HttpServletRequest request, HttpServletResponse in_response) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public ActionForward uploadFile(ActionMapping mapping, ActionForm actForm, HttpServletRequest request, HttpServletResponse in_response) {\n        ActionMessages errors = new ActionMessages();\n        ActionMessages messages = new ActionMessages();\n        String returnPage = \"submitPocketSampleInformationPage\";\n        UploadForm form = (UploadForm) actForm;\n        Integer shippingId = null;\n        try {\n            eHTPXXLSParser parser = new eHTPXXLSParser();\n            String proposalCode;\n            String proposalNumber;\n            String proposalName;\n            String uploadedFileName;\n            String realXLSPath;\n            if (request != null) {\n                proposalCode = (String) request.getSession().getAttribute(Constants.PROPOSAL_CODE);\n                proposalNumber = String.valueOf(request.getSession().getAttribute(Constants.PROPOSAL_NUMBER));\n                proposalName = proposalCode + proposalNumber.toString();\n                uploadedFileName = form.getRequestFile().getFileName();\n                String fileName = proposalName + \"_\" + uploadedFileName;\n                realXLSPath = request.getRealPath(\"\\\\tmp\\\\\") + \"\\\\\" + fileName;\n                FormFile f = form.getRequestFile();\n                InputStream in = f.getInputStream();\n                File outputFile = new File(realXLSPath);\n                if (outputFile.exists()) outputFile.delete();\n                FileOutputStream out = new FileOutputStream(outputFile);\n                while (in.available() != 0) {\n                    out.write(in.read());\n                    out.flush();\n                }\n                out.flush();\n                out.close();\n            } else {\n                proposalCode = \"ehtpx\";\n                proposalNumber = \"1\";\n                proposalName = proposalCode + proposalNumber.toString();\n                uploadedFileName = \"ispyb-template41.xls\";\n                realXLSPath = \"D:\\\\\" + uploadedFileName;\n            }\n            FileInputStream inFile = new FileInputStream(realXLSPath);\n            parser.retrieveShippingId(realXLSPath);\n            shippingId = parser.getShippingId();\n            String requestShippingId = form.getShippingId();\n            if (requestShippingId != null && !requestShippingId.equals(\"\")) {\n                shippingId = new Integer(requestShippingId);\n            }\n            ClientLogger.getInstance().debug(\"uploadFile for shippingId \" + shippingId);\n            if (shippingId != null) {\n                Log.debug(\" ---[uploadFile] Upload for Existing Shipment (DewarTRacking): Deleting Samples from Shipment :\");\n                double nbSamplesContainers = DBAccess_EJB.DeleteAllSamplesAndContainersForShipping(shippingId);\n                if (nbSamplesContainers > 0) parser.getValidationWarnings().add(new XlsUploadException(\"Shipment contained Samples and/or Containers\", \"Previous Samples and/or Containers have been deleted and replaced by new ones.\")); else parser.getValidationWarnings().add(new XlsUploadException(\"Shipment contained no Samples and no Containers\", \"Samples and Containers have been added.\"));\n            }\n            Hashtable<String, Hashtable<String, Integer>> listProteinAcronym_SampleName = new Hashtable<String, Hashtable<String, Integer>>();\n            ProposalFacadeLocal proposal = ProposalFacadeUtil.getLocalHome().create();\n            ProteinFacadeLocal protein = ProteinFacadeUtil.getLocalHome().create();\n            CrystalFacadeLocal crystal = CrystalFacadeUtil.getLocalHome().create();\n            ProposalLightValue targetProposal = (ProposalLightValue) (((ArrayList) proposal.findByCodeAndNumber(proposalCode, new Integer(proposalNumber))).get(0));\n            ArrayList listProteins = (ArrayList) protein.findByProposalId(targetProposal.getProposalId());\n            for (int p = 0; p < listProteins.size(); p++) {\n                ProteinValue prot = (ProteinValue) listProteins.get(p);\n                Hashtable<String, Integer> listSampleName = new Hashtable<String, Integer>();\n                CrystalLightValue listCrystals[] = prot.getCrystals();\n                for (int c = 0; c < listCrystals.length; c++) {\n                    CrystalLightValue _xtal = (CrystalLightValue) listCrystals[c];\n                    CrystalValue xtal = crystal.findByPrimaryKey(_xtal.getPrimaryKey());\n                    BlsampleLightValue listSamples[] = xtal.getBlsamples();\n                    for (int s = 0; s < listSamples.length; s++) {\n                        BlsampleLightValue sample = listSamples[s];\n                        listSampleName.put(sample.getName(), sample.getBlSampleId());\n                    }\n                }\n                listProteinAcronym_SampleName.put(prot.getAcronym(), listSampleName);\n            }\n            parser.validate(inFile, listProteinAcronym_SampleName, targetProposal.getProposalId());\n            List listErrors = parser.getValidationErrors();\n            List listWarnings = parser.getValidationWarnings();\n            if (listErrors.size() == 0) {\n                parser.open(realXLSPath);\n                if (parser.getCrystals().size() == 0) {\n                    parser.getValidationErrors().add(new XlsUploadException(\"No crystals have been found\", \"Empty shipment\"));\n                }\n            }\n            Iterator errIt = listErrors.iterator();\n            while (errIt.hasNext()) {\n                XlsUploadException xlsEx = (XlsUploadException) errIt.next();\n                errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"message.free\", xlsEx.getMessage() + \" ---> \" + xlsEx.getSuggestedFix()));\n            }\n            try {\n                saveErrors(request, errors);\n            } catch (Exception e) {\n            }\n            Iterator warnIt = listWarnings.iterator();\n            while (warnIt.hasNext()) {\n                XlsUploadException xlsEx = (XlsUploadException) warnIt.next();\n                messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"message.free\", xlsEx.getMessage() + \" ---> \" + xlsEx.getSuggestedFix()));\n            }\n            try {\n                saveMessages(request, messages);\n            } catch (Exception e) {\n            }\n            if (listErrors.size() > 0) {\n                resetCounts(shippingId);\n                return mapping.findForward(\"submitPocketSampleInformationPage\");\n            }\n            if (listWarnings.size() > 0) returnPage = \"submitPocketSampleInformationPage\";\n            String crystalDetailsXML;\n            XtalDetails xtalDetailsWebService = new XtalDetails();\n            CrystalDetailsBuilder cDE = new CrystalDetailsBuilder();\n            CrystalDetailsElement cd = cDE.createCrystalDetailsElement(proposalName, parser.getCrystals());\n            cDE.validateJAXBObject(cd);\n            crystalDetailsXML = cDE.marshallJaxBObjToString(cd);\n            xtalDetailsWebService.submitCrystalDetails(crystalDetailsXML);\n            String diffractionPlan;\n            DiffractionPlan diffractionPlanWebService = new DiffractionPlan();\n            DiffractionPlanBuilder dPB = new DiffractionPlanBuilder();\n            Iterator it = parser.getDiffractionPlans().iterator();\n            while (it.hasNext()) {\n                DiffractionPlanElement dpe = (DiffractionPlanElement) it.next();\n                dpe.setProjectUUID(proposalName);\n                diffractionPlan = dPB.marshallJaxBObjToString(dpe);\n                diffractionPlanWebService.submitDiffractionPlan(diffractionPlan);\n            }\n            String crystalShipping;\n            Shipping shippingWebService = new Shipping();\n            CrystalShippingBuilder cSB = new CrystalShippingBuilder();\n            Person person = cSB.createPerson(\"XLS Upload\", null, \"ISPyB\", null, null, \"ISPyB\", null, \"ispyb@esrf.fr\", \"0000\", \"0000\", null, null);\n            Laboratory laboratory = cSB.createLaboratory(\"Generic Laboratory\", \"ISPyB Lab\", \"Sandwich\", \"Somewhere\", \"UK\", \"ISPyB\", \"ispyb.esrf.fr\", person);\n            DeliveryAgent deliveryAgent = parser.getDeliveryAgent();\n            CrystalShipping cs = cSB.createCrystalShipping(proposalName, laboratory, deliveryAgent, parser.getDewars());\n            String shippingName;\n            shippingName = uploadedFileName.substring(0, ((uploadedFileName.toLowerCase().lastIndexOf(\".xls\")) > 0) ? uploadedFileName.toLowerCase().lastIndexOf(\".xls\") : 0);\n            if (shippingName.equalsIgnoreCase(\"\")) shippingName = uploadedFileName.substring(0, ((uploadedFileName.toLowerCase().lastIndexOf(\".xlt\")) > 0) ? uploadedFileName.toLowerCase().lastIndexOf(\".xlt\") : 0);\n            cs.setName(shippingName);\n            crystalShipping = cSB.marshallJaxBObjToString(cs);\n            shippingWebService.submitCrystalShipping(crystalShipping, (ArrayList) parser.getDiffractionPlans(), shippingId);\n            ServerLogger.Log4Stat(\"XLS_UPLOAD\", proposalName, uploadedFileName);\n        } catch (XlsUploadException e) {\n            resetCounts(shippingId);\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.detail\", e.getMessage()));\n            ClientLogger.getInstance().error(e.toString());\n            saveErrors(request, errors);\n            return mapping.findForward(\"error\");\n        } catch (Exception e) {\n            resetCounts(shippingId);\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.detail\", e.toString()));\n            ClientLogger.getInstance().error(e.toString());\n            e.printStackTrace();\n            saveErrors(request, errors);\n            return mapping.findForward(\"error\");\n        }\n        setCounts(shippingId);\n        return mapping.findForward(returnPage);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11941001",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static void insertFiles(Connection con, File file) throws IOException {\n        BufferedReader bf = new BufferedReader(new FileReader(file));\n        String line = bf.readLine();\n        while (line != null) {\n            if (!line.startsWith(\" \") && !line.startsWith(\"#\")) {\n                try {\n                    System.out.println(\"Exec: \" + line);\n                    PreparedStatement prep = con.prepareStatement(line);\n                    prep.executeUpdate();\n                    prep.close();\n                    con.commit();\n                } catch (Exception e) {\n                    e.printStackTrace();\n                    try {\n                        con.rollback();\n                    } catch (SQLException e1) {\n                        e1.printStackTrace();\n                    }\n                }\n            }\n            line = bf.readLine();\n        }\n        bf.close();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11941957",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "String openUrlAsString(String address, int maxLines) {\n        StringBuffer sb;\n        try {\n            URL url = new URL(address);\n            InputStream in = url.openStream();\n            BufferedReader br = new BufferedReader(new InputStreamReader(in));\n            sb = new StringBuffer();\n            int count = 0;\n            String line;\n            while ((line = br.readLine()) != null && count++ < maxLines) sb.append(line + \"\\n\");\n            in.close();\n        } catch (IOException e) {\n            sb = null;\n        }\n        return sb != null ? new String(sb) : null;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11941960",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "String[] openUrlAsList(String address) {\n        IJ.showStatus(\"Connecting to \" + IJ.URL);\n        Vector v = new Vector();\n        try {\n            URL url = new URL(address);\n            InputStream in = url.openStream();\n            BufferedReader br = new BufferedReader(new InputStreamReader(in));\n            String line;\n            while (true) {\n                line = br.readLine();\n                if (line == null) break;\n                if (!line.equals(\"\")) v.addElement(line);\n            }\n            br.close();\n        } catch (Exception e) {\n        }\n        String[] lines = new String[v.size()];\n        v.copyInto((String[]) lines);\n        IJ.showStatus(\"\");\n        return lines;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11946782",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void addIntegrityEnforcements(Session session) throws HibernateException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void addIntegrityEnforcements(Session session) throws HibernateException {\n        Transaction tx = null;\n        try {\n            tx = session.beginTransaction();\n            Statement st = session.connection().createStatement();\n            st.executeUpdate(\"DROP TABLE hresperformsrole;\" + \"CREATE TABLE hresperformsrole\" + \"(\" + \"hresid varchar(255) NOT NULL,\" + \"rolename varchar(255) NOT NULL,\" + \"CONSTRAINT hresperformsrole_pkey PRIMARY KEY (hresid, rolename),\" + \"CONSTRAINT ResourceFK FOREIGN KEY (hresid) REFERENCES resserposid (id) ON UPDATE CASCADE ON DELETE CASCADE,\" + \"CONSTRAINT RoleFK FOREIGN KEY (rolename) REFERENCES role (rolename) ON UPDATE CASCADE ON DELETE CASCADE\" + \");\");\n            tx.commit();\n        } catch (Exception e) {\n            tx.rollback();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11952110",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "protected RemoteInputStream getUrlResource(URL url) throws IOException {\n        URLConnection conn = url.openConnection();\n        conn.setConnectTimeout(url_loading_time_out);\n        conn.setReadTimeout(url_loading_time_out);\n        conn.setRequestProperty(\"connection\", \"Keep-Alive\");\n        conn.connect();\n        long last_modify_time = conn.getLastModified();\n        IOCacheService cache_service = CIO.getAppBridge().getIO().getCache();\n        if (cache_service != null) {\n            RemoteInputStream cache = cache_service.findCache(url, last_modify_time);\n            if (cache != null) {\n                return cache;\n            }\n        }\n        return new URLConnectionInputStream(url, conn);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11952735",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static boolean copyFile(String sourceName, String destName) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static boolean copyFile(String sourceName, String destName) {\n        FileChannel sourceChannel = null;\n        FileChannel destChannel = null;\n        boolean wasOk = false;\n        try {\n            sourceChannel = new FileInputStream(sourceName).getChannel();\n            destChannel = new FileOutputStream(destName).getChannel();\n            destChannel.transferFrom(sourceChannel, 0, sourceChannel.size());\n            wasOk = true;\n        } catch (Throwable exception) {\n            logger.log(Level.SEVERE, \"Exception in copyFile\", exception);\n        } finally {\n            try {\n                if (sourceChannel != null) sourceChannel.close();\n            } catch (Throwable tt) {\n            }\n            try {\n                if (destChannel != null) destChannel.close();\n            } catch (Throwable tt) {\n            }\n        }\n        return wasOk;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11953289",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static String hashPass(String p) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        MessageDigest md;\n        md = MessageDigest.getInstance(\"SHA-1\");\n        byte[] sha1hash = new byte[40];\n        md.update(p.getBytes(\"iso-8859-1\"), 0, p.length());\n        sha1hash = md.digest();\n        return convertToHex(sha1hash);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11957386",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void send() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n    public void send() {\n        BufferedReader in = null;\n        StringBuffer result = new StringBuffer();\n        try {\n            URL url = new URL(getUrl());\n            in = new BufferedReader(new InputStreamReader(url.openStream()));\n            String str;\n            while ((str = in.readLine()) != null) {\n                result.append(str);\n            }\n        } catch (ConnectException ce) {\n            logger.error(\"MockupExecutableCommand excute fail: \" + ce.getMessage());\n        } catch (Exception e) {\n            logger.error(\"MockupExecutableCommand excute fail: \" + e.getMessage());\n        } finally {\n            if (in != null) {\n                try {\n                    in.close();\n                } catch (IOException e) {\n                    logger.error(\"BufferedReader could not be closed\", e);\n                }\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11958349",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void makeLPKFile(String[] srcFilePath, String makeFilePath, LPKHeader header) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void makeLPKFile(String[] srcFilePath, String makeFilePath, LPKHeader header) {\n        FileOutputStream os = null;\n        DataOutputStream dos = null;\n        try {\n            LPKTable[] fileTable = new LPKTable[srcFilePath.length];\n            long fileOffset = outputOffset(header);\n            for (int i = 0; i < srcFilePath.length; i++) {\n                String sourceFileName = FileUtils.getFileName(srcFilePath[i]);\n                long sourceFileSize = FileUtils.getFileSize(srcFilePath[i]);\n                LPKTable ft = makeLPKTable(sourceFileName, sourceFileSize, fileOffset);\n                fileOffset = outputNextOffset(sourceFileSize, fileOffset);\n                fileTable[i] = ft;\n            }\n            File file = new File(makeFilePath);\n            if (!file.exists()) {\n                FileUtils.makedirs(file);\n            }\n            os = new FileOutputStream(file);\n            dos = new DataOutputStream(os);\n            dos.writeInt(header.getPAKIdentity());\n            writeByteArray(header.getPassword(), dos);\n            dos.writeFloat(header.getVersion());\n            dos.writeLong(header.getTables());\n            for (int i = 0; i < fileTable.length; i++) {\n                writeByteArray(fileTable[i].getFileName(), dos);\n                dos.writeLong(fileTable[i].getFileSize());\n                dos.writeLong(fileTable[i].getOffSet());\n            }\n            for (int i = 0; i < fileTable.length; i++) {\n                File ftFile = new File(srcFilePath[i]);\n                FileInputStream ftFis = new FileInputStream(ftFile);\n                DataInputStream ftDis = new DataInputStream(ftFis);\n                byte[] buff = new byte[256];\n                int readLength = 0;\n                while ((readLength = ftDis.read(buff)) != -1) {\n                    makeBuffer(buff, readLength);\n                    dos.write(buff, 0, readLength);\n                }\n                ftDis.close();\n                ftFis.close();\n            }\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        } finally {\n            if (dos != null) {\n                try {\n                    dos.close();\n                    dos = null;\n                } catch (IOException e) {\n                }\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11959071",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private String download(MacroManagerProgress progress, String fileName, String url) throws Exception {\n            URLConnection conn = new URL(url).openConnection();\n            progress.setMaximum(Math.max(0, conn.getContentLength()));\n            String path = MiscUtilities.constructPath(installDirectory, fileName);\n            if (!copy(progress, conn.getInputStream(), new FileOutputStream(path), true, true)) return null;\n            if (archive_zip) {\n                Enumeration entries;\n                ZipFile zipFile;\n                try {\n                    File tempFile = new File(path);\n                    zipFile = new ZipFile(tempFile);\n                    entries = zipFile.entries();\n                    while (entries.hasMoreElements()) {\n                        ZipEntry entry = (ZipEntry) entries.nextElement();\n                        if (entry.isDirectory()) {\n                            String dpath = MiscUtilities.constructPath(installDirectory, entry.getName());\n                            (new File(dpath)).mkdir();\n                            continue;\n                        }\n                        progress.setMaximum((int) entry.getSize());\n                        String ePath = MiscUtilities.constructPath(installDirectory, entry.getName());\n                        copy(progress, zipFile.getInputStream(entry), new BufferedOutputStream(new FileOutputStream(ePath)), true, true);\n                    }\n                    zipFile.close();\n                    tempFile.delete();\n                } catch (IOException ioe) {\n                    ioe.printStackTrace();\n                }\n            } else if (archive_gzip) {\n                File srce = new File(path);\n                GZIPInputStream gzis = new GZIPInputStream(new FileInputStream(srce));\n                File temp = File.createTempFile(\"macro\", \"mgr\");\n                progress.setMaximum((int) srce.length());\n                copy(progress, gzis, new BufferedOutputStream(new FileOutputStream(temp)), true, true);\n                TarArchive tarc = new TarArchive(new FileInputStream(temp));\n                tarc.extractContents(new File(installDirectory));\n                tarc.closeArchive();\n                (new File(path)).delete();\n            }\n            return path;\n        }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11961013",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static Builder fromURL(URL url) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static Builder fromURL(URL url) {\n        try {\n            InputStream in = null;\n            try {\n                in = url.openStream();\n                ByteArrayOutputStream baos = new ByteArrayOutputStream();\n                int read = -1;\n                byte[] buf = new byte[4096];\n                while ((read = in.read(buf)) >= 0) {\n                    if (read > 0) {\n                        baos.write(buf, 0, read);\n                    }\n                }\n                StreamBuilder b = (StreamBuilder) fromMemory(baos.toByteArray());\n                try {\n                    b.setSystemId(url.toURI().toString());\n                } catch (URISyntaxException use) {\n                    b.setSystemId(url.toString());\n                }\n                return b;\n            } finally {\n                if (in != null) {\n                    in.close();\n                }\n            }\n        } catch (IOException ex) {\n            throw new XMLUnitException(ex);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11962480",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void read(String skeletonFilename) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void read(String skeletonFilename) throws Exception {\n        ClassLoader loader = UnicodePropertiesSkeleton.class.getClassLoader();\n        URL url = loader.getResource(skeletonFilename);\n        if (null == url) {\n            throw new Exception(\"Cannot locate '\" + skeletonFilename + \"' - aborting.\");\n        }\n        String line;\n        StringBuilder section = new StringBuilder();\n        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream(), \"UTF-8\"));\n        while (null != (line = reader.readLine())) {\n            if (line.startsWith(\"---\")) {\n                sections.add(section.toString());\n                section.setLength(0);\n            } else {\n                section.append(line);\n                section.append(NL);\n            }\n        }\n        if (section.length() > 0) {\n            sections.add(section.toString());\n        }\n        if (sections.size() != size) {\n            throw new Exception(\"Skeleton file '\" + skeletonFilename + \"' has \" + sections.size() + \" static sections, but \" + size + \" were expected.\");\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11965514",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void checkRoundtrip(byte[] content) throws Exception {\n        InputStream in = new ByteArrayInputStream(content);\n        ByteArrayOutputStream out = new ByteArrayOutputStream();\n        CodecUtil.encodeQuotedPrintable(in, out);\n        in = new QuotedPrintableInputStream(new ByteArrayInputStream(out.toByteArray()));\n        out = new ByteArrayOutputStream();\n        IOUtils.copy(in, out);\n        assertEquals(content, out.toByteArray());\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11968328",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String getMD5(String _pwd) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String getMD5(String _pwd) {\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            md.update(_pwd.getBytes());\n            return toHexadecimal(new String(md.digest()).getBytes());\n        } catch (NoSuchAlgorithmException x) {\n            x.printStackTrace();\n            return \"\";\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11969981",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String readRss(String feed, int num) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String readRss(String feed, int num) {\n        InputStream stream = null;\n        try {\n            feed = appendParam(feed, \"num\", \"\" + num);\n            System.out.println(\"feed=\" + feed);\n            URL url = new URL(feed);\n            URLConnection connection = url.openConnection();\n            connection.setRequestProperty(\"User-Agent\", RSS_USER_AGENT);\n            stream = connection.getInputStream();\n            return CFileHelper.readInputStream(stream);\n        } catch (Exception e) {\n            throw new CException(e);\n        } finally {\n            CFileHelper.closeStream(stream);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11970147",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic String httpToStringStupid(String url) throws IllegalStateException, IOException, HttpException, InterruptedException, URISyntaxException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public String httpToStringStupid(String url) throws IllegalStateException, IOException, HttpException, InterruptedException, URISyntaxException {\n        LOG.info(\"Loading URL: \" + url);\n        String pageDump = null;\n        getParams().setParameter(ClientPNames.COOKIE_POLICY, org.apache.http.client.params.CookiePolicy.BROWSER_COMPATIBILITY);\n        getParams().setParameter(HttpConnectionParams.SO_TIMEOUT, getSocketTimeout());\n        HttpGet httpget = new HttpGet(url);\n        httpget.getParams().setParameter(HttpConnectionParams.SO_TIMEOUT, getSocketTimeout());\n        HttpResponse response = execute(httpget);\n        HttpEntity entity = response.getEntity();\n        pageDump = IOUtils.toString(entity.getContent(), \"UTF-8\");\n        return pageDump;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11971638",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void btnOkActionPerformed(java.awt.event.ActionEvent evt) {\n        if (validateData()) {\n            LoginUser me = AdministrationPanelView.getMe();\n            Connection dbConnection = null;\n            try {\n                DriverManager.registerDriver(new com.mysql.jdbc.Driver());\n                dbConnection = DriverManager.getConnection(me.getSqlReportsURL(), me.getSqlReportsUser(), me.getSqlReportsPassword());\n                dbConnection.setAutoCommit(false);\n                dbConnection.setSavepoint();\n                String sql = \"INSERT INTO campaigns (type, name, dateCreated, createdBy) VALUES (?, ?, ?, ?)\";\n                PreparedStatement statement = dbConnection.prepareStatement(sql);\n                statement.setByte(1, (optTypeAgents.isSelected()) ? CampaignStatics.CAMP_TYPE_AGENT : CampaignStatics.CAMP_TYPE_IVR);\n                statement.setString(2, txtCampaignName.getText());\n                statement.setTimestamp(3, new Timestamp(Calendar.getInstance().getTime().getTime()));\n                statement.setLong(4, me.getId());\n                statement.executeUpdate();\n                ResultSet rs = statement.getGeneratedKeys();\n                rs.next();\n                long campaignId = rs.getLong(1);\n                sql = \"INSERT INTO usercampaigns (userid, campaignid, role) VALUES (?, ?, ?)\";\n                statement = dbConnection.prepareStatement(sql);\n                statement.setLong(1, me.getId());\n                statement.setLong(2, campaignId);\n                statement.setString(3, \"admin\");\n                statement.executeUpdate();\n                dbConnection.commit();\n                dbConnection.close();\n                CampaignAdmin ca = new CampaignAdmin();\n                ca.setCampaign(txtCampaignName.getText());\n                ca.setVisible(true);\n                dispose();\n            } catch (SQLException ex) {\n                try {\n                    dbConnection.rollback();\n                } catch (SQLException ex1) {\n                    Logger.getLogger(Logger.GLOBAL_LOGGER_NAME).log(Level.SEVERE, null, ex1);\n                }\n                JOptionPane.showMessageDialog(this.getRootPane(), ex.getLocalizedMessage(), \"Error\", JOptionPane.ERROR_MESSAGE);\n                Logger.getLogger(Logger.GLOBAL_LOGGER_NAME).log(Level.SEVERE, null, ex);\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01197703",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String digest(String algorithm, String text) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String digest(String algorithm, String text) {\n        MessageDigest mDigest = null;\n        try {\n            mDigest = MessageDigest.getInstance(algorithm);\n            mDigest.update(text.getBytes(ENCODING));\n        } catch (NoSuchAlgorithmException nsae) {\n            _log.error(nsae, nsae);\n        } catch (UnsupportedEncodingException uee) {\n            _log.error(uee, uee);\n        }\n        byte[] raw = mDigest.digest();\n        BASE64Encoder encoder = new BASE64Encoder();\n        return encoder.encode(raw);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11980724",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "protected IRunnableWithProgress getProjectCreationRunnable() {\n        return new IRunnableWithProgress() {\n\n            public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {\n                int remainingWorkUnits = 10;\n                monitor.beginTask(\"New Modulo Project Creation\", remainingWorkUnits);\n                IWorkspace ws = ResourcesPlugin.getWorkspace();\n                newProject = fMainPage.getProjectHandle();\n                IProjectDescription description = ws.newProjectDescription(newProject.getName());\n                String[] natures = { JavaCore.NATURE_ID, ModuloLauncherPlugin.NATURE_ID };\n                description.setNatureIds(natures);\n                ICommand command = description.newCommand();\n                command.setBuilderName(JavaCore.BUILDER_ID);\n                ICommand[] commands = { command };\n                description.setBuildSpec(commands);\n                IJavaProject jproject = JavaCore.create(newProject);\n                ModuloProject modProj = new ModuloProject();\n                modProj.setJavaProject(jproject);\n                try {\n                    newProject.create(description, new SubProgressMonitor(monitor, 1));\n                    newProject.open(new SubProgressMonitor(monitor, 1));\n                    IFolder srcFolder = newProject.getFolder(\"src\");\n                    IFolder javaFolder = srcFolder.getFolder(\"java\");\n                    IFolder buildFolder = newProject.getFolder(\"build\");\n                    IFolder classesFolder = buildFolder.getFolder(\"classes\");\n                    modProj.createFolder(srcFolder);\n                    modProj.createFolder(javaFolder);\n                    modProj.createFolder(buildFolder);\n                    modProj.createFolder(classesFolder);\n                    IPath buildPath = newProject.getFolder(\"build/classes\").getFullPath();\n                    jproject.setOutputLocation(buildPath, new SubProgressMonitor(monitor, 1));\n                    IClasspathEntry[] entries = new IClasspathEntry[] { JavaCore.newSourceEntry(newProject.getFolder(\"src/java\").getFullPath()), JavaCore.newContainerEntry(new Path(JavaRuntime.JRE_CONTAINER)), JavaCore.newContainerEntry(new Path(ModuloClasspathContainer.CONTAINER_ID)) };\n                    jproject.setRawClasspath(entries, new SubProgressMonitor(monitor, 1));\n                    ModuleDefinition definition = new ModuleDefinition();\n                    definition.setId(fModuloPage.getPackageName());\n                    definition.setVersion(new VersionNumber(1, 0, 0));\n                    definition.setMetaName(fModuloPage.getModuleName());\n                    definition.setMetaDescription(\"The \" + fModuloPage.getModuleName() + \" Module.\");\n                    definition.setModuleClassName(fModuloPage.getPackageName() + \".\" + fModuloPage.getModuleClassName());\n                    if (fModuloPage.isConfigSelectioned()) definition.setConfigurationClassName(fModuloPage.getPackageName() + \".\" + fModuloPage.getConfigClassName());\n                    if (fModuloPage.isStatSelectioned()) definition.setStatisticsClassName(fModuloPage.getPackageName() + \".\" + fModuloPage.getStatClassName());\n                    modProj.setDefinition(definition);\n                    modProj.createPackage();\n                    modProj.createModuleXML();\n                    modProj.createMainClass();\n                    if (fModuloPage.isConfigSelectioned()) modProj.createConfigClass();\n                    if (fModuloPage.isStatSelectioned()) modProj.createStatClass();\n                    modProj.createModuleProperties();\n                    modProj.createMessagesProperties();\n                    IFolder binFolder = newProject.getFolder(\"bin\");\n                    binFolder.delete(true, new SubProgressMonitor(monitor, 1));\n                } catch (CoreException e) {\n                    e.printStackTrace();\n                } finally {\n                    monitor.done();\n                }\n            }\n        };\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11980725",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {\n                int remainingWorkUnits = 10;\n                monitor.beginTask(\"New Modulo Project Creation\", remainingWorkUnits);\n                IWorkspace ws = ResourcesPlugin.getWorkspace();\n                newProject = fMainPage.getProjectHandle();\n                IProjectDescription description = ws.newProjectDescription(newProject.getName());\n                String[] natures = { JavaCore.NATURE_ID, ModuloLauncherPlugin.NATURE_ID };\n                description.setNatureIds(natures);\n                ICommand command = description.newCommand();\n                command.setBuilderName(JavaCore.BUILDER_ID);\n                ICommand[] commands = { command };\n                description.setBuildSpec(commands);\n                IJavaProject jproject = JavaCore.create(newProject);\n                ModuloProject modProj = new ModuloProject();\n                modProj.setJavaProject(jproject);\n                try {\n                    newProject.create(description, new SubProgressMonitor(monitor, 1));\n                    newProject.open(new SubProgressMonitor(monitor, 1));\n                    IFolder srcFolder = newProject.getFolder(\"src\");\n                    IFolder javaFolder = srcFolder.getFolder(\"java\");\n                    IFolder buildFolder = newProject.getFolder(\"build\");\n                    IFolder classesFolder = buildFolder.getFolder(\"classes\");\n                    modProj.createFolder(srcFolder);\n                    modProj.createFolder(javaFolder);\n                    modProj.createFolder(buildFolder);\n                    modProj.createFolder(classesFolder);\n                    IPath buildPath = newProject.getFolder(\"build/classes\").getFullPath();\n                    jproject.setOutputLocation(buildPath, new SubProgressMonitor(monitor, 1));\n                    IClasspathEntry[] entries = new IClasspathEntry[] { JavaCore.newSourceEntry(newProject.getFolder(\"src/java\").getFullPath()), JavaCore.newContainerEntry(new Path(JavaRuntime.JRE_CONTAINER)), JavaCore.newContainerEntry(new Path(ModuloClasspathContainer.CONTAINER_ID)) };\n                    jproject.setRawClasspath(entries, new SubProgressMonitor(monitor, 1));\n                    ModuleDefinition definition = new ModuleDefinition();\n                    definition.setId(fModuloPage.getPackageName());\n                    definition.setVersion(new VersionNumber(1, 0, 0));\n                    definition.setMetaName(fModuloPage.getModuleName());\n                    definition.setMetaDescription(\"The \" + fModuloPage.getModuleName() + \" Module.\");\n                    definition.setModuleClassName(fModuloPage.getPackageName() + \".\" + fModuloPage.getModuleClassName());\n                    if (fModuloPage.isConfigSelectioned()) definition.setConfigurationClassName(fModuloPage.getPackageName() + \".\" + fModuloPage.getConfigClassName());\n                    if (fModuloPage.isStatSelectioned()) definition.setStatisticsClassName(fModuloPage.getPackageName() + \".\" + fModuloPage.getStatClassName());\n                    modProj.setDefinition(definition);\n                    modProj.createPackage();\n                    modProj.createModuleXML();\n                    modProj.createMainClass();\n                    if (fModuloPage.isConfigSelectioned()) modProj.createConfigClass();\n                    if (fModuloPage.isStatSelectioned()) modProj.createStatClass();\n                    modProj.createModuleProperties();\n                    modProj.createMessagesProperties();\n                    IFolder binFolder = newProject.getFolder(\"bin\");\n                    binFolder.delete(true, new SubProgressMonitor(monitor, 1));\n                } catch (CoreException e) {\n                    e.printStackTrace();\n                } finally {\n                    monitor.done();\n                }\n            }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11981880",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void loadProperties() {\n        if (properties == null) {\n            properties = new Properties();\n            try {\n                URL url = getClass().getResource(propsFile);\n                properties.load(url.openStream());\n            } catch (IOException ioe) {\n                ioe.printStackTrace();\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11982462",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private Document getXMLDoc(Region region) {\n        Document doc;\n        try {\n            InputStream stream;\n            URL url = new URL(\"http://eve-central.com/api/marketstat?hours=\" + HOURS + \"&\" + getTypes() + \"&regionlimit=\" + region.getTypeID());\n            System.out.println(url.toString());\n            stream = url.openStream();\n            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n            DocumentBuilder parser = factory.newDocumentBuilder();\n            doc = parser.parse(stream);\n        } catch (MalformedURLException e) {\n            e.printStackTrace();\n            doc = new DefaultDocument();\n        } catch (SAXException e) {\n            e.printStackTrace();\n            doc = new DefaultDocument();\n        } catch (IOException e) {\n            e.printStackTrace();\n            doc = new DefaultDocument();\n        } catch (ParserConfigurationException e) {\n            e.printStackTrace();\n            doc = new DefaultDocument();\n        }\n        return doc;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11986407",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String md5(String input) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String md5(String input) {\n        String res = \"\";\n        try {\n            MessageDigest algorithm = MessageDigest.getInstance(\"MD5\");\n            algorithm.reset();\n            algorithm.update(input.getBytes());\n            byte[] md5 = algorithm.digest();\n            String tmp = \"\";\n            for (int i = 0; i < md5.length; i++) {\n                tmp = (Integer.toHexString(0xFF & md5[i]));\n                if (tmp.length() == 1) res += \"0\" + tmp; else res += tmp;\n            }\n        } catch (NoSuchAlgorithmException ex) {\n        }\n        return res;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01198670",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String send(String purl, String xml) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String send(String purl, String xml) throws Exception {\n        URL url = new URL(purl);\n        HttpURLConnection httpUrlCon = (HttpURLConnection) url.openConnection();\n        httpUrlCon.setRequestMethod(\"POST\");\n        httpUrlCon.setDoOutput(true);\n        PrintWriter writer = new PrintWriter(httpUrlCon.getOutputStream());\n        writer.println(xml);\n        writer.flush();\n        writer.close();\n        System.out.println(\"Sending: \" + xml);\n        StringBuffer response = new StringBuffer();\n        InputStreamReader is = null;\n        try {\n            is = new InputStreamReader(httpUrlCon.getInputStream());\n        } catch (Exception e) {\n            e.printStackTrace();\n            is = new InputStreamReader(httpUrlCon.getErrorStream());\n        }\n        BufferedReader br = new BufferedReader(is);\n        String line = null;\n        while ((line = br.readLine()) != null) {\n            response.append(line);\n            response.append(\"\\n\");\n        }\n        String r = response.toString();\n        return r;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11986777",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private List<Token> generateTokens(int tokenCount) throws XSServiceException {\n        final List<Token> tokens = new ArrayList<Token>(tokenCount);\n        final Random r = new Random();\n        String t = Long.toString(new Date().getTime()) + Integer.toString(r.nextInt());\n        final MessageDigest m;\n        try {\n            m = MessageDigest.getInstance(\"MD5\");\n        } catch (NoSuchAlgorithmException e) {\n            throw new XSServiceException(\"Error while creating tokens\");\n        }\n        for (int i = 0; i < tokenCount; ++i) {\n            final Token token = new Token();\n            token.setValid(true);\n            m.update(t.getBytes(), 0, t.length());\n            String md5 = new BigInteger(1, m.digest()).toString(16);\n            while (md5.length() < 32) {\n                md5 = String.valueOf(r.nextInt(9)) + md5;\n            }\n            t = md5.substring(0, 8) + \"-\" + md5.substring(8, 16) + \"-\" + md5.substring(16, 24) + \"-\" + md5.substring(24, 32);\n            logger.debug(\"Generated token #\" + (i + 1) + \": \" + t);\n            token.setTokenString(t);\n            tokens.add(token);\n        }\n        return tokens;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11986970",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void Copy() throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void Copy() throws IOException {\n        if (!FileDestination.exists()) {\n            FileDestination.createNewFile();\n        }\n        FileChannel source = null;\n        FileChannel destination = null;\n        try {\n            source = new FileInputStream(FileSource).getChannel();\n            destination = new FileOutputStream(FileDestination).getChannel();\n            destination.transferFrom(source, 0, source.size());\n        } finally {\n            if (source != null) {\n                source.close();\n            }\n            if (destination != null) {\n                destination.close();\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11988852",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static final void parse(String infile, String outfile) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static final void parse(String infile, String outfile) throws IOException {\n        BufferedReader reader = new BufferedReader(new FileReader(infile));\n        DataOutputStream output = new DataOutputStream(new FileOutputStream(outfile));\n        int w = Integer.parseInt(reader.readLine());\n        int h = Integer.parseInt(reader.readLine());\n        output.writeByte(w);\n        output.writeByte(h);\n        int lineCount = 2;\n        try {\n            do {\n                for (int i = 0; i < h; i++) {\n                    lineCount++;\n                    String line = reader.readLine();\n                    if (line == null) {\n                        throw new RuntimeException(\"Unexpected end of file at line \" + lineCount);\n                    }\n                    for (int j = 0; j < w; j++) {\n                        char c = line.charAt(j);\n                        System.out.print(c);\n                        output.writeByte(c);\n                    }\n                    System.out.println(\"\");\n                }\n                lineCount++;\n                output.writeShort(Short.parseShort(reader.readLine()));\n            } while (reader.readLine() != null);\n        } finally {\n            reader.close();\n            output.close();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11992308",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String generateStringSHA256(String content) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String generateStringSHA256(String content) {\n        MessageDigest md = null;\n        try {\n            md = MessageDigest.getInstance(\"SHA-256\");\n        } catch (NoSuchAlgorithmException ex) {\n            Logger.getLogger(ScannerChecksum.class.getName()).log(Level.SEVERE, null, ex);\n        }\n        md.update(content.getBytes());\n        byte byteData[] = md.digest();\n        @SuppressWarnings(\"StringBufferMayBeStringBuilder\") StringBuffer sb = new StringBuffer();\n        for (int i = 0; i < byteData.length; i++) {\n            sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));\n        }\n        @SuppressWarnings(\"StringBufferMayBeStringBuilder\") StringBuffer hexString = new StringBuffer();\n        for (int i = 0; i < byteData.length; i++) {\n            String hex = Integer.toHexString(0xff & byteData[i]);\n            if (hex.length() == 1) hexString.append('0');\n            hexString.append(hex);\n        }\n        return hexString.toString();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11993046",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copyFile(File source, File dest) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copyFile(File source, File dest) throws IOException {\n        FileChannel in = null, out = null;\n        try {\n            in = new FileInputStream(source).getChannel();\n            out = new FileOutputStream(dest).getChannel();\n            long size = in.size();\n            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);\n            out.write(buf);\n        } finally {\n            if (in != null) in.close();\n            if (out != null) out.close();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11995931",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static InputStream getUrlInputStream(final java.net.URL url) throws java.io.IOException, java.lang.InstantiationException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static InputStream getUrlInputStream(final java.net.URL url) throws java.io.IOException, java.lang.InstantiationException {\n        final java.net.URLConnection conn = url.openConnection();\n        conn.connect();\n        final InputStream input = url.openStream();\n        if (input == null) {\n            throw new java.lang.InstantiationException(\"Url \" + url + \" does not provide data.\");\n        }\n        return input;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11997195",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void getRandomGUID(boolean secure) {\n        MessageDigest md5 = null;\n        StringBuffer sbValueBeforeMD5 = new StringBuffer();\n        try {\n            md5 = MessageDigest.getInstance(\"MD5\");\n        } catch (NoSuchAlgorithmException e) {\n            System.out.println(\"Error: \" + e);\n        }\n        try {\n            long time = System.currentTimeMillis();\n            long rand = 0;\n            if (secure) {\n                rand = mySecureRand.nextLong();\n            } else {\n                rand = myRand.nextLong();\n            }\n            sbValueBeforeMD5.append(s_id);\n            sbValueBeforeMD5.append(\":\");\n            sbValueBeforeMD5.append(Long.toString(time));\n            sbValueBeforeMD5.append(\":\");\n            sbValueBeforeMD5.append(Long.toString(rand));\n            valueBeforeMD5 = sbValueBeforeMD5.toString();\n            md5.update(valueBeforeMD5.getBytes());\n            byte[] array = md5.digest();\n            StringBuffer sb = new StringBuffer();\n            for (int j = 0; j < array.length; ++j) {\n                int b = array[j] & 0xFF;\n                if (b < 0x10) sb.append('0');\n                sb.append(Integer.toHexString(b));\n            }\n            valueAfterMD5 = sb.toString();\n        } catch (Exception e) {\n            System.out.println(\"Error:\" + e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11998193",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static void executeSQLScript() {\n        File f = new File(System.getProperty(\"user.dir\") + \"/resources/umc.sql\");\n        if (f.exists()) {\n            Connection con = null;\n            PreparedStatement pre_stmt = null;\n            try {\n                Class.forName(\"org.sqlite.JDBC\");\n                con = DriverManager.getConnection(\"jdbc:sqlite:database/umc.db\", \"\", \"\");\n                BufferedReader br = new BufferedReader(new FileReader(f));\n                String line = \"\";\n                con.setAutoCommit(false);\n                while ((line = br.readLine()) != null) {\n                    if (!line.equals(\"\") && !line.startsWith(\"--\") && !line.contains(\"--\")) {\n                        log.debug(line);\n                        pre_stmt = con.prepareStatement(line);\n                        pre_stmt.executeUpdate();\n                    }\n                }\n                con.commit();\n                File dest = new File(f.getAbsolutePath() + \".executed\");\n                if (dest.exists()) dest.delete();\n                f.renameTo(dest);\n                f.delete();\n            } catch (Throwable exc) {\n                log.error(\"Fehler bei Ausf\u00fchrung der SQL Datei\", exc);\n                try {\n                    con.rollback();\n                } catch (SQLException exc1) {\n                }\n            } finally {\n                try {\n                    if (pre_stmt != null) pre_stmt.close();\n                    if (con != null) con.close();\n                } catch (SQLException exc2) {\n                    log.error(\"Fehler bei Ausf\u00fchrung von SQL Datei\", exc2);\n                }\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_11998194",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static void executeDBPatchFile() throws Exception {\n        Connection con = null;\n        PreparedStatement pre_stmt = null;\n        ResultSet rs = null;\n        try {\n            InputStream is = null;\n            URL url = new URL(\"http://www.hdd-player.de/umc/UMC-DB-Update-Script.sql\");\n            is = url.openStream();\n            BufferedReader br = new BufferedReader(new InputStreamReader(is));\n            Class.forName(\"org.sqlite.JDBC\");\n            con = DriverManager.getConnection(\"jdbc:sqlite:database/umc.db\", \"\", \"\");\n            double dbVersion = -1;\n            pre_stmt = con.prepareStatement(\"SELECT * FROM DB_VERSION WHERE ID_MODUL = 0\");\n            rs = pre_stmt.executeQuery();\n            if (rs.next()) {\n                dbVersion = rs.getDouble(\"VERSION\");\n            }\n            String line = \"\";\n            con.setAutoCommit(false);\n            boolean collectSQL = false;\n            ArrayList<String> sqls = new ArrayList<String>();\n            double patchVersion = 0;\n            while ((line = br.readLine()) != null) {\n                if (line.startsWith(\"[\")) {\n                    Pattern p = Pattern.compile(\"\\\\[.*\\\\]\");\n                    Matcher m = p.matcher(line);\n                    m.find();\n                    String value = m.group();\n                    value = value.substring(1, value.length() - 1);\n                    patchVersion = Double.parseDouble(value);\n                }\n                if (patchVersion == dbVersion + 1) collectSQL = true;\n                if (collectSQL) {\n                    if (!line.equals(\"\") && !line.startsWith(\"[\") && !line.startsWith(\"--\") && !line.contains(\"--\")) {\n                        if (line.endsWith(\";\")) line = line.substring(0, line.length() - 1);\n                        sqls.add(line);\n                    }\n                }\n            }\n            if (pre_stmt != null) pre_stmt.close();\n            if (rs != null) rs.close();\n            for (String sql : sqls) {\n                log.debug(\"F\u00fchre SQL aus Patch Datei aus: \" + sql);\n                pre_stmt = con.prepareStatement(sql);\n                pre_stmt.execute();\n            }\n            if (patchVersion > 0) {\n                log.debug(\"aktualisiere Versionsnummer in DB\");\n                if (pre_stmt != null) pre_stmt.close();\n                if (rs != null) rs.close();\n                pre_stmt = con.prepareStatement(\"UPDATE DB_VERSION SET VERSION = ? WHERE ID_MODUL = 0\");\n                pre_stmt.setDouble(1, patchVersion);\n                pre_stmt.execute();\n            }\n            con.commit();\n        } catch (MalformedURLException exc) {\n            log.error(exc.toString());\n            throw new Exception(\"SQL Patch Datei konnte nicht online gefunden werden\", exc);\n        } catch (IOException exc) {\n            log.error(exc.toString());\n            throw new Exception(\"SQL Patch Datei konnte nicht gelesen werden\", exc);\n        } catch (Throwable exc) {\n            log.error(\"Fehler bei Ausf\u00fchrung der SQL Patch Datei\", exc);\n            try {\n                con.rollback();\n            } catch (SQLException exc1) {\n            }\n            throw new Exception(\"SQL Patch Datei konnte nicht ausgef\u00fchrt werden\", exc);\n        } finally {\n            try {\n                if (pre_stmt != null) pre_stmt.close();\n                if (con != null) con.close();\n            } catch (SQLException exc2) {\n                log.error(\"Fehler bei Ausf\u00fchrung von SQL Patch Datei\", exc2);\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12004824",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic HttpResponse executeHttpRequest(HttpRequestBase httpRequest) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public HttpResponse executeHttpRequest(HttpRequestBase httpRequest) {\n        HttpResponse response = null;\n        try {\n            HttpParams httpParams = new BasicHttpParams();\n            HttpConnectionParams.setConnectionTimeout(httpParams, maxTime);\n            HttpConnectionParams.setSoTimeout(httpParams, maxTime);\n            httpclient = new DefaultHttpClient(httpParams);\n            response = httpclient.execute(httpRequest);\n            maxTime = 15000;\n        } catch (Exception e) {\n        }\n        return response;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12013963",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void findRxnFileByUrl() throws MalformedURLException, IOException {\n        URL url = new URL(MessageFormat.format(rxnUrl, reactionId.toString()));\n        LOGGER.debug(\"Retrieving RXN file by URL \" + url);\n        URLConnection con = url.openConnection(java.net.Proxy.NO_PROXY);\n        con.connect();\n        InputStream is = null;\n        InputStreamReader isr = null;\n        BufferedReader br = null;\n        try {\n            is = con.getInputStream();\n            isr = new InputStreamReader(is);\n            br = new BufferedReader(isr);\n            String line = null;\n            StringBuilder sb = new StringBuilder();\n            while ((line = br.readLine()) != null) {\n                sb.append(line).append('\\n');\n            }\n            rxnFile = sb.toString();\n        } catch (IOException e) {\n            LOGGER.warn(\"Unable to retrieve RXN\", e);\n        } finally {\n            if (br != null) {\n                br.close();\n            }\n            if (isr != null) {\n                isr.close();\n            }\n            if (is != null) {\n                is.close();\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12021779",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void insert() throws SQLException, NamingException {\n        Logger logger = getLogger();\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"enter - \" + getClass().getName() + \".insert()\");\n        }\n        try {\n            if (logger.isInfoEnabled()) {\n                logger.info(\"insert(): Create new sequencer record for \" + getName());\n            }\n            Connection conn = null;\n            PreparedStatement stmt = null;\n            ResultSet rs = null;\n            try {\n                InitialContext ctx = new InitialContext();\n                DataSource ds = (DataSource) ctx.lookup(dataSourceName);\n                conn = ds.getConnection();\n                conn.setReadOnly(false);\n                stmt = conn.prepareStatement(INSERT_SEQ);\n                stmt.setString(INS_NAME, getName());\n                stmt.setLong(INS_NEXT_KEY, defaultInterval * 2);\n                stmt.setLong(INS_INTERVAL, defaultInterval);\n                stmt.setLong(INS_UPDATE, System.currentTimeMillis());\n                try {\n                    if (stmt.executeUpdate() != 1) {\n                        nextId = -1L;\n                        logger.warn(\"insert(): Failed to create sequencer entry for \" + getName() + \" (no error message)\");\n                    } else if (logger.isInfoEnabled()) {\n                        nextId = defaultInterval;\n                        nextSeed = defaultInterval * 2;\n                        interval = defaultInterval;\n                        logger.info(\"insert(): First ID will be \" + nextId);\n                    }\n                } catch (SQLException e) {\n                    logger.warn(\"insert(): Error inserting row into database, possible concurrency issue: \" + e.getMessage());\n                    if (logger.isDebugEnabled()) {\n                        e.printStackTrace();\n                    }\n                    nextId = -1L;\n                }\n                if (!conn.getAutoCommit()) {\n                    conn.commit();\n                }\n            } finally {\n                if (rs != null) {\n                    try {\n                        rs.close();\n                    } catch (SQLException ignore) {\n                    }\n                }\n                if (stmt != null) {\n                    try {\n                        stmt.close();\n                    } catch (SQLException ignore) {\n                    }\n                }\n                if (conn != null) {\n                    if (!conn.getAutoCommit()) {\n                        try {\n                            conn.rollback();\n                        } catch (SQLException ignore) {\n                        }\n                    }\n                    try {\n                        conn.close();\n                    } catch (SQLException ignore) {\n                    }\n                }\n            }\n        } finally {\n            if (logger.isDebugEnabled()) {\n                logger.debug(\"exit - \" + getClass().getName() + \".insert()\");\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12024124",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic boolean pollLocation(int device) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public boolean pollLocation(int device) {\n        if (device < numDevices) {\n            try {\n                HttpResponse response = client.execute(post);\n                BufferedReader reader = new BufferedReader(new InputStreamReader(response.getEntity().getContent(), \"UTF-8\"));\n                JSONObject object = (JSONObject) JSONValue.parse(reader);\n                JSONArray array = ((JSONArray) object.get(\"content\"));\n                object = (JSONObject) array.get(device);\n                IPhoneLocation iPhoneLocation = getLocation(object);\n                if (iPhoneLocation != null) {\n                    iPhoneRouteList.get(device).addLocation(iPhoneLocation);\n                }\n            } catch (ClientProtocolException ex) {\n                logger.log(Level.SEVERE, null, ex);\n                return false;\n            } catch (IOException ex) {\n                logger.log(Level.SEVERE, null, ex);\n                return false;\n            }\n        } else {\n            logger.log(Level.WARNING, \"Device {0} is out of range ({1} max)\", new Object[] { (device + 1), numDevices });\n            return false;\n        }\n        return true;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01202515",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copyFile(URL url, File local) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copyFile(URL url, File local) throws IOException {\n        InputStream in = null;\n        FileWriter writer = null;\n        try {\n            writer = new FileWriter(local);\n            in = url.openStream();\n            int c;\n            while ((c = in.read()) != -1) {\n                writer.write(c);\n            }\n        } finally {\n            try {\n                writer.flush();\n                writer.close();\n                in.close();\n            } catch (Exception ignore) {\n                LOGGER.error(ignore);\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12027885",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void removeBodyPart(int iPart) throws MessagingException, ArrayIndexOutOfBoundsException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void removeBodyPart(int iPart) throws MessagingException, ArrayIndexOutOfBoundsException {\n        if (DebugFile.trace) {\n            DebugFile.writeln(\"Begin DBMimeMultipart.removeBodyPart(\" + String.valueOf(iPart) + \")\");\n            DebugFile.incIdent();\n        }\n        DBMimeMessage oMsg = (DBMimeMessage) getParent();\n        DBFolder oFldr = ((DBFolder) oMsg.getFolder());\n        Statement oStmt = null;\n        ResultSet oRSet = null;\n        String sDisposition = null, sFileName = null;\n        boolean bFound;\n        try {\n            oStmt = oFldr.getConnection().createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);\n            if (DebugFile.trace) DebugFile.writeln(\"Statement.executeQuery(SELECT \" + DB.id_disposition + \",\" + DB.file_name + \" FROM \" + DB.k_mime_parts + \" WHERE \" + DB.gu_mimemsg + \"='\" + oMsg.getMessageGuid() + \"' AND \" + DB.id_part + \"=\" + String.valueOf(iPart) + \")\");\n            oRSet = oStmt.executeQuery(\"SELECT \" + DB.id_disposition + \",\" + DB.file_name + \" FROM \" + DB.k_mime_parts + \" WHERE \" + DB.gu_mimemsg + \"='\" + oMsg.getMessageGuid() + \"' AND \" + DB.id_part + \"=\" + String.valueOf(iPart));\n            bFound = oRSet.next();\n            if (bFound) {\n                sDisposition = oRSet.getString(1);\n                if (oRSet.wasNull()) sDisposition = \"inline\";\n                sFileName = oRSet.getString(2);\n            }\n            oRSet.close();\n            oRSet = null;\n            oStmt.close();\n            oStmt = null;\n            if (!bFound) {\n                if (DebugFile.trace) DebugFile.decIdent();\n                throw new MessagingException(\"Part not found\");\n            }\n            if (!sDisposition.equals(\"reference\") && !sDisposition.equals(\"pointer\")) {\n                if (DebugFile.trace) DebugFile.decIdent();\n                throw new MessagingException(\"Only parts with reference or pointer disposition can be removed from a message\");\n            } else {\n                if (sDisposition.equals(\"reference\")) {\n                    try {\n                        File oRef = new File(sFileName);\n                        if (oRef.exists()) oRef.delete();\n                    } catch (SecurityException se) {\n                        if (DebugFile.trace) DebugFile.writeln(\"SecurityException \" + sFileName + \" \" + se.getMessage());\n                        if (DebugFile.trace) DebugFile.decIdent();\n                        throw new MessagingException(\"SecurityException \" + sFileName + \" \" + se.getMessage(), se);\n                    }\n                }\n                oStmt = oFldr.getConnection().createStatement();\n                if (DebugFile.trace) DebugFile.writeln(\"Statement.executeUpdate(DELETE FROM \" + DB.k_mime_parts + \" WHERE \" + DB.gu_mimemsg + \"='\" + oMsg.getMessageGuid() + \"' AND \" + DB.id_part + \"=\" + String.valueOf(iPart) + \")\");\n                oStmt.executeUpdate(\"DELETE FROM \" + DB.k_mime_parts + \" WHERE \" + DB.gu_mimemsg + \"='\" + oMsg.getMessageGuid() + \"' AND \" + DB.id_part + \"=\" + String.valueOf(iPart));\n                oStmt.close();\n                oStmt = null;\n                oFldr.getConnection().commit();\n            }\n        } catch (SQLException sqle) {\n            if (oRSet != null) {\n                try {\n                    oRSet.close();\n                } catch (Exception ignore) {\n                }\n            }\n            if (oStmt != null) {\n                try {\n                    oStmt.close();\n                } catch (Exception ignore) {\n                }\n            }\n            try {\n                oFldr.getConnection().rollback();\n            } catch (Exception ignore) {\n            }\n            if (DebugFile.trace) DebugFile.decIdent();\n            throw new MessagingException(sqle.getMessage(), sqle);\n        }\n        if (DebugFile.trace) {\n            DebugFile.decIdent();\n            DebugFile.writeln(\"End DBMimeMultipart.removeBodyPart()\");\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12034046",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private InputStream openRemoteStream(String remoteURL, String pathSuffix) {\n        URL url;\n        InputStream in = null;\n        try {\n            url = new URL(remoteURL + pathSuffix);\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n            in = connection.getInputStream();\n        } catch (Exception e) {\n        }\n        return in;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_00120346",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static String getDocumentAt(String urlString) {\n        StringBuffer html_text = new StringBuffer();\n        try {\n            URL url = new URL(urlString);\n            URLConnection conn = url.openConnection();\n            BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n            String line = null;\n            while ((line = reader.readLine()) != null) html_text.append(line + \"\\n\");\n            reader.close();\n        } catch (MalformedURLException e) {\n            System.out.println(\"\ufffd\ufffd\u0427\ufffd\ufffdURL: \" + urlString);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return html_text.toString();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12039034",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static ArrayList<RoleName> importRoles(String urlString) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static ArrayList<RoleName> importRoles(String urlString) {\n        ArrayList<RoleName> results = new ArrayList<RoleName>();\n        try {\n            URL url = new URL(urlString);\n            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n            StringBuffer buff = new StringBuffer();\n            String line;\n            while ((line = in.readLine()) != null) {\n                buff.append(line);\n                if (line.equals(\"</RoleName>\")) {\n                    RoleName name = ProfileParser.parseRoleName(buff.toString());\n                    results.add(name);\n                    buff = new StringBuffer();\n                } else {\n                    buff.append(NL);\n                }\n            }\n        } catch (MalformedURLException e) {\n        } catch (IOException e) {\n        } catch (ParsingException e) {\n        }\n        return results;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12039035",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static ArrayList<Principal> importPrincipals(String urlString) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static ArrayList<Principal> importPrincipals(String urlString) {\n        ArrayList<Principal> results = new ArrayList<Principal>();\n        try {\n            URL url = new URL(urlString);\n            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n            StringBuffer buff = new StringBuffer();\n            String line;\n            while ((line = in.readLine()) != null) {\n                buff.append(line);\n                if (line.equals(\"</Principal>\")) {\n                    Principal principal = ProfileParser.parsePrincipal(buff.toString());\n                    results.add(principal);\n                    buff = new StringBuffer();\n                } else {\n                    buff.append(NL);\n                }\n            }\n        } catch (MalformedURLException e) {\n        } catch (IOException e) {\n        } catch (ParsingException e) {\n        }\n        return results;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12039036",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static ArrayList<Credential> importCredentials(String urlString) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static ArrayList<Credential> importCredentials(String urlString) {\n        ArrayList<Credential> results = new ArrayList<Credential>();\n        try {\n            URL url = new URL(urlString);\n            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n            StringBuffer buff = new StringBuffer();\n            String line;\n            while ((line = in.readLine()) != null) {\n                buff.append(line);\n                if (line.equals(\"-----END PGP SIGNATURE-----\")) {\n                    Credential credential = ProfileParser.parseCredential(buff.toString(), true);\n                    results.add(credential);\n                    buff = new StringBuffer();\n                } else {\n                    buff.append(NL);\n                }\n            }\n        } catch (MalformedURLException e) {\n        } catch (IOException e) {\n        } catch (ParsingException e) {\n            System.err.println(e);\n        }\n        return results;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12044335",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "JcrFile createBody(Part part) throws IOException, MessagingException {\n        JcrFile body = new JcrFile();\n        body.setName(\"part\");\n        ByteArrayOutputStream pout = new ByteArrayOutputStream();\n        IOUtils.copy(part.getInputStream(), pout);\n        body.setDataProvider(new JcrDataProviderImpl(TYPE.BYTES, pout.toByteArray()));\n        body.setMimeType(part.getContentType());\n        body.setLastModified(java.util.Calendar.getInstance());\n        return body;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12044336",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@SuppressWarnings(\"unchecked\")\n    private void appendAttachments(final Part part) throws MessagingException, IOException {\n        if (part.isMimeType(\"message/*\")) {\n            JcrMessage jcrMessage = new JcrMessage();\n            Message attachedMessage = null;\n            if (part.getContent() instanceof Message) {\n                attachedMessage = (Message) part.getContent();\n            } else {\n                attachedMessage = new MStorMessage(null, (InputStream) part.getContent());\n            }\n            jcrMessage.setFlags(attachedMessage.getFlags());\n            jcrMessage.setHeaders(attachedMessage.getAllHeaders());\n            jcrMessage.setReceived(attachedMessage.getReceivedDate());\n            jcrMessage.setExpunged(attachedMessage.isExpunged());\n            jcrMessage.setMessage(attachedMessage);\n            messages.add(jcrMessage);\n        } else if (part.isMimeType(\"multipart/*\")) {\n            Multipart multi = (Multipart) part.getContent();\n            for (int i = 0; i < multi.getCount(); i++) {\n                appendAttachments(multi.getBodyPart(i));\n            }\n        } else if (Part.ATTACHMENT.equalsIgnoreCase(part.getDisposition()) || StringUtils.isNotEmpty(part.getFileName())) {\n            JcrFile attachment = new JcrFile();\n            String name = null;\n            if (StringUtils.isNotEmpty(part.getFileName())) {\n                name = part.getFileName();\n                for (JcrFile attach : attachments) {\n                    if (attach.getName().equals(name)) {\n                        return;\n                    }\n                }\n            } else {\n                String[] contentId = part.getHeader(\"Content-Id\");\n                if (contentId != null && contentId.length > 0) {\n                    name = contentId[0];\n                } else {\n                    name = \"attachment\";\n                }\n            }\n            int count = 0;\n            for (JcrFile attach : attachments) {\n                if (attach.getName().equals(name)) {\n                    count++;\n                }\n            }\n            if (count > 0) {\n                name += \"_\" + count;\n            }\n            attachment.setName(name);\n            ByteArrayOutputStream pout = new ByteArrayOutputStream();\n            IOUtils.copy(part.getInputStream(), pout);\n            attachment.setDataProvider(new JcrDataProviderImpl(TYPE.BYTES, pout.toByteArray()));\n            attachment.setMimeType(part.getContentType());\n            attachment.setLastModified(java.util.Calendar.getInstance());\n            attachments.add(attachment);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12048547",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void importDB(String input, String output) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void importDB(String input, String output) {\n        try {\n            Class.forName(\"org.sqlite.JDBC\");\n            String fileName = output + File.separator + G.databaseName;\n            File dataBase = new File(fileName);\n            if (!dataBase.exists()) {\n                G.conn = DriverManager.getConnection(\"jdbc:sqlite:\" + fileName);\n                createTablesDB();\n            } else G.conn = DriverManager.getConnection(\"jdbc:sqlite:\" + fileName);\n            long tiempoInicio = System.currentTimeMillis();\n            String directoryPath = input + File.separator;\n            File myDirectory = new File(directoryPath);\n            String[] list = myDirectory.list();\n            File fileXML = new File(input + File.separator + G.imagesName);\n            if (!fileXML.exists()) {\n                JOptionPane.showMessageDialog(null, \"No se encuentra el fichero XML\", \"Error\", JOptionPane.ERROR_MESSAGE);\n            } else {\n                SAXBuilder builder = new SAXBuilder(false);\n                Document docXML = builder.build(fileXML);\n                Element root = docXML.getRootElement();\n                List images = root.getChildren(\"image\");\n                Iterator j = images.iterator();\n                List<Element> globalLanguages = root.getChild(\"languages\").getChildren(\"language\");\n                Iterator<Element> langsI = globalLanguages.iterator();\n                HashMap<String, Integer> languageIDs = new HashMap<String, Integer>();\n                HashMap<String, Integer> typeIDs = new HashMap<String, Integer>();\n                Element e;\n                int i = 0;\n                int contTypes = 0;\n                int contImages = 0;\n                while (langsI.hasNext()) {\n                    e = langsI.next();\n                    languageIDs.put(e.getText(), i);\n                    PreparedStatement stmt = G.conn.prepareStatement(\"INSERT OR IGNORE INTO language (id,name) VALUES (?,?)\");\n                    stmt.setInt(1, i);\n                    stmt.setString(2, e.getText());\n                    stmt.executeUpdate();\n                    stmt.close();\n                    i++;\n                }\n                G.conn.setAutoCommit(false);\n                while (j.hasNext()) {\n                    Element image = (Element) j.next();\n                    String id = image.getAttributeValue(\"id\");\n                    List languages = image.getChildren(\"language\");\n                    Iterator k = languages.iterator();\n                    if (exists(list, id)) {\n                        String pathSrc = directoryPath.concat(id);\n                        String pathDst = output + File.separator + id.substring(0, 1).toUpperCase() + File.separator;\n                        String folder = output + File.separator + id.substring(0, 1).toUpperCase();\n                        String pathDstTmp = pathDst.concat(id);\n                        String idTmp = id;\n                        File testFile = new File(pathDstTmp);\n                        int cont = 1;\n                        while (testFile.exists()) {\n                            idTmp = id.substring(0, id.lastIndexOf('.')) + '_' + cont + id.substring(id.lastIndexOf('.'), id.length());\n                            pathDstTmp = pathDst + idTmp;\n                            testFile = new File(pathDstTmp);\n                            cont++;\n                        }\n                        pathDst = pathDstTmp;\n                        id = idTmp;\n                        File newDirectoryFolder = new File(folder);\n                        if (!newDirectoryFolder.exists()) {\n                            newDirectoryFolder.mkdirs();\n                        }\n                        try {\n                            FileChannel srcChannel = new FileInputStream(pathSrc).getChannel();\n                            FileChannel dstChannel = new FileOutputStream(pathDst).getChannel();\n                            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n                            srcChannel.close();\n                            dstChannel.close();\n                        } catch (IOException exc) {\n                            System.out.println(exc.toString());\n                        }\n                        while (k.hasNext()) {\n                            Element languageElement = (Element) k.next();\n                            String language = languageElement.getAttributeValue(\"id\");\n                            List words = languageElement.getChildren(\"word\");\n                            Iterator l = words.iterator();\n                            while (l.hasNext()) {\n                                Element wordElement = (Element) l.next();\n                                String type = wordElement.getAttributeValue(\"type\");\n                                if (!typeIDs.containsKey(type)) {\n                                    typeIDs.put(type, contTypes);\n                                    PreparedStatement stmt = G.conn.prepareStatement(\"INSERT OR IGNORE INTO type (id,name) VALUES (?,?)\");\n                                    stmt.setInt(1, contTypes);\n                                    stmt.setString(2, type);\n                                    stmt.executeUpdate();\n                                    stmt.close();\n                                    contTypes++;\n                                }\n                                PreparedStatement stmt = G.conn.prepareStatement(\"INSERT OR IGNORE INTO main (word, idL, idT, name, nameNN) VALUES (?,?,?,?,?)\");\n                                stmt.setString(1, wordElement.getText().toLowerCase());\n                                stmt.setInt(2, languageIDs.get(language));\n                                stmt.setInt(3, typeIDs.get(type));\n                                stmt.setString(4, id);\n                                stmt.setString(5, id);\n                                stmt.executeUpdate();\n                                stmt.close();\n                                if (contImages == 5000) {\n                                    G.conn.commit();\n                                    contImages = 0;\n                                } else contImages++;\n                            }\n                        }\n                    } else {\n                    }\n                }\n                G.conn.setAutoCommit(true);\n                G.conn.close();\n                long totalTiempo = System.currentTimeMillis() - tiempoInicio;\n                System.out.println(\"El tiempo total es :\" + totalTiempo / 1000 + \" segundos\");\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12048548",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void exportDB(String input, String output) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void exportDB(String input, String output) {\n        try {\n            Class.forName(\"org.sqlite.JDBC\");\n            String fileName = input + File.separator + G.databaseName;\n            File dataBase = new File(fileName);\n            if (!dataBase.exists()) {\n                JOptionPane.showMessageDialog(null, \"No se encuentra el fichero DB\", \"Error\", JOptionPane.ERROR_MESSAGE);\n            } else {\n                G.conn = DriverManager.getConnection(\"jdbc:sqlite:\" + fileName);\n                HashMap<Integer, String> languageIDs = new HashMap<Integer, String>();\n                HashMap<Integer, String> typeIDs = new HashMap<Integer, String>();\n                long tiempoInicio = System.currentTimeMillis();\n                Element dataBaseXML = new Element(\"database\");\n                Element languages = new Element(\"languages\");\n                Statement stat = G.conn.createStatement();\n                ResultSet rs = stat.executeQuery(\"select * from language order by id\");\n                while (rs.next()) {\n                    int id = rs.getInt(\"id\");\n                    String name = rs.getString(\"name\");\n                    languageIDs.put(id, name);\n                    Element language = new Element(\"language\");\n                    language.setText(name);\n                    languages.addContent(language);\n                }\n                dataBaseXML.addContent(languages);\n                rs = stat.executeQuery(\"select * from type order by id\");\n                while (rs.next()) {\n                    int id = rs.getInt(\"id\");\n                    String name = rs.getString(\"name\");\n                    typeIDs.put(id, name);\n                }\n                rs = stat.executeQuery(\"select distinct name from main order by name\");\n                while (rs.next()) {\n                    String name = rs.getString(\"name\");\n                    Element image = new Element(\"image\");\n                    image.setAttribute(\"id\", name);\n                    Statement stat2 = G.conn.createStatement();\n                    ResultSet rs2 = stat2.executeQuery(\"select distinct idL from main where name = \\\"\" + name + \"\\\" order by idL\");\n                    while (rs2.next()) {\n                        int idL = rs2.getInt(\"idL\");\n                        Element language = new Element(\"language\");\n                        language.setAttribute(\"id\", languageIDs.get(idL));\n                        Statement stat3 = G.conn.createStatement();\n                        ResultSet rs3 = stat3.executeQuery(\"select * from main where name = \\\"\" + name + \"\\\" and idL = \" + idL + \" order by idT\");\n                        while (rs3.next()) {\n                            int idT = rs3.getInt(\"idT\");\n                            String word = rs3.getString(\"word\");\n                            Element wordE = new Element(\"word\");\n                            wordE.setAttribute(\"type\", typeIDs.get(idT));\n                            wordE.setText(word);\n                            language.addContent(wordE);\n                            String pathSrc = input + File.separator + name.substring(0, 1).toUpperCase() + File.separator + name;\n                            String pathDst = output + File.separator + name;\n                            try {\n                                FileChannel srcChannel = new FileInputStream(pathSrc).getChannel();\n                                FileChannel dstChannel = new FileOutputStream(pathDst).getChannel();\n                                dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n                                srcChannel.close();\n                                dstChannel.close();\n                            } catch (IOException exc) {\n                                System.out.println(exc.getMessage());\n                                System.out.println(exc.toString());\n                            }\n                        }\n                        rs3.close();\n                        stat3.close();\n                        image.addContent(language);\n                    }\n                    rs2.close();\n                    stat2.close();\n                    dataBaseXML.addContent(image);\n                }\n                rs.close();\n                stat.close();\n                XMLOutputter out = new XMLOutputter(Format.getPrettyFormat());\n                FileOutputStream f = new FileOutputStream(output + File.separator + G.imagesName);\n                out.output(dataBaseXML, f);\n                f.flush();\n                f.close();\n                long totalTiempo = System.currentTimeMillis() - tiempoInicio;\n                System.out.println(\"El tiempo total es :\" + totalTiempo / 1000 + \" segundos\");\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12048549",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void addImageDB(String pictogramsPath, String pictogramToAddPath, String language, String type, String word) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void addImageDB(String pictogramsPath, String pictogramToAddPath, String language, String type, String word) {\n        try {\n            Class.forName(\"org.sqlite.JDBC\");\n            String fileName = pictogramsPath + File.separator + G.databaseName;\n            File dataBase = new File(fileName);\n            if (!dataBase.exists()) {\n                JOptionPane.showMessageDialog(null, \"No se encuentra el fichero DB\", \"Error\", JOptionPane.ERROR_MESSAGE);\n            } else {\n                int idL = 0, idT = 0;\n                G.conn = DriverManager.getConnection(\"jdbc:sqlite:\" + fileName);\n                Statement stat = G.conn.createStatement();\n                ResultSet rs = stat.executeQuery(\"select id from language where name=\\\"\" + language + \"\\\"\");\n                while (rs.next()) {\n                    idL = rs.getInt(\"id\");\n                }\n                rs.close();\n                stat.close();\n                stat = G.conn.createStatement();\n                rs = stat.executeQuery(\"select id from type where name=\\\"\" + type + \"\\\"\");\n                while (rs.next()) {\n                    idT = rs.getInt(\"id\");\n                }\n                rs.close();\n                stat.close();\n                String id = pictogramToAddPath.substring(pictogramToAddPath.lastIndexOf(File.separator) + 1, pictogramToAddPath.length());\n                String idOrig = id;\n                String pathSrc = pictogramToAddPath;\n                String pathDst = pictogramsPath + File.separator + id.substring(0, 1).toUpperCase() + File.separator;\n                String folder = pictogramsPath + File.separator + id.substring(0, 1).toUpperCase();\n                String pathDstTmp = pathDst.concat(id);\n                String idTmp = id;\n                File testFile = new File(pathDstTmp);\n                int cont = 1;\n                while (testFile.exists()) {\n                    idTmp = id.substring(0, id.lastIndexOf('.')) + '_' + cont + id.substring(id.lastIndexOf('.'), id.length());\n                    pathDstTmp = pathDst + idTmp;\n                    testFile = new File(pathDstTmp);\n                    cont++;\n                }\n                pathDst = pathDstTmp;\n                id = idTmp;\n                File newDirectoryFolder = new File(folder);\n                if (!newDirectoryFolder.exists()) {\n                    newDirectoryFolder.mkdirs();\n                }\n                try {\n                    FileChannel srcChannel = new FileInputStream(pathSrc).getChannel();\n                    FileChannel dstChannel = new FileOutputStream(pathDst).getChannel();\n                    dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n                    srcChannel.close();\n                    dstChannel.close();\n                } catch (IOException exc) {\n                    System.out.println(exc.toString());\n                }\n                PreparedStatement stmt = G.conn.prepareStatement(\"INSERT OR IGNORE INTO main (word, idL, idT, name, nameNN) VALUES (?,?,?,?,?)\");\n                stmt.setString(1, word.toLowerCase());\n                stmt.setInt(2, idL);\n                stmt.setInt(3, idT);\n                stmt.setString(4, id);\n                stmt.setString(5, idOrig);\n                stmt.executeUpdate();\n                stmt.close();\n                G.conn.close();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12049052",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private Collection<Class<? extends Plugin>> loadFromResource(ClassLoader classLoader, String resource) throws IOException {\n        Collection<Class<? extends Plugin>> pluginClasses = new HashSet<Class<? extends Plugin>>();\n        Enumeration providerFiles = classLoader.getResources(resource);\n        if (!providerFiles.hasMoreElements()) {\n            logger.warning(\"Can't find the resource: \" + resource);\n            return pluginClasses;\n        }\n        do {\n            URL url = (URL) providerFiles.nextElement();\n            InputStream stream = url.openStream();\n            BufferedReader reader;\n            try {\n                reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n            } catch (IOException e) {\n                continue;\n            }\n            String line;\n            while ((line = reader.readLine()) != null) {\n                int index = line.indexOf('#');\n                if (index != -1) {\n                    line = line.substring(0, index);\n                }\n                line = line.trim();\n                if (line.length() > 0) {\n                    Class pluginClass;\n                    try {\n                        pluginClass = classLoader.loadClass(line);\n                    } catch (ClassNotFoundException e) {\n                        logger.log(Level.WARNING, \"Can't use the Pluginclass with the name \" + line + \".\", e);\n                        continue;\n                    }\n                    if (Plugin.class.isAssignableFrom(pluginClass)) {\n                        pluginClasses.add((Class<? extends Plugin>) pluginClass);\n                    } else {\n                        logger.warning(\"The Pluginclass with the name \" + line + \" isn't a subclass of Plugin.\");\n                    }\n                }\n            }\n            reader.close();\n            stream.close();\n        } while (providerFiles.hasMoreElements());\n        return pluginClasses;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12049260",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private boolean downloadFile() {\n            FTPClient ftp = new FTPClient();\n            try {\n                int reply;\n                ftp.connect(this.server);\n                ResourcePool.LogMessage(this, ResourcePool.INFO_MESSAGE, \"Connected to \" + this.server);\n                reply = ftp.getReplyCode();\n                if (!FTPReply.isPositiveCompletion(reply)) {\n                    ftp.disconnect();\n                    ResourcePool.LogMessage(this, ResourcePool.ERROR_MESSAGE, \"FTP server refused connection.\");\n                    return false;\n                }\n            } catch (IOException e) {\n                if (ftp.isConnected()) {\n                    try {\n                        ftp.disconnect();\n                    } catch (IOException f) {\n                        return false;\n                    }\n                }\n                ResourcePool.LogMessage(this, ResourcePool.ERROR_MESSAGE, \"FTP Could not connect to server.\");\n                ResourcePool.LogException(e, this);\n                return false;\n            }\n            try {\n                if (!ftp.login(this.user, this.password)) {\n                    ftp.logout();\n                    ResourcePool.LogMessage(this, ResourcePool.ERROR_MESSAGE, \"FTP login failed.\");\n                    return false;\n                }\n                ResourcePool.LogMessage(this, ResourcePool.INFO_MESSAGE, \"Remote system is \" + ftp.getSystemName());\n                if ((this.transferType != null) && (this.transferType.compareTo(FTPWorkerThread.ASCII) == 0)) {\n                    ftp.setFileType(FTP.ASCII_FILE_TYPE);\n                } else {\n                    ftp.setFileType(FTP.BINARY_FILE_TYPE);\n                }\n                if ((this.passiveMode != null) && this.passiveMode.equalsIgnoreCase(FTPWorkerThread.FALSE)) {\n                    ftp.enterLocalActiveMode();\n                } else {\n                    ftp.enterLocalPassiveMode();\n                }\n            } catch (FTPConnectionClosedException e) {\n                ResourcePool.LogMessage(this, ResourcePool.ERROR_MESSAGE, \"Server closed connection.\");\n                ResourcePool.LogException(e, this);\n                return false;\n            } catch (IOException e) {\n                ResourcePool.LogException(e, this);\n                return false;\n            }\n            OutputStream output;\n            try {\n                java.util.Date startDate = new java.util.Date();\n                output = new FileOutputStream(this.destFileName);\n                ftp.retrieveFile(this.fileName, output);\n                File f = new File(this.destFileName);\n                if (f.exists() && (this.lastModifiedDate != null)) {\n                    f.setLastModified(this.lastModifiedDate.longValue());\n                }\n                java.util.Date endDate = new java.util.Date();\n                this.downloadTime = endDate.getTime() - startDate.getTime();\n                double iDownLoadTime = ((this.downloadTime + 1) / 1000) + 1;\n                ResourcePool.LogMessage(this, ResourcePool.INFO_MESSAGE, \"Download Complete, Rate = \" + (this.fileSize / (iDownLoadTime * 1024)) + \" Kb/s, Seconds = \" + iDownLoadTime);\n                this.downloadTime = (this.downloadTime + 1) / 1000;\n                if (ftp.isConnected()) {\n                    ftp.disconnect();\n                }\n            } catch (FTPConnectionClosedException e) {\n                ResourcePool.LogMessage(this, ResourcePool.ERROR_MESSAGE, e.getMessage());\n                ResourcePool.LogException(e, this);\n                return false;\n            } catch (IOException e) {\n                ResourcePool.LogException(e, this);\n                return false;\n            }\n            return true;\n        }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12049266",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private FTPClient getFTPConnection(String strUser, String strPassword, String strServer, boolean binaryTransfer, String connectionNote, boolean passiveMode) {\n        FTPClient ftp = new FTPClient();\n        try {\n            int reply;\n            ftp.connect(strServer);\n            ResourcePool.LogMessage(this, ResourcePool.INFO_MESSAGE, \"Connected to \" + strServer + \", \" + connectionNote);\n            reply = ftp.getReplyCode();\n            if (!FTPReply.isPositiveCompletion(reply)) {\n                ftp.disconnect();\n                ResourcePool.LogMessage(this, ResourcePool.ERROR_MESSAGE, \"FTP server refused connection.\");\n                return null;\n            }\n        } catch (IOException e) {\n            if (ftp.isConnected()) {\n                try {\n                    ftp.disconnect();\n                } catch (IOException f) {\n                    return null;\n                }\n            }\n            ResourcePool.LogMessage(this, ResourcePool.ERROR_MESSAGE, \"FTP Could not connect to server.\");\n            ResourcePool.LogException(e, this);\n            return null;\n        }\n        try {\n            if (!ftp.login(strUser, strPassword)) {\n                ftp.logout();\n                ResourcePool.LogMessage(this, ResourcePool.ERROR_MESSAGE, \"FTP login failed.\");\n                return null;\n            }\n            ResourcePool.LogMessage(this, ResourcePool.INFO_MESSAGE, \"Remote system is \" + ftp.getSystemName() + \", \" + connectionNote);\n            if (binaryTransfer) {\n                ftp.setFileType(FTP.BINARY_FILE_TYPE);\n            } else {\n                ftp.setFileType(FTP.ASCII_FILE_TYPE);\n            }\n            if (passiveMode) {\n                ftp.enterLocalPassiveMode();\n            } else {\n                ftp.enterLocalActiveMode();\n            }\n        } catch (FTPConnectionClosedException e) {\n            ResourcePool.LogMessage(this, ResourcePool.ERROR_MESSAGE, \"Server closed connection.\");\n            ResourcePool.LogException(e, this);\n            return null;\n        } catch (IOException e) {\n            ResourcePool.LogException(e, this);\n            return null;\n        }\n        return ftp;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01205207",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@SuppressWarnings(\"deprecation\")\n    private void loadClassFilesFromJar() {\n        IPackageFragmentRoot packageFragmentRoot = (IPackageFragmentRoot) getJavaElement();\n        File jarFile = packageFragmentRoot.getResource().getLocation().toFile();\n        try {\n            URL url = jarFile.toURL();\n            URLConnection u = url.openConnection();\n            ZipInputStream inputStream = new ZipInputStream(u.getInputStream());\n            ZipEntry entry = inputStream.getNextEntry();\n            while (null != entry) {\n                if (entry.getName().endsWith(\".class\")) {\n                    ClassParser parser = new ClassParser(inputStream, entry.getName());\n                    Repository.addClass(parser.parse());\n                }\n                entry = inputStream.getNextEntry();\n            }\n        } catch (MalformedURLException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12055086",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "protected static void copyDeleting(File source, File dest) throws IOException {\n        byte[] buf = new byte[8 * 1024];\n        FileInputStream in = new FileInputStream(source);\n        try {\n            FileOutputStream out = new FileOutputStream(dest);\n            try {\n                int count;\n                while ((count = in.read(buf)) >= 0) out.write(buf, 0, count);\n            } finally {\n                out.close();\n            }\n        } finally {\n            in.close();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12062763",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void loadFromURLPath(String type, URL urlPath, HashMap parentAttributes) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void loadFromURLPath(String type, URL urlPath, HashMap parentAttributes) throws IOException {\n        this.urlPath = urlPath;\n        this.type = type;\n        JmeBinaryReader jbr = new JmeBinaryReader();\n        setProperties(jbr, parentAttributes);\n        InputStream loaderInput = urlPath.openStream();\n        if (type.equals(\"xml\")) {\n            XMLtoBinary xtb = new XMLtoBinary();\n            ByteArrayOutputStream BO = new ByteArrayOutputStream();\n            xtb.sendXMLtoBinary(loaderInput, BO);\n            loaderInput = new ByteArrayInputStream(BO.toByteArray());\n        } else if (!type.equals(\"binary\")) throw new IOException(\"Unknown LoaderNode flag: \" + type);\n        jbr.loadBinaryFormat(this, loaderInput);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12065181",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void sortMasters() {\n        masterCounter = 0;\n        for (int i = 0; i < maxID; i++) {\n            if (users[i].getMasterPoints() > 0) {\n                masterHandleList[masterCounter] = users[i].getHandle();\n                masterPointsList[masterCounter] = users[i].getMasterPoints();\n                masterCounter = masterCounter + 1;\n            }\n        }\n        for (int i = masterCounter; --i >= 0; ) {\n            for (int j = 0; j < i; j++) {\n                if (masterPointsList[j] > masterPointsList[j + 1]) {\n                    int tempp = masterPointsList[j];\n                    String temppstring = masterHandleList[j];\n                    masterPointsList[j] = masterPointsList[j + 1];\n                    masterHandleList[j] = masterHandleList[j + 1];\n                    masterPointsList[j + 1] = tempp;\n                    masterHandleList[j + 1] = temppstring;\n                }\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12066447",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "protected void truncate(final File file) {\n        LogLog.debug(\"Compression of file: \" + file.getAbsolutePath() + \" started.\");\n        if (FileUtils.isFileOlder(file, ManagementFactory.getRuntimeMXBean().getStartTime())) {\n            final File backupRoot = new File(this.getBackupDir());\n            if (!backupRoot.exists() && !backupRoot.mkdirs()) {\n                throw new AppenderInitializationError(\"Can't create backup dir for backup storage\");\n            }\n            SimpleDateFormat df;\n            try {\n                df = new SimpleDateFormat(this.getBackupDateFormat());\n            } catch (final Exception e) {\n                throw new AppenderInitializationError(\"Invalid date formate for backup files: \" + this.getBackupDateFormat(), e);\n            }\n            final String date = df.format(new Date(file.lastModified()));\n            final File zipFile = new File(backupRoot, file.getName() + \".\" + date + \".zip\");\n            ZipOutputStream zos = null;\n            FileInputStream fis = null;\n            try {\n                zos = new ZipOutputStream(new FileOutputStream(zipFile));\n                final ZipEntry entry = new ZipEntry(file.getName());\n                entry.setMethod(ZipEntry.DEFLATED);\n                entry.setCrc(FileUtils.checksumCRC32(file));\n                zos.putNextEntry(entry);\n                fis = FileUtils.openInputStream(file);\n                final byte[] buffer = new byte[1024];\n                int readed;\n                while ((readed = fis.read(buffer)) != -1) {\n                    zos.write(buffer, 0, readed);\n                }\n            } catch (final Exception e) {\n                throw new AppenderInitializationError(\"Can't create zip file\", e);\n            } finally {\n                if (zos != null) {\n                    try {\n                        zos.close();\n                    } catch (final IOException e) {\n                        LogLog.warn(\"Can't close zip file\", e);\n                    }\n                }\n                if (fis != null) {\n                    try {\n                        fis.close();\n                    } catch (final IOException e) {\n                        LogLog.warn(\"Can't close zipped file\", e);\n                    }\n                }\n            }\n            if (!file.delete()) {\n                throw new AppenderInitializationError(\"Can't delete old log file \" + file.getAbsolutePath());\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12067823",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void run() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void run() {\n        if (saveAsDialog == null) {\n            saveAsDialog = new FileDialog(window.getShell(), SWT.SAVE);\n            saveAsDialog.setFilterExtensions(saveAsTypes);\n        }\n        String outputFile = saveAsDialog.open();\n        if (outputFile != null) {\n            Object inputFile = DataSourceSingleton.getInstance().getContainer().getWrapped();\n            InputStream in;\n            try {\n                if (inputFile instanceof URL) in = ((URL) inputFile).openStream(); else in = new FileInputStream((File) inputFile);\n                OutputStream out = new FileOutputStream(outputFile);\n                if (outputFile.endsWith(\"xml\")) {\n                    int c;\n                    while ((c = in.read()) != -1) out.write(c);\n                } else {\n                    PrintWriter pw = new PrintWriter(out);\n                    Element data = DataSourceSingleton.getInstance().getRawData();\n                    writeTextFile(data, pw, -1);\n                    pw.close();\n                }\n                in.close();\n                out.close();\n            } catch (MalformedURLException e1) {\n            } catch (IOException e) {\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12068151",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void onCreate(Bundle savedInstanceState) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.cautaprodus);\n        HttpGet request = new HttpGet(SERVICE_URI + \"/json/getproducts\");\n        request.setHeader(\"Accept\", \"application/json\");\n        request.setHeader(\"Content-type\", \"application/json\");\n        DefaultHttpClient httpClient = new DefaultHttpClient();\n        String theString = new String(\"\");\n        try {\n            HttpResponse response = httpClient.execute(request);\n            HttpEntity responseEntity = response.getEntity();\n            InputStream stream = responseEntity.getContent();\n            BufferedReader reader = new BufferedReader(new InputStreamReader(stream));\n            Vector<String> vectorOfStrings = new Vector<String>();\n            String tempString = new String();\n            StringBuilder builder = new StringBuilder();\n            String line;\n            while ((line = reader.readLine()) != null) {\n                builder.append(line);\n            }\n            stream.close();\n            theString = builder.toString();\n            JSONObject json = new JSONObject(theString);\n            Log.i(\"_GetPerson_\", \"<jsonobject>\\n\" + json.toString() + \"\\n</jsonobject>\");\n            JSONArray nameArray = json.getJSONArray(\"getProductsResult\");\n            for (int i = 0; i < nameArray.length(); i++) {\n                Log.i(\"_GetProducts_\", \"<ID\" + i + \">\" + nameArray.getJSONObject(i).getString(\"ID\") + \"</ID\" + i + \">\\n\");\n                Log.i(\"_GetProducts_\", \"<Name\" + i + \">\" + nameArray.getJSONObject(i).getString(\"Name\") + \"</Name\" + i + \">\\n\");\n                Log.i(\"_GetProducts_\", \"<Price\" + i + \">\" + nameArray.getJSONObject(i).getString(\"Price\") + \"</Price\" + i + \">\\n\");\n                Log.i(\"_GetProducts_\", \"<Symbol\" + i + \">\" + nameArray.getJSONObject(i).getString(\"Symbol\") + \"</Symbol\" + i + \">\\n\");\n                tempString = nameArray.getJSONObject(i).getString(\"Name\") + \"\\n\" + nameArray.getJSONObject(i).getString(\"Price\") + \"\\n\" + nameArray.getJSONObject(i).getString(\"Symbol\");\n                vectorOfStrings.add(new String(tempString));\n            }\n            int orderCount = vectorOfStrings.size();\n            String[] orderTimeStamps = new String[orderCount];\n            vectorOfStrings.copyInto(orderTimeStamps);\n            setListAdapter(new ArrayAdapter<String>(this, android.R.layout.simple_list_item_1, orderTimeStamps));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_00120707",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void convert(File src, File dest) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void convert(File src, File dest) throws IOException {\n        InputStream in = new BufferedInputStream(new FileInputStream(src));\n        DcmParser p = pfact.newDcmParser(in);\n        Dataset ds = fact.newDataset();\n        p.setDcmHandler(ds.getDcmHandler());\n        try {\n            FileFormat format = p.detectFileFormat();\n            if (format != FileFormat.ACRNEMA_STREAM) {\n                System.out.println(\"\\n\" + src + \": not an ACRNEMA stream!\");\n                return;\n            }\n            p.parseDcmFile(format, Tags.PixelData);\n            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n                System.out.println(\"\\n\" + src + \": contains UIDs!\" + \" => probable already DICOM - do not convert\");\n                return;\n            }\n            boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n            int pxlen = p.getReadLength();\n            if (hasPixelData) {\n                if (inflate) {\n                    ds.putUS(Tags.BitsAllocated, 16);\n                    pxlen = pxlen * 4 / 3;\n                }\n                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n                    System.out.println(\"\\n\" + src + \": mismatch pixel data length!\" + \" => do not convert\");\n                    return;\n                }\n            }\n            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n            ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n            ds.putUI(Tags.SOPClassUID, classUID);\n            if (!ds.contains(Tags.NumberOfSamples)) {\n                ds.putUS(Tags.NumberOfSamples, 1);\n            }\n            if (!ds.contains(Tags.PhotometricInterpretation)) {\n                ds.putCS(Tags.PhotometricInterpretation, \"MONOCHROME2\");\n            }\n            if (fmi) {\n                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n            }\n            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n            try {\n            } finally {\n                ds.writeFile(out, encodeParam());\n                if (hasPixelData) {\n                    if (!skipGroupLen) {\n                        out.write(PXDATA_GROUPLEN);\n                        int grlen = pxlen + 8;\n                        out.write((byte) grlen);\n                        out.write((byte) (grlen >> 8));\n                        out.write((byte) (grlen >> 16));\n                        out.write((byte) (grlen >> 24));\n                    }\n                    out.write(PXDATA_TAG);\n                    out.write((byte) pxlen);\n                    out.write((byte) (pxlen >> 8));\n                    out.write((byte) (pxlen >> 16));\n                    out.write((byte) (pxlen >> 24));\n                }\n                if (inflate) {\n                    int b2, b3;\n                    for (; pxlen > 0; pxlen -= 3) {\n                        out.write(in.read());\n                        b2 = in.read();\n                        b3 = in.read();\n                        out.write(b2 & 0x0f);\n                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n                        out.write(b3 >> 4);\n                    }\n                } else {\n                    for (; pxlen > 0; --pxlen) {\n                        out.write(in.read());\n                    }\n                }\n                out.close();\n            }\n            System.out.print('.');\n        } finally {\n            in.close();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_00120730",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void convert(File src, File dest) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void convert(File src, File dest) throws IOException {\n        InputStream in = new BufferedInputStream(new FileInputStream(src));\n        DcmParser p = pfact.newDcmParser(in);\n        Dataset ds = fact.newDataset();\n        p.setDcmHandler(ds.getDcmHandler());\n        try {\n            FileFormat format = p.detectFileFormat();\n            if (format != FileFormat.ACRNEMA_STREAM) {\n                System.out.println(\"\\n\" + src + \": not an ACRNEMA stream!\");\n                return;\n            }\n            p.parseDcmFile(format, Tags.PixelData);\n            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n                System.out.println(\"\\n\" + src + \": contains UIDs!\" + \" => probable already DICOM - do not convert\");\n                return;\n            }\n            boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n            int pxlen = p.getReadLength();\n            if (hasPixelData) {\n                if (inflate) {\n                    ds.putUS(Tags.BitsAllocated, 16);\n                    pxlen = pxlen * 4 / 3;\n                }\n                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n                    System.out.println(\"\\n\" + src + \": mismatch pixel data length!\" + \" => do not convert\");\n                    return;\n                }\n            }\n            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n            ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n            ds.putUI(Tags.SOPClassUID, classUID);\n            if (!ds.contains(Tags.NumberOfSamples)) {\n                ds.putUS(Tags.NumberOfSamples, 1);\n            }\n            if (!ds.contains(Tags.PhotometricInterpretation)) {\n                ds.putCS(Tags.PhotometricInterpretation, \"MONOCHROME2\");\n            }\n            if (fmi) {\n                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n            }\n            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n            try {\n            } finally {\n                ds.writeFile(out, encodeParam());\n                if (hasPixelData) {\n                    if (!skipGroupLen) {\n                        out.write(PXDATA_GROUPLEN);\n                        int grlen = pxlen + 8;\n                        out.write((byte) grlen);\n                        out.write((byte) (grlen >> 8));\n                        out.write((byte) (grlen >> 16));\n                        out.write((byte) (grlen >> 24));\n                    }\n                    out.write(PXDATA_TAG);\n                    out.write((byte) pxlen);\n                    out.write((byte) (pxlen >> 8));\n                    out.write((byte) (pxlen >> 16));\n                    out.write((byte) (pxlen >> 24));\n                }\n                if (inflate) {\n                    int b2, b3;\n                    for (; pxlen > 0; pxlen -= 3) {\n                        out.write(in.read());\n                        b2 = in.read();\n                        b3 = in.read();\n                        out.write(b2 & 0x0f);\n                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n                        out.write(b3 >> 4);\n                    }\n                } else {\n                    for (; pxlen > 0; --pxlen) {\n                        out.write(in.read());\n                    }\n                }\n                out.close();\n            }\n            System.out.print('.');\n        } finally {\n            in.close();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12074282",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void postData(Reader data, Writer output) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void postData(Reader data, Writer output) {\n        HttpURLConnection urlc = null;\n        try {\n            urlc = (HttpURLConnection) solrUrl.openConnection();\n            try {\n                urlc.setRequestMethod(\"POST\");\n            } catch (ProtocolException e) {\n                throw new PostException(\"Shouldn't happen: HttpURLConnection doesn't support POST??\", e);\n            }\n            urlc.setDoOutput(true);\n            urlc.setDoInput(true);\n            urlc.setUseCaches(false);\n            urlc.setAllowUserInteraction(false);\n            urlc.setRequestProperty(\"Content-type\", \"text/xml; charset=\" + POST_ENCODING);\n            OutputStream out = urlc.getOutputStream();\n            try {\n                Writer writer = new OutputStreamWriter(out, POST_ENCODING);\n                pipe(data, writer);\n                writer.close();\n            } catch (IOException e) {\n                throw new PostException(\"IOException while posting data\", e);\n            } finally {\n                if (out != null) out.close();\n            }\n            InputStream in = urlc.getInputStream();\n            try {\n                Reader reader = new InputStreamReader(in);\n                pipe(reader, output);\n                reader.close();\n            } catch (IOException e) {\n                throw new PostException(\"IOException while reading response\", e);\n            } finally {\n                if (in != null) in.close();\n            }\n        } catch (IOException e) {\n            try {\n                fatal(\"Solr returned an error: \" + urlc.getResponseMessage());\n            } catch (IOException f) {\n            }\n            fatal(\"Connection error (is Solr running at \" + solrUrl + \" ?): \" + e);\n        } finally {\n            if (urlc != null) urlc.disconnect();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12078160",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic String getIpAddress() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public String getIpAddress() {\n        try {\n            URL url = new URL(\"http://checkip.dyndns.org\");\n            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n            String linha;\n            String rtn = \"\";\n            while ((linha = in.readLine()) != null) rtn += linha;\n            ;\n            in.close();\n            return filtraRetorno(rtn);\n        } catch (IOException ex) {\n            Logger.getLogger(ExternalIp.class.getName()).log(Level.SEVERE, null, ex);\n            return \"ERRO.\";\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12078471",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static Model tryLoadURL(String url, RDFFormat format) throws MalformedURLException, IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static Model tryLoadURL(String url, RDFFormat format) throws MalformedURLException, IOException {\n        URLConnection c = new URL(url).openConnection();\n        c.addRequestProperty(\"Accept\", format.getKey());\n        String data = StreamUtil.toString(c.getInputStream());\n        Model model = ModelFactory.createDefaultModel();\n        model.read(new ByteArrayInputStream(data.getBytes()), \"\", format.getValue());\n        return model;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12082135",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static Set<Province> getProvincias(String pURL) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static Set<Province> getProvincias(String pURL) {\n        Set<Province> result = new HashSet<Province>();\n        String iniProv = \"<prov>\";\n        String finProv = \"</prov>\";\n        String iniNomProv = \"<np>\";\n        String finNomProv = \"</np>\";\n        String iniCodigo = \"<cpine>\";\n        String finCodigo = \"</cpine>\";\n        int ini, fin;\n        try {\n            URL url = new URL(pURL);\n            BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));\n            String str;\n            Province provincia;\n            while ((str = br.readLine()) != null) {\n                if (str.contains(iniProv)) {\n                    provincia = new Province();\n                    while ((str = br.readLine()) != null && !str.contains(finProv)) {\n                        if (str.contains(iniNomProv)) {\n                            ini = str.indexOf(iniNomProv) + iniNomProv.length();\n                            fin = str.indexOf(finNomProv);\n                            provincia.setDescription(str.substring(ini, fin));\n                        }\n                        if (str.contains(iniCodigo)) {\n                            ini = str.indexOf(iniCodigo) + iniCodigo.length();\n                            fin = str.indexOf(finCodigo);\n                            provincia.setCodeProvince(Integer.parseInt(str.substring(ini, fin)));\n                        }\n                    }\n                    result.add(provincia);\n                }\n            }\n            br.close();\n        } catch (Exception e) {\n            System.err.println(e);\n        }\n        return result;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12082137",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static Set<Municipality> getMunicipios(String pURL) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static Set<Municipality> getMunicipios(String pURL) {\n        Set<Municipality> result = new HashSet<Municipality>();\n        String iniCuerr = \"<cuerr>\";\n        String finCuerr = \"</cuerr>\";\n        String iniDesErr = \"<des>\";\n        String finDesErr = \"</des>\";\n        String iniMun = \"<muni>\";\n        String finMun = \"</muni>\";\n        String iniNomMun = \"<nm>\";\n        String finNomMun = \"</nm>\";\n        String iniCarto = \"<carto>\";\n        String iniCodDelMEH = \"<cd>\";\n        String finCodDelMEH = \"</cd>\";\n        String iniCodMunMEH = \"<cmc>\";\n        String finCodMunMEH = \"</cmc>\";\n        String iniCodProvINE = \"<cp>\";\n        String finCodProvINE = \"</cp>\";\n        String iniCodMunINE = \"<cm>\";\n        String finCodMunINE = \"</cm>\";\n        boolean error = false;\n        int ini, fin;\n        try {\n            URL url = new URL(pURL);\n            BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));\n            String str;\n            Municipality municipio;\n            while ((str = br.readLine()) != null) {\n                if (str.contains(iniCuerr)) {\n                    ini = str.indexOf(iniCuerr) + iniCuerr.length();\n                    fin = str.indexOf(finCuerr);\n                    if (Integer.parseInt(str.substring(ini, fin)) > 0) error = true;\n                }\n                if (error) {\n                    if (str.contains(iniDesErr)) {\n                        ini = str.indexOf(iniDesErr) + iniDesErr.length();\n                        fin = str.indexOf(finDesErr);\n                        throw (new Exception(str.substring(ini, fin)));\n                    }\n                } else {\n                    if (str.contains(iniMun)) {\n                        municipio = new Municipality();\n                        municipio.setCodemunicipalityine(0);\n                        municipio.setCodemunicipalitydgc(0);\n                        while ((str = br.readLine()) != null && !str.contains(finMun)) {\n                            if (str.contains(iniNomMun)) {\n                                ini = str.indexOf(iniNomMun) + iniNomMun.length();\n                                fin = str.indexOf(finNomMun);\n                                municipio.setMuniName(str.substring(ini, fin).trim());\n                            }\n                            if (str.contains(iniCarto)) {\n                                if (str.contains(\"URBANA\")) municipio.setIsurban(true);\n                                if (str.contains(\"RUSTICA\")) municipio.setIsrustic(true);\n                            }\n                            if (str.contains(iniCodDelMEH)) {\n                                ini = str.indexOf(iniCodDelMEH) + iniCodDelMEH.length();\n                                fin = str.indexOf(finCodDelMEH);\n                                municipio.setCodemunicipalitydgc(municipio.getCodemunicipalitydgc() + Integer.parseInt(str.substring(ini, fin)) * 1000);\n                            }\n                            if (str.contains(iniCodMunMEH)) {\n                                ini = str.indexOf(iniCodMunMEH) + iniCodMunMEH.length();\n                                fin = str.indexOf(finCodMunMEH);\n                                municipio.setCodemunicipalitydgc(municipio.getCodemunicipalitydgc() + Integer.parseInt(str.substring(ini, fin)));\n                            }\n                            if (str.contains(iniCodProvINE)) {\n                                ini = str.indexOf(iniCodProvINE) + iniCodProvINE.length();\n                                fin = str.indexOf(finCodProvINE);\n                                municipio.setCodemunicipalityine(municipio.getCodemunicipalityine() + Integer.parseInt(str.substring(ini, fin)) * 1000);\n                            }\n                            if (str.contains(iniCodMunINE)) {\n                                ini = str.indexOf(iniCodMunINE) + iniCodMunINE.length();\n                                fin = str.indexOf(finCodMunINE);\n                                municipio.setCodemunicipalityine(municipio.getCodemunicipalityine() + Integer.parseInt(str.substring(ini, fin)));\n                            }\n                            municipio.setDescription();\n                        }\n                        result.add(municipio);\n                    }\n                }\n            }\n            br.close();\n        } catch (Exception e) {\n            System.err.println(e);\n        }\n        return result;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12082140",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static Set<Street> getVias(String pURL) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static Set<Street> getVias(String pURL) {\n        Set<Street> result = new HashSet<Street>();\n        String iniCuerr = \"<cuerr>\";\n        String finCuerr = \"</cuerr>\";\n        String iniDesErr = \"<des>\";\n        String finDesErr = \"</des>\";\n        String iniVia = \"<calle>\";\n        String finVia = \"</calle>\";\n        String iniCodVia = \"<cv>\";\n        String finCodVia = \"</cv>\";\n        String iniTipoVia = \"<tv>\";\n        String finTipoVia = \"</tv>\";\n        String iniNomVia = \"<nv>\";\n        String finNomVia = \"</nv>\";\n        boolean error = false;\n        int ini, fin;\n        try {\n            URL url = new URL(pURL);\n            BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));\n            String str;\n            Street via;\n            while ((str = br.readLine()) != null) {\n                if (str.contains(iniCuerr)) {\n                    ini = str.indexOf(iniCuerr) + iniCuerr.length();\n                    fin = str.indexOf(finCuerr);\n                    if (Integer.parseInt(str.substring(ini, fin)) > 0) error = true;\n                }\n                if (error) {\n                    if (str.contains(iniDesErr)) {\n                        ini = str.indexOf(iniDesErr) + iniDesErr.length();\n                        fin = str.indexOf(finDesErr);\n                        throw (new Exception(str.substring(ini, fin)));\n                    }\n                } else {\n                    if (str.contains(iniVia)) {\n                        via = new Street();\n                        while ((str = br.readLine()) != null && !str.contains(finVia)) {\n                            if (str.contains(iniCodVia)) {\n                                ini = str.indexOf(iniCodVia) + iniCodVia.length();\n                                fin = str.indexOf(finCodVia);\n                                via.setCodeStreet(Integer.parseInt(str.substring(ini, fin)));\n                            }\n                            if (str.contains(iniTipoVia)) {\n                                TypeStreet tipo = new TypeStreet();\n                                if (!str.contains(finTipoVia)) tipo.setCodetpStreet(\"\"); else {\n                                    ini = str.indexOf(iniTipoVia) + iniTipoVia.length();\n                                    fin = str.indexOf(finTipoVia);\n                                    tipo.setCodetpStreet(str.substring(ini, fin));\n                                }\n                                tipo.setDescription(getDescripcionTipoVia(tipo.getCodetpStreet()));\n                                via.setTypeStreet(tipo);\n                            }\n                            if (str.contains(iniNomVia)) {\n                                ini = str.indexOf(iniNomVia) + iniNomVia.length();\n                                fin = str.indexOf(finNomVia);\n                                via.setStreetName(str.substring(ini, fin).trim());\n                            }\n                        }\n                        result.add(via);\n                    }\n                }\n            }\n            br.close();\n        } catch (Exception e) {\n            System.err.println(e);\n        }\n        return result;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12082150",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static Set<Address> getDatosCatastrales(String pURL) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static Set<Address> getDatosCatastrales(String pURL) {\n        Set<Address> result = new HashSet<Address>();\n        String iniCuerr = \"<cuerr>\";\n        String finCuerr = \"</cuerr>\";\n        String iniDesErr = \"<des>\";\n        String finDesErr = \"</des>\";\n        String iniInm1 = \"<rcdnp>\";\n        String finInm1 = \"</rcdnp>\";\n        String iniInm2 = \"<bi>\";\n        String finInm2 = \"</bi>\";\n        String iniPC1 = \"<pc1>\";\n        String iniPC2 = \"<pc2>\";\n        String finPC1 = \"</pc1>\";\n        String finPC2 = \"</pc2>\";\n        String iniCar = \"<car>\";\n        String finCar = \"</car>\";\n        String iniCC1 = \"<cc1>\";\n        String finCC1 = \"</cc1>\";\n        String iniCC2 = \"<cc2>\";\n        String finCC2 = \"</cc2>\";\n        String iniLDT = \"<ldt>\";\n        String iniBq = \"<bq>\";\n        String finBq = \"</bq>\";\n        String iniEs = \"<es>\";\n        String finEs = \"</es>\";\n        String iniPt = \"<pt>\";\n        String finPt = \"</pt>\";\n        String iniPu = \"<pu>\";\n        String finPu = \"</pu>\";\n        boolean error = false;\n        int ini, fin;\n        int postal = 0;\n        try {\n            URL url = new URL(pURL);\n            BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));\n            String str;\n            while ((str = br.readLine()) != null) {\n                if (str.contains(iniCuerr)) {\n                    ini = str.indexOf(iniCuerr) + iniCuerr.length();\n                    fin = str.indexOf(finCuerr);\n                    if (Integer.parseInt(str.substring(ini, fin)) > 0) error = true;\n                }\n                if (error) {\n                    if (str.contains(iniDesErr)) {\n                        ini = str.indexOf(iniDesErr) + iniDesErr.length();\n                        fin = str.indexOf(finDesErr);\n                        throw (new Exception(str.substring(ini, fin)));\n                    }\n                } else {\n                    if (str.contains(iniInm1) || str.contains(iniInm2)) {\n                        Address inmueble = new Address();\n                        while ((str = br.readLine()) != null && !str.contains(finInm1) && !str.contains(finInm2)) {\n                            if (str.contains(iniPC1) && str.contains(finPC1)) {\n                                ini = str.indexOf(iniPC1) + iniPC1.length();\n                                fin = str.indexOf(finPC1);\n                                inmueble.setDescription(str.substring(ini, fin));\n                            }\n                            if (str.contains(iniPC2) && str.contains(finPC2)) {\n                                ini = str.indexOf(iniPC2) + iniPC2.length();\n                                fin = str.indexOf(finPC2);\n                                inmueble.setDescription(inmueble.getDescription().concat(str.substring(ini, fin)));\n                            }\n                            if (str.contains(iniLDT) && str.contains(\"-\")) {\n                                postal = Integer.parseInt(str.substring(str.lastIndexOf(\"-\") - 5, str.lastIndexOf(\"-\")));\n                            }\n                            if (str.contains(iniCar) && str.contains(finCar)) {\n                                ini = str.indexOf(iniCar) + iniCar.length();\n                                fin = str.indexOf(finCar);\n                                inmueble.setDescription(inmueble.getDescription().concat(str.substring(ini, fin)));\n                            }\n                            if (str.contains(iniCC1) && str.contains(finCC1)) {\n                                ini = str.indexOf(iniCC1) + iniCC1.length();\n                                fin = str.indexOf(finCC1);\n                                inmueble.setDescription(inmueble.getDescription().concat(str.substring(ini, fin)));\n                            }\n                            if (str.contains(iniCC2) && str.contains(finCC2)) {\n                                ini = str.indexOf(iniCC2) + iniCC2.length();\n                                fin = str.indexOf(finCC2);\n                                inmueble.setDescription(inmueble.getDescription().concat(str.substring(ini, fin)));\n                            }\n                            if (str.contains(iniBq) && str.contains(finBq)) {\n                                ini = str.indexOf(iniBq) + iniBq.length();\n                                fin = str.indexOf(finBq);\n                                inmueble.setBlock(str.substring(ini, fin));\n                            }\n                            if (str.contains(iniEs) && str.contains(finEs)) {\n                                ini = str.indexOf(iniEs) + iniEs.length();\n                                fin = str.indexOf(finEs);\n                                inmueble.setStairs(str.substring(ini, fin));\n                            }\n                            if (str.contains(iniPt) && str.contains(finPt)) {\n                                ini = str.indexOf(iniPt) + iniPt.length();\n                                fin = str.indexOf(finPt);\n                                inmueble.setFloor(str.substring(ini, fin));\n                            }\n                            if (str.contains(iniPu) && str.contains(finPu)) {\n                                ini = str.indexOf(iniPu) + iniPu.length();\n                                fin = str.indexOf(finPu);\n                                inmueble.setDoor(str.substring(ini, fin));\n                            }\n                        }\n                        result.add(inmueble);\n                    }\n                }\n            }\n            br.close();\n            if (result.size() == 1) {\n                Object ad[] = result.toArray();\n                Coordinate coord = ConversorCoordenadas.getCoordenadas(((Address) ad[0]).getDescription());\n                coord.setPostcode(postal);\n                for (Address inm : result) inm.setCoodinate(coord);\n            }\n        } catch (Exception e) {\n            System.err.println(e);\n        }\n        return result;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01208401",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String hash(String str) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String hash(String str) {\n        if (str == null || str.length() == 0) {\n            throw new CaptureSecurityException(\"String to encript cannot be null or zero length\");\n        }\n        StringBuilder hexString = new StringBuilder();\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            md.update(str.getBytes());\n            byte[] hash = md.digest();\n            for (byte element : hash) {\n                if ((0xff & element) < 0x10) {\n                    hexString.append('0').append(Integer.toHexString((0xFF & element)));\n                } else {\n                    hexString.append(Integer.toHexString(0xFF & element));\n                }\n            }\n        } catch (NoSuchAlgorithmException e) {\n            throw new CaptureSecurityException(e);\n        }\n        return hexString.toString();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12085127",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic final void navigate(final URL url) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public final void navigate(final URL url) {\n        try {\n            EncogLogging.log(EncogLogging.LEVEL_INFO, \"Navigating to page:\" + url);\n            final URLConnection connection = url.openConnection();\n            final InputStream is = connection.getInputStream();\n            navigate(url, is);\n            is.close();\n        } catch (final IOException e) {\n            EncogLogging.log(EncogLogging.LEVEL_ERROR, e);\n            throw new BrowseError(e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12089424",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static Image getPluginImage(Object plugin, String name) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static Image getPluginImage(Object plugin, String name) {\n        try {\n            try {\n                URL url = getPluginImageURL(plugin, name);\n                if (m_URLImageMap.containsKey(url)) return m_URLImageMap.get(url);\n                InputStream is = url.openStream();\n                Image image;\n                try {\n                    image = getImage(is);\n                    m_URLImageMap.put(url, image);\n                } finally {\n                    is.close();\n                }\n                return image;\n            } catch (Throwable e) {\n            }\n        } catch (Throwable e) {\n        }\n        return null;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12096098",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String calculatesMD5(String plainText) throws NoSuchAlgorithmException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String calculatesMD5(String plainText) throws NoSuchAlgorithmException {\n        MessageDigest mdAlgorithm = MessageDigest.getInstance(\"MD5\");\n        mdAlgorithm.update(plainText.getBytes());\n        byte[] digest = mdAlgorithm.digest();\n        StringBuffer hexString = new StringBuffer();\n        for (int i = 0; i < digest.length; i++) {\n            plainText = Integer.toHexString(0xFF & digest[i]);\n            if (plainText.length() < 2) {\n                plainText = \"0\" + plainText;\n            }\n            hexString.append(plainText);\n        }\n        return hexString.toString();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12097099",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic String[] getLine(String prefecture) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public String[] getLine(String prefecture) {\n        HttpClient httpclient = null;\n        String[] lines = null;\n        try {\n            httpclient = new DefaultHttpClient();\n            List<NameValuePair> qparams = new ArrayList<NameValuePair>();\n            qparams.add(new BasicNameValuePair(\"method\", \"getLines\"));\n            qparams.add(new BasicNameValuePair(\"prefecture\", prefecture));\n            URI uri = URIUtils.createURI(\"http\", \"express.heartrails.com\", -1, \"/api/xml\", URLEncodedUtils.format(qparams, \"UTF-8\"), null);\n            HttpGet httpget = new HttpGet(uri);\n            HttpResponse response = httpclient.execute(httpget);\n            HttpEntity entity = response.getEntity();\n            InputStream instream = entity.getContent();\n            BufferedReader reader = new BufferedReader(new InputStreamReader(instream, \"UTF-8\"));\n            StringBuffer buf = new StringBuffer();\n            String str;\n            while ((str = reader.readLine()) != null) {\n                buf.append(str);\n                buf.append(\"\\n\");\n            }\n            reader.close();\n            LineResponse res = new LineResponse(buf.toString());\n            lines = res.getLineAsString();\n        } catch (URISyntaxException ex) {\n            ex.printStackTrace();\n        } catch (ClientProtocolException ex) {\n            ex.printStackTrace();\n        } catch (IOException ex) {\n            ex.printStackTrace();\n        } catch (SAXException ex) {\n            ex.printStackTrace();\n        } catch (ParserConfigurationException ex) {\n            ex.printStackTrace();\n        } finally {\n            httpclient.getConnectionManager().shutdown();\n        }\n        return lines;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12097100",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void getStation(String prefecture, String line) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void getStation(String prefecture, String line) {\n        HttpClient httpclient = null;\n        try {\n            httpclient = new DefaultHttpClient();\n            List<NameValuePair> qparams = new ArrayList<NameValuePair>();\n            qparams.add(new BasicNameValuePair(\"method\", \"getStations\"));\n            qparams.add(new BasicNameValuePair(\"prefecture\", prefecture));\n            qparams.add(new BasicNameValuePair(\"line\", line));\n            URI uri = URIUtils.createURI(\"http\", \"express.heartrails.com\", -1, \"/api/xml\", URLEncodedUtils.format(qparams, \"UTF-8\"), null);\n            HttpGet httpget = new HttpGet(uri);\n            HttpResponse response = httpclient.execute(httpget);\n            HttpEntity entity = response.getEntity();\n            InputStream instream = entity.getContent();\n            BufferedReader reader = new BufferedReader(new InputStreamReader(instream, \"UTF-8\"));\n            StringBuffer buf = new StringBuffer();\n            String str;\n            while ((str = reader.readLine()) != null) {\n                buf.append(str);\n                buf.append(\"\\n\");\n            }\n            reader.close();\n            stationRes = new StationResponse(buf.toString());\n        } catch (URISyntaxException ex) {\n            ex.printStackTrace();\n        } catch (ClientProtocolException ex) {\n            ex.printStackTrace();\n        } catch (IOException ex) {\n            ex.printStackTrace();\n        } catch (SAXException ex) {\n            ex.printStackTrace();\n        } catch (ParserConfigurationException ex) {\n            ex.printStackTrace();\n        } finally {\n            mSearchStation.setEnabled(true);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12097948",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic AsciiParser(String systemID) throws GridBagException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public AsciiParser(String systemID) throws GridBagException {\n        String id = systemID;\n        if (id.endsWith(\".xml\")) {\n            id = StringUtils.replace(id, \".xml\", \".gbc\");\n        }\n        ClassLoader loader = this.getClass().getClassLoader();\n        URL url = loader.getResource(id);\n        if (url == null) {\n            throw new GridBagException(\"Cannot located resource : \\\"\" + systemID + \"\\\".\");\n        }\n        try {\n            InputStream inStream = url.openStream();\n            constraints = getLines(inStream);\n            inStream.close();\n        } catch (IOException ie1) {\n            throw new GridBagException(\"Cannot read from resource \" + id);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_00120983",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "void sort(int a[]) throws Exception {\n        for (int i = a.length; --i >= 0; ) {\n            boolean flipped = false;\n            for (int j = 0; j < i; j++) {\n                if (stopRequested) {\n                    return;\n                }\n                if (a[j] > a[j + 1]) {\n                    int T = a[j];\n                    a[j] = a[j + 1];\n                    a[j + 1] = T;\n                    flipped = true;\n                }\n                pause(i, j);\n            }\n            if (!flipped) {\n                return;\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12101435",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void invokeTest(String queryfile, String target) {\n        try {\n            String query = IOUtils.toString(XPathMarkBenchmarkTest.class.getResourceAsStream(queryfile)).trim();\n            String args = EXEC_CMD + \" \\\"\" + query + \"\\\" \\\"\" + target + '\"';\n            System.out.println(\"Invoke command: \\n \" + args);\n            Process proc = Runtime.getRuntime().exec(args, null, benchmarkDir);\n            InputStream is = proc.getInputStream();\n            File outFile = new File(outDir, queryfile + \".result\");\n            IOUtils.copy(is, new FileOutputStream(outFile));\n            is.close();\n            int ret = proc.waitFor();\n            if (ret != 0) {\n                System.out.println(\"process exited with value : \" + ret);\n            }\n        } catch (IOException ioe) {\n            throw new IllegalStateException(ioe);\n        } catch (InterruptedException irre) {\n            throw new IllegalStateException(irre);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12102996",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic Object init() throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n    public Object init() throws Exception {\n        if (url != null) {\n            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\n            ClassLoader parent = getClass().getClassLoader();\n            GroovyClassLoader loader = new GroovyClassLoader(parent);\n            Class groovyClass = loader.parseClass(new File(url.getFile()));\n            groovyObject = (GroovyObject) groovyClass.newInstance();\n            reader.close();\n            initDeclaredMethods();\n            return groovyObject;\n        } else return null;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12104132",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void render(Output output) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n    public void render(Output output) throws IOException {\n        output.setStatus(statusCode, statusMessage);\n        if (headersMap != null) {\n            Iterator<Entry<String, String>> iterator = headersMap.entrySet().iterator();\n            while (iterator.hasNext()) {\n                Entry<String, String> header = iterator.next();\n                output.addHeader(header.getKey(), header.getValue());\n            }\n        }\n        if (file != null) {\n            InputStream inputStream = new FileInputStream(file);\n            try {\n                output.open();\n                OutputStream out = output.getOutputStream();\n                IOUtils.copy(inputStream, out);\n            } finally {\n                inputStream.close();\n                output.close();\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12106167",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void init(Locale lng) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void init(Locale lng) {\n        try {\n            Locale toLoad = lng != null ? lng : DEFAULT_LOCALE;\n            URL url = ClassLoader.getSystemResource(\"locales/\" + toLoad.getISO3Language() + \".properties\");\n            if (url == null) {\n                url = ClassLoader.getSystemResource(\"locales/\" + DEFAULT_LOCALE.getISO3Language() + \".properties\");\n            }\n            PROPS.clear();\n            PROPS.load(url.openStream());\n        } catch (IOException ioe) {\n            try {\n                URL url = ClassLoader.getSystemResource(\"locales/\" + DEFAULT_LOCALE.getISO3Language() + \".properties\");\n                PROPS.clear();\n                PROPS.load(url.openStream());\n            } catch (Exception e) {\n                e.printStackTrace();\n                System.exit(99);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n            System.exit(99);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12107388",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static List<CountryEntry> retrieveCountries() throws IOException {\n        URL url = new URL(\"http://\" + ISO_3166_HOST + ISO_3166_TXT_FILE_PATH);\n        BufferedReader input = new BufferedReader(new InputStreamReader(url.openStream()));\n        List<CountryEntry> countries = new LinkedList<CountryEntry>();\n        boolean parsing = false;\n        int trCount = 0;\n        int tdCount = 0;\n        CountryEntry current = new CountryEntry();\n        String nextLine = input.readLine();\n        while (nextLine != null) {\n            if (nextLine.startsWith(\"<table\")) {\n                parsing = true;\n            }\n            if (nextLine.startsWith(\"</table>\")) {\n                break;\n            }\n            if (parsing) {\n                if (nextLine.startsWith(\"<tr\")) {\n                    trCount++;\n                } else {\n                    if ((trCount > 1 && nextLine.startsWith(\"<td\"))) {\n                        tdCount++;\n                        String data = pullData(nextLine);\n                        switch(tdCount) {\n                            case 1:\n                                current.setName(getCountryName(data));\n                                break;\n                            case 2:\n                                current.setNumber(data);\n                                break;\n                            case 3:\n                                current.setAlpha3(data);\n                                break;\n                            case 4:\n                                current.setAlpha2(data);\n                                break;\n                            case 5:\n                                countries.add(current);\n                                current = new CountryEntry();\n                                tdCount = 0;\n                                break;\n                            default:\n                                String msg = \"Parsing error.  Unexpected column: [\" + data + \"]\";\n                                throw new IllegalStateException(msg);\n                        }\n                    }\n                }\n            }\n            nextLine = input.readLine();\n        }\n        input.close();\n        return countries;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12109713",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "protected long loadFromSource(long afterThisTime) {\n        long startTime = System.currentTimeMillis();\n        QuoteDataSourceDescriptor quoteDataSourceDescriptor = (QuoteDataSourceDescriptor) dataSourceDescriptor;\n        List<Quote> dataPool = dataPools.get(quoteDataSourceDescriptor.sourceSymbol);\n        Calendar calendar = Calendar.getInstance();\n        calendar.clear();\n        SimpleDateFormat sdf = new SimpleDateFormat(quoteDataSourceDescriptor.dateFormat, Locale.US);\n        Date fromDate = new Date();\n        Date toDate = new Date();\n        if (afterThisTime == FIRST_TIME_LOAD) {\n            fromDate = quoteDataSourceDescriptor.fromDate;\n            toDate = quoteDataSourceDescriptor.toDate;\n        } else {\n            calendar.setTimeInMillis(afterThisTime);\n            fromDate = calendar.getTime();\n        }\n        calendar.setTime(fromDate);\n        int a = calendar.get(Calendar.MONTH);\n        int b = calendar.get(Calendar.DAY_OF_MONTH);\n        int c = calendar.get(Calendar.YEAR);\n        calendar.setTime(toDate);\n        int d = calendar.get(Calendar.MONTH);\n        int e = calendar.get(Calendar.DAY_OF_MONTH);\n        int f = calendar.get(Calendar.YEAR);\n        BufferedReader dis;\n        StringBuffer urlStr = new StringBuffer();\n        urlStr.append(\"http://table.finance.yahoo.com/table.csv\").append(\"?s=\");\n        urlStr.append(quoteDataSourceDescriptor.sourceSymbol);\n        urlStr.append(\"&a=\" + a + \"&b=\" + b + \"&c=\" + c + \"&d=\" + d + \"&e=\" + e + \"&f=\" + f);\n        urlStr.append(\"&g=d&ignore=.csv\");\n        try {\n            URL url = new URL(urlStr.toString());\n            System.out.println(url);\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n            conn.setAllowUserInteraction(true);\n            conn.setRequestMethod(\"GET\");\n            conn.setInstanceFollowRedirects(true);\n            InputStreamReader isr = new InputStreamReader(conn.getInputStream());\n            dis = new BufferedReader(isr);\n            String s = dis.readLine();\n            int iDateTime = 0;\n            int iOpen = 1;\n            int iHigh = 2;\n            int iLow = 3;\n            int iClose = 4;\n            int iVolume = 5;\n            int iAdjClose = 6;\n            count = 0;\n            calendar.clear();\n            while ((s = dis.readLine()) != null) {\n                String[] items;\n                items = s.split(\",\");\n                if (items.length < 6) {\n                    break;\n                }\n                Date date = null;\n                try {\n                    date = sdf.parse(items[iDateTime].trim());\n                } catch (ParseException ex) {\n                    ex.printStackTrace();\n                    continue;\n                }\n                calendar.clear();\n                calendar.setTime(date);\n                long time = calendar.getTimeInMillis();\n                if (time <= afterThisTime) {\n                    continue;\n                }\n                Quote quote = new Quote();\n                quote.time = time;\n                quote.open = Float.parseFloat(items[iOpen].trim());\n                quote.high = Float.parseFloat(items[iHigh].trim());\n                quote.low = Float.parseFloat(items[iLow].trim());\n                quote.close = Float.parseFloat(items[iClose].trim());\n                quote.volume = Float.parseFloat(items[iVolume].trim()) / 100f;\n                quote.amount = -1;\n                quote.close_adj = Float.parseFloat(items[iAdjClose].trim());\n                if (quote.high * quote.low * quote.close == 0) {\n                    quote = null;\n                    continue;\n                }\n                dataPool.add(quote);\n                if (count == 0) {\n                    firstTime = time;\n                }\n                lastTime = time;\n                setAscending((lastTime >= firstTime) ? true : false);\n                count++;\n            }\n        } catch (Exception ex) {\n            System.out.println(\"Error in Reading File: \" + ex.getMessage());\n        }\n        long newestTime = (lastTime >= firstTime) ? lastTime : firstTime;\n        return newestTime;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12115248",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void actionPerformed(ActionEvent evt) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void actionPerformed(ActionEvent evt) {\n            try {\n                File tempFile = new File(\"/tmp/controler.xml\");\n                File f = new File(\"/tmp/controler-temp.xml\");\n                BufferedInputStream copySource = new BufferedInputStream(new FileInputStream(tempFile));\n                BufferedOutputStream copyDestination = new BufferedOutputStream(new FileOutputStream(f));\n                int read = 0;\n                while (read != -1) {\n                    read = copySource.read(buffer, 0, BUFFER_SIZE);\n                    if (read != -1) {\n                        copyDestination.write(buffer, 0, read);\n                    }\n                }\n                copyDestination.write(new String(\"</log>\\n\").getBytes());\n                copySource.close();\n                copyDestination.close();\n                XMLParser parser = new XMLParser(\"Controler\");\n                parser.parse(f);\n                f.delete();\n            } catch (IOException ex) {\n                System.out.println(\"An error occured during the file copy!\");\n            }\n        }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12116028",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void main(String[] args) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void main(String[] args) throws Exception {\n        File inputFile = new File(args[0]);\n        BufferedReader reader = new BufferedReader(new FileReader(inputFile));\n        StringBuffer stringBuffer = new StringBuffer();\n        String readed;\n        while ((readed = reader.readLine()) != null) stringBuffer.append(readed + \"\\r\\n\");\n        readed = stringBuffer.toString();\n        reader.close();\n        File outputFile = new File(args[0] + \".output\");\n        BufferedWriter writer = new BufferedWriter(new FileWriter(outputFile));\n        readed = readed.replaceAll(\"\\\\t+\", \"#\");\n        readed = readed.replaceAll(\"\\\\s*#\\\\s*\", \"#\");\n        readed = readed.replaceAll(\"Latitude,.*\", \"\");\n        readed = readed.replaceAll(\"Flag of\", \"\");\n        readed = readed.replaceAll(\"^\\\\s+$\", \"\");\n        writer.write(readed);\n        writer.close();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12119068",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic String drive() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public String drive() {\n        logger.info(\"\\n\");\n        logger.info(\"===========================================================\");\n        logger.info(\"========== Start drive method =============================\");\n        logger.info(\"===========================================================\");\n        logger.entering(cl, \"drive\");\n        xstream = new XStream(new JsonHierarchicalStreamDriver());\n        xstream.setMode(XStream.NO_REFERENCES);\n        xstream.alias(\"AuditDiffFacade\", AuditDiffFacade.class);\n        File auditSchemaFile = null;\n        File auditSchemaXsdFile = null;\n        try {\n            if (configFile == null) {\n                logger.severe(\"Request Failed: configFile is null\");\n                return null;\n            } else {\n                if (configFile.getAuditSchemaFile() != null) {\n                    logger.info(\"auditSchemaFile=\" + configFile.getAuditSchemaFile());\n                    logger.info(\"auditSchemaXsdFile=\" + configFile.getAuditSchemaXsdFile());\n                    logger.info(\"plnXpathFile=\" + configFile.getPlnXpathFile());\n                    logger.info(\"auditSchemaFileDir=\" + configFile.getAuditSchemaFileDir());\n                    logger.info(\"auditReportFile=\" + configFile.getAuditReportFile());\n                    logger.info(\"auditReportXsdFile=\" + configFile.getAuditReportXsdFile());\n                } else {\n                    logger.severe(\"Request Failed: auditSchemaFile is null\");\n                    return null;\n                }\n            }\n            File test = new File(configFile.getAuditSchemaFileDir() + File.separator + \"temp.xml\");\n            auditSchemaFile = new File(configFile.getAuditSchemaFile());\n            if (!auditSchemaFile.exists() || auditSchemaFile.length() == 0L) {\n                logger.severe(\"Request Failed: the audit schema file does not exist or empty\");\n                return null;\n            }\n            auditSchemaXsdFile = null;\n            if (configFile.getAuditSchemaXsdFile() != null) {\n                auditSchemaXsdFile = new File(configFile.getAuditSchemaXsdFile());\n            } else {\n                logger.severe(\"Request Failed: the audit schema xsd file is null\");\n                return null;\n            }\n            if (!auditSchemaXsdFile.exists() || auditSchemaXsdFile.length() == 0L) {\n                logger.severe(\"Request Failed: the audit schema xsd file does not exist or empty\");\n                return null;\n            }\n            SchemaFactory factory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);\n            Schema schema = factory.newSchema(auditSchemaXsdFile);\n            Validator validator = schema.newValidator();\n            Source source = new StreamSource(auditSchemaFile);\n            validator.validate(source);\n        } catch (SAXException e) {\n            logger.warning(\"SAXException caught trying to validate input Schema Files: \");\n            e.printStackTrace();\n        } catch (IOException e) {\n            logger.warning(\"IOException caught trying to read input Schema File: \");\n            e.printStackTrace();\n        }\n        String xPathFile = null;\n        if (configFile.getPlnXpathFile() != null) {\n            xPathFile = configFile.getPlnXpathFile();\n            logger.info(\"Attempting to retrieve xpaths from file: '\" + xPathFile + \"'\");\n            XpathUtility.readFile(xPathFile);\n        } else {\n            logger.severe(\"Configuration file does not have a value for the Xpath Filename\");\n            return null;\n        }\n        Properties xpathProps = XpathUtility.getXpathsProps();\n        if (xpathProps == null) {\n            logger.severe(\"No Xpaths could be extracted from file: '\" + xPathFile + \"' - xpath properties object is null\");\n            return null;\n        }\n        if (xpathProps.isEmpty()) {\n            logger.severe(\"No Xpaths could be extracted from file: '\" + xPathFile + \"' - xpath properties object is empty\");\n            return null;\n        }\n        logger.info(xpathProps.size() + \" xpaths retrieved.\");\n        for (String key : xpathProps.stringPropertyNames()) {\n            logger.info(\"Key=\" + key + \"   Value=\" + xpathProps.getProperty(key));\n        }\n        logger.info(\"\\n\");\n        logger.info(\"===========================================================\");\n        logger.info(\"========== Process XML Schema File BEGIN ==================\");\n        logger.info(\"===========================================================\");\n        SchemaSAXReader sax = new SchemaSAXReader();\n        ArrayList<String> key_matches = new ArrayList<String>(sax.parseDocument(auditSchemaFile, xpathProps));\n        logger.info(\"Check Input xpath hash against xpaths found in Schema.\");\n        Comparison comp_keys = new Comparison();\n        ArrayList<String> in_xpath_not_in_schema = new ArrayList<String>(comp_keys.keys_not_in_both_hashes(xpathProps, Utility.arraylist_to_map(key_matches, \"key_matches\"), \"xpath Properties\", \"hm_key_matches\"));\n        if (in_xpath_not_in_schema.size() > 0) {\n            logger.severe(\"All XPaths in Input xpath Properties list were not found in Schema.\");\n            logger.severe(\"Xpaths in xpath Properties list missing from schema file:\" + xstream.toXML(in_xpath_not_in_schema));\n            logger.severe(\"Quitting.\");\n            return null;\n        }\n        Map<String, Map> schema_audit_hashbox = sax.get_audit_hashbox();\n        logger.info(\"schema_audit_hashbox\\n\" + xstream.toXML(schema_audit_hashbox));\n        Map<String, Map> schema_network_hashbox = sax.get_net_hashbox();\n        logger.info(\"schema_network_hashbox\\n\" + xstream.toXML(schema_network_hashbox));\n        Map<String, Map> schema_host_hashbox = sax.get_host_hashbox();\n        Map<String, Map> schema_au_hashbox = sax.get_au_hashbox();\n        logger.info(\"schema_au_hashbox\\n\" + xstream.toXML(schema_au_hashbox));\n        Hasherator hr = new Hasherator();\n        Set<String> s_host_hb_additions = new HashSet<String>();\n        s_host_hb_additions.add(\"/SSP/network/@network_id\");\n        schema_host_hashbox = hr.copy_hashbox_entries(schema_network_hashbox, schema_host_hashbox, s_host_hb_additions);\n        logger.info(\"schema_host_hashbox(after adding network name)\\n\" + xstream.toXML(schema_host_hashbox));\n        Map<String, String> transforms_s_au_hb = new HashMap<String, String>();\n        transforms_s_au_hb.put(\"/SSP/archivalUnits/au/auCapabilities/storageRequired/@max_size\", \"s_gigabytes_to_string_bytes_unformatted()\");\n        schema_au_hashbox = hr.convert_hashbox_vals(schema_au_hashbox, transforms_s_au_hb);\n        Map<String, String> transforms_s_host_hb = new HashMap<String, String>();\n        transforms_s_host_hb.put(\"/SSP/hosts/host/hostCapabilities/storageAvailable/@max_size\", \"s_gigabytes_to_string_bytes_unformatted()\");\n        schema_host_hashbox = hr.convert_hashbox_vals(schema_host_hashbox, transforms_s_host_hb);\n        logger.info(\"schema_host_hashbox(after transformations)\\n\" + xstream.toXML(schema_host_hashbox));\n        logger.info(\"\\n\");\n        logger.info(\"========== Process Schema  END ============================\");\n        logger.info(\"\\n\");\n        logger.info(\"========== Database Operations ============================\");\n        MYSQLWorkPlnHostSummaryDAO daowphs = new MYSQLWorkPlnHostSummaryDAO();\n        daowphs.drop();\n        daowphs.create();\n        daowphs.updateTimestamp();\n        CachedRowSet rs_q0_N = daowphs.query_0_N();\n        double d_space_total = DBUtil.get_single_db_double_value(rs_q0_N, \"net_sum_repo_size\");\n        double d_space_used = DBUtil.get_single_db_double_value(rs_q0_N, \"net_sum_used_space\");\n        double d_space_free = d_space_total - d_space_used;\n        double d_avg_uptime = DBUtil.get_single_db_double_value(rs_q0_N, \"net_avg_uptime\");\n        long space_total = (long) d_space_total;\n        long space_used = (long) d_space_used;\n        long space_free = space_total - space_used;\n        String f_space_total = Utility.l_bytes_to_other_units_formatted(space_total, 3, \"T\");\n        String f_space_used = Utility.l_bytes_to_other_units_formatted(space_used, 3, \"G\");\n        String f_space_free = Utility.l_bytes_to_other_units_formatted(space_free, 3, \"T\");\n        String f_space_free2 = Utility.l_bytes_to_other_units_formatted(space_free, 3, null);\n        logger.info(\"d_space_total: \" + d_space_total + \"\\n\" + \"d_space_used: \" + d_space_used + \"\\n\" + \"space_total: \" + space_total + \"\\n\" + \"space_used: \" + space_used + \"\\n\" + \"space_free: \" + space_free + \"\\n\\n\" + \"Double.toString( d_space_total ): \" + Double.toString(d_space_total) + \"\\n\\n\" + \"f_space_total: \" + f_space_total + \"\\n\" + \"f_space_used: \" + f_space_used + \"\\n\" + \"f_space_free: \" + f_space_free + \"\\n\" + \"f_space_free2: \" + f_space_free2);\n        rprtCnst = new ReportData();\n        logger.info(\"\\n\");\n        logger.info(\"========== Load Report Constants from Calculations ===========\");\n        rprtCnst.addKV(\"REPORT_HOSTS_TOTAL_DISKSPACE\", f_space_total);\n        rprtCnst.addKV(\"REPORT_HOSTS_TOTAL_DISKSPACE_USED\", f_space_used);\n        rprtCnst.addKV(\"REPORT_HOSTS_TOTAL_DISKSPACE_FREE\", f_space_free);\n        rprtCnst.addKV(\"REPORT_HOSTS_MEAN_UPTIME\", Utility.ms_to_dd_hh_mm_ss_formatted((long) d_avg_uptime));\n        logger.info(\"r=\\n\" + rprtCnst.toString());\n        logger.info(\"\\n\");\n        logger.info(\"========== Load Report Constants from ConfigFile =============\");\n        rprtCnst.addKV(\"REPORT_FILENAME_SCHEMA_FILENAME\", configFile.getAuditSchemaFile());\n        rprtCnst.addKV(\"REPORT_FILENAME_SCHEMA_FILE_XSD_FILENAME\", configFile.getAuditSchemaXsdFile());\n        rprtCnst.addKV(\"REPORT_FILENAME_XML_DIFF_FILENAME\", configFile.getAuditReportFile());\n        rprtCnst.addKV(\"REPORT_FILENAME_XML_DIFF_FILE_XSD_FILENAME\", configFile.getAuditReportXsdFile());\n        logger.info(\"\\n\");\n        logger.info(\"========== Load Report Constants from Hashboxes ==============\");\n        Set auditHBKeySet = hr.getMapKeyset(schema_audit_hashbox, \"schema_audit_hashbox\");\n        String audit_id = hr.singleKeysetEntryToString(auditHBKeySet);\n        logger.info(\"audit_id: \" + audit_id);\n        Set networkHBKeySet = hr.getMapKeyset(schema_network_hashbox, \"schema_network_hashbox\");\n        String network_id = hr.singleKeysetEntryToString(networkHBKeySet);\n        logger.info(\"network_id: \" + network_id);\n        rprtCnst.addKV(\"REPORT_AUDIT_ID\", audit_id);\n        rprtCnst.addKV(\"REPORT_AUDIT_REPORT_EMAIL\", hr.extractSingleValueFromHashbox(schema_audit_hashbox, \"schema_audit_hashbox\", audit_id, \"/SSP/audit/auditReportEmail\"));\n        rprtCnst.addKV(\"REPORT_AUDIT_INTERVAL\", hr.extractSingleValueFromHashbox(schema_audit_hashbox, \"schema_audit_hashbox\", audit_id, \"/SSP/audit/auditReportInterval/@maxDays\"));\n        rprtCnst.addKV(\"REPORT_SCHEMA_VERSION\", hr.extractSingleValueFromHashbox(schema_audit_hashbox, \"schema_audit_hashbox\", audit_id, \"/SSP/audit/schemaVersion\"));\n        rprtCnst.addKV(\"REPORT_CLASSIFICATION_GEOGRAPHIC_SUMMARY_SCHEME\", hr.extractSingleValueFromHashbox(schema_audit_hashbox, \"schema_audit_hashbox\", audit_id, \"/SSP/audit/geographicSummaryScheme\"));\n        rprtCnst.addKV(\"REPORT_CLASSIFICATION_SUBJECT_SUMMARY_SCHEME\", hr.extractSingleValueFromHashbox(schema_audit_hashbox, \"schema_audit_hashbox\", audit_id, \"/SSP/audit/subjectSummaryScheme\"));\n        rprtCnst.addKV(\"REPORT_CLASSIFICATION_OWNER_INSTITUTION_SUMMARY_SCHEME\", hr.extractSingleValueFromHashbox(schema_audit_hashbox, \"schema_audit_hashbox\", audit_id, \"/SSP/audit/ownerInstSummaryScheme\"));\n        rprtCnst.addKV(\"REPORT_NETWORK_ID\", network_id);\n        rprtCnst.addKV(\"REPORT_NETWORK_ADMIN_EMAIL\", hr.extractSingleValueFromHashbox(schema_network_hashbox, \"schema_network_hashbox\", network_id, \"/SSP/network/networkIdentity/accessBase/@adminEmail\"));\n        rprtCnst.addKV(\"REPORT_GEOGRAPHIC_CODING\", hr.extractSingleValueFromHashbox(schema_network_hashbox, \"schema_network_hashbox\", network_id, \"/SSP/network/networkIdentity/geographicCoding\"));\n        logger.info(\"\\n\");\n        logger.info(\"===========================================================\");\n        logger.info(\"========== Process Network Data BEGIN======================\");\n        logger.info(\"===========================================================\");\n        Set<String> tableSet0 = reportAuOverviewFacade.findAllTables();\n        String reportAuOverviewTable = \"report_au_overview\";\n        int n_tabs = 0;\n        if (tableSet0 != null && !tableSet0.isEmpty()) {\n            logger.fine(\"Table List N=\" + tableSet0.size());\n            for (String tableName : tableSet0) {\n                n_tabs++;\n                if (tableName.equalsIgnoreCase(reportAuOverviewTable)) {\n                    logger.fine(n_tabs + \" \" + tableName + \" <--\");\n                } else {\n                    logger.fine(n_tabs + \" \" + tableName);\n                }\n            }\n        } else {\n            logger.fine(\"No tables found in DB.\");\n        }\n        if (!tableSet0.contains(reportAuOverviewTable)) {\n            logger.info(\"Database does not contain table '\" + reportAuOverviewTable + \"'\");\n        }\n        List<ReportAuOverview> repAuOvTabAllData = null;\n        repAuOvTabAllData = reportAuOverviewFacade.findAll();\n        if (repAuOvTabAllData != null && !(repAuOvTabAllData.isEmpty())) {\n            logger.fine(\"\\n\" + reportAuOverviewTable + \" table has \" + repAuOvTabAllData.size() + \" rows.\");\n            int n_rows = 0;\n            for (ReportAuOverview row : repAuOvTabAllData) {\n                n_rows++;\n                logger.fine(n_rows + \" \" + row.toString());\n            }\n        } else {\n            logger.fine(reportAuOverviewTable + \" is null, empty, or nonexistent.\");\n        }\n        logger.fine(\"report_au_overview Table xstream Dump:\\n\" + xstream.toXML(repAuOvTabAllData));\n        logger.fine(\"\\n\");\n        logger.fine(\"Iterate over repAuOvTabAllData 2\");\n        Iterator it = repAuOvTabAllData.iterator();\n        int n_el = 0;\n        while (it.hasNext()) {\n            ++n_el;\n            String el = it.next().toString();\n            logger.fine(n_el + \". \" + el);\n        }\n        Class aClass = edu.harvard.iq.safe.saasystem.entities.ReportAuOverview.class;\n        String reportAuOverviewTableName = reportAuOverviewFacade.getTableName();\n        logger.fine(\"\\n\");\n        logger.fine(\"EntityManager Tests\");\n        logger.fine(\"Table: \" + reportAuOverviewTableName);\n        logger.fine(\"\\n\");\n        logger.fine(\"Schema: \" + reportAuOverviewFacade.getSchema());\n        logger.fine(\"\\n\");\n        Set columnList = reportAuOverviewFacade.getColumnList(reportAuOverviewFacade.getTableName());\n        logger.fine(\"Columns (fields) in table '\" + reportAuOverviewTableName + \"' (N=\" + columnList.size() + \")\");\n        Set<String> colList = new HashSet();\n        Iterator colNames = columnList.iterator();\n        int n_el2 = 0;\n        while (colNames.hasNext()) {\n            ++n_el2;\n            String el = colNames.next().toString();\n            logger.fine(n_el2 + \". \" + el);\n            colList.add(el);\n        }\n        logger.fine(colList.size() + \" entries in Set 'colList' \");\n        logger.info(\"========== Query 'au_overview_table'=============\");\n        MySQLAuOverviewDAO daoao = new MySQLAuOverviewDAO();\n        CachedRowSet rs_q1_A = daoao.query_q1_A();\n        int[] au_table_rc = DBUtil.get_rs_dims(rs_q1_A);\n        logger.info(\"Au Table Query ResultSet has \" + au_table_rc[0] + \" rows and \" + au_table_rc[1] + \" columns.\");\n        rprtCnst.addKV(\"REPORT_N_AUS_IN_NETWORK\", Integer.toString(au_table_rc[0]));\n        logger.info(\"========== Create 'network_au_hashbox' ==========\");\n        Map<String, Map> network_au_hashbox = new TreeMap<String, Map>(DBUtil.rs_to_hashbox(rs_q1_A, null, \"au_id\"));\n        logger.info(\"network_au_hashbox before transformations\\n\" + xstream.toXML(network_au_hashbox));\n        Map<String, String> transforms_n_au_hb = new HashMap<String, String>();\n        transforms_n_au_hb.put(\"last_s_crawl_end\", \"ms_to_decimal_days_elapsed()\");\n        transforms_n_au_hb.put(\"last_s_poll_end\", \"ms_to_decimal_days_elapsed()\");\n        transforms_n_au_hb.put(\"crawl_duration\", \"ms_to_decimal_days()\");\n        network_au_hashbox = hr.convert_hashbox_vals(network_au_hashbox, transforms_n_au_hb);\n        Map<String, String> auNVerifiedRegions = reportAuOverviewFacade.getAuNVerifiedRegions();\n        logger.fine(\"auNVerifiedRegions\\n\" + xstream.toXML(auNVerifiedRegions));\n        network_au_hashbox = hr.addNewInnerHashEntriesToHashbox(network_au_hashbox, auNVerifiedRegions, \"au_n_verified_regions\");\n        logger.info(\"network_au_hashbox after Transformations and Addition of 'au_n_verified_regions'\" + xstream.toXML(network_au_hashbox));\n        logger.info(\"========== Compare AUs BEGIN ==============================\");\n        ArrayList<String> al_aus_in_schema_not_in_network = new ArrayList<String>(comp_keys.keys_not_in_both_hashes(schema_au_hashbox, network_au_hashbox, \"schema_aus\", \"network_aus\"));\n        Map<String, String> h_aus_in_schema_not_in_network = hr.get_names_from_id_list(schema_au_hashbox, al_aus_in_schema_not_in_network, \"/SSP/archivalUnits/au/auIdentity/name\");\n        rprtCnst.addKV(\"REPORT_N_AUS_IN_SCHEMA_NOT_IN_NETWORK\", Integer.toString(al_aus_in_schema_not_in_network.size()));\n        rprtCnst.set_h_aus_in_schema_not_in_network(h_aus_in_schema_not_in_network);\n        MYSQLReportAusInSchemaNotInNetworkDAO daoraisnin = new MYSQLReportAusInSchemaNotInNetworkDAO();\n        daoraisnin.create();\n        daoraisnin.update(h_aus_in_schema_not_in_network);\n        ArrayList<String> al_aus_in_network_not_in_schema = new ArrayList<String>(comp_keys.keys_not_in_both_hashes(network_au_hashbox, schema_au_hashbox, \"network_aus\", \"schema_aus\"));\n        Utility.print_arraylist(al_aus_in_network_not_in_schema, \"aus in_network_not_in_schema\");\n        Map<String, String> h_aus_in_network_not_in_schema = hr.get_names_from_id_list(network_au_hashbox, al_aus_in_network_not_in_schema, \"au_name\");\n        rprtCnst.addKV(\"REPORT_N_AUS_IN_NETWORK_NOT_IN_SCHEMA\", Integer.toString(al_aus_in_network_not_in_schema.size()));\n        rprtCnst.set_h_aus_in_network_not_in_schema(h_aus_in_network_not_in_schema);\n        MYSQLReportAusInNetworkNotInSchemaDAO daorainnis = new MYSQLReportAusInNetworkNotInSchemaDAO();\n        daorainnis.create();\n        daorainnis.update(h_aus_in_network_not_in_schema);\n        Comparison comp_au = new Comparison(schema_au_hashbox, \"Schema_AU\", network_au_hashbox, \"Network_AU\", XpathUtility.getXpathToDbColumnMap(), XpathUtility.getXpathToCompOpMap());\n        comp_au.init();\n        logger.info(\"Attempting to create DB table 'lockss_audit.audit_results_au'\");\n        MYSQLAuditResultsAuDAO daoara = new MYSQLAuditResultsAuDAO();\n        daoara.create();\n        String results_table_au = \"audit_results_au\";\n        String sql_vals_au_schema = comp_au.iterate_hbs_au(daoara, results_table_au, \"au\", h_aus_in_network_not_in_schema);\n        CachedRowSet rs_RA2 = daoara.query_q1_RA();\n        String n_aus_not_verified = DBUtil.get_single_count_from_rs(rs_RA2);\n        rprtCnst.addKV(\"REPORT_N_AUS_NOT_VERIFIED\", DBUtil.get_single_count_from_rs(rs_RA2));\n        logger.info(\"\\nInstantiating Result Class from main()\");\n        DiffResult result = new DiffResult();\n        Map au_comp_host = result.get_result_hash(\"au\");\n        logger.info(\"========== Compare AUs END ================================\");\n        logger.info(\"========== Process Network Host Table =====================\");\n        logger.info(\"========== Query 'lockss_box_table' and =========\");\n        logger.info(\"================ 'repository_space_table' =======\\n\");\n        MySQLLockssBoxRepositorySpaceDAO daolbrs = new MySQLLockssBoxRepositorySpaceDAO();\n        CachedRowSet rs_q1_H = daolbrs.query_q1_H();\n        int[] host_table_rc = DBUtil.get_rs_dims(rs_q1_H);\n        logger.info(\"Host Table Query ResultSet has \" + host_table_rc[0] + \" rows and \" + host_table_rc[1] + \" columns.\");\n        rprtCnst.addKV(\"REPORT_N_HOSTS_IN_NETWORK\", Integer.toString(host_table_rc[0]));\n        Long numberOfMemberHosts;\n        if (StringUtils.isNotBlank(saasConfigurationRegistry.getSaasConfigProperties().getProperty(\"saas.ip.fromlockssxml\"))) {\n            numberOfMemberHosts = Long.parseLong(Integer.toString(saasConfigurationRegistry.getSaasConfigProperties().getProperty(\"saas.ip.fromlockssxml\").split(\",\").length));\n        } else {\n            if (StringUtils.isNotBlank(saasConfigurationRegistry.getSaasAuditConfigProperties().getProperty(\"saas.targetIp\"))) {\n                numberOfMemberHosts = Long.parseLong(Integer.toString(saasConfigurationRegistry.getSaasAuditConfigProperties().getProperty(\"saas.targetIp\").split(\",\").length));\n            } else {\n                numberOfMemberHosts = 0L;\n            }\n        }\n        rprtCnst.addKV(\"REPORT_N_HOSTS_IN_NETWORK_2\", Long.toString(numberOfMemberHosts));\n        Long numberOfReachableHosts;\n        numberOfReachableHosts = lockssBoxFacade.getTotalHosts();\n        rprtCnst.addKV(\"REPORT_N_HOSTS_IN_NETWORK_REACHABLE\", Long.toString(numberOfReachableHosts));\n        Map<String, Map> network_host_hashbox = new TreeMap<String, Map>(DBUtil.rs_to_hashbox(rs_q1_H, null, \"ip_address\"));\n        logger.info(\"network_host_hashbox before transformations\\n\" + xstream.toXML(network_host_hashbox));\n        Map<String, String> transforms_n_host_hb = new HashMap<String, String>();\n        transforms_n_host_hb.put(\"repo_size\", \"SciToStr2()\");\n        transforms_n_host_hb.put(\"used_space\", \"SciToStr2()\");\n        network_host_hashbox = hr.convert_hashbox_vals(network_host_hashbox, transforms_n_host_hb);\n        logger.info(\"network_host_hashbox(after transformations)\\n\" + xstream.toXML(network_host_hashbox));\n        Map<String, String> network_host_hb_sel_used_space = hr.join_hash_pk_to_inner_hash_value(network_host_hashbox, \"used_space\");\n        Map<String, String> schema_host_hb_sel_size = hr.join_hash_pk_to_inner_hash_value(schema_host_hashbox, \"/SSP/hosts/host/hostCapabilities/storageAvailable/@max_size\");\n        logger.info(\"\\n========== Process Network  END ===========================\");\n        logger.info(\"========== Compare Key Sets (IDs)==========================\");\n        Set<String> sa_hb_keys = hr.gen_hash_keyset(schema_au_hashbox, \"schema_au_hashbox\");\n        hr.set_hash_keyset(sa_hb_keys, \"s_au_hb\");\n        Set<String> sh_hb_keys = hr.gen_hash_keyset(schema_host_hashbox, \"schema_host_hashbox\");\n        hr.set_hash_keyset(sh_hb_keys, \"s_h_hb\");\n        Set<String> na_hb_keys = hr.gen_hash_keyset(network_au_hashbox, \"network_au_hashbox\");\n        hr.set_hash_keyset(na_hb_keys, \"n_au_hb\");\n        Set<String> nh_hb_keys = hr.gen_hash_keyset(network_host_hashbox, \"network_host_hashbox\");\n        hr.set_hash_keyset(nh_hb_keys, \"n_h_hb\");\n        Set<String> aus_in_schema_not_in_network = new TreeSet<String>(hr.get_hash_keyset(\"s_au_hb\"));\n        aus_in_schema_not_in_network.removeAll(hr.get_hash_keyset(\"n_au_hb\"));\n        Set<String> aus_in_network_not_in_schema = new TreeSet<String>(hr.get_hash_keyset(\"n_au_hb\"));\n        aus_in_network_not_in_schema.removeAll(hr.get_hash_keyset(\"s_au_hb\"));\n        Set<String> symmetricDiff = new HashSet<String>(hr.get_hash_keyset(\"s_au_hb\"));\n        symmetricDiff.addAll(hr.get_hash_keyset(\"n_au_hb\"));\n        Set<String> tmp = new HashSet<String>(hr.get_hash_keyset(\"s_au_hb\"));\n        tmp.retainAll(hr.get_hash_keyset(\"n_au_hb\"));\n        symmetricDiff.removeAll(tmp);\n        Set<String> hosts_in_network_not_in_schema = new TreeSet<String>(hr.get_hash_keyset(\"n_h_hb\"));\n        hosts_in_network_not_in_schema.removeAll(hr.get_hash_keyset(\"s_h_hb\"));\n        Set<String> hosts_in_schema_not_in_network = new TreeSet<String>(hr.get_hash_keyset(\"s_h_hb\"));\n        hosts_in_schema_not_in_network.removeAll(hr.get_hash_keyset(\"n_h_hb\"));\n        ArrayList<String> al_hosts_in_schema_not_in_network = new ArrayList<String>(comp_keys.keys_not_in_both_hashes(schema_host_hashbox, network_host_hashbox, \"schema_hosts\", \"network_hosts\"));\n        Map<String, String> h_hosts_in_schema_not_in_network = hr.get_names_from_id_list(schema_host_hashbox, al_hosts_in_schema_not_in_network, \"/SSP/hosts/host/hostIdentity/name\");\n        rprtCnst.addKV(\"REPORT_N_HOSTS_IN_SCHEMA_NOT_IN_NETWORK\", Integer.toString(al_hosts_in_schema_not_in_network.size()));\n        rprtCnst.set_h_hosts_in_schema_not_in_network(h_hosts_in_schema_not_in_network);\n        MYSQLReportHostsInSchemaNotInNetworkDAO daorhisnin = new MYSQLReportHostsInSchemaNotInNetworkDAO();\n        daorhisnin.create();\n        daorhisnin.update(h_hosts_in_schema_not_in_network);\n        ArrayList<String> al_hosts_in_network_not_in_schema = new ArrayList<String>(comp_keys.keys_not_in_both_hashes(network_host_hashbox, schema_host_hashbox, \"network_hosts\", \"schema_hosts\"));\n        Map<String, String> h_hosts_in_network_not_in_schema = hr.get_names_from_id_list(network_host_hashbox, al_hosts_in_network_not_in_schema, \"host_name\");\n        rprtCnst.addKV(\"REPORT_N_HOSTS_IN_NETWORK_NOT_IN_SCHEMA\", Integer.toString(al_hosts_in_network_not_in_schema.size()));\n        rprtCnst.set_h_hosts_in_network_not_in_schema(h_hosts_in_network_not_in_schema);\n        MYSQLReportHostsInNetworkNotInSchemaDAO rhinnis = new MYSQLReportHostsInNetworkNotInSchemaDAO();\n        rhinnis.create();\n        rhinnis.update(h_hosts_in_network_not_in_schema);\n        logger.info(\"========== Compare Hosts BEGIN ============================\");\n        Comparison comp_host = new Comparison(schema_host_hashbox, \"Schema_Host\", network_host_hashbox, \"Network_Host\", XpathUtility.getXpathToDbColumnMap(), XpathUtility.getXpathToCompOpMap());\n        comp_host.init();\n        MYSQLAuditResultsHostDAO daoarh = new MYSQLAuditResultsHostDAO();\n        daoarh.create();\n        String sql_vals_host_schema = comp_host.iterate_hbs_host(daoarh, \"audit_results_host\", \"host\", h_hosts_in_network_not_in_schema);\n        CachedRowSet rs_RH = daoarh.query_q1_RH();\n        String n_hosts_not_meeting_storage = DBUtil.get_single_count_from_rs(rs_RH);\n        rprtCnst.addKV(\"REPORT_N_HOSTS_NOT_MEETING_STORAGE\", n_hosts_not_meeting_storage);\n        logger.info(\"Calling result.get_result_hash( \\\"host\\\" ) from main()\");\n        Map host_comp_hash = result.get_result_hash(\"host\");\n        Map au_comp_hash2 = result.get_result_hash(\"au\");\n        logger.info(\"========== Compare Hosts END ==============================\");\n        Map<String, String> map_host_ip_to_host_name = hr.make_id_hash(schema_host_hashbox, \"/SSP/hosts/host/hostIdentity/name\");\n        rprtCnst.addKV(\"REPORT_N_HOSTS_IN_SCHEMA\", Integer.toString(map_host_ip_to_host_name.size()));\n        String[] host_ip_list = hr.hash_keys_to_array(schema_host_hashbox);\n        String[][] col2 = Utility.add_column_to_array1(map_host_ip_to_host_name.values().toArray(new String[0]), host_ip_list, null);\n        Map<String, String> map_au_key_string_to_au_name = hr.make_id_hash(schema_au_hashbox, \"/SSP/archivalUnits/au/auIdentity/name\");\n        logger.info(\"Length map_au_key_string_to_au_name.values().toArray(new String[0]: \" + map_au_key_string_to_au_name.values().toArray(new String[0]).length);\n        rprtCnst.addKV(\"REPORT_N_AUS_IN_SCHEMA\", Integer.toString(map_au_key_string_to_au_name.size()));\n        MySQLLockssBoxArchivalUnitStatusDAO daolbaus = new MySQLLockssBoxArchivalUnitStatusDAO();\n        int[] rc = daolbaus.getResultSetDimensions();\n        int n_rs_rows = rc[0];\n        int n_rs_cols = rc[1];\n        logger.info(\"\\n\" + n_rs_rows + \" rows (Host-AU's). \" + n_rs_cols + \" columns.\");\n        rprtCnst.addKV(\"REPORT_N_HOST_AUS_IN_NETWORK\", Integer.toString(n_rs_rows));\n        logger.info(\"================== Query 'audit_results_host' Table ==========\");\n        CachedRowSet NNonCompliantAUsCRS = daoara.getNNonCompliantAUs();\n        String NNonCompliantAUs = DBUtil.get_single_count_from_rs(NNonCompliantAUsCRS);\n        rprtCnst.addKV(\"REPORT_N_AUS_NONCOMPLIANT\", NNonCompliantAUs);\n        logger.info(\"================== Query 'audit_results_host' Table END ======\");\n        logger.info(\"========== Output Report ==================================\");\n        MYSQLReportConstantsDAO daorc = new MYSQLReportConstantsDAO();\n        daorc.create();\n        daorc.update(rprtCnst.getBox());\n        MYSQLReportHostSummaryDAO daorhs = new MYSQLReportHostSummaryDAO();\n        daorhs.create();\n        CachedRowSet crsarh = daoarh.queryAll();\n        daorhs.update(crsarh);\n        daorhs.update_new_column(\"space_offered\", schema_host_hb_sel_size);\n        daorhs.update_new_column(\"space_used\", network_host_hb_sel_used_space);\n        Map<String, String> computation_cols_in_net_host_summary = new HashMap<String, String>();\n        computation_cols_in_net_host_summary.put(\"space_total\", \"1\");\n        computation_cols_in_net_host_summary.put(\"space_used\", \"2\");\n        daorhs.update_compute_column(\"space_free\", computation_cols_in_net_host_summary);\n        logger.info(\"========== Audit Report Writer ======================================\");\n        AuditReportXMLWriter arxw = new AuditReportXMLWriter(rprtCnst, configFile.getAuditReportFile());\n        Set<String> tableSet = tracAuditChecklistDataFacade.findAllTables();\n        String tracResultTable = \"trac_audit_checklist_data\";\n        List<TracAuditChecklistData> evidenceList = null;\n        if (tableSet.contains(tracResultTable)) {\n            evidenceList = tracAuditChecklistDataFacade.findAll();\n            logger.info(\"TRAC evidence list is size:\" + evidenceList.size());\n        } else {\n            logger.info(\"Database does not contain table 'trac_audit_checklist_data'\");\n        }\n        Map<String, String> tracDataMap = new LinkedHashMap<String, String>();\n        for (TracAuditChecklistData tracdata : evidenceList) {\n            tracDataMap.put(tracdata.getAspectId(), tracdata.getEvidence());\n        }\n        String writeTimestamp = arxw.write(daoarh, daoara, daorc, tracDataMap);\n        File target = new File(configFile.getAuditReportFileDir() + File.separator + configFile.getAuditSchemaFileName() + \".\" + writeTimestamp);\n        FileChannel sourceChannel = null;\n        FileChannel targetChannel = null;\n        try {\n            sourceChannel = new FileInputStream(auditSchemaFile).getChannel();\n            targetChannel = new FileOutputStream(target).getChannel();\n            targetChannel.transferFrom(sourceChannel, 0, sourceChannel.size());\n        } catch (IOException e) {\n            logger.log(Level.SEVERE, \"IO exception occurred while copying file\", e);\n        } finally {\n            try {\n                if (sourceChannel != null) {\n                    sourceChannel.close();\n                }\n                if (targetChannel != null) {\n                    targetChannel.close();\n                }\n            } catch (IOException e) {\n                logger.info(\"closing channels failed\");\n            }\n        }\n        logger.info(\"\\n========== EXIT drive() ===========================================\");\n        return writeTimestamp;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12120684",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void getRandomGUID(boolean secure) {\n        MessageDigest md5;\n        StringBuilder sbValueBeforeHash = new StringBuilder();\n        try {\n            md5 = MessageDigest.getInstance(\"SHA-1\");\n        } catch (NoSuchAlgorithmException e) {\n            throw new ApplicationIllegalArgumentException(e);\n        }\n        long time = System.nanoTime();\n        long rand = 0;\n        if (secure) {\n            rand = MySecureRand.nextLong();\n        } else {\n            rand = MyRand.nextLong();\n        }\n        sbValueBeforeHash.append(SId);\n        sbValueBeforeHash.append(\":\");\n        sbValueBeforeHash.append(Long.toString(time));\n        sbValueBeforeHash.append(\":\");\n        sbValueBeforeHash.append(Long.toString(rand));\n        valueBeforeHash = sbValueBeforeHash.toString();\n        md5.update(valueBeforeHash.getBytes());\n        byte[] array = md5.digest();\n        StringBuffer sb = new StringBuffer();\n        for (int j = 0; j < array.length; ++j) {\n            int b = array[j] & 0xFF;\n            if (b < 0x10) {\n                sb.append('0');\n            }\n            sb.append(Integer.toHexString(b));\n        }\n        valueAfterHash = sb.toString();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12122419",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private Vector _sort(Pair[] ps, String id, int num) {\n        Vector ret = new Vector();\n        boolean swapped = true;\n        int j = 0;\n        Pair tmp;\n        while (swapped) {\n            swapped = false;\n            j++;\n            for (int i = 0; i < ps.length - j; i++) {\n                if (ps[i].c > ps[i + 1].c) {\n                    tmp = ps[i];\n                    ps[i] = ps[i + 1];\n                    ps[i + 1] = tmp;\n                    swapped = true;\n                }\n            }\n        }\n        int m = Math.min(num, ps.length);\n        for (int i = m - 1; i >= 0; i--) {\n            if (id == null) ret.addElement(ps[i].n); else if (ps[i].n.startsWith(id) && !ps[i].n.equals(id)) ret.addElement(ps[i].n);\n        }\n        return ret;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12122713",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void readVersion() {\n        URL url = ClassLoader.getSystemResource(\"version\");\n        if (url == null) {\n            return;\n        }\n        BufferedReader reader = null;\n        String line = null;\n        try {\n            reader = new BufferedReader(new InputStreamReader(url.openStream()));\n            while ((line = reader.readLine()) != null) {\n                if (line.startsWith(\"Version=\")) {\n                    version = (line.split(\"=\"))[1];\n                }\n                if (line.startsWith(\"Revision=\")) {\n                    revision = (line.split(\"=\"))[1];\n                }\n                if (line.startsWith(\"Date=\")) {\n                    String sSec = (line.split(\"=\"))[1];\n                    Long lSec = Long.valueOf(sSec);\n                    compileDate = new Date(lSec);\n                }\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            if (reader != null) {\n                try {\n                    reader.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12127276",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void testGetResource_FileOutsideOfClasspath() throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void testGetResource_FileOutsideOfClasspath() throws Exception {\n        File temp = File.createTempFile(\"dozerfiletest\", \".txt\");\n        temp.deleteOnExit();\n        String resourceName = \"file:\" + temp.getAbsolutePath();\n        URL url = loader.getResource(resourceName);\n        assertNotNull(\"URL should not be null\", url);\n        InputStream is = url.openStream();\n        assertNotNull(\"input stream should not be null\", is);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12128591",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static final synchronized String hash(String data) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static final synchronized String hash(String data) {\n        if (digest == null) {\n            try {\n                digest = MessageDigest.getInstance(\"MD5\");\n            } catch (NoSuchAlgorithmException nsae) {\n                log.error(\"Failed to load the MD5 MessageDigest. \" + \"Jive will be unable to function normally.\", nsae);\n            }\n        }\n        try {\n            digest.update(data.getBytes(\"utf-8\"));\n        } catch (UnsupportedEncodingException e) {\n            log.error(e);\n        }\n        return encodeHex(digest.digest());\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12135654",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void connect() throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n                protected URLConnection openConnection(URL url) throws IOException {\n                    return new URLConnection(url) {\n\n                        @Override\n                        public void connect() throws IOException {\n                        }\n\n                        @Override\n                        public InputStream getInputStream() throws IOException {\n                            ThemeResource f = getFacelet(getURL().getFile());\n                            return new ByteArrayInputStream(f.getText().getBytes());\n                        }\n                    };\n                }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12138255",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void loadPoFile(URL url) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void loadPoFile(URL url) {\n        states state = states.IDLE;\n        String msgCtxt = \"\";\n        String msgId = \"\";\n        String msgStr = \"\";\n        try {\n            if (url == null) return;\n            InputStream in = url.openStream();\n            BufferedReader br = new BufferedReader(new InputStreamReader(in, \"UTF8\"));\n            String strLine;\n            while ((strLine = br.readLine()) != null) {\n                if (strLine.startsWith(\"msgctxt\")) {\n                    if (state != states.MSGCTXT) msgCtxt = \"\";\n                    state = states.MSGCTXT;\n                    strLine = strLine.substring(7).trim();\n                }\n                if (strLine.startsWith(\"msgid\")) {\n                    if (state != states.MSGID) msgId = \"\";\n                    state = states.MSGID;\n                    strLine = strLine.substring(5).trim();\n                }\n                if (strLine.startsWith(\"msgstr\")) {\n                    if (state != states.MSGSTR) msgStr = \"\";\n                    state = states.MSGSTR;\n                    strLine = strLine.substring(6).trim();\n                }\n                if (!strLine.startsWith(\"\\\"\")) {\n                    state = states.IDLE;\n                    msgCtxt = \"\";\n                    msgId = \"\";\n                    msgStr = \"\";\n                } else {\n                    if (state == states.MSGCTXT) {\n                        msgCtxt += format(strLine);\n                    }\n                    if (state == states.MSGID) {\n                        if (msgId.isEmpty()) {\n                            if (!msgCtxt.isEmpty()) {\n                                msgId = msgCtxt + \"|\";\n                                msgCtxt = \"\";\n                            }\n                        }\n                        msgId += format(strLine);\n                    }\n                    if (state == states.MSGSTR) {\n                        msgCtxt = \"\";\n                        msgStr += format(strLine);\n                        if (!msgId.isEmpty()) messages.setProperty(msgId, msgStr);\n                    }\n                }\n            }\n            in.close();\n        } catch (IOException e) {\n            Logger.logError(e, \"Error loading message.po.\");\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12146394",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String md5Crypt(final byte[] key, final byte[] salt) throws NoSuchAlgorithmException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String md5Crypt(final byte[] key, final byte[] salt) throws NoSuchAlgorithmException {\n        if (key == null || key.length == 0) {\n            throw new IllegalArgumentException(\"Argument 'key' cannot be null or an empty array.\");\n        }\n        if (salt == null || salt.length == 0) {\n            throw new IllegalArgumentException(\"Argument 'salt' cannot be null or an empty array.\");\n        }\n        final MessageDigest _md = MessageDigest.getInstance(\"MD5\");\n        _md.update(key);\n        _md.update(MAGIC.getBytes());\n        _md.update(salt);\n        final MessageDigest md2 = MessageDigest.getInstance(\"MD5\");\n        md2.update(key);\n        md2.update(salt);\n        md2.update(key);\n        byte[] abyFinal = md2.digest();\n        for (int n = key.length; n > 0; n -= 16) {\n            _md.update(abyFinal, 0, n > 16 ? 16 : n);\n        }\n        abyFinal = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\n        for (int j = 0, i = key.length; i != 0; i >>>= 1) {\n            if ((i & 1) == 1) _md.update(abyFinal, j, 1); else _md.update(key, j, 1);\n        }\n        final StringBuilder sbPasswd = new StringBuilder();\n        sbPasswd.append(MAGIC);\n        sbPasswd.append(new String(salt));\n        sbPasswd.append('$');\n        abyFinal = _md.digest();\n        for (int n = 0; n < 1000; n++) {\n            final MessageDigest md3 = MessageDigest.getInstance(\"MD5\");\n            if ((n & 1) != 0) {\n                md3.update(key);\n            } else {\n                md3.update(abyFinal);\n            }\n            if ((n % 3) != 0) {\n                md3.update(salt);\n            }\n            if ((n % 7) != 0) {\n                md3.update(key);\n            }\n            if ((n & 1) != 0) {\n                md3.update(abyFinal);\n            } else {\n                md3.update(key);\n            }\n            abyFinal = md3.digest();\n        }\n        int[] anFinal = new int[] { (abyFinal[0] & 0x7f) | (abyFinal[0] & 0x80), (abyFinal[1] & 0x7f) | (abyFinal[1] & 0x80), (abyFinal[2] & 0x7f) | (abyFinal[2] & 0x80), (abyFinal[3] & 0x7f) | (abyFinal[3] & 0x80), (abyFinal[4] & 0x7f) | (abyFinal[4] & 0x80), (abyFinal[5] & 0x7f) | (abyFinal[5] & 0x80), (abyFinal[6] & 0x7f) | (abyFinal[6] & 0x80), (abyFinal[7] & 0x7f) | (abyFinal[7] & 0x80), (abyFinal[8] & 0x7f) | (abyFinal[8] & 0x80), (abyFinal[9] & 0x7f) | (abyFinal[9] & 0x80), (abyFinal[10] & 0x7f) | (abyFinal[10] & 0x80), (abyFinal[11] & 0x7f) | (abyFinal[11] & 0x80), (abyFinal[12] & 0x7f) | (abyFinal[12] & 0x80), (abyFinal[13] & 0x7f) | (abyFinal[13] & 0x80), (abyFinal[14] & 0x7f) | (abyFinal[14] & 0x80), (abyFinal[15] & 0x7f) | (abyFinal[15] & 0x80) };\n        to64(sbPasswd, anFinal[0] << 16 | anFinal[6] << 8 | anFinal[12], 4);\n        to64(sbPasswd, anFinal[1] << 16 | anFinal[7] << 8 | anFinal[13], 4);\n        to64(sbPasswd, anFinal[2] << 16 | anFinal[8] << 8 | anFinal[14], 4);\n        to64(sbPasswd, anFinal[3] << 16 | anFinal[9] << 8 | anFinal[15], 4);\n        to64(sbPasswd, anFinal[4] << 16 | anFinal[10] << 8 | anFinal[5], 4);\n        to64(sbPasswd, anFinal[11], 2);\n        return sbPasswd.toString();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01214974",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String computeMD5(InputStream input) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String computeMD5(InputStream input) {\n        InputStream digestStream = null;\n        try {\n            MessageDigest md5 = MessageDigest.getInstance(\"MD5\");\n            digestStream = new DigestInputStream(input, md5);\n            IOUtils.copy(digestStream, new NullOutputStream());\n            return new String(Base64.encodeBase64(md5.digest()), \"UTF-8\");\n        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        } finally {\n            IOUtils.closeQuietly(digestStream);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01214975",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void writeToFile(InputStream input, File file, ProgressListener listener, long length) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void writeToFile(InputStream input, File file, ProgressListener listener, long length) {\n        OutputStream output = null;\n        try {\n            output = new CountingOutputStream(new FileOutputStream(file), listener, length);\n            IOUtils.copy(input, output);\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        } finally {\n            IOUtils.closeQuietly(input);\n            IOUtils.closeQuietly(output);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12157537",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private IProject createCopyProject(IProject project, IWorkspace ws, IProgressMonitor pm) throws CoreException {\n        pm.beginTask(\"Creating temp project\", 1);\n        final String pName = \"translation_\" + project.getName() + \"_\" + new Date().toString().replace(\" \", \"_\").replace(\":\", \"_\");\n        final IProgressMonitor npm = new NullProgressMonitor();\n        final IPath destination = new Path(pName);\n        project.copy(destination, false, npm);\n        final IJavaProject oldJavaproj = JavaCore.create(project);\n        final IClasspathEntry[] classPath = oldJavaproj.getRawClasspath();\n        final IProject newProject = ResourcesPlugin.getWorkspace().getRoot().getProject(\"NewProjectName\");\n        final IProjectDescription desc = project.getDescription();\n        desc.setNatureIds(new String[] { JavaCore.NATURE_ID });\n        project.setDescription(desc, null);\n        final IJavaProject javaproj = JavaCore.create(newProject);\n        javaproj.setOutputLocation(project.getFullPath(), null);\n        final List<IClasspathEntry> newClassPath = new ArrayList<IClasspathEntry>();\n        for (final IClasspathEntry cEntry : newClassPath) {\n            switch(cEntry.getContentKind()) {\n                case IClasspathEntry.CPE_SOURCE:\n                    System.out.println(\"Source folder \" + cEntry.getPath());\n                    break;\n                default:\n                    newClassPath.add(cEntry);\n            }\n        }\n        javaproj.setRawClasspath(classPath, pm);\n        final IProject newP = ws.getRoot().getProject(pName);\n        return newP;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01215899",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copyFile(File source, File dest) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copyFile(File source, File dest) throws IOException {\n        log.debug(\"Copy from {} to {}\", source.getAbsoluteFile(), dest.getAbsoluteFile());\n        FileInputStream fi = new FileInputStream(source);\n        FileChannel fic = fi.getChannel();\n        MappedByteBuffer mbuf = fic.map(FileChannel.MapMode.READ_ONLY, 0, source.length());\n        fic.close();\n        fi.close();\n        fi = null;\n        if (!dest.exists()) {\n            String destPath = dest.getPath();\n            log.debug(\"Destination path: {}\", destPath);\n            String destDir = destPath.substring(0, destPath.lastIndexOf(File.separatorChar));\n            log.debug(\"Destination dir: {}\", destDir);\n            File dir = new File(destDir);\n            if (!dir.exists()) {\n                if (dir.mkdirs()) {\n                    log.debug(\"Directory created\");\n                } else {\n                    log.warn(\"Directory not created\");\n                }\n            }\n            dir = null;\n        }\n        FileOutputStream fo = new FileOutputStream(dest);\n        FileChannel foc = fo.getChannel();\n        foc.write(mbuf);\n        foc.close();\n        fo.close();\n        fo = null;\n        mbuf.clear();\n        mbuf = null;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12171364",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static FrameworkFactory getFrameworkFactory() throws Exception {\n        URL url = Main.class.getClassLoader().getResource(\"META-INF/services/org.osgi.framework.launch.FrameworkFactory\");\n        if (url != null) {\n            BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));\n            try {\n                for (String s = br.readLine(); s != null; s = br.readLine()) {\n                    s = s.trim();\n                    if ((s.length() > 0) && (s.charAt(0) != '#')) {\n                        return (FrameworkFactory) Class.forName(s).newInstance();\n                    }\n                }\n            } finally {\n                if (br != null) br.close();\n            }\n        }\n        throw new Exception(\"Could not find framework factory.\");\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12172484",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static boolean encodeFileToFile(String infile, String outfile) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static boolean encodeFileToFile(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] buffer = new byte[65536];\n            int read = -1;\n            while ((read = in.read(buffer)) >= 0) {\n                out.write(buffer, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12172485",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static boolean decodeFileToFile(String infile, String outfile) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static boolean decodeFileToFile(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] buffer = new byte[65536];\n            int read = -1;\n            while ((read = in.read(buffer)) >= 0) {\n                out.write(buffer, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12174402",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String encryptPass(String pass) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String encryptPass(String pass) {\n        String passEncrypt;\n        MessageDigest md5 = null;\n        try {\n            md5 = MessageDigest.getInstance(\"MD5\");\n        } catch (NoSuchAlgorithmException ex) {\n        }\n        md5.update(pass.getBytes());\n        BigInteger dis = new BigInteger(1, md5.digest());\n        passEncrypt = dis.toString(16);\n        return passEncrypt;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12174403",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String encryptPass2(String pass) throws UnsupportedEncodingException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String encryptPass2(String pass) throws UnsupportedEncodingException {\n        String passEncrypt;\n        MessageDigest md5 = null;\n        try {\n            md5 = MessageDigest.getInstance(\"MD5\");\n        } catch (NoSuchAlgorithmException ex) {\n        }\n        md5.update(pass.getBytes());\n        String dis = new String(md5.digest(), 10);\n        passEncrypt = dis.toString();\n        return passEncrypt;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12176858",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "void sortclasses() {\n        int i, j;\n        boolean domore;\n        vclassptr = new int[numc];\n        for (i = 0; i < numc; i++) vclassptr[i] = i;\n        domore = true;\n        while (domore == true) {\n            domore = false;\n            for (i = 0; i < numc - 1; i++) {\n                if (vclassctr[vclassptr[i]] < vclassctr[vclassptr[i + 1]]) {\n                    int temp = vclassptr[i];\n                    vclassptr[i] = vclassptr[i + 1];\n                    vclassptr[i + 1] = temp;\n                    domore = true;\n                }\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01218380",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void main(String[] args) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void main(String[] args) {\n        try {\n            Object o = Naming.lookup(\"Server\");\n            IServer serverStub = (IServer) o;\n            File srcDir = new File(args[0]);\n            File dstDir = new File(args[1]);\n            File[] srcFiles = srcDir.listFiles();\n            long position = 0;\n            for (File f : srcFiles) {\n                if (f.isDirectory()) continue;\n                try {\n                    FileChannel srcChannel = new FileInputStream(f).getChannel();\n                    String fileName = dstDir.getAbsolutePath() + System.getProperty(\"file.separator\") + f.getName();\n                    FileChannel dstChannel = new FileOutputStream(fileName).getChannel();\n                    System.out.println(\"Coping \" + fileName);\n                    ByteBuffer buffer = ByteBuffer.allocate(65536);\n                    int nr = 0;\n                    srcChannel.position(nr);\n                    nr = srcChannel.read(buffer);\n                    while (nr > -1) {\n                        buffer.flip();\n                        byte[] bytes = new byte[buffer.limit()];\n                        buffer.get(bytes);\n                        position = serverStub.write(bytes, position);\n                        buffer.clear();\n                        nr = srcChannel.read(buffer);\n                    }\n                    System.out.println(\"Done \");\n                    srcChannel.close();\n                    dstChannel.close();\n                } catch (IOException e) {\n                }\n            }\n        } catch (MalformedURLException e) {\n            e.printStackTrace();\n        } catch (RemoteException e) {\n            e.printStackTrace();\n        } catch (NotBoundException e) {\n            e.printStackTrace();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12185344",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static boolean extractFromJarUsingClassLoader(String searchString, String filename, String destinationDirectory) {\n        ClassLoader cl = null;\n        try {\n            Class clClass = Class.forName(\"com.simontuffs.onejar.JarClassLoader\");\n            Constructor[] constructor = clClass.getConstructors();\n            cl = (ClassLoader) constructor[1].newInstance(ClassLoader.getSystemClassLoader());\n            System.out.println(\"Loaded JarClassLoader. cl=\" + cl.toString());\n        } catch (Throwable e) {\n            cl = ClassLoader.getSystemClassLoader();\n        }\n        URL liburl = cl.getResource(filename);\n        if (liburl == null) {\n            return false;\n        }\n        if (!destinationDirectory.endsWith(File.separator)) {\n            destinationDirectory = destinationDirectory + File.separator;\n        }\n        try {\n            File destFile = new File(destinationDirectory + filename);\n            if (destFile.exists()) {\n                destFile.delete();\n            }\n            InputStream is;\n            is = liburl.openStream();\n            OutputStream os = new FileOutputStream(destinationDirectory + filename);\n            byte[] buf = new byte[4096];\n            int cnt = is.read(buf);\n            while (cnt > 0) {\n                os.write(buf, 0, cnt);\n                cnt = is.read(buf);\n            }\n            os.close();\n            is.close();\n            destFile.deleteOnExit();\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n        return true;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12186496",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic String digest(String password, String digestType, String inputEncoding) throws CmsPasswordEncryptionException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public String digest(String password, String digestType, String inputEncoding) throws CmsPasswordEncryptionException {\n        MessageDigest md;\n        String result;\n        try {\n            if (DIGEST_TYPE_PLAIN.equals(digestType.toLowerCase())) {\n                result = password;\n            } else if (DIGEST_TYPE_SSHA.equals(digestType.toLowerCase())) {\n                byte[] salt = new byte[4];\n                byte[] digest;\n                byte[] total;\n                if (m_secureRandom == null) {\n                    m_secureRandom = SecureRandom.getInstance(\"SHA1PRNG\");\n                }\n                m_secureRandom.nextBytes(salt);\n                md = MessageDigest.getInstance(DIGEST_TYPE_SHA);\n                md.reset();\n                md.update(password.getBytes(inputEncoding));\n                md.update(salt);\n                digest = md.digest();\n                total = new byte[digest.length + salt.length];\n                System.arraycopy(digest, 0, total, 0, digest.length);\n                System.arraycopy(salt, 0, total, digest.length, salt.length);\n                result = new String(Base64.encodeBase64(total));\n            } else {\n                md = MessageDigest.getInstance(digestType);\n                md.reset();\n                md.update(password.getBytes(inputEncoding));\n                result = new String(Base64.encodeBase64(md.digest()));\n            }\n        } catch (NoSuchAlgorithmException e) {\n            CmsMessageContainer message = Messages.get().container(Messages.ERR_UNSUPPORTED_ALGORITHM_1, digestType);\n            if (LOG.isErrorEnabled()) {\n                LOG.error(message.key(), e);\n            }\n            throw new CmsPasswordEncryptionException(message, e);\n        } catch (UnsupportedEncodingException e) {\n            CmsMessageContainer message = Messages.get().container(Messages.ERR_UNSUPPORTED_PASSWORD_ENCODING_1, inputEncoding);\n            if (LOG.isErrorEnabled()) {\n                LOG.error(message.key(), e);\n            }\n            throw new CmsPasswordEncryptionException(message, e);\n        }\n        return result;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12194196",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void testHandleMessageInvalidSignature() throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Test\n    public void testHandleMessageInvalidSignature() throws Exception {\n        KeyPair keyPair = MiscTestUtils.generateKeyPair();\n        DateTime notBefore = new DateTime();\n        DateTime notAfter = notBefore.plusYears(1);\n        X509Certificate certificate = MiscTestUtils.generateCertificate(keyPair.getPublic(), \"CN=Test\", notBefore, notAfter, null, keyPair.getPrivate(), true, 0, null, null);\n        ServletConfig mockServletConfig = EasyMock.createMock(ServletConfig.class);\n        Map<String, String> httpHeaders = new HashMap<String, String>();\n        HttpSession mockHttpSession = EasyMock.createMock(HttpSession.class);\n        HttpServletRequest mockServletRequest = EasyMock.createMock(HttpServletRequest.class);\n        EasyMock.expect(mockServletConfig.getInitParameter(\"AuditService\")).andStubReturn(null);\n        EasyMock.expect(mockServletConfig.getInitParameter(\"AuditServiceClass\")).andStubReturn(AuditTestService.class.getName());\n        EasyMock.expect(mockServletConfig.getInitParameter(\"SignatureService\")).andStubReturn(null);\n        EasyMock.expect(mockServletConfig.getInitParameter(\"SignatureServiceClass\")).andStubReturn(SignatureTestService.class.getName());\n        EasyMock.expect(mockServletRequest.getRemoteAddr()).andStubReturn(\"remote-address\");\n        MessageDigest messageDigest = MessageDigest.getInstance(\"SHA1\");\n        byte[] document = \"hello world\".getBytes();\n        byte[] digestValue = messageDigest.digest(document);\n        EasyMock.expect(mockHttpSession.getAttribute(SignatureDataMessageHandler.DIGEST_VALUE_SESSION_ATTRIBUTE)).andStubReturn(digestValue);\n        EasyMock.expect(mockHttpSession.getAttribute(SignatureDataMessageHandler.DIGEST_ALGO_SESSION_ATTRIBUTE)).andStubReturn(\"SHA-1\");\n        SignatureDataMessage message = new SignatureDataMessage();\n        message.certificateChain = new LinkedList<X509Certificate>();\n        message.certificateChain.add(certificate);\n        Signature signature = Signature.getInstance(\"SHA1withRSA\");\n        signature.initSign(keyPair.getPrivate());\n        signature.update(\"foobar-document\".getBytes());\n        byte[] signatureValue = signature.sign();\n        message.signatureValue = signatureValue;\n        EasyMock.replay(mockServletConfig, mockHttpSession, mockServletRequest);\n        AppletServiceServlet.injectInitParams(mockServletConfig, this.testedInstance);\n        this.testedInstance.init(mockServletConfig);\n        try {\n            this.testedInstance.handleMessage(message, httpHeaders, mockServletRequest, mockHttpSession);\n            fail();\n        } catch (ServletException e) {\n            LOG.debug(\"expected exception: \" + e.getMessage());\n            EasyMock.verify(mockServletConfig, mockHttpSession, mockServletRequest);\n            assertNull(SignatureTestService.getSignatureValue());\n            assertEquals(\"remote-address\", AuditTestService.getAuditSignatureRemoteAddress());\n            assertEquals(certificate, AuditTestService.getAuditSignatureClientCertificate());\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12197169",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void read() throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void read() throws IOException {\n        if (log.isInfoEnabled()) {\n            log.info(\"Reading the camera log, \" + url);\n        }\n        final BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n        String line;\n        int i = 0;\n        try {\n            while ((line = in.readLine()) != null) {\n                i++;\n                try {\n                    final CameraLogRecord logDatum = new CameraLogRecord(line);\n                    records.add(logDatum);\n                } catch (LogParseException e) {\n                    if (log.isInfoEnabled()) {\n                        log.info(\"Bad record in \" + url + \" at line:\" + i);\n                    }\n                }\n            }\n        } finally {\n            in.close();\n        }\n        Collections.sort(records);\n        if (log.isInfoEnabled()) {\n            log.info(\"Finished reading the camera log, \" + url);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12197340",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void initBanner() {\n        for (int k = 0; k < 3; k++) {\n            if (bannerImg == null) {\n                int i = getRandomId();\n                imageURL = NbBundle.getMessage(BottomContent.class, \"URL_BannerImageLink\", Integer.toString(i));\n                bannerURL = NbBundle.getMessage(BottomContent.class, \"URL_BannerLink\", Integer.toString(i));\n                HttpContext context = new BasicHttpContext();\n                context.setAttribute(ClientContext.COOKIE_STORE, cookieStore);\n                HttpGet method = new HttpGet(imageURL);\n                try {\n                    HttpResponse response = ProxyManager.httpClient.execute(method, context);\n                    HttpEntity entity = response.getEntity();\n                    if (entity != null) {\n                        bannerImg = new ImageIcon(ImageIO.read(entity.getContent()));\n                        EntityUtils.consume(entity);\n                    }\n                } catch (IOException ex) {\n                    bannerImg = null;\n                } finally {\n                    method.abort();\n                }\n            } else {\n                break;\n            }\n        }\n        if (bannerImg == null) {\n            NotifyUtil.error(\"Banner Error\", \"Application could not get banner image. Please check your internet connection.\", false);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12197342",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void mousePressed(MouseEvent e) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void mousePressed(MouseEvent e) {\n            bannerLbl.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));\n            HttpContext context = new BasicHttpContext();\n            context.setAttribute(ClientContext.COOKIE_STORE, cookieStore);\n            HttpGet method = new HttpGet(bannerURL);\n            try {\n                HttpResponse response = ProxyManager.httpClient.execute(method, context);\n                HttpEntity entity = response.getEntity();\n                HttpHost host = (HttpHost) context.getAttribute(ExecutionContext.HTTP_TARGET_HOST);\n                HttpUriRequest request = (HttpUriRequest) context.getAttribute(ExecutionContext.HTTP_REQUEST);\n                String targetURL = host.toURI() + request.getURI();\n                DesktopUtil.browseAndWarn(targetURL, bannerLbl);\n                EntityUtils.consume(entity);\n            } catch (Exception ex) {\n                NotifyUtil.error(\"Banner Error\", \"Could not open the default web browser.\", ex, false);\n            } finally {\n                method.abort();\n            }\n            bannerLbl.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));\n        }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12198266",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private DataSource loadSingleDataSource(ClassLoader contextLoader, URL url) throws IOException, DataSourceException {\n        URI datasourceURI;\n        OWLOntology datasourceOntology = null;\n        URL baseURL = new URL(url.toString().replace(\"META-INF/artifact.properties\", \"\"));\n        Properties properties = new Properties();\n        properties.load(url.openStream());\n        String fileName = properties.get(\"db\").toString() + \".owl\";\n        String pkg = properties.get(\"package\").toString();\n        datasourceURI = URI.create(\"http://\" + properties.get(\"host\").toString() + \"/\" + fileName);\n        Set<Class> beans = new HashSet<Class>();\n        if (baseURL.toString().startsWith(\"jar\") && baseURL.toString().endsWith(\"!/\")) {\n            JarURLConnection jarConn = (JarURLConnection) baseURL.openConnection();\n            Enumeration<JarEntry> entries = jarConn.getJarFile().entries();\n            while (entries.hasMoreElements()) {\n                JarEntry next = entries.nextElement();\n                if (next.getName().startsWith(pkg.replace('.', '/')) && next.getName().endsWith(\".class\")) {\n                    String fullClassName = next.getName().replace('/', '.').replace(\".class\", \"\");\n                    try {\n                        beans.add(contextLoader.loadClass(fullClassName));\n                    } catch (ClassNotFoundException e) {\n                        throw new DataSourceException(\"Unable to locate \" + fullClassName + \".class\", e);\n                    }\n                } else if (next.getName().equals(fileName)) {\n                    String resName = next.getName();\n                    URL owl = contextLoader.getResource(resName);\n                    try {\n                        datasourceOntology = OWLManager.createOWLOntologyManager().loadOntologyFromPhysicalURI(owl.toURI());\n                    } catch (URISyntaxException e) {\n                        throw new DataSourceException(\"Bad syntax converting url -> uri: \" + owl.toString(), e);\n                    } catch (OWLOntologyCreationException e) {\n                        throw new DataSourceException(\"Couldn't create ontology from \" + owl.toString(), e);\n                    }\n                }\n            }\n            if (beans.size() == 0) {\n                throw new DataSourceException(\"Failed to load beans for the datasource at \" + url);\n            }\n            if (datasourceOntology == null) {\n                throw new DataSourceException(\"The datasource at \" + url + \" contains no ontology, or the ontology could not be loaded\");\n            }\n            return new BeanModelDataSource(datasourceURI, datasourceOntology);\n        } else {\n            throw new DataSourceException(\"Unable to create a datasource, cannot load classes with the \" + \"given URL protocol (\" + baseURL + \")\");\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12202663",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static byte[] finalizeStringHash(String loginHash) throws NoSuchAlgorithmException {\n        MessageDigest md5Hasher;\n        md5Hasher = MessageDigest.getInstance(\"MD5\");\n        md5Hasher.update(loginHash.getBytes());\n        md5Hasher.update(LOGIN_FINAL_SALT);\n        return md5Hasher.digest();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12202844",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private String getMD5(String data) {\n        try {\n            MessageDigest md5Algorithm = MessageDigest.getInstance(\"MD5\");\n            md5Algorithm.update(data.getBytes(), 0, data.length());\n            byte[] digest = md5Algorithm.digest();\n            StringBuffer hexString = new StringBuffer();\n            String hexDigit = null;\n            for (int i = 0; i < digest.length; i++) {\n                hexDigit = Integer.toHexString(0xFF & digest[i]);\n                if (hexDigit.length() < 2) {\n                    hexDigit = \"0\" + hexDigit;\n                }\n                hexString.append(hexDigit);\n            }\n            return hexString.toString();\n        } catch (NoSuchAlgorithmException ne) {\n            return data;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12206255",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void parseTemplate(File templateFile, Map dataMap) throws ContainerException {\n        Debug.log(\"Parsing template : \" + templateFile.getAbsolutePath(), module);\n        Reader reader = null;\n        try {\n            reader = new InputStreamReader(new FileInputStream(templateFile));\n        } catch (FileNotFoundException e) {\n            throw new ContainerException(e);\n        }\n        String targetDirectoryName = args.length > 1 ? args[1] : null;\n        if (targetDirectoryName == null) {\n            targetDirectoryName = target;\n        }\n        String targetDirectory = ofbizHome + targetDirectoryName + args[0];\n        File targetDir = new File(targetDirectory);\n        if (!targetDir.exists()) {\n            boolean created = targetDir.mkdirs();\n            if (!created) {\n                throw new ContainerException(\"Unable to create target directory - \" + targetDirectory);\n            }\n        }\n        if (!targetDirectory.endsWith(\"/\")) {\n            targetDirectory = targetDirectory + \"/\";\n        }\n        Writer writer = null;\n        try {\n            writer = new FileWriter(targetDirectory + templateFile.getName());\n        } catch (IOException e) {\n            throw new ContainerException(e);\n        }\n        try {\n            FreeMarkerWorker.renderTemplate(templateFile.getAbsolutePath(), reader, dataMap, writer);\n        } catch (Exception e) {\n            throw new ContainerException(e);\n        }\n        try {\n            writer.flush();\n            writer.close();\n        } catch (IOException e) {\n            throw new ContainerException(e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12214439",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic boolean saveNote(NoteData n) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public boolean saveNote(NoteData n) {\n        String query;\n        try {\n            conn.setAutoCommit(false);\n            Statement stmt = null;\n            ResultSet rset = null;\n            stmt = conn.createStatement();\n            query = \"select * from notes where noteid = \" + n.getID();\n            rset = stmt.executeQuery(query);\n            if (rset.next()) {\n                query = \"UPDATE notes SET title = '\" + escapeCharacters(n.getTitle()) + \"', keywords = '\" + escapeCharacters(n.getKeywords()) + \"' WHERE noteid = \" + n.getID();\n                try {\n                    stmt.executeUpdate(query);\n                } catch (SQLException e) {\n                    e.printStackTrace();\n                    conn.rollback();\n                    conn.setAutoCommit(true);\n                    return false;\n                }\n                LinkedList<FieldData> fields = n.getFields();\n                ListIterator<FieldData> iter = fields.listIterator(0);\n                FieldData f = null;\n                PreparedStatement pstmt = conn.prepareStatement(\"UPDATE fielddata SET data = ? WHERE noteid = ? AND fieldid = ?\");\n                try {\n                    while (iter.hasNext()) {\n                        f = iter.next();\n                        if (f instanceof FieldDataImage) {\n                            System.out.println(\"field is an image.\");\n                            pstmt.setBytes(1, ((FieldDataImage) f).getDataBytes());\n                        } else {\n                            System.out.println(\"field is not an image\");\n                            pstmt.setString(1, f.getData());\n                        }\n                        pstmt.setInt(2, n.getID());\n                        pstmt.setInt(3, f.getID());\n                        pstmt.execute();\n                    }\n                } catch (SQLException e) {\n                    conn.rollback();\n                    conn.setAutoCommit(true);\n                    e.printStackTrace();\n                    return false;\n                }\n                query = \"DELETE FROM links WHERE (note1id = \" + n.getID() + \" OR note2id = \" + n.getID() + \")\";\n                try {\n                    stmt.execute(query);\n                } catch (SQLException e) {\n                    conn.rollback();\n                    conn.setAutoCommit(true);\n                    e.printStackTrace();\n                    return false;\n                }\n                Vector<Link> associations = n.getAssociations();\n                ListIterator<Link> itr = associations.listIterator();\n                Link association = null;\n                pstmt = conn.prepareStatement(\"INSERT INTO links (note1id, note2id) VALUES (?, ?)\");\n                try {\n                    while (itr.hasNext()) {\n                        association = itr.next();\n                        pstmt.setInt(1, n.getID());\n                        pstmt.setInt(2, association.getID());\n                        pstmt.execute();\n                    }\n                } catch (SQLException e) {\n                    conn.rollback();\n                    conn.setAutoCommit(true);\n                    e.printStackTrace();\n                    return false;\n                }\n            } else {\n                query = \"INSERT INTO notes (templateid, title, keywords) VALUES (\" + n.getTemplate().getID() + \", '\" + escapeCharacters(n.getTitle()) + \"', '\" + escapeCharacters(n.getKeywords()) + \"')\";\n                try {\n                    stmt.executeUpdate(query);\n                } catch (SQLException e) {\n                    e.printStackTrace();\n                    conn.rollback();\n                    conn.setAutoCommit(true);\n                    return false;\n                }\n                LinkedList<FieldData> fields = n.getFields();\n                ListIterator<FieldData> iter = fields.listIterator(0);\n                FieldData f = null;\n                n.setID(Integer.parseInt(executeMySQLGet(\"SELECT LAST_INSERT_ID()\")));\n                PreparedStatement pstmt;\n                try {\n                    pstmt = conn.prepareStatement(\"INSERT INTO fielddata (noteid, fieldid, data) VALUES (?,?,?)\");\n                    while (iter.hasNext()) {\n                        f = iter.next();\n                        if (f instanceof FieldDataImage) {\n                            System.out.println(\"field is an image.\");\n                            pstmt.setBytes(3, ((FieldDataImage) f).getDataBytes());\n                        } else {\n                            System.out.println(\"field is not an image\");\n                            pstmt.setString(3, f.getData());\n                        }\n                        pstmt.setInt(1, n.getID());\n                        pstmt.setInt(2, f.getID());\n                        pstmt.execute();\n                    }\n                } catch (SQLException e) {\n                    conn.rollback();\n                    conn.setAutoCommit(true);\n                    e.printStackTrace();\n                    return false;\n                }\n                Vector<Link> assoc = n.getAssociations();\n                Iterator<Link> itr = assoc.listIterator();\n                Link l = null;\n                pstmt = conn.prepareStatement(\"INSERT INTO links (note1id, note2id) VALUES (?,?)\");\n                try {\n                    while (itr.hasNext()) {\n                        l = itr.next();\n                        pstmt.setInt(1, n.getID());\n                        pstmt.setInt(2, l.getID());\n                        pstmt.execute();\n                    }\n                } catch (SQLException e) {\n                    conn.rollback();\n                    conn.setAutoCommit(true);\n                    e.printStackTrace();\n                    return false;\n                }\n            }\n            conn.commit();\n            conn.setAutoCommit(true);\n        } catch (SQLException ex) {\n            ex.printStackTrace();\n            return false;\n        }\n        return true;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12214442",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic boolean saveTemplate(Template t) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public boolean saveTemplate(Template t) {\n        try {\n            conn.setAutoCommit(false);\n            Statement stmt = conn.createStatement();\n            String query;\n            ResultSet rset;\n            if (Integer.parseInt(executeMySQLGet(\"SELECT COUNT(*) FROM templates WHERE name='\" + escapeCharacters(t.getName()) + \"'\")) != 0) return false;\n            query = \"select * from templates where templateid = \" + t.getID();\n            rset = stmt.executeQuery(query);\n            if (rset.next()) {\n                System.err.println(\"Updating already saved template is not supported!!!!!!\");\n                return false;\n            } else {\n                query = \"INSERT INTO templates (name, parentid) VALUES ('\" + escapeCharacters(t.getName()) + \"', \" + t.getParentID() + \")\";\n                try {\n                    stmt.executeUpdate(query);\n                } catch (SQLException e) {\n                    conn.rollback();\n                    conn.setAutoCommit(true);\n                    e.printStackTrace();\n                    return false;\n                }\n                int templateid = Integer.parseInt(executeMySQLGet(\"SELECT LAST_INSERT_ID()\"));\n                t.setID(templateid);\n                LinkedList<Field> fields = t.getFields();\n                ListIterator<Field> iter = fields.listIterator();\n                Field f = null;\n                PreparedStatement pstmt = conn.prepareStatement(\"INSERT INTO templatefields(fieldtype, name, templateid, defaultvalue)\" + \"VALUES (?,?,?,?)\");\n                try {\n                    while (iter.hasNext()) {\n                        f = iter.next();\n                        if (f.getType() == Field.IMAGE) {\n                            System.out.println(\"field is an image.\");\n                            byte data[] = ((FieldDataImage) f.getDefault()).getDataBytes();\n                            pstmt.setBytes(4, data);\n                        } else {\n                            System.out.println(\"field is not an image\");\n                            String deflt = (f.getDefault()).getData();\n                            pstmt.setString(4, deflt);\n                        }\n                        pstmt.setInt(1, f.getType());\n                        pstmt.setString(2, f.getName());\n                        pstmt.setInt(3, t.getID());\n                        pstmt.execute();\n                        f.setID(Integer.parseInt(executeMySQLGet(\"SELECT LAST_INSERT_ID()\")));\n                    }\n                } catch (SQLException e) {\n                    conn.rollback();\n                    conn.setAutoCommit(true);\n                    e.printStackTrace();\n                    return false;\n                }\n            }\n            conn.commit();\n            conn.setAutoCommit(true);\n        } catch (SQLException ex) {\n            System.err.println(\"Error saving the Template\");\n            return false;\n        }\n        return true;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12214889",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static boolean copyFile(String source, String destination, boolean replace) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static boolean copyFile(String source, String destination, boolean replace) {\n        File sourceFile = new File(source);\n        File destinationFile = new File(destination);\n        if (sourceFile.isDirectory() || destinationFile.isDirectory()) return false;\n        if (destinationFile.isFile() && !replace) return false;\n        if (!sourceFile.isFile()) return false;\n        if (replace) destinationFile.delete();\n        try {\n            File dir = destinationFile.getParentFile();\n            while (dir != null && !dir.exists()) {\n                dir.mkdir();\n            }\n            DataOutputStream outStream = new DataOutputStream(new BufferedOutputStream(new FileOutputStream(destinationFile), 10240));\n            DataInputStream inStream = new DataInputStream(new BufferedInputStream(new FileInputStream(sourceFile), 10240));\n            try {\n                while (inStream.available() > 0) {\n                    outStream.write(inStream.readUnsignedByte());\n                }\n            } catch (EOFException eof) {\n            }\n            inStream.close();\n            outStream.close();\n        } catch (IOException ex) {\n            throw new FailedException(\"Failed to copy file \" + sourceFile.getAbsolutePath() + \" to \" + destinationFile.getAbsolutePath(), ex).setFile(destinationFile.getAbsolutePath());\n        }\n        return true;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12215548",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "protected void initDefaultRolesFile() {\n        String webConfigPath = System.getProperty(\"dcm4chee-web3.cfg.path\", \"conf/dcm4chee-web3\");\n        File mappingFile = new File(webConfigPath + \"roles.json\");\n        if (!mappingFile.isAbsolute()) mappingFile = new File(ServerConfigLocator.locate().getServerHomeDir(), mappingFile.getPath());\n        if (mappingFile.exists()) return;\n        log.info(\"Init default Role Mapping file! mappingFile:\" + mappingFile);\n        if (mappingFile.getParentFile().mkdirs()) log.info(\"M-WRITE dir:\" + mappingFile.getParent());\n        FileChannel fos = null;\n        InputStream is = null;\n        try {\n            URL url = getClass().getResource(\"/META-INF/roles-default.json\");\n            log.info(\"Use default Mapping File content of url:\" + url);\n            is = url.openStream();\n            ReadableByteChannel inCh = Channels.newChannel(is);\n            fos = new FileOutputStream(mappingFile).getChannel();\n            int pos = 0;\n            while (is.available() > 0) pos += fos.transferFrom(inCh, pos, is.available());\n        } catch (Exception e) {\n            log.error(\"Roles file doesn't exist and the default can't be created!\", e);\n        } finally {\n            close(is);\n            close(fos);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12218827",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private HttpURLConnection prepare(URL url, String method) {\n            if (this.username != null && this.password != null) {\n                this.headers.put(\"Authorization\", \"Basic \" + Codec.encodeBASE64(this.username + \":\" + this.password));\n            }\n            try {\n                HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n                checkFileBody(connection);\n                connection.setRequestMethod(method);\n                for (String key : this.headers.keySet()) {\n                    connection.setRequestProperty(key, headers.get(key));\n                }\n                return connection;\n            } catch (Exception e) {\n                throw new RuntimeException(e);\n            }\n        }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12222321",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static long copyFile(File source, File target) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static long copyFile(File source, File target) throws IOException {\n        FileInputStream fileInputStream = null;\n        FileOutputStream fileOutputStream = null;\n        try {\n            fileInputStream = new FileInputStream(source);\n            fileOutputStream = new FileOutputStream(target);\n            FileChannel in = fileInputStream.getChannel();\n            FileChannel out = fileOutputStream.getChannel();\n            return out.transferFrom(in, 0, source.length());\n        } finally {\n            if (fileInputStream != null) fileInputStream.close();\n            if (fileOutputStream != null) fileOutputStream.close();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12226563",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void run() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void run() {\n        Vector<Update> updates = new Vector<Update>();\n        if (dic != null) updates.add(dic);\n        if (gen != null) updates.add(gen);\n        if (res != null) updates.add(res);\n        if (help != null) updates.add(help);\n        for (Iterator iterator = updates.iterator(); iterator.hasNext(); ) {\n            Update update = (Update) iterator.next();\n            try {\n                File temp = File.createTempFile(\"fm_\" + update.getType(), \".jar\");\n                temp.deleteOnExit();\n                FileOutputStream out = new FileOutputStream(temp);\n                URL url = new URL(update.getAction());\n                URLConnection conn = url.openConnection();\n                com.diccionarioderimas.Utils.setupProxy(conn);\n                InputStream in = conn.getInputStream();\n                byte[] buffer = new byte[1024];\n                int read = 0;\n                int total = 0;\n                while ((read = in.read(buffer)) != -1) {\n                    out.write(buffer, 0, read);\n                    total += read;\n                    if (total > 10000) {\n                        progressBar.setValue(progressBar.getValue() + total);\n                        total = 0;\n                    }\n                }\n                out.close();\n                in.close();\n                String fileTo = basePath + \"diccionariorimas.jar\";\n                if (update.getType() == Update.GENERATOR) fileTo = basePath + \"generador.jar\"; else if (update.getType() == Update.RESBC) fileTo = basePath + \"resbc.me\"; else if (update.getType() == Update.HELP) fileTo = basePath + \"help.html\";\n                if (update.getType() == Update.RESBC) {\n                    Utils.unzip(temp, new File(fileTo));\n                } else {\n                    Utils.copyFile(new FileInputStream(temp), new File(fileTo));\n                }\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n        setVisible(false);\n        if (gen != null || res != null) {\n            try {\n                new Main(null, basePath, false);\n            } catch (Exception e) {\n                new ErrorDialog(frame, e);\n            }\n        }\n        String restart = \"\";\n        if (dic != null) restart += \"\\nAlgunas de ellas s\ufffdlo estar\ufffdn disponibles despu\ufffds de reiniciar el diccionario.\";\n        JOptionPane.showMessageDialog(frame, \"Se han terminado de realizar las actualizaciones.\" + restart, \"Actualizaciones\", JOptionPane.INFORMATION_MESSAGE);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12229175",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void fileCopy(File sourceFile, File destFile) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void fileCopy(File sourceFile, File destFile) throws IOException {\n        FileChannel source = null;\n        FileChannel destination = null;\n        FileInputStream fis = null;\n        FileOutputStream fos = null;\n        try {\n            fis = new FileInputStream(sourceFile);\n            fos = new FileOutputStream(destFile);\n            source = fis.getChannel();\n            destination = fos.getChannel();\n            destination.transferFrom(source, 0, source.size());\n        } finally {\n            fis.close();\n            fos.close();\n            if (source != null) {\n                source.close();\n            }\n            if (destination != null) {\n                destination.close();\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12232011",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copyFile(File in, File out) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copyFile(File in, File out) throws IOException {\n        FileChannel inChannel = new FileInputStream(in).getChannel();\n        FileChannel outChannel = new FileOutputStream(out).getChannel();\n        try {\n            inChannel.transferTo(0, inChannel.size(), outChannel);\n        } catch (IOException e) {\n            throw e;\n        } finally {\n            if (inChannel != null) inChannel.close();\n            if (outChannel != null) outChannel.close();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12236729",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void copy(File inputFile, File outputFile) throws Exception {\n            FileReader in = new FileReader(inputFile);\n            FileWriter out = new FileWriter(outputFile);\n            int c;\n            while ((c = in.read()) != -1) out.write(c);\n            in.close();\n            out.close();\n        }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12238227",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void doActionxxx() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void doActionxxx() {\n        try {\n            System.out.println(\"app: ggc\");\n            String server_name = \"http://192.168.4.3:8080/\";\n            server_name = server_name.trim();\n            if (server_name.length() == 0) {\n                server_name = \"http://www.atech-software.com/\";\n            } else {\n                if (!server_name.startsWith(\"http://\")) server_name = \"http://\" + server_name;\n                if (!server_name.endsWith(\"/\")) server_name = server_name + \"/\";\n            }\n            URL url = new URL(server_name + \"ATechUpdateGetFile?\" + \"\" + \"file_id=1\" + \"&\" + \"version_requested=1\");\n            InputStream is = url.openStream();\n            RandomAccessFile raf = new RandomAccessFile(\"/home/andy/test.jpg\", \"rw\");\n            ArrayList<Integer> list = new ArrayList<Integer>();\n            float size = 671200;\n            long current_size = 0;\n            System.out.println(\"File size: \" + is.available());\n            byte[] array = new byte[1024];\n            while (is.available() > 0) {\n                if (is.available() < 1024) {\n                    array = new byte[is.available()];\n                }\n                is.read(array);\n                raf.write(array);\n                current_size += array.length;\n                System.out.println(\"Progress: \" + ((current_size / size) * 100));\n            }\n            System.out.println(\"Size Arr: \" + list.size());\n            CheckSumUtility csu = new CheckSumUtility();\n            System.out.println(\"Checksum: \" + csu.getChecksumValue(\"/home/andy/test.jpg\"));\n        } catch (Exception ex) {\n            ex.printStackTrace();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12242903",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private String hashKey(String key) {\n        String hashed = \"\";\n        try {\n            MessageDigest md5 = MessageDigest.getInstance(\"MD5\");\n            md5.update(key.getBytes());\n            BigInteger hash = new BigInteger(1, md5.digest());\n            hashed = hash.toString(16);\n        } catch (Exception ex) {\n            ex.printStackTrace();\n            hashed = String.valueOf(key.hashCode());\n        }\n        return hashed;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12243391",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private byte[] getMD5(String string) throws IMException {\n        byte[] buffer = null;\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            md.update(string.getBytes(\"utf-8\"));\n            buffer = md.digest();\n            buffer = getHexString(buffer);\n        } catch (NoSuchAlgorithmException e) {\n            throw new IMException(e);\n        } catch (UnsupportedEncodingException ue) {\n            throw new IMException(ue);\n        }\n        return buffer;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12246545",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void load(String url) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void load(String url) throws IOException {\n        this.url = url;\n        int col = url.indexOf(':');\n        if (col > 1 && col < 5) {\n            load(new URL(url).openStream());\n        } else {\n            if (new File(url).exists()) {\n                System.out.println(\"Loading JAD from file : \" + url);\n                FileInputStream fin = new FileInputStream(url);\n                try {\n                    load(fin);\n                } finally {\n                    fin.close();\n                }\n            } else {\n                InputStream in = getClass().getResourceAsStream(url);\n                if (in != null) {\n                    System.out.println(\"Loading JAD from classpath : \" + url);\n                    load(in);\n                } else {\n                    throw new IOException(\"\\\"\" + url + \"\\\" was found in file system or classpath\");\n                }\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12247514",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void main(String[] args) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void main(String[] args) throws Exception {\n        if (args.length != 2) {\n            PrintUtil.prt(\"arguments: sourcefile, destfile\");\n            System.exit(1);\n        }\n        FileChannel in = new FileInputStream(args[0]).getChannel(), out = new FileOutputStream(args[1]).getChannel();\n        ByteBuffer buff = ByteBuffer.allocate(BSIZE);\n        while (in.read(buff) != -1) {\n            PrintUtil.prt(\"%%%\");\n            buff.flip();\n            out.write(buff);\n            buff.clear();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12255573",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic Constructor run() throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public Constructor run() throws Exception {\n                            String path = \"META-INF/services/\" + BeanletApplicationContext.class.getName();\n                            ClassLoader loader = Thread.currentThread().getContextClassLoader();\n                            final Enumeration<URL> urls;\n                            if (loader == null) {\n                                urls = BeanletApplicationContext.class.getClassLoader().getResources(path);\n                            } else {\n                                urls = loader.getResources(path);\n                            }\n                            while (urls.hasMoreElements()) {\n                                URL url = urls.nextElement();\n                                BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\n                                try {\n                                    String className = null;\n                                    while ((className = reader.readLine()) != null) {\n                                        final String name = className.trim();\n                                        if (!name.startsWith(\"#\") && !name.startsWith(\";\") && !name.startsWith(\"//\")) {\n                                            final Class<?> cls;\n                                            if (loader == null) {\n                                                cls = Class.forName(name);\n                                            } else {\n                                                cls = Class.forName(name, true, loader);\n                                            }\n                                            int m = cls.getModifiers();\n                                            if (BeanletApplicationContext.class.isAssignableFrom(cls) && !Modifier.isAbstract(m) && !Modifier.isInterface(m)) {\n                                                Constructor constructor = cls.getDeclaredConstructor();\n                                                if (!Modifier.isPublic(constructor.getModifiers())) {\n                                                    constructor.setAccessible(true);\n                                                }\n                                                return constructor;\n                                            } else {\n                                                throw new ClassCastException(cls.getName());\n                                            }\n                                        }\n                                    }\n                                } finally {\n                                    reader.close();\n                                }\n                            }\n                            throw new BeanletApplicationException(\"No \" + \"BeanletApplicationContext implementation \" + \"found.\");\n                        }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12257332",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic synchronized FTPClient getFTPClient(String User, String Password) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public synchronized FTPClient getFTPClient(String User, String Password) throws IOException {\n            if (logger.isDebugEnabled()) {\n                logger.debug(\"getFTPClient(String, String) - start\");\n            }\n            while ((counter >= maxClients)) {\n                try {\n                    wait();\n                } catch (InterruptedException e) {\n                    logger.error(\"getFTPClient(String, String)\", e);\n                    e.printStackTrace();\n                }\n            }\n            FTPClient result = null;\n            String key = User.concat(Password);\n            logger.debug(\"versuche vorhandenen FTPClient aus Liste zu lesen\");\n            if (Clients != null) {\n                if (Clients.containsKey(key)) {\n                    LinkedList ClientList = (LinkedList) Clients.get(key);\n                    if (!ClientList.isEmpty()) do {\n                        result = (FTPClient) ClientList.getLast();\n                        logger.debug(\"-- hole einen Client aus der Liste: \" + result.toString());\n                        ClientList.removeLast();\n                        if (!result.isConnected()) {\n                            logger.debug(\"---- nicht mehr verbunden.\");\n                            result = null;\n                        } else {\n                            try {\n                                result.changeWorkingDirectory(\"/\");\n                            } catch (IOException e) {\n                                logger.debug(\"---- schmei\ufffdt Exception bei Zugriff.\");\n                                result = null;\n                            }\n                        }\n                    } while (result == null && !ClientList.isEmpty());\n                    if (ClientList.isEmpty()) {\n                        Clients.remove(key);\n                    }\n                } else {\n                }\n            } else logger.debug(\"-- keine Liste vorhanden.\");\n            if (result == null) {\n                logger.debug(\"Kein FTPCLient verf\ufffdgbar, erstelle einen neuen.\");\n                result = new FTPClient();\n                logger.debug(\"-- Versuche Connect\");\n                result.connect(Host);\n                logger.debug(\"-- Versuche Login\");\n                result.login(User, Password);\n                result.setFileType(FTPClient.BINARY_FILE_TYPE);\n                if (counter == maxClients - 1) {\n                    RemoveBufferedClient();\n                }\n            }\n            logger.debug(\"OK: neuer FTPClient ist \" + result.toString());\n            ;\n            counter++;\n            if (logger.isDebugEnabled()) {\n                logger.debug(\"getFTPClient(String, String) - end\");\n            }\n            return result;\n        }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12260713",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "protected void fixupCategoryAncestry(Context context) throws DataStoreException {\n        Connection db = null;\n        Statement s = null;\n        try {\n            db = context.getConnection();\n            db.setAutoCommit(false);\n            s = db.createStatement();\n            s.executeUpdate(\"delete from category_ancestry\");\n            walkTreeFixing(db, CATEGORYROOT);\n            db.commit();\n            context.put(Form.ACTIONEXECUTEDTOKEN, \"Category Ancestry regenerated\");\n        } catch (SQLException sex) {\n            try {\n                db.rollback();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n            throw new DataStoreException(\"Failed to refresh category ancestry\");\n        } finally {\n            if (s != null) {\n                try {\n                    s.close();\n                } catch (SQLException e) {\n                    e.printStackTrace();\n                }\n            }\n            if (db != null) {\n                context.releaseConnection(db);\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12261686",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n    protected byte[] fetch0() throws IOException {\n        if (sourceFile.getProtocol().equalsIgnoreCase(\"jar\")) {\n            throw new IOException(\"Jar protocol unsupported!\");\n        } else {\n            URL url;\n            if (sourceFile.getFile().endsWith(CLASS_FILE_EXTENSION)) {\n                url = sourceFile;\n            } else {\n                url = new URL(sourceFile, className.replace(PACKAGE_SEPARATOR, URL_DIRECTORY_SEPARATOR) + CLASS_FILE_EXTENSION);\n            }\n            InputStream stream = url.openStream();\n            try {\n                ByteArrayOutputStream output = new ByteArrayOutputStream();\n                byte[] buffer = new byte[PACKET_SIZE];\n                int bytesRead;\n                while ((bytesRead = stream.read(buffer, 0, buffer.length)) != -1) {\n                    output.write(buffer, 0, bytesRead);\n                }\n                return output.toByteArray();\n            } finally {\n                stream.close();\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12264241",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String generateMD5(final String data) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String generateMD5(final String data) {\n        final StringBuilder hash = new StringBuilder(64);\n        try {\n            final MessageDigest sha1 = MessageDigest.getInstance(\"MD5\");\n            sha1.update(data.getBytes());\n            final byte[] digest = sha1.digest();\n            for (byte aDigest : digest) {\n                String hex = Integer.toHexString(aDigest);\n                if (hex.length() == 1) {\n                    hex = \"0\" + hex;\n                }\n                hex = hex.substring(hex.length() - 2);\n                hash.append(hex);\n            }\n        } catch (NoSuchAlgorithmException e) {\n        }\n        return hash.toString();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12264242",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String generateSHA1(final String data) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String generateSHA1(final String data) {\n        final StringBuilder hash = new StringBuilder(40);\n        try {\n            final MessageDigest sha1 = MessageDigest.getInstance(\"sha1\");\n            sha1.update(data.getBytes());\n            final byte[] digest = sha1.digest();\n            for (byte aDigest : digest) {\n                String hex = Integer.toHexString(aDigest);\n                if (hex.length() == 1) {\n                    hex = \"0\" + hex;\n                }\n                hex = hex.substring(hex.length() - 2);\n                hash.append(hex);\n            }\n        } catch (NoSuchAlgorithmException e) {\n        }\n        return hash.toString();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12267657",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic Reader create(final URI url) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public Reader create(final URI url) throws IOException {\n        this.url = url;\n        if (!url.isAbsolute()) {\n            return new FileReader(new File(url.toString()));\n        }\n        URLConnection connection = url.toURL().openConnection();\n        connection.setDoInput(true);\n        final InputStream inputStream = connection.getInputStream();\n        return new InputStreamReader(inputStream);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12269678",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void copyResource(String relResourceName) {\n        String projectName = layout.getRootDir().getName();\n        String resourceName = \"/protoj/\" + projectName + \"/\" + relResourceName;\n        InputStream source = getClass().getResourceAsStream(resourceName);\n        if (source == null) {\n            throw new RuntimeException(\"couldn't find resource \" + resourceName);\n        }\n        File dest = new File(layout.getRootDir(), relResourceName);\n        dest.getParentFile().mkdirs();\n        dest.createNewFile();\n        InputStreamReader in = new InputStreamReader(source);\n        try {\n            FileOutputStream out = new FileOutputStream(dest);\n            try {\n                IOUtils.copy(in, out);\n            } finally {\n                IOUtils.closeQuietly(out);\n            }\n        } finally {\n            IOUtils.closeQuietly(in);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12270268",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copyFile(File in, File out) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copyFile(File in, File out) throws IOException {\n        FileChannel inChannel = new FileInputStream(in).getChannel();\n        FileChannel outChannel = new FileOutputStream(out).getChannel();\n        try {\n            if (System.getProperty(\"os.name\").toUpperCase().indexOf(\"WIN\") != -1) {\n                int maxCount = (64 * 1024 * 1024) - (32 * 1024);\n                long size = inChannel.size();\n                long position = 0;\n                while (position < size) {\n                    position += inChannel.transferTo(position, maxCount, outChannel);\n                }\n            } else {\n                inChannel.transferTo(0, inChannel.size(), outChannel);\n            }\n        } finally {\n            if (inChannel != null) inChannel.close();\n            if (outChannel != null) outChannel.close();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12274679",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic JSONObject executeJSON(final String path, final JSONObject jsRequest) throws IOException, HttpException, JSONException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public JSONObject executeJSON(final String path, final JSONObject jsRequest) throws IOException, HttpException, JSONException {\n        final HttpPost httpRequest = newHttpPost(path);\n        httpRequest.setHeader(\"Content-Type\", \"application/json\");\n        final String request = jsRequest.toString();\n        httpRequest.setEntity(new StringEntity(request));\n        final HttpResponse httpResponse = executeHttp(httpRequest);\n        final String response = EntityUtils.toString(httpResponse.getEntity());\n        return new JSONObject(response);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12283132",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic HTTPResponse makeRequest(BasicHttpRequest request) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public HTTPResponse makeRequest(BasicHttpRequest request) throws IOException {\n        try {\n            if (!conn.isOpen()) {\n                logger.warn(ApacheHTTP.class, \"Creating socket\");\n                Socket socket = getSocket(host.getHostName(), host.getPort(), ssl, true);\n                conn.bind(socket, params);\n            }\n            HttpContext context = new BasicHttpContext(null);\n            context.setAttribute(ExecutionContext.HTTP_CONNECTION, conn);\n            context.setAttribute(ExecutionContext.HTTP_TARGET_HOST, host);\n            context.setAttribute(ExecutionContext.HTTP_REQUEST, request);\n            request.setParams(params);\n            httpexecutor.preProcess(request, httpproc, context);\n            HttpResponse response = httpexecutor.execute(request, conn, context);\n            httpexecutor.postProcess(response, httpproc, context);\n            if (!connStrategy.keepAlive(response, context)) keepAlive = false;\n            int statusCode = response.getStatusLine().getStatusCode();\n            HttpEntity resp = response.getEntity();\n            if (statusCode >= 400) {\n                HTTPEntityInfo info = new HTTPEntityInfo((int) resp.getContentLength(), \"\", resp.getContentType().getValue());\n                byte[] bytes = IOUtil.toByteArray(resp.getContent());\n                throw new HTTPErrorResponse(response.getStatusLine().getReasonPhrase(), statusCode + \"\", bytes, info);\n            } else {\n                Header lastmodHeader = response.getLastHeader(\"last-modified\");\n                String lastmod = lastmodHeader == null ? \"\" : lastmodHeader.getValue();\n                Header contentType = resp.getContentType();\n                HTTPEntityInfo info = new HTTPEntityInfo((int) resp.getContentLength(), lastmod, contentType == null ? null : contentType.getValue());\n                return new HTTPResponse(info, resp.getContent());\n            }\n        } catch (HttpException he) {\n            throw new IOException(he);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12289756",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic String loadURL(URL url) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public String loadURL(URL url) {\n        String retVal = \"\";\n        try {\n            InputStream inputStream = url.openStream();\n            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));\n            String line = bufferedReader.readLine();\n            retVal += line + \"\\n\";\n            while (line != null) {\n                System.out.println(line);\n                line = bufferedReader.readLine();\n                if (line != null) retVal += line + \"\\n\";\n            }\n            bufferedReader.close();\n        } catch (MalformedURLException e) {\n            e.printStackTrace();\n            retVal = e.getMessage();\n        } catch (IOException e) {\n            e.printStackTrace();\n            retVal = e.getMessage();\n        } catch (Exception e) {\n            e.printStackTrace();\n            retVal = e.getMessage();\n        }\n        return retVal;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12296632",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic boolean check(Object credentials) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public boolean check(Object credentials) {\n            try {\n                byte[] digest = null;\n                if (credentials instanceof Password || credentials instanceof String) {\n                    synchronized (__md5Lock) {\n                        if (__md == null) __md = MessageDigest.getInstance(\"MD5\");\n                        __md.reset();\n                        __md.update(credentials.toString().getBytes(StringUtil.__ISO_8859_1));\n                        digest = __md.digest();\n                    }\n                    if (digest == null || digest.length != _digest.length) return false;\n                    for (int i = 0; i < digest.length; i++) if (digest[i] != _digest[i]) return false;\n                    return true;\n                } else if (credentials instanceof MD5) {\n                    MD5 md5 = (MD5) credentials;\n                    if (_digest.length != md5._digest.length) return false;\n                    for (int i = 0; i < _digest.length; i++) if (_digest[i] != md5._digest[i]) return false;\n                    return true;\n                } else if (credentials instanceof Credential) {\n                    return ((Credential) credentials).check(this);\n                } else {\n                    Log.warn(\"Can't check \" + credentials.getClass() + \" against MD5\");\n                    return false;\n                }\n            } catch (Exception e) {\n                Log.warn(e);\n                return false;\n            }\n        }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12296633",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String digest(String password) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String digest(String password) {\n            try {\n                byte[] digest;\n                synchronized (__md5Lock) {\n                    if (__md == null) {\n                        try {\n                            __md = MessageDigest.getInstance(\"MD5\");\n                        } catch (Exception e) {\n                            Log.warn(e);\n                            return null;\n                        }\n                    }\n                    __md.reset();\n                    __md.update(password.getBytes(StringUtil.__ISO_8859_1));\n                    digest = __md.digest();\n                }\n                return __TYPE + TypeUtil.toString(digest, 16);\n            } catch (Exception e) {\n                Log.warn(e);\n                return null;\n            }\n        }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12297431",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void actionPerformed(ActionEvent ae) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void actionPerformed(ActionEvent ae) {\n        String actionCommand = ae.getActionCommand();\n        if (actionCommand == null) {\n            return;\n        }\n        if (DataManager.SHOW_DEBUG) {\n            System.out.println(\"Action command : \" + actionCommand);\n        }\n        DataManager dataManager = ClientDirector.getDataManager();\n        PlayerImpl myPlayer = dataManager.getMyPlayer();\n        if (!myPlayer.getLocation().isRoom() && actionCommand.equals(\"createChatRoom\")) {\n            JOptionPane.showMessageDialog(null, \"Sorry, but you can not create/leave chat channels\\n\" + \"on World/Town Maps.\", \"INFORMATION\", JOptionPane.INFORMATION_MESSAGE);\n            return;\n        }\n        if (actionCommand.equals(\"createChatRoom\")) {\n            WotlasLocation chatRoomLocation = myPlayer.getLocation();\n            String chatRoomName = JOptionPane.showInputDialog(\"Please enter a Name:\");\n            if (chatRoomName == null || chatRoomName.length() == 0) {\n                return;\n            }\n            if (this.tabbedPane.getTabCount() >= ChatRoom.MAXIMUM_CHATROOMS_PER_ROOM - 1) {\n                this.b_createChatRoom.setEnabled(false);\n            } else {\n                this.b_createChatRoom.setEnabled(true);\n            }\n            myPlayer.sendMessage(new ChatRoomCreationMessage(chatRoomName, myPlayer.getPrimaryKey()));\n        } else if (actionCommand.equals(\"leaveChatRoom\")) {\n            if (!this.currentPrimaryKey.equals(ChatRoom.DEFAULT_CHAT)) {\n                myPlayer.sendMessage(new RemPlayerFromChatRoomMessage(myPlayer.getPrimaryKey(), this.currentPrimaryKey));\n            }\n        } else if (actionCommand.equals(\"helpChat\")) {\n            DataManager dManager = ClientDirector.getDataManager();\n            dManager.sendMessage(new SendTextMessage(dManager.getMyPlayer().getPrimaryKey(), dManager.getMyPlayer().getPlayerName(), getMyCurrentChatPrimaryKey(), \"/help\", ChatRoom.NORMAL_VOICE_LEVEL));\n        } else if (actionCommand.equals(\"imageChat\")) {\n            String imageURL = JOptionPane.showInputDialog(\"Please enter your image's URL:\\nExample: http://wotlas.sf.net/images/wotlas.gif\");\n            if (imageURL == null || imageURL.length() == 0) {\n                return;\n            }\n            try {\n                URL url = new URL(imageURL);\n                URLConnection urlC = url.openConnection();\n                urlC.connect();\n                String ctype = urlC.getContentType();\n                if (!ctype.startsWith(\"image/\")) {\n                    JOptionPane.showMessageDialog(null, \"The specified URL does not refer to an image !\", \"Information\", JOptionPane.INFORMATION_MESSAGE);\n                    return;\n                }\n                if (urlC.getContentLength() > 50 * 1024) {\n                    JOptionPane.showMessageDialog(null, \"The specified image is too big (above 50kB).\", \"Information\", JOptionPane.INFORMATION_MESSAGE);\n                    return;\n                }\n            } catch (Exception ex) {\n                Debug.signal(Debug.ERROR, this, \"Failed to get image: \" + ex);\n                JOptionPane.showMessageDialog(null, \"Failed to get the specified image...\\nCheck your URL.\", \"Error\", JOptionPane.ERROR_MESSAGE);\n                return;\n            }\n            DataManager dManager = ClientDirector.getDataManager();\n            dManager.sendMessage(new SendTextMessage(dManager.getMyPlayer().getPrimaryKey(), dManager.getMyPlayer().getPlayerName(), getMyCurrentChatPrimaryKey(), \"<img src='\" + imageURL + \"'>\", ChatRoom.NORMAL_VOICE_LEVEL));\n        } else {\n            if (DataManager.SHOW_DEBUG) {\n                System.out.println(\"Err : unknown actionCommand\");\n                System.out.println(\"No action command found!\");\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12306296",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copyFile(File source, File destination, long copyLength) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copyFile(File source, File destination, long copyLength) throws IOException {\n        if (!source.exists()) {\n            String message = \"File \" + source + \" does not exist\";\n            throw new FileNotFoundException(message);\n        }\n        if (destination.getParentFile() != null && !destination.getParentFile().exists()) {\n            forceMkdir(destination.getParentFile());\n        }\n        if (destination.exists() && !destination.canWrite()) {\n            String message = \"Unable to open file \" + destination + \" for writing.\";\n            throw new IOException(message);\n        }\n        if (source.getCanonicalPath().equals(destination.getCanonicalPath())) {\n            String message = \"Unable to write file \" + source + \" on itself.\";\n            throw new IOException(message);\n        }\n        if (copyLength == 0) {\n            truncateFile(destination, 0);\n        }\n        FileInputStream input = null;\n        FileOutputStream output = null;\n        try {\n            input = new FileInputStream(source);\n            output = new FileOutputStream(destination);\n            long lengthLeft = copyLength;\n            byte[] buffer = new byte[(int) Math.min(BUFFER_LENGTH, lengthLeft + 1)];\n            int read;\n            while (lengthLeft > 0) {\n                read = input.read(buffer);\n                if (read == -1) {\n                    break;\n                }\n                lengthLeft -= read;\n                output.write(buffer, 0, read);\n            }\n            output.flush();\n            output.getFD().sync();\n        } finally {\n            IOUtil.closeQuietly(input);\n            IOUtil.closeQuietly(output);\n        }\n        destination.setLastModified(source.lastModified());\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12306298",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void renameFileMultiFallback(File sourceFile, File destFile) throws FileHandlingException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void renameFileMultiFallback(File sourceFile, File destFile) throws FileHandlingException {\n        if (destFile.exists()) {\n            throw new FileHandlingException(FileHandlingException.FILE_ALREADY_EXISTS);\n        }\n        if (!sourceFile.exists()) {\n            return;\n        }\n        boolean succ = sourceFile.renameTo(destFile);\n        if (succ) {\n            NLogger.warn(FileUtils.class, \"First renameTo operation worked!\");\n            return;\n        }\n        NLogger.warn(FileUtils.class, \"First renameTo operation failed.\");\n        System.gc();\n        Thread.yield();\n        succ = sourceFile.renameTo(destFile);\n        if (succ) {\n            return;\n        }\n        NLogger.warn(FileUtils.class, \"Second renameTo operation failed.\");\n        FileInputStream input = null;\n        FileOutputStream output = null;\n        try {\n            input = new FileInputStream(sourceFile);\n            output = new FileOutputStream(destFile);\n            long lengthLeft = sourceFile.length();\n            byte[] buffer = new byte[(int) Math.min(BUFFER_LENGTH, lengthLeft + 1)];\n            int read;\n            while (lengthLeft > 0) {\n                read = input.read(buffer);\n                if (read == -1) {\n                    break;\n                }\n                lengthLeft -= read;\n                output.write(buffer, 0, read);\n            }\n        } catch (IOException exp) {\n            NLogger.warn(FileUtils.class, \"Third renameTo operation failed.\");\n            throw new FileHandlingException(FileHandlingException.RENAME_FAILED, exp);\n        } finally {\n            IOUtil.closeQuietly(input);\n            IOUtil.closeQuietly(output);\n        }\n        destFile.setLastModified(sourceFile.lastModified());\n        FileUtils.deleteFileMultiFallback(sourceFile);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12306305",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException {\n        if (destFile.exists() && destFile.isDirectory()) {\n            throw new IOException(\"Destination '\" + destFile + \"' exists but is a directory\");\n        }\n        FileChannel input = new FileInputStream(srcFile).getChannel();\n        try {\n            FileChannel output = new FileOutputStream(destFile).getChannel();\n            try {\n                output.transferFrom(input, 0, input.size());\n            } finally {\n                IOUtil.closeQuietly(output);\n            }\n        } finally {\n            IOUtil.closeQuietly(input);\n        }\n        if (srcFile.length() != destFile.length()) {\n            throw new IOException(\"Failed to copy full contents from '\" + srcFile + \"' to '\" + destFile + \"'\");\n        }\n        if (preserveFileDate) {\n            destFile.setLastModified(srcFile.lastModified());\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12312913",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void rewrite(String[] args) throws IOException, CodeCheckException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void rewrite(String[] args) throws IOException, CodeCheckException {\n        ClassWriter writer = new ClassWriter();\n        writer.readClass(new FileInputStream(args[0]));\n        for (Iterator i = writer.getMethods().iterator(); i.hasNext(); ) {\n            MethodInfo method = (MethodInfo) i.next();\n            CodeAttribute attribute = method.getCodeAttribute();\n            int origStack = attribute.getMaxStack();\n            System.out.print(method.getName());\n            attribute.codeCheck();\n            System.out.println(\" \" + origStack + \" \" + attribute.getMaxStack());\n        }\n        BufferedOutputStream outStream = new BufferedOutputStream(new FileOutputStream(args[1]));\n        writer.writeClass(outStream);\n        outStream.close();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12312914",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void testclass(String[] args) throws IOException, CodeCheckException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void testclass(String[] args) throws IOException, CodeCheckException {\n        ClassWriter writer = new ClassWriter();\n        writer.emptyClass(ClassWriter.ACC_PUBLIC, \"TestClass\", \"java/lang/Object\");\n        MethodInfo newMethod = writer.addMethod(ClassWriter.ACC_PUBLIC | ClassWriter.ACC_STATIC, \"main\", \"([Ljava/lang/String;)V\");\n        CodeAttribute attribute = newMethod.getCodeAttribute();\n        int constantIndex = writer.getStringConstantIndex(\"It's alive! It's alive!!\");\n        int fieldRefIndex = writer.getReferenceIndex(ClassWriter.CONSTANT_Fieldref, \"java/lang/System\", \"out\", \"Ljava/io/PrintStream;\");\n        int methodRefIndex = writer.getReferenceIndex(ClassWriter.CONSTANT_Methodref, \"java/io/PrintStream\", \"println\", \"(Ljava/lang/String;)V\");\n        ArrayList instructions = new ArrayList();\n        byte[] operands;\n        operands = new byte[2];\n        NetByte.intToPair(fieldRefIndex, operands, 0);\n        instructions.add(new Instruction(OpCode.getOpCodeByMnemonic(\"getstatic\"), 0, operands, false));\n        operands = new byte[1];\n        operands[0] = (byte) constantIndex;\n        instructions.add(new Instruction(OpCode.getOpCodeByMnemonic(\"ldc\"), 0, operands, false));\n        operands = new byte[2];\n        NetByte.intToPair(methodRefIndex, operands, 0);\n        instructions.add(new Instruction(OpCode.getOpCodeByMnemonic(\"invokevirtual\"), 0, operands, false));\n        instructions.add(new Instruction(OpCode.getOpCodeByMnemonic(\"return\"), 0, null, false));\n        attribute.insertInstructions(0, 0, instructions);\n        attribute.setMaxLocals(1);\n        attribute.codeCheck();\n        System.out.println(\"constantIndex=\" + constantIndex + \" fieldRef=\" + fieldRefIndex + \" methodRef=\" + methodRefIndex);\n        writer.writeClass(new FileOutputStream(\"c:/cygnus/home/javaodb/classes/TestClass.class\"));\n        writer.readClass(new FileInputStream(\"c:/cygnus/home/javaodb/classes/TestClass.class\"));\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12312915",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void entering(String[] args) throws IOException, CodeCheckException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void entering(String[] args) throws IOException, CodeCheckException {\n        ClassWriter writer = new ClassWriter();\n        writer.readClass(new BufferedInputStream(new FileInputStream(args[0])));\n        int constantIndex = writer.getStringConstantIndex(\"Entering \");\n        int fieldRefIndex = writer.getReferenceIndex(ClassWriter.CONSTANT_Fieldref, \"java/lang/System\", \"out\", \"Ljava/io/PrintStream;\");\n        int printlnRefIndex = writer.getReferenceIndex(ClassWriter.CONSTANT_Methodref, \"java/io/PrintStream\", \"println\", \"(Ljava/lang/String;)V\");\n        int printRefIndex = writer.getReferenceIndex(ClassWriter.CONSTANT_Methodref, \"java/io/PrintStream\", \"print\", \"(Ljava/lang/String;)V\");\n        for (Iterator i = writer.getMethods().iterator(); i.hasNext(); ) {\n            MethodInfo method = (MethodInfo) i.next();\n            if (method.getName().equals(\"readConstant\")) continue;\n            CodeAttribute attribute = method.getCodeAttribute();\n            ArrayList instructions = new ArrayList(10);\n            byte[] operands;\n            operands = new byte[2];\n            NetByte.intToPair(fieldRefIndex, operands, 0);\n            instructions.add(new Instruction(OpCode.getOpCodeByMnemonic(\"getstatic\"), 0, operands, false));\n            instructions.add(new Instruction(OpCode.getOpCodeByMnemonic(\"dup\"), 0, null, false));\n            instructions.add(Instruction.appropriateLdc(constantIndex, false));\n            operands = new byte[2];\n            NetByte.intToPair(printRefIndex, operands, 0);\n            instructions.add(new Instruction(OpCode.getOpCodeByMnemonic(\"invokevirtual\"), 0, operands, false));\n            instructions.add(Instruction.appropriateLdc(writer.getStringConstantIndex(method.getName()), false));\n            operands = new byte[2];\n            NetByte.intToPair(printlnRefIndex, operands, 0);\n            instructions.add(new Instruction(OpCode.getOpCodeByMnemonic(\"invokevirtual\"), 0, operands, false));\n            attribute.insertInstructions(0, 0, instructions);\n            attribute.codeCheck();\n        }\n        BufferedOutputStream outStream = new BufferedOutputStream(new FileOutputStream(args[1]));\n        writer.writeClass(outStream);\n        outStream.close();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12328424",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void copyFile(File sourceFile, File destFile) throws IOException {\n        if (!destFile.exists()) {\n            destFile.createNewFile();\n        }\n        FileChannel source = null;\n        FileChannel destination = null;\n        try {\n            source = new FileInputStream(sourceFile).getChannel();\n            destination = new FileOutputStream(destFile).getChannel();\n            destination.transferFrom(source, 0, source.size());\n        } finally {\n            if (source != null) {\n                source.close();\n            }\n            if (destination != null) {\n                destination.close();\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12330089",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void main(String[] args) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void main(String[] args) throws Exception {\n        final URL url = new URL(\"http://www.ebi.ac.uk/Tools/webservices/psicquic/registry/registry?action=ACTIVE&format=txt\");\n        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n        String str;\n        Map<String, String> psiqcuicServices = new HashMap<String, String>();\n        while ((str = in.readLine()) != null) {\n            final int idx = str.indexOf('=');\n            psiqcuicServices.put(str.substring(0, idx), str.substring(idx + 1, str.length()));\n        }\n        in.close();\n        System.out.println(\"Found \" + psiqcuicServices.size() + \" active service(s).\");\n        for (Object o : psiqcuicServices.keySet()) {\n            String serviceName = (String) o;\n            String serviceUrl = psiqcuicServices.get(serviceName);\n            System.out.println(serviceName + \" -> \" + serviceUrl);\n            UniversalPsicquicClient client = new UniversalPsicquicClient(serviceUrl);\n            try {\n                SearchResult<?> result = client.getByInteractor(\"brca2\", 0, 50);\n                System.out.println(\"Interactions found: \" + result.getTotalCount());\n                for (BinaryInteraction binaryInteraction : result.getData()) {\n                    String interactorIdA = binaryInteraction.getInteractorA().getIdentifiers().iterator().next().getIdentifier();\n                    String interactorIdB = binaryInteraction.getInteractorB().getIdentifiers().iterator().next().getIdentifier();\n                    String interactionAc = \"-\";\n                    if (!binaryInteraction.getInteractionAcs().isEmpty()) {\n                        CrossReference cr = (CrossReference) binaryInteraction.getInteractionAcs().iterator().next();\n                        interactionAc = cr.getIdentifier();\n                    }\n                    System.out.println(\"\\tInteraction (\" + interactionAc + \"): \" + interactorIdA + \" interacts with \" + interactorIdB);\n                }\n            } catch (Throwable e) {\n                System.err.println(\"Service is down! \" + serviceName + \"(\" + serviceUrl + \")\");\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12332433",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic String getLatestApplicationVersion() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n    public String getLatestApplicationVersion() {\n        String latestVersion = null;\n        String latestVersionInfoURL = \"http://movie-browser.googlecode.com/svn/site/latest\";\n        LOGGER.info(\"Checking latest version info from: \" + latestVersionInfoURL);\n        BufferedReader in = null;\n        try {\n            LOGGER.info(\"Fetcing latest version info from: \" + latestVersionInfoURL);\n            URL url = new URL(latestVersionInfoURL);\n            in = new BufferedReader(new InputStreamReader(url.openStream()));\n            String str;\n            while ((str = in.readLine()) != null) {\n                latestVersion = str;\n            }\n        } catch (Exception ex) {\n            LOGGER.error(\"Error fetching latest version info from: \" + latestVersionInfoURL, ex);\n        } finally {\n            try {\n                in.close();\n            } catch (Exception ex) {\n                LOGGER.error(\"Could not close inputstream\", ex);\n            }\n        }\n        return latestVersion;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12335897",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void valueChanged(ListSelectionEvent event) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "protected void assignListeners() {\n        groupsList.addListSelectionListener(new ListSelectionListener() {\n\n            @Override\n            public void valueChanged(ListSelectionEvent event) {\n                refreshInfo();\n            }\n        });\n        saveButton.addActionListener(new ActionListener() {\n\n            @Override\n            public void actionPerformed(ActionEvent event) {\n                JFileChooser fileDialog = new JFileChooser(\".\");\n                fileDialog.setFileFilter(ReaderData.mkExtensionFileFilter(\".grp\", \"Group Files\"));\n                int outcome = fileDialog.showSaveDialog((Frame) null);\n                if (outcome == JFileChooser.APPROVE_OPTION) {\n                    assert (fileDialog.getCurrentDirectory() != null);\n                    assert (fileDialog.getSelectedFile() != null);\n                    String fileName = fileDialog.getCurrentDirectory().toString() + File.separator + fileDialog.getSelectedFile().getName();\n                    try {\n                        PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(fileName)));\n                        ReaderWriterGroup.write(out, writer);\n                        System.err.println(\"Wrote groups informations to output '\" + fileName + \"'.\");\n                        out.close();\n                    } catch (IOException e) {\n                        System.err.println(\"error while writing (GroupManager.saveClt):\");\n                        e.printStackTrace();\n                    }\n                } else if (outcome == JFileChooser.CANCEL_OPTION) {\n                }\n            }\n        });\n        loadButton.addActionListener(new ActionListener() {\n\n            @Override\n            public void actionPerformed(ActionEvent evt) {\n                JFileChooser fileDialog = new JFileChooser(\".\");\n                fileDialog.setFileFilter(ReaderData.mkExtensionFileFilter(\".grp\", \"Group Files\"));\n                int outcome = fileDialog.showOpenDialog((Frame) null);\n                if (outcome == JFileChooser.APPROVE_OPTION) {\n                    assert (fileDialog.getCurrentDirectory() != null);\n                    assert (fileDialog.getSelectedFile() != null);\n                    String fileName = fileDialog.getCurrentDirectory().toString() + File.separator + fileDialog.getSelectedFile().getName();\n                    BufferedReader fileReader = null;\n                    try {\n                        fileReader = new BufferedReader(new FileReader(fileName));\n                        ReaderWriterGroup.read(fileReader, writer);\n                        fileReader.close();\n                    } catch (Exception e) {\n                        System.err.println(\"Exception while reading from file '\" + fileName + \"'.\");\n                        System.err.println(e);\n                    }\n                } else if (outcome == JFileChooser.CANCEL_OPTION) {\n                }\n            }\n        });\n        ItemListener propItemListener = new ItemListener() {\n\n            @Override\n            public void itemStateChanged(ItemEvent event) {\n                int[] indices = groupsList.getSelectedIndices();\n                for (int index : indices) {\n                    Group group = getGroupFromListIndex(index);\n                    if (group != null) {\n                        if (event.getSource() instanceof JComboBox) {\n                            JComboBox eventSource = (JComboBox) event.getSource();\n                            if (eventSource == colorComboBox) {\n                                Color color = colorComboBox.getSelectedColor();\n                                assert (color != null);\n                                group.setColor(color);\n                                shapeComboBox.setColor(color);\n                            } else if (eventSource == shapeComboBox) {\n                                Shape shape = shapeComboBox.getSelectedShape();\n                                assert (shape != null);\n                                group.setShape(shape);\n                            }\n                        } else if (event.getSource() instanceof JCheckBox) {\n                            JCheckBox eventSource = (JCheckBox) event.getSource();\n                            if (eventSource == showGroupCheckBox) {\n                                group.visible = showGroupCheckBox.isSelected();\n                            } else if (eventSource == showGraphicInfoCheckBox) {\n                                group.info = showGraphicInfoCheckBox.isSelected();\n                            }\n                        }\n                    }\n                }\n                graph.notifyAboutGroupsChange(null);\n            }\n        };\n        colorComboBox.addItemListener(propItemListener);\n        shapeComboBox.addItemListener(propItemListener);\n        showGroupCheckBox.addItemListener(propItemListener);\n        showGraphicInfoCheckBox.addItemListener(propItemListener);\n        showGroupfreeNodesCheckBox.addItemListener(new ItemListener() {\n\n            @Override\n            public void itemStateChanged(ItemEvent event) {\n                graph.getGroup(0).visible = showGroupfreeNodesCheckBox.isSelected();\n                graph.notifyAboutGroupsChange(null);\n            }\n        });\n        ActionListener propActionListener = new ActionListener() {\n\n            @Override\n            public void actionPerformed(ActionEvent event) {\n                JButton botton = (JButton) event.getSource();\n                Group group = getGroupFromListIndex(groupsList.getSelectedIndex());\n                if (group != null) {\n                    for (GraphVertex graphVertex : group) {\n                        if (botton == showLabelsButton) {\n                            graphVertex.setShowName(NameVisibility.Priority.GROUPS, true);\n                        } else if (botton == hideLabelsButton) {\n                            graphVertex.setShowName(NameVisibility.Priority.GROUPS, false);\n                        }\n                    }\n                    graph.notifyAboutGroupsChange(null);\n                }\n            }\n        };\n        showLabelsButton.addActionListener(propActionListener);\n        hideLabelsButton.addActionListener(propActionListener);\n        newButton.addActionListener(new ActionListener() {\n\n            @Override\n            public void actionPerformed(ActionEvent event) {\n                String newGroupName = JOptionPane.showInputDialog(null, \"Enter a name\", \"Name of the new group\", JOptionPane.QUESTION_MESSAGE);\n                if (newGroupName != null) {\n                    if (graph.getGroup(newGroupName) == null) {\n                        graph.addGroup(new Group(newGroupName, graph));\n                    }\n                }\n            }\n        });\n        editButton.addActionListener(new ActionListener() {\n\n            @Override\n            public void actionPerformed(ActionEvent event) {\n                Group group = getGroupFromListIndex(groupsList.getSelectedIndex());\n                if (group != null) {\n                    DialogEditGroup dialog = new DialogEditGroup(graph, group);\n                    dialog.setModal(true);\n                    dialog.setVisible(true);\n                }\n            }\n        });\n        deleteButton.addActionListener(new ActionListener() {\n\n            @Override\n            public void actionPerformed(ActionEvent event) {\n                int index = groupsList.getSelectedIndex();\n                if (index > 0 && index < graph.getNumberOfGroups() - 1) {\n                    graph.removeGroup(index);\n                }\n            }\n        });\n        upButton.addActionListener(new ActionListener() {\n\n            @Override\n            public void actionPerformed(ActionEvent event) {\n                int index = groupsList.getSelectedIndex();\n                if (index < graph.getNumberOfGroups() - 1) {\n                    graph.moveGroupUp(index);\n                    groupsList.setSelectedIndex(index - 1);\n                }\n            }\n        });\n        downButton.addActionListener(new ActionListener() {\n\n            @Override\n            public void actionPerformed(ActionEvent event) {\n                int index = groupsList.getSelectedIndex();\n                if (index < graph.getNumberOfGroups() - 1) {\n                    graph.moveGroupDown(index);\n                    groupsList.setSelectedIndex(index + 1);\n                }\n            }\n        });\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12340187",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static boolean downloadFile(URL remote, File local) throws IllegalArgumentException, IOException {\n        if (local == null) throw new IllegalArgumentException(\"Must specify remote file\");\n        if (local.exists() && !local.canWrite()) throw new IOException(\"Cannot write to \" + local);\n        long lengthCurrent = local.exists() ? local.length() : -1l;\n        if (lengthCurrent == 0) throw new IOException(\"Cannot get the length for \" + local);\n        long lastModifiedCurrent = local.exists() ? local.lastModified() : -1l;\n        if (remote == null) throw new IllegalArgumentException(\"Must specify remote url\");\n        URLConnection urlConnection = remote.openConnection();\n        urlConnection.setDoInput(true);\n        urlConnection.setDoOutput(false);\n        long lengthRemote = urlConnection.getContentLength();\n        long lastModifiedRemote = urlConnection.getLastModified();\n        if (lengthRemote == lengthCurrent) {\n            LOGGER.fine(\"Not downloading \" + remote + \" of length \" + lengthRemote + \" and date \" + (lastModifiedRemote > 0 ? new Date(lastModifiedRemote).toString() : \"n/a\") + \" for \" + local + \" of length \" + lengthCurrent + \" and date \" + new Date(lastModifiedCurrent));\n            return false;\n        }\n        BufferedInputStream inputStream = null;\n        BufferedOutputStream bufferedOutputStream = null;\n        try {\n            inputStream = new BufferedInputStream(urlConnection.getInputStream(), BUFFER_SIZE);\n            bufferedOutputStream = new BufferedOutputStream(new FileOutputStream(local));\n            byte[] buffer = new byte[BUFFER_SIZE];\n            do {\n                int count = inputStream.read(buffer);\n                if (count < 0) break;\n                bufferedOutputStream.write(buffer, 0, count);\n            } while (true);\n            return true;\n        } finally {\n            try {\n                if (inputStream != null) inputStream.close();\n            } catch (Throwable throwable) {\n            }\n            try {\n                if (bufferedOutputStream != null) bufferedOutputStream.close();\n            } catch (Throwable throwable) {\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12345227",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "void copyFile(File src, File dst) throws IOException {\n        InputStream in = new FileInputStream(src);\n        OutputStream out = new FileOutputStream(dst);\n        byte[] buf = new byte[1024];\n        int len;\n        while ((len = in.read(buf)) > 0) out.write(buf, 0, len);\n        in.close();\n        out.close();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12349562",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic byte[] loadResource(String location) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public byte[] loadResource(String location) throws IOException {\n        if ((location == null) || (location.length() == 0)) {\n            throw new IOException(\"The given resource location must not be null and non empty.\");\n        }\n        URL url = buildURL(location);\n        URLConnection cxn = url.openConnection();\n        InputStream is = null;\n        try {\n            byte[] byteBuffer = new byte[2048];\n            ByteArrayOutputStream bos = new ByteArrayOutputStream(2048);\n            is = cxn.getInputStream();\n            int bytesRead = 0;\n            while ((bytesRead = is.read(byteBuffer, 0, 2048)) >= 0) {\n                bos.write(byteBuffer, 0, bytesRead);\n            }\n            return bos.toByteArray();\n        } finally {\n            if (is != null) {\n                is.close();\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12349563",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic boolean resourceExists(String location) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public boolean resourceExists(String location) {\n        if ((location == null) || (location.length() == 0)) {\n            return false;\n        }\n        try {\n            URL url = buildURL(location);\n            URLConnection cxn = url.openConnection();\n            InputStream is = null;\n            try {\n                byte[] byteBuffer = new byte[2048];\n                is = cxn.getInputStream();\n                while (is.read(byteBuffer, 0, 2048) >= 0) ;\n                return true;\n            } finally {\n                if (is != null) {\n                    is.close();\n                }\n            }\n        } catch (IOException ex) {\n            return false;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12352751",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void startElement(String uri, String tag, String qName, org.xml.sax.Attributes attributes) throws SAXException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void startElement(String uri, String tag, String qName, org.xml.sax.Attributes attributes) throws SAXException {\n        wabclient.Attributes prop = new wabclient.Attributes(attributes);\n        try {\n            if (tag.equals(\"window\")) {\n                if (prop == null) {\n                    System.err.println(\"window without properties\");\n                    return;\n                }\n                int x = prop.getValue(\"x\", 0);\n                int y = prop.getValue(\"y\", 0);\n                int width = prop.getValue(\"width\", 0);\n                int height = prop.getValue(\"height\", 0);\n                Color bgcolor = prop.getValue(\"bgcolor\", Color.white);\n                String caption = prop.getValue(\"caption\", \"\");\n                layout = prop.getValue(\"layout\", 0);\n                boolean statusbar = prop.getValue(\"statusbar\", false);\n                if (sheet.opentype == WABSheet.LAYERED) {\n                    Point pos = frame.getNextMDIPos();\n                    sheet.setBounds(pos.x, pos.y, 400, 200);\n                    sheet.setNormalBounds(new Rectangle(pos.x, pos.y, 400, 200));\n                } else {\n                    sheet.setBounds(x, y, width, height);\n                    sheet.setNormalBounds(new Rectangle(x, y, width, height));\n                }\n                if (sheet.opentype == WABSheet.MAXIMIZED) sheet.setMaximum(true); else sheet.setMaximum(false);\n                sheet.setTitle(caption);\n                frame.addSheetToMenu(caption);\n                sheet.setBackground(bgcolor);\n                if (layout == 1) sheet.getContentPane().setLayout(new FlowLayout()); else if (layout == 2) sheet.getContentPane().setLayout(new BorderLayout()); else sheet.getContentPane().setLayout(null);\n            } else if (tag.equals(\"menu\")) {\n                if (prop == null) {\n                    System.err.println(\"menu without properties\");\n                    return;\n                }\n                String id = prop.getValue(\"id\", \"\");\n                String label = prop.getValue(\"label\", \"\");\n                if ((id != null && id.equals(\"WINDOW_MENU\") || label.equalsIgnoreCase(\"window\"))) {\n                    windowMenu = new JMenu();\n                    menu = windowMenu;\n                    sheet.setWindowMenu(menu);\n                } else {\n                    menu = new JMenu();\n                }\n                menu.setText(label);\n                sheet.menubar.add(menu);\n            } else if (tag.equals(\"menuitem\")) {\n                if (prop == null) {\n                    System.err.println(\"menuitem without properties\");\n                    return;\n                }\n                JMenuItem item;\n                String action = prop.getValue(\"action\", \"\");\n                String label = prop.getValue(\"label\", \"\");\n                boolean visible = prop.getValue(\"visible\", true);\n                String icon = prop.getValue(\"icon\", \"\");\n                if (action.equals(\"WINDOW_OVERLAPPED\")) {\n                    item = windowMenuOverlapped = new JMenuItem();\n                    item.setActionCommand(\"10001\");\n                    item.addActionListener(frame);\n                } else if (action.equals(\"WINDOW_TILE_HORIZONTALLY\")) {\n                    item = windowMenuTile = new JMenuItem();\n                    item.setActionCommand(\"10002\");\n                    item.addActionListener(frame);\n                } else if (action.equals(\"WINDOW_TILE_VERTICALLY\")) {\n                    item = windowMenuArrange = new JMenuItem();\n                    item.setActionCommand(\"10003\");\n                    item.addActionListener(frame);\n                } else {\n                    item = new JMenuItem();\n                    item.setActionCommand(action);\n                    item.addActionListener((WABClient) global);\n                }\n                item.setText(label);\n                if (!visible) menu.setVisible(false);\n                menu.add(item);\n                if (frame.getToolBar() != null) {\n                    if (icon.length() > 0) {\n                        try {\n                            ImageIcon img = new ImageIcon(new URL(icon));\n                            BufferedImage image = new BufferedImage(25, 25, BufferedImage.TYPE_4BYTE_ABGR);\n                            Graphics g = image.createGraphics();\n                            g.setColor(new Color(0, 0, 0, 0));\n                            g.fillRect(0, 0, 25, 25);\n                            g.drawImage(img.getImage(), 4, 4, 16, 16, (ImageObserver) null);\n                            BufferedImage pressed = new BufferedImage(25, 25, BufferedImage.TYPE_4BYTE_ABGR);\n                            g = pressed.createGraphics();\n                            g.setColor(new Color(0, 0, 0, 0));\n                            g.fillRect(0, 0, 25, 25);\n                            g.drawImage(img.getImage(), 5, 5, 16, 16, (ImageObserver) null);\n                            g.setColor(new Color(132, 132, 132));\n                            g.drawLine(0, 0, 24, 0);\n                            g.drawLine(0, 0, 0, 24);\n                            g.setColor(new Color(255, 255, 255));\n                            g.drawLine(24, 24, 24, 0);\n                            g.drawLine(24, 24, 0, 24);\n                            BufferedImage over = new BufferedImage(25, 25, BufferedImage.TYPE_4BYTE_ABGR);\n                            g = over.createGraphics();\n                            g.setColor(new Color(0, 0, 0, 0));\n                            g.fillRect(0, 0, 25, 25);\n                            g.drawImage(img.getImage(), 4, 4, 16, 16, (ImageObserver) null);\n                            g.setColor(new Color(255, 255, 255));\n                            g.drawLine(0, 0, 24, 0);\n                            g.drawLine(0, 0, 0, 24);\n                            g.setColor(new Color(132, 132, 132));\n                            g.drawLine(24, 24, 24, 0);\n                            g.drawLine(24, 24, 0, 24);\n                            JButton b = new JButton(new ImageIcon(image));\n                            b.setRolloverEnabled(true);\n                            b.setPressedIcon(new ImageIcon(pressed));\n                            b.setRolloverIcon(new ImageIcon(over));\n                            b.setToolTipText(label);\n                            b.setActionCommand(action);\n                            b.setFocusPainted(false);\n                            b.setBorderPainted(false);\n                            b.setContentAreaFilled(false);\n                            b.setMargin(new Insets(0, 0, 0, 0));\n                            b.addActionListener(sheet);\n                            sheet.toolbar.add(b);\n                        } catch (Exception e) {\n                        }\n                    }\n                }\n            } else if (tag.equals(\"separator\")) {\n                menu.addSeparator();\n            } else if (tag.equals(\"choice\")) {\n                if (prop == null) {\n                    System.err.println(\"choice without properties\");\n                    return;\n                }\n                combo = new JComboBox();\n                list = null;\n                int x = prop.getValue(\"x\", 0);\n                int y = prop.getValue(\"y\", 0);\n                int width = prop.getValue(\"width\", 0);\n                int height = prop.getValue(\"height\", 0);\n                String id = prop.getValue(\"id\", \"\");\n                Object constraints = prop.getValue(\"constraints\");\n                boolean editable = prop.getValue(\"editable\", false);\n                boolean visible = prop.getValue(\"visible\", true);\n                boolean enabled = prop.getValue(\"enabled\", true);\n                combo_text = prop.getValue(\"text\", \"\");\n                combo.setBounds(x, y, width, height);\n                combo.setName((String) id);\n                if (editable) {\n                    combo.setEditable(editable);\n                    combo.setSelectedItem(combo_text);\n                }\n                if (!visible) combo.setVisible(false);\n                if (!enabled) combo.setEnabled(false);\n                if (layout == 0) sheet.getContentPane().add(combo); else sheet.getContentPane().add(combo, constraints);\n            } else if (tag.equals(\"list\")) {\n                if (prop == null) {\n                    System.err.println(\"list without properties\");\n                    return;\n                }\n                list = new JList();\n                combo = null;\n                listdata = new Vector();\n                int x = prop.getValue(\"x\", 0);\n                int y = prop.getValue(\"y\", 0);\n                int width = prop.getValue(\"width\", 0);\n                int height = prop.getValue(\"height\", 0);\n                String id = prop.getValue(\"id\", \"\");\n                Object constraints = prop.getValue(\"constraints\");\n                list.setName((String) id);\n                list.setListData(listdata);\n                JScrollPane sp = new JScrollPane(list);\n                sp.setBounds(x, y, width, height);\n                if (layout == 0) sheet.getContentPane().add(sp); else sheet.getContentPane().add(sp, constraints);\n            } else if (tag.equals(\"option\")) {\n                if (prop == null) {\n                    System.err.println(\"choice.option without properties\");\n                    return;\n                }\n                String value = prop.getValue(\"value\", \"\");\n                String text = prop.getValue(\"text\", \"\");\n                if (list != null) listdata.addElement(new ComboOption(text, value));\n                if (combo != null) {\n                    ComboOption co = new ComboOption(text, value);\n                    combo.addItem(co);\n                    if (combo_text.equals(text.trim())) combo.setSelectedItem(co);\n                }\n            } else if (tag.equals(\"label\")) {\n                if (prop == null) {\n                    System.err.println(\"label without properties\");\n                    return;\n                }\n                JLabel label = new JLabel();\n                int x = prop.getValue(\"x\", 0);\n                int y = prop.getValue(\"y\", 0);\n                int width = prop.getValue(\"width\", 0);\n                int height = prop.getValue(\"height\", 0);\n                String text = prop.getValue(\"text\", \"\");\n                Object constraints = prop.getValue(\"constraints\");\n                boolean visible = prop.getValue(\"visible\", true);\n                label.setBounds(x, y, width, height);\n                label.setText(text);\n                if (!visible) label.setVisible(false);\n                if (layout == 0) sheet.getContentPane().add(label); else sheet.getContentPane().add(label, constraints);\n            } else if (tag.equals(\"button\")) {\n                if (prop == null) {\n                    System.err.println(\"button without properties\");\n                    return;\n                }\n                JButton btn = new JButton();\n                int x = prop.getValue(\"x\", 0);\n                int y = prop.getValue(\"y\", 0);\n                int width = prop.getValue(\"width\", 0);\n                int height = prop.getValue(\"height\", 0);\n                String id = prop.getValue(\"id\", \"\");\n                String text = prop.getValue(\"text\", \"\");\n                String onmouseup = prop.getValue(\"onmouseup\", \"\");\n                Object constraints = prop.getValue(\"constraints\");\n                btn.setBounds(x, y, width, height);\n                btn.setText(text);\n                btn.addActionListener(sheet);\n                btn.setActionCommand(onmouseup);\n                if (layout == 0) sheet.getContentPane().add(btn); else sheet.getContentPane().add(btn, constraints);\n            } else if (tag.equals(\"radiobutton\")) {\n                if (prop == null) {\n                    System.err.println(\"radiobutton without properties\");\n                    return;\n                }\n                JRadioButton rb = new JRadioButton();\n                int x = prop.getValue(\"x\", 0);\n                int y = prop.getValue(\"y\", 0);\n                int width = prop.getValue(\"width\", 0);\n                int height = prop.getValue(\"height\", 0);\n                String id = prop.getValue(\"id\", \"\");\n                String text = prop.getValue(\"text\", \"\");\n                Object constraints = prop.getValue(\"constraints\");\n                String checked = prop.getValue(\"checked\", \"false\");\n                rb.setBounds(x, y, width, height);\n                rb.setText(text);\n                rb.setName((String) id);\n                rb.addActionListener(sheet);\n                rb.setSelected(checked.equalsIgnoreCase(\"true\"));\n                if (layout == 0) sheet.getContentPane().add(rb); else sheet.getContentPane().add(rb, constraints);\n            } else if (tag.equals(\"checkbox\")) {\n                if (prop == null) {\n                    System.err.println(\"checkbox without properties\");\n                    return;\n                }\n                JCheckBox cb = new JCheckBox();\n                int x = prop.getValue(\"x\", 0);\n                int y = prop.getValue(\"y\", 0);\n                int width = prop.getValue(\"width\", 0);\n                int height = prop.getValue(\"height\", 0);\n                String id = prop.getValue(\"id\", \"\");\n                String text = prop.getValue(\"text\", \"\");\n                String onmouseup = prop.getValue(\"onmouseup\", \"\");\n                Object constraints = prop.getValue(\"constraints\");\n                String checked = prop.getValue(\"checked\", \"false\");\n                cb.setBounds(x, y, width, height);\n                cb.setText(text);\n                cb.setName((String) id);\n                cb.setSelected(checked.equalsIgnoreCase(\"true\"));\n                if (layout == 0) sheet.getContentPane().add(cb); else sheet.getContentPane().add(cb, constraints);\n            } else if (tag.equals(\"image\")) {\n                if (prop == null) {\n                    System.err.println(\"image without properties\");\n                    return;\n                }\n                JLabel label = new JLabel();\n                int x = prop.getValue(\"x\", 0);\n                int y = prop.getValue(\"y\", 0);\n                int width = prop.getValue(\"width\", 0);\n                int height = prop.getValue(\"height\", 0);\n                String src = prop.getValue(\"src\", \"\");\n                Object constraints = prop.getValue(\"constraints\");\n                label.setIcon(new ImageIcon(new URL(src)));\n                label.setBounds(x, y, width, height);\n                if (layout == 0) sheet.getContentPane().add(label); else sheet.getContentPane().add(label, constraints);\n            } else if (tag.equals(\"singlelineedit\")) {\n                if (prop == null) {\n                    System.err.println(\"singlelineedit without properties\");\n                    return;\n                }\n                String pwd = prop.getValue(\"password\", \"\");\n                JTextField sle;\n                if (pwd.equalsIgnoreCase(\"true\")) sle = new JPasswordField(); else sle = new JTextField();\n                int x = prop.getValue(\"x\", 0);\n                int y = prop.getValue(\"y\", 0);\n                int width = prop.getValue(\"width\", 0);\n                int height = prop.getValue(\"height\", 0);\n                Object id = prop.getValue(\"id\");\n                String text = prop.getValue(\"text\", \"\");\n                Object constraints = prop.getValue(\"constraints\");\n                sle.setBounds(x, y, width, height);\n                sle.setText(text);\n                sle.setName((String) id);\n                if (layout == 0) sheet.getContentPane().add(sle); else sheet.getContentPane().add(sle, constraints);\n            } else if (tag.equals(\"treeview\")) {\n                if (prop == null) {\n                    System.err.println(\"treeview without properties\");\n                    return;\n                }\n                treeview_root = new DefaultMutableTreeNode(\"root\");\n                treeview = new JTree(treeview_root);\n                Object constraints = prop.getValue(\"constraints\");\n                sheet.getContentPane().add(new JScrollPane(treeview), constraints);\n            } else if (tag.equals(\"treeitem\")) {\n                if (prop == null) {\n                    System.err.println(\"treeview.treeitem without properties\");\n                    return;\n                }\n                String text = prop.getValue(\"text\", \"\");\n                String value = prop.getValue(\"value\", \"\");\n                DefaultMutableTreeNode node = new DefaultMutableTreeNode(text);\n                treeview_root.add(node);\n            } else if (tag.equals(\"table\")) {\n                if (prop == null) {\n                    System.err.println(\"table without properties\");\n                    return;\n                }\n                String id = prop.getValue(\"id\", \"\");\n                table = new JTable();\n                model = new DefaultTableModel() {\n\n                    public boolean isCellEditable(int row, int col) {\n                        return false;\n                    }\n                };\n                table.setModel(model);\n                table.setName((String) id);\n                Object constraints = prop.getValue(\"constraints\");\n                sheet.getContentPane().add(new JScrollPane(table), constraints);\n                rowNumber = 0;\n                columnNumber = 0;\n                headerWidths = new Vector();\n            } else if (tag.equals(\"header\")) {\n                if (prop == null) {\n                    System.err.println(\"table.header without properties\");\n                    return;\n                }\n                String text = prop.getValue(\"text\", \"\");\n                int width = prop.getValue(\"width\", 0);\n                headerWidths.addElement(new Integer(width));\n                model.addColumn(text);\n            } else if (tag.equals(\"row\")) {\n                rowNumber++;\n                columnNumber = 0;\n                model.setRowCount(rowNumber);\n            } else if (tag.equals(\"column\")) {\n                columnNumber++;\n                if (prop == null) {\n                    System.err.println(\"table.column without properties\");\n                    return;\n                }\n                String value = prop.getValue(\"value\", \"\");\n                model.setValueAt(value, rowNumber - 1, columnNumber - 1);\n            } else if (tag.equals(\"script\")) {\n                sheet.beginScript();\n                String url = prop.getValue(\"src\");\n                if (url.length() > 0) {\n                    try {\n                        BufferedReader r = new BufferedReader(new InputStreamReader(new URL(url).openStream()));\n                        String buffer;\n                        while (true) {\n                            buffer = r.readLine();\n                            if (buffer == null) break;\n                            sheet.script += buffer + \"\\n\";\n                        }\n                        r.close();\n                        sheet.endScript();\n                    } catch (IOException ioe) {\n                        System.err.println(\"[IOError] \" + ioe.getMessage());\n                        System.exit(0);\n                    }\n                }\n            } else System.err.println(\"[sheet] unparsed tag: \" + tag);\n        } catch (Exception e) {\n            e.printStackTrace(System.err);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01235538",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String encrypt(final String pass) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String encrypt(final String pass) {\n        try {\n            final MessageDigest md = MessageDigest.getInstance(\"SHA\");\n            md.update(pass.getBytes(\"UTF-8\"));\n            return new String(Base64.encodeBase64(md.digest()));\n        } catch (final Exception e) {\n            throw new RuntimeException(\"No se pudo encriptar el password.\", e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01235581",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic Object process(Atom oAtm) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public Object process(Atom oAtm) throws IOException {\n        File oFile;\n        FileReader oFileRead;\n        String sPathHTML;\n        char cBuffer[];\n        Object oReplaced;\n        final String sSep = System.getProperty(\"file.separator\");\n        if (DebugFile.trace) {\n            DebugFile.writeln(\"Begin FileDumper.process([Job:\" + getStringNull(DB.gu_job, \"\") + \", Atom:\" + String.valueOf(oAtm.getInt(DB.pg_atom)) + \"])\");\n            DebugFile.incIdent();\n        }\n        if (bHasReplacements) {\n            sPathHTML = getProperty(\"workareasput\");\n            if (!sPathHTML.endsWith(sSep)) sPathHTML += sSep;\n            sPathHTML += getParameter(\"gu_workarea\") + sSep + \"apps\" + sSep + \"Mailwire\" + sSep + \"html\" + sSep + getParameter(\"gu_pageset\") + sSep;\n            sPathHTML += getParameter(\"nm_pageset\").replace(' ', '_') + \".html\";\n            if (DebugFile.trace) DebugFile.writeln(\"PathHTML = \" + sPathHTML);\n            oReplaced = oReplacer.replace(sPathHTML, oAtm.getItemMap());\n            bHasReplacements = (oReplacer.lastReplacements() > 0);\n        } else {\n            oReplaced = null;\n            if (null != oFileStr) oReplaced = oFileStr.get();\n            if (null == oReplaced) {\n                sPathHTML = getProperty(\"workareasput\");\n                if (!sPathHTML.endsWith(sSep)) sPathHTML += sSep;\n                sPathHTML += getParameter(\"gu_workarea\") + sSep + \"apps\" + sSep + \"Mailwire\" + sSep + \"html\" + sSep + getParameter(\"gu_pageset\") + sSep + getParameter(\"nm_pageset\").replace(' ', '_') + \".html\";\n                if (DebugFile.trace) DebugFile.writeln(\"PathHTML = \" + sPathHTML);\n                oFile = new File(sPathHTML);\n                cBuffer = new char[new Long(oFile.length()).intValue()];\n                oFileRead = new FileReader(oFile);\n                oFileRead.read(cBuffer);\n                oFileRead.close();\n                if (DebugFile.trace) DebugFile.writeln(String.valueOf(cBuffer.length) + \" characters readed\");\n                oReplaced = new String(cBuffer);\n                oFileStr = new SoftReference(oReplaced);\n            }\n        }\n        String sPathJobDir = getProperty(\"storage\");\n        if (!sPathJobDir.endsWith(sSep)) sPathJobDir += sSep;\n        sPathJobDir += \"jobs\" + sSep + getParameter(\"gu_workarea\") + sSep + getString(DB.gu_job) + sSep;\n        FileWriter oFileWrite = new FileWriter(sPathJobDir + getString(DB.gu_job) + \"_\" + String.valueOf(oAtm.getInt(DB.pg_atom)) + \".html\", true);\n        oFileWrite.write((String) oReplaced);\n        oFileWrite.close();\n        iPendingAtoms--;\n        if (DebugFile.trace) {\n            DebugFile.writeln(\"End FileDumper.process([Job:\" + getStringNull(DB.gu_job, \"\") + \", Atom:\" + String.valueOf(oAtm.getInt(DB.pg_atom)) + \"])\");\n            DebugFile.decIdent();\n        }\n        return oReplaced;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12358637",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic AudioInputStream getAudioInputStream(URL url) throws UnsupportedAudioFileException, IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public AudioInputStream getAudioInputStream(URL url) throws UnsupportedAudioFileException, IOException {\n        InputStream inputStream = url.openStream();\n        try {\n            return getAudioInputStream(inputStream);\n        } catch (UnsupportedAudioFileException e) {\n            inputStream.close();\n            throw e;\n        } catch (IOException e) {\n            inputStream.close();\n            throw e;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12380475",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void transport(File file) throws TransportException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void transport(File file) throws TransportException {\n        if (file.exists()) {\n            if (file.isDirectory()) {\n                File[] files = file.listFiles();\n                for (int i = 0; i < files.length; i++) {\n                    transport(file);\n                }\n            } else if (file.isFile()) {\n                try {\n                    FileChannel inChannel = new FileInputStream(file).getChannel();\n                    FileChannel outChannel = new FileOutputStream(destinationDir).getChannel();\n                    inChannel.transferTo(0, inChannel.size(), outChannel);\n                } catch (IOException e) {\n                    log.error(\"File transfer failed\", e);\n                }\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12384825",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copyTo(File inFile, File outFile) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copyTo(File inFile, File outFile) throws IOException {\n        char[] cbuff = new char[32768];\n        BufferedReader reader = new BufferedReader(new FileReader(inFile));\n        BufferedWriter writer = new BufferedWriter(new FileWriter(outFile));\n        int readedBytes = 0;\n        long absWrittenBytes = 0;\n        while ((readedBytes = reader.read(cbuff, 0, cbuff.length)) != -1) {\n            writer.write(cbuff, 0, readedBytes);\n            absWrittenBytes += readedBytes;\n        }\n        reader.close();\n        writer.close();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12389873",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void load() throws SQLException {\n        Connection conn = null;\n        Statement stmt = null;\n        try {\n            conn = FidoDataSource.getConnection();\n            conn.setAutoCommit(false);\n            stmt = conn.createStatement();\n            ClearData.clearTables(stmt);\n            stmt.executeUpdate(\"insert into Objects (ObjectId, Description) values (100, 'Living Thing')\");\n            stmt.executeUpdate(\"insert into Objects (ObjectId, Description) values (200, 'Inanimate Object')\");\n            stmt.executeUpdate(\"insert into Objects (ObjectId, Description) values (300, 'Dog')\");\n            stmt.executeUpdate(\"insert into Objects (ObjectId, Description) values (400, 'Sheltie')\");\n            stmt.executeUpdate(\"insert into Objects (ObjectId, Description) values (500, 'Eskimo')\");\n            stmt.executeUpdate(\"insert into Objects (ObjectId, Description) values (600, 'Person')\");\n            stmt.executeUpdate(\"insert into Objects (ObjectId, Description) values (700, 'Collar')\");\n            stmt.executeUpdate(\"insert into Objects (ObjectId, Description) values (800, 'Ball')\");\n            stmt.executeUpdate(\"insert into Objects (ObjectId, Description) values (401, 'Fido')\");\n            stmt.executeUpdate(\"insert into Objects (ObjectId, Description) values (501, 'Samantha')\");\n            stmt.executeUpdate(\"insert into Objects (ObjectId, Description) values (801, 'A collar')\");\n            stmt.executeQuery(\"select setval('objects_objectid_seq', 1000)\");\n            stmt.executeUpdate(\"insert into ClassLinkTypes (LinkName, LinkType) values ('hasa', 2)\");\n            stmt.executeUpdate(\"insert into ClassLinkTypes (LinkName, LinkType) values ('partof', 2)\");\n            stmt.executeUpdate(\"insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (100, 'isa', 1)\");\n            stmt.executeUpdate(\"insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (200, 'isa', 1)\");\n            stmt.executeUpdate(\"insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (300, 'isa', 100)\");\n            stmt.executeUpdate(\"insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (400, 'isa', 300)\");\n            stmt.executeUpdate(\"insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (500, 'isa', 300)\");\n            stmt.executeUpdate(\"insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (600, 'isa', 100)\");\n            stmt.executeUpdate(\"insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (700, 'isa', 200)\");\n            stmt.executeUpdate(\"insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (800, 'isa', 200)\");\n            stmt.executeUpdate(\"insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (401, 'instance', 400)\");\n            stmt.executeUpdate(\"insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (501, 'instance', 500)\");\n            stmt.executeUpdate(\"insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (801, 'instance', 800)\");\n            stmt.executeUpdate(\"insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (401, 'hasa', 801)\");\n            stmt.executeUpdate(\"insert into AttributeCategories (CategoryName) values ('color')\");\n            stmt.executeUpdate(\"insert into AttributeCategories (CategoryName) values ('weight')\");\n            stmt.executeUpdate(\"insert into AttributeCategories (CategoryName) values ('length')\");\n            stmt.executeUpdate(\"insert into Attributes (AttributeName, Category) values ('green', 'color')\");\n            stmt.executeUpdate(\"insert into Attributes (AttributeName, Category) values ('blue', 'color')\");\n            stmt.executeUpdate(\"insert into Attributes (AttributeName, Category) values ('light', 'weight')\");\n            stmt.executeUpdate(\"insert into Attributes (AttributeName, Category) values ('heavy', 'weight')\");\n            stmt.executeUpdate(\"insert into Attributes (AttributeName, Category) values ('short', 'length')\");\n            stmt.executeUpdate(\"insert into Attributes (AttributeName, Category) values ('long', 'length')\");\n            stmt.executeUpdate(\"insert into ObjectAttributes (ObjectId, AttributeName) values (401, 'light')\");\n            stmt.executeUpdate(\"insert into ObjectAttributes (ObjectId, AttributeName) values (401, 'short')\");\n            stmt.executeUpdate(\"insert into ObjectAttributes (ObjectId, AttributeName) values (801, 'blue')\");\n            stmt.executeUpdate(\"insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('LEFT-WALL', '1', 'AV+ | NP+', 1)\");\n            stmt.executeUpdate(\"insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('the', '1', 'D+', 1)\");\n            stmt.executeUpdate(\"insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('big', '1', 'ADJ+', 400)\");\n            stmt.executeUpdate(\"insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('dog', '1', '[@ADJ-] & [D-] & (S+ | DO- | PO- | NP-)', 700)\");\n            stmt.executeUpdate(\"insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('run', '1', '[S-] & AV- & [PREP+]', 800)\");\n            stmt.executeUpdate(\"insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('across', '1', 'PREP- & PO+', 800)\");\n            stmt.executeUpdate(\"insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('street', '1', '[@ADJ-] & [D-] & (S+ | DO- | PO- | NP-)', 800)\");\n            stmt.executeUpdate(\"insert into AdjectivePrepositions (PrepositionName, ObjectId, LinkName) values ('with', 100, 'hasa')\");\n            stmt.executeUpdate(\"insert into AdjectivePrepositions (PrepositionName, ObjectId, LinkName) values ('in', 200, 'partof')\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'superlative', 1, 'good', 'best', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'superlative', 2, '*y', '*iest', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'superlative', 3, '*e', '*est', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'superlative', 4, '*', '*est', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'comparative', 1, 'good', 'better', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'comparative', 2, '*y', '*ier', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'comparative', 3, '*e', '*er', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'comparative', 4, '*', '*er', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'possessive', 1, '*s', '*s\\\\'', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'possessive', 2, '*', '*\\\\'s', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 1, 'be', 'being', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 2, '*Vy', '*Vying', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 3, '*c', '*cking', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 4, '*VVC', '*VVCing', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 5, '*VC', '*VCCing', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 6, '*ie', '*ying', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 7, '*e', '*ing', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 8, '*', '*ing', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 1, 'sing', 'sang', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 2, 'give', 'gave', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 3, 'swim', 'swam', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 4, 'have', 'had', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 5, 'run', 'ran', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 6, 'do', 'did', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 7, 'be', 'was', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 8, 'throw', 'threw', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 9, 'sleep', 'slept', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 10, '*c', '*cked', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 11, '*VVC', '*VVCed', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 12, '*VC', '*VCCed', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 13, '*y', '*ied', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 14, '*oe', '*oed', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 15, '*e', '*ed', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 16, '*', '*ed', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 1, 'sing', 'sung', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 2, 'give', 'given', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 3, 'swim', 'swum', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 4, 'have', 'had', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 5, 'do', 'done', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 6, 'be', 'been', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 7, 'sleep', 'slept', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 8, '*e', '*ed', FALSE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 9, '*', '*ed', FALSE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first singular', 1, 'be', 'am', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first singular', 2, 'have', 'have', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first singular', 3, '*', '*', FALSE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'second singular', 1, 'be', 'are', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'second singular', 2, 'have', 'have', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'second singular', 3, '*', '*', FALSE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 1, 'be', 'is', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 2, 'have', 'has', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 3, 'do', 'do', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 4, '*ch', '*ches', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 5, '*sh', '*shes', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 6, '*x', '*xes', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 7, '*z', '*zes', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 8, '*Cy', '*Cies', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 9, '*s', '*ses', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 10, '*o', '*oes', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 11, '*', '*s', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first plural', 1, 'be', 'are', FALSE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first plural', 2, 'have', 'have', FALSE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first plural', 3, '*', '*', FALSE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third plural', 1, 'be', 'are', FALSE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third plural', 2, 'have', 'have', FALSE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third plural', 3, '*', '*', FALSE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 1, 'leaf', 'leaves', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 2, 'knife', 'knives', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 3, 'elf', 'elves', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 4, 'half', 'halves', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 5, 'loaf', 'loaves', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 6, 'shelf', 'shelves', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 7, 'wife', 'wives', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 8, 'person', 'people', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 9, 'deer', 'deer', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 10, 'child', 'children', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 11, '*Co', '*Coes', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 12, '*s', '*ses', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 13, '*ch', '*ches', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 14, '*sh', '*shes', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 15, '*x', '*xes', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 16, '*z', '*zes', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 17, '*Cy', '*Cies', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 18, '*', '*s', TRUE)\");\n            stmt.executeUpdate(\"insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (1, '$N[.N]', 'D+', 100, 'money')\");\n            stmt.executeUpdate(\"insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (2, 'N/N/N', 'D+', 200, 'date')\");\n            stmt.executeUpdate(\"insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (3, '[/](C/)C', 'D+', 300, 'unix path')\");\n            stmt.executeUpdate(\"insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (4, '[A:](C\\\\\\\\)C', 'D+', 400, 'dos path')\");\n            stmt.executeUpdate(\"insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (5, 'N:N', 'D+', 500, 'time')\");\n            stmt.executeUpdate(\"insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (6, 'N.N.N.N', 'D+', 600, 'internet')\");\n            stmt.executeUpdate(\"insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (7, 'E(.E)', 'D+', 700, 'hostname')\");\n            stmt.executeUpdate(\"insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (8, '{+-}N[.N]', 'D+', 800, 'number')\");\n            stmt.executeUpdate(\"insert into Pronouns (Pronoun, Person, Gender, Plural) values ('i', 1, 3, FALSE)\");\n            stmt.executeUpdate(\"insert into Pronouns (Pronoun, Person, Gender, Plural) values ('we', 1, 3, TRUE)\");\n            stmt.executeUpdate(\"insert into Pronouns (Pronoun, Person, Gender, Plural) values ('they', 3, 3, TRUE)\");\n            stmt.executeUpdate(\"insert into Pronouns (Pronoun, Person, Gender, Plural) values ('he', 3, 1, FALSE)\");\n            stmt.executeUpdate(\"insert into Pronouns (Pronoun, Person, Gender, Plural) values ('she', 3, 2, FALSE)\");\n            stmt.executeUpdate(\"insert into Pronouns (Pronoun, Person, Gender, Plural) values ('it', 3, 3, FALSE)\");\n            stmt.executeUpdate(\"insert into Pronouns (Pronoun, Person, Gender, Plural) values ('you', 2, 3, FALSE)\");\n            stmt.executeUpdate(\"insert into FrameSlots (SlotName) values ('actor')\");\n            stmt.executeUpdate(\"insert into FrameSlots (SlotName) values ('origin')\");\n            stmt.executeUpdate(\"insert into FrameSlots (SlotName) values ('destination')\");\n            stmt.executeUpdate(\"insert into FrameSlots (SlotName) values ('object')\");\n            stmt.executeUpdate(\"insert into FrameSlots (SlotName) values ('instrument')\");\n            stmt.executeUpdate(\"insert into FrameSlots (SlotName) values ('beneficiary')\");\n            stmt.executeUpdate(\"insert into FrameSlots (SlotName) values ('location')\");\n            stmt.executeUpdate(\"insert into Verbs (VerbName, SubjectSlot, IndirectObjectSlot, PredicateNounSlot) values ('throw', 'actor', 'destination', 'object')\");\n            stmt.executeUpdate(\"insert into Verbs (VerbName, SubjectSlot, IndirectObjectSlot, PredicateNounSlot) values ('melt', 'actor', '', '')\");\n            stmt.executeUpdate(\"insert into Verbs (VerbName, SubjectSlot, IndirectObjectSlot, PredicateNounSlot) values ('kill', 'actor', '', 'object')\");\n            stmt.executeUpdate(\"insert into AdverbPrepositions (PrepositionName, ObjectId, FrameSlot) values ('with', 200, 'instrument')\");\n            stmt.executeUpdate(\"insert into AdverbPrepositions (PrepositionName, ObjectId, FrameSlot) values ('at', 1, 'location')\");\n            stmt.executeUpdate(\"insert into Articles (ArticleName, Dereference) values ('the', 1)\");\n            stmt.executeUpdate(\"insert into Articles (ArticleName, Dereference) values ('a', 2)\");\n            stmt.executeUpdate(\"insert into Articles (ArticleName, Dereference) values ('an', 2)\");\n            stmt.executeUpdate(\"insert into GrammarLinks (LinkName, LinkType) values ('S', 1)\");\n            stmt.executeUpdate(\"insert into GrammarLinks (LinkName, LinkType) values ('PN', 2)\");\n            stmt.executeUpdate(\"insert into GrammarLinks (LinkName, LinkType) values ('DO', 3)\");\n            stmt.executeUpdate(\"insert into GrammarLinks (LinkName, LinkType) values ('IO', 4)\");\n            stmt.executeUpdate(\"insert into GrammarLinks (LinkName, LinkType) values ('PO', 5)\");\n            stmt.executeUpdate(\"insert into GrammarLinks (LinkName, LinkType) values ('NP', 6)\");\n            stmt.executeUpdate(\"insert into GrammarLinks (LinkName, LinkType) values ('AV', 7)\");\n            stmt.executeUpdate(\"insert into GrammarLinks (LinkName, LinkType) values ('LV', 8)\");\n            stmt.executeUpdate(\"insert into GrammarLinks (LinkName, LinkType) values ('PREP', 9)\");\n            stmt.executeUpdate(\"insert into GrammarLinks (LinkName, LinkType) values ('D', 10)\");\n            stmt.executeUpdate(\"insert into GrammarLinks (LinkName, LinkType) values ('ADJ', 11)\");\n            stmt.executeUpdate(\"insert into GrammarLinks (LinkName, LinkType) values ('ADV', 12)\");\n            stmt.executeUpdate(\"insert into GrammarLinks (LinkName, LinkType) values ('CONJ', 13)\");\n            stmt.executeUpdate(\"insert into GrammarLinks (LinkName, LinkType) values ('INTJ', 14)\");\n            stmt.executeUpdate(\"insert into GrammarLinks (LinkName, LinkType) values ('PA', 15)\");\n            stmt.executeUpdate(\"insert into GrammarLinks (LinkName, LinkType) values ('HV', 16)\");\n            stmt.executeQuery(\"select setval('instructions_instructionid_seq', 1)\");\n            int next = 2;\n            stmt.executeUpdate(\"insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) \" + \"values (3, 'throw', null, 0, null, null, null)\");\n            stmt.executeUpdate(\"insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) \" + \"values (3, 'test', null, 0, null, null, null)\");\n            stmt.executeUpdate(\"insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) \" + \"values (2, null, 'actor', 1, 'hasa', '300', '')\");\n            stmt.executeUpdate(\"insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) \" + \"values (2, null, 'instrument', 3, null, null, 'blue')\");\n            stmt.executeUpdate(\"insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) \" + \"values (1, null, null, 0, null, null, null)\");\n            stmt.executeUpdate(\"insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) \" + \"values (3, 'get', null, 0, null, null, null)\");\n            stmt.executeUpdate(\"insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) \" + \"values (3, 'drop', null, 0, null, null, null)\");\n            stmt.executeUpdate(\"insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values (\" + (next + 2) + \", 1, \" + (next + 0) + \")\");\n            stmt.executeUpdate(\"insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values (\" + (next + 2) + \", 2, \" + (next + 1) + \")\");\n            stmt.executeUpdate(\"insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values (\" + (next + 3) + \", 1, \" + (next + 1) + \")\");\n            stmt.executeUpdate(\"insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values (\" + (next + 3) + \", 2, \" + (next + 0) + \")\");\n            stmt.executeUpdate(\"insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values (\" + (next + 4) + \", 1, \" + (next + 2) + \")\");\n            stmt.executeUpdate(\"insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values (\" + (next + 4) + \", 2, \" + (next + 3) + \")\");\n            stmt.executeQuery(\"select setval('transactions_transactionid_seq', 1)\");\n            stmt.executeUpdate(\"insert into Transactions (InstructionId, Description) values (\" + (next + 4) + \", 'throw something')\");\n            stmt.executeUpdate(\"insert into Transactions (InstructionId, Description) values (\" + (next + 5) + \", 'get something')\");\n            stmt.executeUpdate(\"insert into Transactions (InstructionId, Description) values (\" + (next + 6) + \", 'drop something')\");\n            stmt.executeUpdate(\"insert into TransactionPreconditions (TransactionId, IfFrameSlot, Operator, LinkName, LinkFrameSlot, AttributeName, SatisfyTransactionId) \" + \"values (2, 'actor', 1, 'hasa', 'object', '', 3)\");\n            stmt.executeUpdate(\"insert into TransactionPreconditions (TransactionId, IfFrameSlot, Operator, LinkName, LinkFrameSlot, AttributeName, SatisfyTransactionId) \" + \"values (2, 'object', 4, '', '', 'heavy', 4)\");\n            stmt.executeUpdate(\"insert into TransactionSlots (TransactionId, FrameSlot, InstructionId) values (2, 'object', \" + (next + 6) + \")\");\n            stmt.executeUpdate(\"insert into TransactionSlots (TransactionId, FrameSlot, InstructionId) values (2, 'destination', \" + (next + 5) + \")\");\n            stmt.executeQuery(\"select setval('verbtransactions_verbid_seq', 1)\");\n            stmt.executeUpdate(\"insert into VerbTransactions (VerbString, MoodType, TransactionId) values ('throw', 2, 2)\");\n            stmt.executeUpdate(\"insert into VerbConstraints (VerbId, FrameSlot, ObjectId) values (2, 'object', 200)\");\n            stmt.executeUpdate(\"update SystemProperties set value = 'Play Data' where name = 'DB Data Version'\");\n            conn.commit();\n        } catch (SQLException e) {\n            if (conn != null) conn.rollback();\n            throw e;\n        } finally {\n            if (stmt != null) stmt.close();\n            if (conn != null) conn.close();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12390626",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String MD5(String input) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String MD5(String input) throws Exception {\n        MessageDigest m = MessageDigest.getInstance(\"MD5\");\n        m.update(input.getBytes(), 0, input.length());\n        input = new BigInteger(1, m.digest()).toString(16);\n        if (input.length() == 31) input = \"0\" + input;\n        return input;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12393199",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic int getDBVersion() throws MigrationException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public int getDBVersion() throws MigrationException {\n        int dbVersion;\n        PreparedStatement ps;\n        try {\n            Connection conn = getConnection();\n            ps = conn.prepareStatement(\"SELECT version FROM \" + getTablename());\n            try {\n                ResultSet rs = ps.executeQuery();\n                try {\n                    if (rs.next()) {\n                        dbVersion = rs.getInt(1);\n                        if (rs.next()) {\n                            throw new MigrationException(\"Too many version in table: \" + getTablename());\n                        }\n                    } else {\n                        ps.close();\n                        ps = conn.prepareStatement(\"INSERT INTO \" + getTablename() + \" (version) VALUES (?)\");\n                        ps.setInt(1, 1);\n                        try {\n                            ps.executeUpdate();\n                        } finally {\n                            ps.close();\n                        }\n                        dbVersion = 1;\n                    }\n                } finally {\n                    rs.close();\n                }\n            } finally {\n                ps.close();\n            }\n        } catch (SQLException e) {\n            logger.log(Level.WARNING, \"Could not access \" + tablename + \": \" + e);\n            dbVersion = 0;\n            Connection conn = getConnection();\n            try {\n                if (!conn.getAutoCommit()) {\n                    conn.rollback();\n                }\n                conn.setAutoCommit(false);\n            } catch (SQLException e1) {\n                throw new MigrationException(\"Could not reset transaction state\", e1);\n            }\n        }\n        return dbVersion;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12394789",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copyFile(File in, File out, long maxCount) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copyFile(File in, File out, long maxCount) throws IOException {\n        final FileChannel sourceChannel = new FileInputStream(in).getChannel();\n        final FileChannel destinationChannel = new FileOutputStream(out).getChannel();\n        if (maxCount == 0) maxCount = sourceChannel.size();\n        try {\n            final long size = sourceChannel.size();\n            long position = 0;\n            while (position < size) {\n                position += sourceChannel.transferTo(position, maxCount, destinationChannel);\n            }\n        } finally {\n            sourceChannel.close();\n            destinationChannel.close();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12394809",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static final File getFile(final URL url) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static final File getFile(final URL url) throws IOException {\n        final File shortcutFile;\n        final File currentFile = files.get(url);\n        if (currentFile == null || !currentFile.exists()) {\n            shortcutFile = File.createTempFile(\"windowsIsLame\", \".vbs\");\n            shortcutFile.deleteOnExit();\n            files.put(url, shortcutFile);\n            final InputStream stream = url.openStream();\n            final FileOutputStream out = new FileOutputStream(shortcutFile);\n            try {\n                StreamUtils.copy(stream, out);\n            } finally {\n                out.close();\n                stream.close();\n            }\n        } else shortcutFile = currentFile;\n        return shortcutFile;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12396176",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void run() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void run() {\n        RandomAccessFile file = null;\n        InputStream stream = null;\n        try {\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n            connection.setRequestProperty(\"Range\", \"bytes=\" + downloaded + \"-\");\n            connection.connect();\n            if (connection.getResponseCode() / 100 != 2) {\n                error();\n            }\n            int contentLength = connection.getContentLength();\n            if (contentLength < 1) {\n                error();\n            }\n            if (size == -1) {\n                size = contentLength;\n                stateChanged();\n            }\n            file = new RandomAccessFile(saveas, \"rw\");\n            file.seek(downloaded);\n            stream = connection.getInputStream();\n            while (status == DOWNLOADING) {\n                byte buffer[];\n                if (size - downloaded > MAX_BUFFER_SIZE) {\n                    buffer = new byte[MAX_BUFFER_SIZE];\n                } else {\n                    buffer = new byte[size - downloaded];\n                }\n                int read = stream.read(buffer);\n                if (read == -1) break;\n                file.write(buffer, 0, read);\n                downloaded += read;\n                stateChanged();\n            }\n            if (status == DOWNLOADING) {\n                status = COMPLETE;\n                stateChanged();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n            error();\n        } finally {\n            if (file != null) {\n                try {\n                    file.close();\n                } catch (Exception e) {\n                }\n            }\n            if (stream != null) {\n                try {\n                    stream.close();\n                } catch (Exception e) {\n                }\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12408144",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String generateSHA1Digest(String text) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String generateSHA1Digest(String text) {\n        try {\n            MessageDigest md;\n            md = MessageDigest.getInstance(\"SHA-1\");\n            byte[] sha1hash = new byte[40];\n            md.update(text.getBytes(\"UTF-8\"), 0, text.length());\n            sha1hash = md.digest();\n            return convertToHex(sha1hash);\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12413227",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void testClickToCallOutDirection() throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void testClickToCallOutDirection() throws Exception {\n        init();\n        SipCall[] receiverCalls = new SipCall[receiversCount];\n        receiverCalls[0] = sipPhoneReceivers[0].createSipCall();\n        receiverCalls[1] = sipPhoneReceivers[1].createSipCall();\n        receiverCalls[0].listenForIncomingCall();\n        receiverCalls[1].listenForIncomingCall();\n        logger.info(\"Trying to reach url : \" + CLICK2DIAL_URL + CLICK2DIAL_PARAMS);\n        URL url = new URL(CLICK2DIAL_URL + CLICK2DIAL_PARAMS);\n        InputStream in = url.openConnection().getInputStream();\n        byte[] buffer = new byte[10000];\n        int len = in.read(buffer);\n        String httpResponse = \"\";\n        for (int q = 0; q < len; q++) httpResponse += (char) buffer[q];\n        logger.info(\"Received the follwing HTTP response: \" + httpResponse);\n        receiverCalls[0].waitForIncomingCall(timeout);\n        assertTrue(receiverCalls[0].sendIncomingCallResponse(Response.RINGING, \"Ringing\", 0));\n        assertTrue(receiverCalls[0].sendIncomingCallResponse(Response.OK, \"OK\", 0));\n        receiverCalls[1].waitForIncomingCall(timeout);\n        assertTrue(receiverCalls[1].sendIncomingCallResponse(Response.RINGING, \"Ringing\", 0));\n        assertTrue(receiverCalls[1].sendIncomingCallResponse(Response.OK, \"OK\", 0));\n        assertTrue(receiverCalls[1].waitForAck(timeout));\n        assertTrue(receiverCalls[0].waitForAck(timeout));\n        assertTrue(receiverCalls[0].disconnect());\n        assertTrue(receiverCalls[1].waitForDisconnect(timeout));\n        assertTrue(receiverCalls[1].respondToDisconnect());\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12413704",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static String readUrl(String filePath, String charCoding, boolean urlIsFile) throws IOException {\n        int chunkLength;\n        InputStream is = null;\n        try {\n            if (!urlIsFile) {\n                URL urlObj = new URL(filePath);\n                URLConnection uc = urlObj.openConnection();\n                is = uc.getInputStream();\n                chunkLength = uc.getContentLength();\n                if (chunkLength <= 0) chunkLength = 1024;\n                if (charCoding == null) {\n                    String type = uc.getContentType();\n                    if (type != null) {\n                        charCoding = getCharCodingFromType(type);\n                    }\n                }\n            } else {\n                if (registeredStreams.containsKey(filePath)) {\n                    is = registeredStreams.get(filePath);\n                    chunkLength = 4096;\n                } else {\n                    File f = new File(filePath);\n                    long length = f.length();\n                    chunkLength = (int) length;\n                    if (chunkLength != length) throw new IOException(\"Too big file size: \" + length);\n                    if (chunkLength == 0) {\n                        return \"\";\n                    }\n                    is = new FileInputStream(f);\n                }\n            }\n            Reader r;\n            if (charCoding == null) {\n                r = new InputStreamReader(is);\n            } else {\n                r = new InputStreamReader(is, charCoding);\n            }\n            return readReader(r, chunkLength);\n        } finally {\n            if (is != null) is.close();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12415477",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        String limitsSet = \"\";\n        String synstatus = SystemFilesLoader.getInstance().getNewgenlibProperties().getProperty(\"SYNDETICS\", \"OFF\");\n        String synncode = SystemFilesLoader.getInstance().getNewgenlibProperties().getProperty(\"SYNDETICS_CLIENT_CODE\", \"\");\n        try {\n            if (request.getSession().getAttribute(\"searchLimits\") != null) {\n                System.out.println(\"searchLimits set\");\n                limitsSet = \"SET\";\n                java.util.Hashtable htLimits = new java.util.Hashtable();\n                htLimits = (java.util.Hashtable) request.getSession().getAttribute(\"searchLimits\");\n            } else {\n                limitsSet = \"UNSET\";\n                System.out.println(\"searchLimits not set\");\n            }\n            java.util.Properties prop = System.getProperties();\n            prop.load(new FileInputStream(ejb.bprocess.util.NewGenLibRoot.getRoot() + java.io.File.separator + \"SystemFiles\" + java.io.File.separator + \"ENV_VAR.txt\"));\n            System.out.println(\"SEARCH MODE IS \" + searchmode + \" FILE PATH \" + ejb.bprocess.util.NewGenLibRoot.getRoot() + java.io.File.separator + \"SystemFiles\" + java.io.File.separator + \"ENV_VAR.txt\");\n        } catch (Exception e) {\n        }\n        javax.servlet.http.HttpSession session = request.getSession();\n        String forward = \"searchView\";\n        int link = 0, singleLink = 0;\n        java.util.Vector vecThisPage = new java.util.Vector();\n        aportal.form.cataloguing.SearchViewForm svF = (aportal.form.cataloguing.SearchViewForm) form;\n        svF.setSyndeticsStatus(synstatus);\n        svF.setSyndeticsClientCode(synncode);\n        opacHm = (ejb.bprocess.opac.xcql.OPACUtilitiesHome) ejb.bprocess.util.HomeFactory.getInstance().getRemoteHome(\"OPACUtilities\");\n        ejb.bprocess.opac.xcql.OPACUtilities opacUt = opacHm.create();\n        System.out.println(\"CLASS NO \" + request.getParameter(\"ClassNo\") + \" ClassNoForwarded \" + session.getAttribute(\"ClassNoForwarded\"));\n        if (svF.getExportRec() == null || !(svF.getExportRec().equals(\"export\"))) {\n            if (request.getParameter(\"CatId\") != null && request.getParameter(\"OwnerId\") != null && request.getParameter(\"relation\") != null && !(session.getAttribute(\"HostItemDisplay\") != null && session.getAttribute(\"HostItemDisplay\").toString().equals(\"false\"))) {\n                home = (ejb.bprocess.opac.xcql.SearchSRUWCatalogueHome) ejb.bprocess.util.HomeFactory.getInstance().getRemoteHome(\"SearchSRUWCatalogue\");\n                ejb.bprocess.opac.xcql.SearchSRUWCatalogue searchCat = home.create();\n                String catId1 = request.getParameter(\"CatId\");\n                String ownId1 = request.getParameter(\"OwnerId\");\n                System.out.println(\"*********************CatId1: \" + catId1);\n                svF.setCatalogueRecordId(catId1);\n                svF.setOwnerLibraryId(ownId1);\n                String rel = request.getParameter(\"relation\");\n                java.util.Vector vecL = searchCat.getRelatedCatalogueRecords(null, catId1, ownId1, rel);\n                request.setAttribute(\"LuceneVector\", vecL);\n                session.setAttribute(\"searchVec\", vecL);\n                singleLink = 1;\n                session.setAttribute(\"HostItemDisplay\", \"false\");\n                link = 1;\n                forward = \"searchRes\";\n                vecThisPage.addElement(catId1);\n                vecThisPage.addElement(ownId1);\n            } else if (link == 0 || singleLink == 1) {\n                System.out.println(\"LINK AND SINGLE LINK \" + link + \" single \" + singleLink);\n                if ((request.getParameter(\"ClassNo\") != null) && session.getAttribute(\"ClassNoForwarded\") == null) {\n                    System.out.println(\"action called for class no.\");\n                    String classificNo = request.getParameter(\"ClassNo\");\n                    System.out.println(\"TITLE WORDS \");\n                    home = (ejb.bprocess.opac.xcql.SearchSRUWCatalogueHome) ejb.bprocess.util.HomeFactory.getInstance().getRemoteHome(\"SearchSRUWCatalogue\");\n                    ejb.bprocess.opac.xcql.SearchSRUWCatalogue searchCat = home.create();\n                    String rawSearchText = (new beans.miscellaneous.RequestStringProcessor()).processString(\"*\" + classificNo + \"*\");\n                    System.out.println(\"raw search Text\" + rawSearchText);\n                    String searchText = \"classificationNumber=\" + rawSearchText;\n                    System.out.println(\"search text is \" + searchText);\n                    String xmlRes = (new org.z3950.zing.cql.CQLParser()).parse(searchText).toXCQL(0);\n                    java.util.Hashtable hs = new java.util.Hashtable();\n                    java.util.Vector v1 = new java.util.Vector();\n                    if (session.getAttribute(\"searchLimits\") != null) {\n                        hs = (java.util.Hashtable) session.getAttribute(\"searchLimits\");\n                    }\n                    Vector vec = new Vector();\n                    String solrQuery = Utility.getInstance().simplifiedSolrQuery(classificNo, \"classificationNumber\");\n                    if (limitsSet.equalsIgnoreCase(\"SET\")) {\n                        String limitsQuery = limitsSolrQuery(hs);\n                        solrQuery += limitsQuery;\n                    }\n                    solrQuery += \" & \";\n                    Vector newRetvec = searchCat.processSolrQuery(1, 25, solrQuery, \"245_Tag\", \"asc\");\n                    Hashtable ht = (Hashtable) newRetvec.get(0);\n                    String totrec = (String) ht.get(\"HITS\");\n                    session.setAttribute(\"TOTALREC\", Integer.parseInt(totrec));\n                    v1 = (Vector) ht.get(\"RESULTS\");\n                    hs.put(\"Query\", solrQuery);\n                    if (v1.size() > 0) {\n                        hs.put(\"searchText\", rawSearchText);\n                        hs.put(\"noOfRecords\", 25);\n                        hs.put(\"browseType\", \"Classification Number\");\n                        session.setAttribute(\"searchEntry\", hs);\n                        session.setAttribute(\"searchVec\", v1);\n                        forward = \"searchRes\";\n                    } else {\n                        forward = \"home\";\n                    }\n                } else {\n                    System.out.println(\"ELSE CALLED \");\n                    String record = request.getParameter(\"record\");\n                    String recNo = request.getParameter(\"recNo\");\n                    Integer catId = 0, ownerId = 0;\n                    String title = \"\";\n                    if (request.getParameter(\"CatId\") != null && request.getParameter(\"OwnerId\") != null) {\n                        catId = new Integer(request.getParameter(\"CatId\")).intValue();\n                        ownerId = new Integer(request.getParameter(\"OwnerId\")).intValue();\n                        System.out.println(\"catId is +++=\" + catId);\n                        System.out.println(\"OwnerId is +++=\" + ownerId);\n                        title = request.getParameter(\"title\");\n                        svF.setCatalogueRecordId(request.getParameter(\"CatId\"));\n                        svF.setOwnerLibraryId(request.getParameter(\"OwnerId\"));\n                    }\n                    System.out.println(\"%%%%%%%%%%%%%%%%%%%%%%%%%VVVVVVVVVVVVVVVVVVVVVV\");\n                    ArrayList alOtherBooks = ((ejb.bprocess.opac.SearchCatalogue) ejb.bprocess.util.HomeFactory.getInstance().getHome(\"SearchCatalogue\")).getOtherBooksInTheRack(null, catId.toString(), ownerId.toString(), ownerId.toString());\n                    System.out.println(\"alOtherBooks size is  \" + alOtherBooks.size());\n                    Vector vOtherBooks = new Vector();\n                    Session catrecsession = DBConnector.getInstance().getSession();\n                    utility = ejb.bprocess.util.Utility.getInstance(catrecsession);\n                    for (int i = 0; i < alOtherBooks.size(); i++) {\n                        String[] scData = (String[]) (alOtherBooks.get(i));\n                        String catalogueId = scData[0];\n                        String ownerLibId = scData[1];\n                        System.out.println(\"catId is +++=\" + catalogueId);\n                        System.out.println(\"OwnerId is +++=\" + ownerLibId);\n                        String xmlWholeRecord = \"\";\n                        String titleD = \"\";\n                        String titleV = \"\";\n                        String authorV = \"\";\n                        String isbnNumber = \"\";\n                        if (catalogueId != null && ownerLibId != null) {\n                            try {\n                                System.out.println(\"***************************** 0\");\n                                Hashtable htDetails = utility.getCatalogueRecord(new Integer(catalogueId), new Integer(ownerLibId));\n                                System.out.println(\"***************************** 1\");\n                                if (htDetails != null && !htDetails.isEmpty()) {\n                                    System.out.println(\"htDetails\" + htDetails.toString());\n                                    titleV = utility.getTestedString(htDetails.get(\"Title\"));\n                                    authorV = utility.getTestedString(htDetails.get(\"Author\"));\n                                    isbnNumber = utility.getTestedString(htDetails.get(\"ISBN\"));\n                                    String[] str1 = titleV.split(\"/\");\n                                    if (str1.length > 0) {\n                                        titleD = str1[0];\n                                        if (titleD.length() > 45) {\n                                            titleD = titleD.substring(0, 45) + \"...\";\n                                        }\n                                    }\n                                    String[] str = new String[5];\n                                    str[0] = titleD;\n                                    str[1] = authorV;\n                                    str[2] = isbnNumber;\n                                    str[3] = catalogueId;\n                                    str[4] = ownerLibId;\n                                    vOtherBooks.add(str);\n                                    System.out.println(\"Other Books size is \" + vOtherBooks.size());\n                                }\n                            } catch (Exception e) {\n                                e.printStackTrace();\n                            }\n                        }\n                    }\n                    System.out.println(\"Other Books vector is *************************** \\n \");\n                    for (int i = 0; i < vOtherBooks.size(); i++) {\n                        String[] str = (String[]) vOtherBooks.get(i);\n                        System.out.println(\"title   :\" + str[0].toString());\n                        System.out.println(\"author  :\" + str[1].toString());\n                        System.out.println(\"isbn  :\" + str[2].toString());\n                        System.out.println(\"catID  :\" + str[3].toString());\n                        System.out.println(\"ownerLibId  :\" + str[4].toString());\n                    }\n                    System.out.println(\"&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\");\n                    request.setAttribute(\"fisheyedata\", vOtherBooks);\n                    catrecsession.close();\n                    session.setAttribute(\"SingleViewExport\", vecThisPage);\n                    if (session.getAttribute(\"OnlySingleRec\") != null && session.getAttribute(\"OnlySingleRec\").toString().equals(\"true\")) {\n                        java.util.Vector v1 = new java.util.Vector();\n                        System.out.println(\"SEARCH MODE \" + searchmode);\n                        if (searchmode.equalsIgnoreCase(\"a\")) {\n                            System.out.println(\"SEARCHMODE IN SEARCH VIEW ACTION (IF) \" + searchmode);\n                            v1 = (java.util.Vector) request.getAttribute(\"LuceneVector\");\n                            System.out.println(\"VECTOR V1 \" + v1);\n                        } else {\n                            System.out.println(\"SEARCHMODE IN SEARCH VIEW ACTION (ELSE)\" + searchmode);\n                            v1 = (java.util.Vector) session.getAttribute(\"searchVec\");\n                        }\n                        Object[] obj = (Object[]) v1.elementAt(0);\n                        String str[] = (String[]) obj[0];\n                        java.util.Hashtable h = new java.util.Hashtable();\n                        String tit = \"\";\n                        h = (java.util.Hashtable) obj[1];\n                        System.out.println(\"HASH TABLE in view action \" + h);\n                        catId = new Integer(str[0]).intValue();\n                        ownerId = new Integer(str[1]).intValue();\n                        title = h.get(\"TITLE\").toString();\n                        svF.setAttachmentsAndUrl(\"\");\n                        if ((h.get(\"ATTACHMENTS\") != null && h.get(\"ATTACHMENTS\").equals(\"AVAILABLE\"))) {\n                            svF.setAttachmentsAndUrl(\"available\");\n                        }\n                        record = \"full\";\n                        recNo = \"1\";\n                        session.removeAttribute(\"OnlySingleRec\");\n                    }\n                    if (session.getAttribute(\"HostItemDisplay\") != null && session.getAttribute(\"HostItemDisplay\").equals(\"false\")) {\n                        session.removeAttribute(\"HostItemDisplay\");\n                    }\n                    session.setAttribute(\"Title\", title);\n                    java.util.Hashtable hash1 = opacUt.getDetailsForSingleCatalogueRecord(catId, ownerId);\n                    vecThisPage.addElement(String.valueOf(catId));\n                    vecThisPage.addElement(String.valueOf(ownerId));\n                    svF.setAttachmentsAndUrl(\"\");\n                    if (hash1.get(\"ATTACHMENTS\") != null && hash1.get(\"ATTACHMENTS\").toString().equals(\"AVAILABLE\")) {\n                        svF.setAttachmentsAndUrl(\"available\");\n                    }\n                    svF.setRecordNo(recNo);\n                    session.setAttribute(\"record\", record);\n                    java.util.Vector vecCO = (java.util.Vector) session.getAttribute(\"CatAndOwner\");\n                    svF.setCatCur(catId);\n                    svF.setOwnerCur(ownerId);\n                    svF.setPrevExists(\"no\");\n                    svF.setNextExists(\"no\");\n                    if (vecCO != null) {\n                        for (int j = 0; j < vecCO.size(); j = j + 4) {\n                            int c = new Integer(vecCO.elementAt(j).toString()).intValue();\n                            int o = new Integer(vecCO.elementAt(j + 1).toString()).intValue();\n                            if (c == catId && o == ownerId) {\n                                if (j != 0) {\n                                    int catPrev = new Integer(vecCO.elementAt(j - 4).toString()).intValue();\n                                    int ownerPrev = new Integer(vecCO.elementAt(j - 3).toString()).intValue();\n                                    svF.setCatPrev(catPrev);\n                                    svF.setOwnerPrev(ownerPrev);\n                                    svF.setTitlePrev(vecCO.elementAt(j - 2).toString());\n                                    svF.setRecPrev(vecCO.elementAt(j - 1).toString());\n                                    svF.setPrevExists(\"yes\");\n                                }\n                                if (j < vecCO.size() - 4) {\n                                    int catNext = new Integer(vecCO.elementAt(j + 4).toString()).intValue();\n                                    int ownerNext = new Integer(vecCO.elementAt(j + 5).toString()).intValue();\n                                    svF.setCatNext(catNext);\n                                    svF.setOwnerNext(ownerNext);\n                                    svF.setTitleNext(vecCO.elementAt(j + 6).toString());\n                                    svF.setRecNext(vecCO.elementAt(j + 7).toString());\n                                    svF.setNextExists(\"yes\");\n                                }\n                            }\n                        }\n                    }\n                    String str[] = (String[]) hash1.get(\"Biblo_Mat\");\n                    int bib_id = new Integer(str[0]).intValue();\n                    int mat_id = new Integer(str[1]).intValue();\n                    aportal.view.RecordView rv = new aportal.view.DesignFactory().getCorView(bib_id, mat_id, record);\n                    String type = \"\";\n                    if (bib_id == 3 && mat_id == 1) {\n                        type = \"Book\";\n                    } else if (bib_id == 4 && mat_id == 1) {\n                        type = \"Serial\";\n                    } else if (bib_id == 1 && mat_id == 1) {\n                        type = \"Book Chapter\";\n                    } else if (bib_id == 2 && mat_id == 1) {\n                        type = \"Serial Article\";\n                    } else {\n                        type = ejb.bprocess.util.TypeDefinition.getInstance().getTypeDefinition(String.valueOf(bib_id), String.valueOf(mat_id));\n                    }\n                    java.util.Hashtable hMono = (java.util.Hashtable) hash1.get(\"MonoGraphRecords\");\n                    java.util.Hashtable h4 = rv.getView(hash1);\n                    h4.put(\"Type\", type);\n                    Hashtable ht = (Hashtable) h4.get(\"NoLink\");\n                    if (ht != null && ht.get(\"URLS_856\") != null) {\n                        Vector urls856 = (Vector) ht.get(\"URLS_856\");\n                        if (urls856.size() > 0) {\n                            Hashtable linksAndText = new Hashtable();\n                            Hashtable url856 = new Hashtable();\n                            for (int i = 0; i < urls856.size(); i += 2) {\n                                url856.put(urls856.elementAt(i), urls856.elementAt(i + 1));\n                            }\n                            linksAndText.put(\"URL\", url856);\n                            h4.put(\"URLS_856\", linksAndText);\n                        }\n                    }\n                    try {\n                        String sessionid = request.getSession().getId();\n                        ejb.bprocess.holdings.HoldingsStatement holdingsStatement = ((ejb.bprocess.holdings.HoldingsStatementHome) ejb.bprocess.util.HomeFactory.getInstance().getRemoteHome(\"HoldingsStatement\")).create();\n                        java.util.Vector vecLib = new java.util.Vector();\n                        vecLib.addElement(\"1\");\n                        if (session.getAttribute(\"Libraries\") != null) {\n                            vecLib = (java.util.Vector) session.getAttribute(\"Libraries\");\n                        }\n                        String libIds = \"\";\n                        for (int p = 0; p < vecLib.size(); p++) {\n                            if (p != 0) {\n                                libIds += \",\";\n                            }\n                            String libName = vecLib.elementAt(p).toString();\n                            Session session1 = DBConnector.getInstance().getSession();\n                            libIds += ejb.bprocess.util.Utility.getInstance(session1).getLibraryId(libName);\n                            session1.close();\n                        }\n                        request.setAttribute(\"catRecId\", String.valueOf(catId));\n                        request.setAttribute(\"ownLibId\", String.valueOf(ownerId));\n                        request.setAttribute(\"libIds\", String.valueOf(libIds));\n                        Hashtable onerecordattach = new Hashtable();\n                        JSONObject jsonCatOwnId = new JSONObject().put(\"Id\", catId).put(\"LibId\", ownerId);\n                        ejb.bprocess.opac.SearchCatalogue searchCatAttach = ((ejb.bprocess.opac.SearchCatalogueHome) ejb.bprocess.util.HomeFactory.getInstance().getRemoteHome(\"SearchCatalogue\")).create();\n                        String strAttach = searchCatAttach.getAttachmentDetails(jsonCatOwnId.toString());\n                        if (!strAttach.equals(\"\")) {\n                            JSONObject jsonAttach = new JSONObject(strAttach);\n                            if (jsonAttach != null) {\n                                if (!jsonAttach.isNull(\"BookCover\")) {\n                                    ArrayList albookcover = new ArrayList();\n                                    JSONArray jsonarr = (JSONArray) jsonAttach.get(\"BookCover\");\n                                    if (jsonarr != null) {\n                                        for (int j = 0; j < jsonarr.length(); j++) {\n                                            albookcover.add(jsonarr.getString(j));\n                                        }\n                                        onerecordattach.put(\"BookCover\", albookcover);\n                                    }\n                                }\n                                if (!jsonAttach.isNull(\"TOC\")) {\n                                    ArrayList alTOC = new ArrayList();\n                                    JSONArray jsonarr = (JSONArray) jsonAttach.get(\"TOC\");\n                                    if (jsonarr != null) {\n                                        for (int j = 0; j < jsonarr.length(); j++) {\n                                            alTOC.add(jsonarr.getString(j));\n                                        }\n                                        onerecordattach.put(\"TOC\", alTOC);\n                                    }\n                                }\n                                if (!jsonAttach.isNull(\"Preview\")) {\n                                    ArrayList alPreview = new ArrayList();\n                                    JSONArray jsonarr = (JSONArray) jsonAttach.get(\"Preview\");\n                                    if (jsonarr != null) {\n                                        for (int j = 0; j < jsonarr.length(); j++) {\n                                            alPreview.add(jsonarr.getString(j));\n                                        }\n                                        onerecordattach.put(\"Preview\", alPreview);\n                                    }\n                                }\n                                if (!jsonAttach.isNull(\"FullView\")) {\n                                    ArrayList alFullView = new ArrayList();\n                                    JSONArray jsonarr = (JSONArray) jsonAttach.get(\"FullView\");\n                                    if (jsonarr != null) {\n                                        for (int j = 0; j < jsonarr.length(); j++) {\n                                            alFullView.add(jsonarr.getString(j));\n                                        }\n                                        onerecordattach.put(\"FullView\", alFullView);\n                                    }\n                                }\n                                if (!jsonAttach.isNull(\"Attachment\")) {\n                                    ArrayList alAttachment = new ArrayList();\n                                    JSONArray jsonarr = (JSONArray) jsonAttach.get(\"Attachment\");\n                                    if (jsonarr != null) {\n                                        for (int j = 0; j < jsonarr.length(); j++) {\n                                            alAttachment.add(jsonarr.getString(j));\n                                        }\n                                        onerecordattach.put(\"Attachment\", alAttachment);\n                                    }\n                                }\n                                if (onerecordattach != null && !onerecordattach.isEmpty()) {\n                                    h4.put(\"dAttachment\", onerecordattach);\n                                }\n                            }\n                        }\n                        svF.setHashSing(h4);\n                        System.out.println(\"hash tabel values*************************\");\n                        Enumeration enumx = h4.keys();\n                        while (enumx.hasMoreElements()) {\n                            String key = enumx.nextElement().toString();\n                            System.out.println(\"Key: \" + key + \"-----value: \" + h4.get(key));\n                        }\n                        System.out.println(\"********************************************\");\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                    }\n                }\n            }\n        } else if (svF.getExportRec() != null && svF.getExportRec().equals(\"export\")) {\n            svF.setExportRec(null);\n            vecThisPage = (java.util.Vector) session.getAttribute(\"SingleViewExport\");\n            String format = svF.getSf();\n            if (format.equals(\"marc\")) {\n                String marc = opacUt.getDetailsForMultiRecordViewMARC(vecThisPage);\n                svF.setDisplayFormat(marc);\n                session.setAttribute(\"RecordDisplay\", marc);\n                forward = \"RecordFormat\";\n            } else if (format.equals(\"marcXml\")) {\n                String marcXML = opacUt.getDetailsForMultiRecordViewMARCXML(vecThisPage);\n                svF.setDisplayFormat(marcXML);\n                response.setContentType(\"text/xml\");\n                session.setAttribute(\"RecordDisplay\", marcXML);\n                forward = \"RecordFormat\";\n            } else if (format.equals(\"mods\")) {\n                String mods = opacUt.getDetailsForMultiRecordViewMODS(vecThisPage);\n                svF.setDisplayFormat(mods);\n                session.setAttribute(\"RecordDisplay\", mods);\n                forward = \"RecordFormat\";\n            } else if (format.equals(\"dc\")) {\n                String dc = opacUt.getDetailsForMultiRecordViewDublinCore(vecThisPage);\n                svF.setDisplayFormat(dc);\n                session.setAttribute(\"RecordDisplay\", dc);\n                forward = \"RecordFormat\";\n            } else if (format.equals(\"agris\")) {\n                String agr = opacUt.getDetailsForMultiRecordViewAgris(vecThisPage);\n                svF.setDisplayFormat(agr);\n                session.setAttribute(\"RecordDisplay\", agr);\n                forward = \"RecordFormat\";\n            } else if (format.equals(\"text\")) {\n                java.util.Vector vecTextDis = new java.util.Vector();\n                for (int i2 = 0; i2 < vecThisPage.size(); i2 = i2 + 2) {\n                    java.util.Hashtable hash1 = opacUt.getDetailsForSingleCatalogueRecord(new Integer(vecThisPage.elementAt(i2).toString()).intValue(), new Integer(vecThisPage.elementAt(i2 + 1).toString()).intValue());\n                    aportal.view.ISBDView fullView = new aportal.view.ISBDView();\n                    java.util.Hashtable hashCit = fullView.getView(hash1);\n                    vecTextDis.addElement(hashCit);\n                    forward = \"RecordFormatText\";\n                }\n                session.setAttribute(\"RecordTextDisplay\", vecTextDis);\n                if (svF.getPs() != null && svF.getPs().equals(\"email\")) {\n                    boolean flag = false;\n                    if (svF.getEmail() != null && !(svF.getEmail().equals(\"\"))) {\n                        String emailId = svF.getEmail();\n                        try {\n                            String sessionid = request.getSession().getId();\n                            java.net.URL url = new java.net.URL(\"http://localhost:\" + request.getServerPort() + \"/newgenlibctxt/jsp/aportal/cataloguing/RecordDisplayText.jsp;jsessionid=\" + sessionid);\n                            java.net.URLConnection urlCon = url.openConnection();\n                            java.io.InputStream is = urlCon.getInputStream();\n                            String htmlContent = \"\";\n                            java.io.BufferedReader br = new java.io.BufferedReader(new java.io.InputStreamReader(is));\n                            String line = \"\";\n                            while ((line = br.readLine()) != null) {\n                                htmlContent = htmlContent + line;\n                            }\n                            String[] emailids = { emailId };\n                            int status = SendEmail.getInstance().sendMail(emailids, \"OPAC results\", htmlContent, \"html\");\n                            if (status == 0) flag = true; else flag = false;\n                        } catch (Exception exp) {\n                            exp.printStackTrace();\n                        }\n                    }\n                    String mailMessage = \"The selected records have been successfully mailed to \" + svF.getEmail();\n                    if (flag == false) {\n                        mailMessage = \"<h4><p>The selected records could not be mailed to \" + svF.getEmail() + \"&nbsp; These might be the possible reasons.</p></h4>\" + \"<h5><ol> <li>The email id entered is not a valid one</font></li>\" + \"<li>The email id domain might not be in the list of allowed  recipient&nbsp; hosts</li>\" + \"<li>There might a error in connectivity to the mail server</li></ol></h5>\" + \"<h4><p>Please contact the  Network Administrator </p></h4>\";\n                    }\n                    session.setAttribute(\"MailStatus\", mailMessage);\n                    forward = \"SendEmail\";\n                }\n            }\n        }\n        String version = ejb.bprocess.util.StaticValues.getInstance().getVersion();\n        if (version != null && !version.equals(\"\")) {\n            svF.setVersion(version);\n        }\n        if (session.getAttribute(\"ClassNoForwarded\") != null) {\n            session.removeAttribute(\"ClassNoForwarded\");\n        }\n        return mapping.findForward(forward);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12417893",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic byte[] download(URI uri) throws NetworkException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n    public byte[] download(URI uri) throws NetworkException {\n        log.info(\"download: \" + uri);\n        HttpGet httpGet = new HttpGet(uri.toString());\n        try {\n            HttpResponse httpResponse = httpClient.execute(httpGet);\n            return EntityUtils.toByteArray(httpResponse.getEntity());\n        } catch (IOException e) {\n            throw new NetworkException(e);\n        } finally {\n            httpGet.abort();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12420484",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void sendData(final HashMap<String, String> data) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void sendData(final HashMap<String, String> data) {\n        YProgressWindowRepeat y = new YProgressWindowRepeat(I18N.t(\"Send Data to yaams.de\"));\n        try {\n            final StringBuffer send = new StringBuffer(\"1=1\");\n            for (final String key : data.keySet()) {\n                send.append(\"&\");\n                send.append(key);\n                send.append(\"=\");\n                send.append(URLEncoder.encode(data.get(key), \"UTF-8\"));\n            }\n            final URL url = new URL(\"http://www.rpg-studio.de/libraries/abttools/yaamsFeedback.php\");\n            final URLConnection conn = url.openConnection();\n            conn.setDoOutput(true);\n            final OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());\n            wr.write(send.toString());\n            wr.flush();\n            final BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n            String line;\n            final StringBuffer erg = new StringBuffer(\"\");\n            while ((line = rd.readLine()) != null) {\n                erg.append(line);\n            }\n            JOptionPane.showMessageDialog(null, erg.toString(), I18N.t(\"Feedback\"), JOptionPane.INFORMATION_MESSAGE);\n            wr.close();\n            rd.close();\n        } catch (final Throwable t) {\n            YException.error(\"Can not send feedback to http://www.rpg-studio.de/libraries/abttools/yaamsFeedback.php\", t);\n        }\n        y.close();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12428011",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String ftpPing(String root, String host, int port, String username, String pw) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String ftpPing(String root, String host, int port, String username, String pw) {\n        try {\n            ftpClient = new FTPClient();\n            ftpClient.setRemoteAddr(InetAddress.getByName(host));\n            ftpClient.setControlPort(port);\n            ftpClient.setTimeout(4000);\n            ftpClient.connect();\n            try {\n                Thread.sleep(200);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            ftpClient.login(username, (pw));\n            ftpClient.chdir(root);\n            JobHandler.releaseFTPLock();\n        } catch (UnknownHostException e) {\n            e.printStackTrace();\n            return e.getMessage();\n        } catch (FTPException e) {\n            e.printStackTrace();\n            return e.getMessage();\n        } catch (IOException e) {\n            e.printStackTrace();\n            return e.getMessage();\n        }\n        try {\n            ftpClient.quit();\n        } catch (IOException e) {\n            e.printStackTrace();\n            return e.getMessage();\n        } catch (FTPException e) {\n            e.printStackTrace();\n            return e.getMessage();\n        }\n        return null;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12428012",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void putWithUserSettings(String from, String to, String renameTo, boolean binary, IProgressMonitor monitor) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void putWithUserSettings(String from, String to, String renameTo, boolean binary, IProgressMonitor monitor) {\n        if (monitor != null && monitor.isCanceled()) {\n            return;\n        }\n        FTPHolder ftpHolder = new FTPHolder(from, to, renameTo, binary);\n        synchedSet.add(ftpHolder);\n        int ftpqueuesize = PrefPageOne.getIntValue(CONSTANTS.PREF_FTPQUEUE);\n        if (synchedSet.size() >= ftpqueuesize) {\n            JobHandler.aquireFTPLock();\n            try {\n                ftpClient = new FTPClient();\n                ftpClient.setRemoteAddr(InetAddress.getByName(PrefPageOne.getValue(CONSTANTS.PREF_HOST)));\n                ftpClient.setControlPort(PrefPageOne.getIntValue(CONSTANTS.PREF_FTPPORT));\n                ftpClient.connect();\n                try {\n                    Thread.sleep(1500);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                ftpClient.login((PrefPageOne.getValue(CONSTANTS.PREF_USERNAME)), FTPUtils.decrypt(PrefPageOne.getValue(CONSTANTS.PREF_PASSWORD)));\n                try {\n                    Thread.sleep(1000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                if (monitor != null && monitor.isCanceled()) {\n                    JobHandler.releaseFTPLock();\n                    ftpClient.quit();\n                    return;\n                }\n                synchronized (synchedSet) {\n                    for (Iterator iter = synchedSet.iterator(); iter.hasNext(); ) {\n                        if (monitor != null && monitor.isCanceled()) {\n                            JobHandler.releaseFTPLock();\n                            ftpClient.quit();\n                            return;\n                        }\n                        Thread.yield();\n                        FTPHolder element = (FTPHolder) iter.next();\n                        if (element.binary) {\n                            ftpClient.setType(FTPTransferType.BINARY);\n                        } else {\n                            ftpClient.setType(FTPTransferType.ASCII);\n                        }\n                        ftpClient.put(element.from, element.to);\n                        if (element.renameTo != null) {\n                            try {\n                                ftpClient.delete(element.renameTo);\n                            } catch (Exception e) {\n                            }\n                            ftpClient.rename(element.to, element.renameTo);\n                            log.info(\"RENAME: \" + element.to + \"To: \" + element.renameTo);\n                        }\n                    }\n                    synchedSet.clear();\n                }\n                JobHandler.releaseFTPLock();\n                ftpClient.quit();\n            } catch (UnknownHostException e) {\n                e.printStackTrace();\n            } catch (FTPException e) {\n                e.printStackTrace();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12428013",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void polishOff(IProgressMonitor monitor, String from, String to, String renameTo) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void polishOff(IProgressMonitor monitor, String from, String to, String renameTo) {\n        if (monitor != null && monitor.isCanceled()) {\n            return;\n        }\n        try {\n            ftpClient = new FTPClient();\n            ftpClient.setRemoteAddr(InetAddress.getByName(PrefPageOne.getValue(CONSTANTS.PREF_HOST)));\n            ftpClient.setControlPort(PrefPageOne.getIntValue(CONSTANTS.PREF_FTPPORT));\n            ftpClient.connect();\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            ftpClient.login((PrefPageOne.getValue(CONSTANTS.PREF_USERNAME)), FTPUtils.decrypt(PrefPageOne.getValue(CONSTANTS.PREF_PASSWORD)));\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            if (from != null) {\n                FTPHolder ftpHolder = new FTPHolder(from, to, renameTo, false);\n                synchedSet.add(ftpHolder);\n            }\n            JobHandler.aquireFTPLock();\n            for (Iterator iter = synchedSet.iterator(); iter.hasNext(); ) {\n                if (monitor != null && monitor.isCanceled()) {\n                    JobHandler.releaseFTPLock();\n                    ftpClient.quit();\n                    return;\n                }\n                Thread.yield();\n                FTPHolder element = (FTPHolder) iter.next();\n                ftpClient.setType(FTPTransferType.ASCII);\n                ftpClient.put(element.from, element.to);\n                if (element.renameTo != null) {\n                    try {\n                        ftpClient.delete(element.renameTo);\n                    } catch (Exception e) {\n                    }\n                    ftpClient.rename(element.to, element.renameTo);\n                    log.info(\"RENAME: \" + element.to + \"To: \" + element.renameTo);\n                }\n            }\n            JobHandler.releaseFTPLock();\n            ftpClient.quit();\n        } catch (UnknownHostException e) {\n            e.printStackTrace();\n        } catch (FTPException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        synchedSet.clear();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12435022",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "protected void generateDiffResults(File outFile) throws IOException {\n        FileOutputStream outStream = new FileOutputStream(outFile);\n        BufferedWriter out = new BufferedWriter(new OutputStreamWriter(outStream, outputCharset));\n        intlWrite(out, HTML_STRICT_DOCTYPE + \"<html><head><title>${Report.Title}</title>\\n\" + \"<meta http-equiv=\\\"Content-Type\\\"\" + \" content=\\\"text/html; charset=\" + outputCharset + \"\\\">\\n\" + \"<style type=\\\"text/css\\\">\\n\");\n        out.write(LOCDiff.getCssText());\n        writeCustomStyleInfo(out);\n        out.write(\"</style></head>\\n\" + \"<body>\\n\" + \"<div>\\n\");\n        if (addedTable.length() > 0) {\n            out.write(\"<table border>\");\n            intlWrite(out, getAddedTableHeader());\n            out.write(addedTable.toString());\n            out.write(\"</table><br><br>\");\n        }\n        if (modifiedTable.length() > 0) {\n            out.write(\"<table border>\");\n            intlWrite(out, getModifiedTableHeader());\n            out.write(modifiedTable.toString());\n            out.write(\"</table><br><br>\");\n        }\n        if (deletedTable.length() > 0) {\n            out.write(\"<table border>\");\n            intlWrite(out, getDeletedTableHeader());\n            out.write(deletedTable.toString());\n            out.write(\"</table><br><br>\");\n        }\n        if (unchangedTable.length() > 0) {\n            out.write(\"<table border>\");\n            intlWrite(out, getUnchangedTableHeader());\n            out.write(unchangedTable.toString());\n            out.write(\"</table><br><br>\");\n        }\n        writeSummaryTable(out);\n        out.write(\"</div>\");\n        redlinesOut.close();\n        out.flush();\n        InputStream redlines = new FileInputStream(redlinesTempFile);\n        byte[] buffer = new byte[4096];\n        int bytesRead;\n        while ((bytesRead = redlines.read(buffer)) != -1) outStream.write(buffer, 0, bytesRead);\n        outStream.write(\"</BODY></HTML>\".getBytes());\n        outStream.close();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12440169",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic String openFileAsText(String resource) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public String openFileAsText(String resource) throws IOException {\n        StringWriter wtr = new StringWriter();\n        InputStreamReader rdr = new InputStreamReader(openFile(resource));\n        try {\n            IOUtils.copy(rdr, wtr);\n        } finally {\n            IOUtils.closeQuietly(rdr);\n        }\n        return wtr.toString();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12440171",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void writeFile(String resource, InputStream is) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void writeFile(String resource, InputStream is) throws IOException {\n        File f = prepareFsReferenceAsFile(resource);\n        FileOutputStream fos = new FileOutputStream(f);\n        BufferedOutputStream bos = new BufferedOutputStream(fos);\n        try {\n            IOUtils.copy(is, bos);\n        } finally {\n            IOUtils.closeQuietly(is);\n            IOUtils.closeQuietly(bos);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01244216",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic String postEvent(EventDocument eventDoc, Map attachments) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public String postEvent(EventDocument eventDoc, Map attachments) {\n        if (eventDoc == null || eventDoc.getEvent() == null) return null;\n        if (queue == null) {\n            sendEvent(eventDoc, attachments);\n            return eventDoc.getEvent().getEventId();\n        }\n        if (attachments != null) {\n            Iterator iter = attachments.entrySet().iterator();\n            while (iter.hasNext()) {\n                Map.Entry entry = (Map.Entry) iter.next();\n                if (entry.getValue() instanceof DataHandler) {\n                    File file = new File(attachmentStorge + \"/\" + GuidUtil.generate() + entry.getKey());\n                    try {\n                        IOUtils.copy(((DataHandler) entry.getValue()).getInputStream(), new FileOutputStream(file));\n                        entry.setValue(file);\n                    } catch (IOException err) {\n                        err.printStackTrace();\n                    }\n                }\n            }\n        }\n        InternalEventObject eventObj = new InternalEventObject();\n        eventObj.setEventDocument(eventDoc);\n        eventObj.setAttachments(attachments);\n        eventObj.setSessionContext(SessionContextUtil.getCurrentContext());\n        eventDoc.getEvent().setEventId(GuidUtil.generate());\n        getQueue().post(eventObj);\n        return eventDoc.getEvent().getEventId();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12442447",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic ActionResponse executeAction(ActionRequest request) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public ActionResponse executeAction(ActionRequest request) throws Exception {\n        ActionResponse resp = new ActionResponse();\n        BufferedReader in = null;\n        try {\n            URL url = new URL(URL);\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n            int status = conn.getResponseCode();\n            if (status == 200) {\n                in = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n                while (true) {\n                    String line = in.readLine();\n                    if (line == null) break;\n                    resp.addResult(\"REMOTEVERSION\", line);\n                }\n            } else {\n                resp.setErrorCode(ActionResponse.GENERAL_ERROR);\n                resp.setErrorMessage(\"HTTP Error [\" + status + \"]\");\n            }\n        } catch (Exception e) {\n            resp.setErrorCode(ActionResponse.GENERAL_ERROR);\n            resp.setErrorMessage(e.getMessage());\n        } finally {\n            if (in != null) {\n                in.close();\n            }\n        }\n        return resp;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12445282",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "static boolean writeProperties(Map<String, String> customProps, File destination) throws IOException {\n        synchronized (PropertiesIO.class) {\n            L.info(Msg.msg(\"PropertiesIO.writeProperties.start\"));\n            File tempFile = null;\n            BufferedInputStream existingCfgInStream = null;\n            FileInputStream in = null;\n            FileOutputStream out = null;\n            PrintStream ps = null;\n            FileChannel fromChannel = null, toChannel = null;\n            String line = null;\n            try {\n                existingCfgInStream = new BufferedInputStream(destination.exists() ? new FileInputStream(destination) : defaultPropertiesStream());\n                tempFile = File.createTempFile(\"properties-\", \".tmp\", null);\n                ps = new PrintStream(tempFile);\n                while ((line = Utils.readLine(existingCfgInStream)) != null) {\n                    String lineReady2write = setupLine(line, customProps);\n                    ps.println(lineReady2write);\n                }\n                destination.getParentFile().mkdirs();\n                in = new FileInputStream(tempFile);\n                out = new FileOutputStream(destination, false);\n                fromChannel = in.getChannel();\n                toChannel = out.getChannel();\n                fromChannel.transferTo(0, fromChannel.size(), toChannel);\n                L.info(Msg.msg(\"PropertiesIO.writeProperties.done\").replace(\"#file#\", destination.getAbsolutePath()));\n                return true;\n            } finally {\n                if (existingCfgInStream != null) existingCfgInStream.close();\n                if (ps != null) ps.close();\n                if (fromChannel != null) fromChannel.close();\n                if (toChannel != null) toChannel.close();\n                if (out != null) out.close();\n                if (in != null) in.close();\n                if (tempFile != null && tempFile.exists()) tempFile.delete();\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12448713",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void writeGif(String filename, String outputFile) throws IOException {\n        File file = new File(filename);\n        InputStream in = new FileInputStream(file);\n        FileOutputStream fout = new FileOutputStream(outputFile);\n        int totalRead = 0;\n        int readBytes = 0;\n        int blockSize = 65000;\n        long fileLen = file.length();\n        byte b[] = new byte[blockSize];\n        while ((long) totalRead < fileLen) {\n            readBytes = in.read(b, 0, blockSize);\n            totalRead += readBytes;\n            fout.write(b, 0, readBytes);\n        }\n        in.close();\n        fout.close();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12454178",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void alterar(Disciplina t) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n    public void alterar(Disciplina t) throws Exception {\n        PreparedStatement stmt = null;\n        String sql = \"UPDATE disciplina SET nm_disciplina = ?, cod_disciplina = ? WHERE id_disciplina = ?\";\n        try {\n            stmt = conexao.prepareStatement(sql);\n            stmt.setString(1, t.getNomeDisciplina());\n            stmt.setString(2, t.getCodDisciplina());\n            stmt.setInt(3, t.getIdDisciplina());\n            stmt.executeUpdate();\n            conexao.commit();\n            int id_disciplina = t.getIdDisciplina();\n            excluirTopico(t.getIdDisciplina());\n            for (Topico item : t.getTopicos()) {\n                criarTopico(item, id_disciplina);\n            }\n        } catch (SQLException e) {\n            conexao.rollback();\n            throw e;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12454179",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void excluir(Disciplina t) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n    public void excluir(Disciplina t) throws Exception {\n        PreparedStatement stmt = null;\n        String sql = \"DELETE from disciplina where id_disciplina = ?\";\n        try {\n            stmt = conexao.prepareStatement(sql);\n            stmt.setInt(1, t.getIdDisciplina());\n            stmt.executeUpdate();\n            conexao.commit();\n        } catch (SQLException e) {\n            conexao.rollback();\n            throw e;\n        } finally {\n            try {\n                stmt.close();\n                conexao.close();\n            } catch (SQLException e) {\n                throw e;\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12454182",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void excluirTopico(Integer idDisciplina) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void excluirTopico(Integer idDisciplina) throws Exception {\n        String sql = \"DELETE from topico WHERE id_disciplina = ?\";\n        PreparedStatement stmt = null;\n        try {\n            stmt = conexao.prepareStatement(sql);\n            stmt.setInt(1, idDisciplina);\n            stmt.executeUpdate();\n            conexao.commit();\n        } catch (SQLException e) {\n            conexao.rollback();\n            throw e;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12461924",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void removeSessionId(InputStream inputStream, Output output) throws IOException {\n        String jsessionid = RewriteUtils.getSessionId(target);\n        boolean textContentType = ResourceUtils.isTextContentType(httpClientResponse.getHeader(HttpHeaders.CONTENT_TYPE), target.getDriver().getConfiguration().getParsableContentTypes());\n        if (jsessionid == null || !textContentType) {\n            IOUtils.copy(inputStream, output.getOutputStream());\n        } else {\n            String charset = httpClientResponse.getContentCharset();\n            if (charset == null) {\n                charset = \"ISO-8859-1\";\n            }\n            String content = IOUtils.toString(inputStream, charset);\n            content = removeSessionId(jsessionid, content);\n            if (output.getHeader(HttpHeaders.CONTENT_LENGTH) != null) {\n                output.setHeader(HttpHeaders.CONTENT_LENGTH, Integer.toString(content.length()));\n            }\n            OutputStream outputStream = output.getOutputStream();\n            IOUtils.write(content, outputStream, charset);\n        }\n        inputStream.close();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12462567",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic ViewProperties(String basePath, String baseFile) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public ViewProperties(String basePath, String baseFile) throws Exception {\n            FileInputStream input = null;\n            String file = basePath + \"/\" + baseFile + \".properties\";\n            properties = new Properties();\n            try {\n                URL url = MapViewer.class.getResource(file);\n                properties.load(url.openStream());\n                viewName = (String) properties.get(\"view.name\");\n                viewShape = (String) properties.get(\"view.shape\");\n                path = basePath + \"/\" + (String) properties.get(\"icon.path\");\n                iconHeight = getIntProperty(\"icon.height\", 96);\n                iconWidth = getIntProperty(\"icon.width\", 96);\n                fontSizeSmall = getIntProperty(\"font.small.size\", 10);\n                fontSizeMedium = getIntProperty(\"font.medium.size\", 12);\n                fontSizeLarge = getIntProperty(\"font.large.size\", 16);\n                fontSizeHuge = getIntProperty(\"font.huge.size\", 20);\n                if (viewShape.equals(\"Hexagonal\")) {\n                    tileHeight = (int) (Math.sqrt(3.0) / 2.0 * iconWidth);\n                    tileWidth = (int) (iconWidth * 3.0 / 4.0);\n                    tileOffset = (int) (tileHeight / 2.0);\n                } else {\n                    tileHeight = iconHeight;\n                    tileWidth = iconWidth;\n                    tileOffset = 0;\n                }\n            } catch (Exception e) {\n                error(\"Cannot load properties from file [\" + file + \"]\");\n                throw e;\n            }\n        }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12465375",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void write(File src, File dst, byte id3v1Tag[], byte id3v2HeadTag[], byte id3v2TailTag[]) throws IOException {\n        if (src == null || !src.exists()) throw new IOException(Debug.getDebug(\"missing src\", src));\n        if (!src.getName().toLowerCase().endsWith(\".mp3\")) throw new IOException(Debug.getDebug(\"src not mp3\", src));\n        if (dst == null) throw new IOException(Debug.getDebug(\"missing dst\", dst));\n        if (dst.exists()) {\n            dst.delete();\n            if (dst.exists()) throw new IOException(Debug.getDebug(\"could not delete dst\", dst));\n        }\n        boolean hasId3v1 = new MyID3v1().hasID3v1(src);\n        long id3v1Length = hasId3v1 ? ID3_V1_TAG_LENGTH : 0;\n        long id3v2HeadLength = new MyID3v2().findID3v2HeadLength(src);\n        long id3v2TailLength = new MyID3v2().findID3v2TailLength(src, hasId3v1);\n        OutputStream os = null;\n        InputStream is = null;\n        try {\n            dst.getParentFile().mkdirs();\n            os = new FileOutputStream(dst);\n            os = new BufferedOutputStream(os);\n            if (!skipId3v2Head && !skipId3v2 && id3v2HeadTag != null) os.write(id3v2HeadTag);\n            is = new FileInputStream(src);\n            is = new BufferedInputStream(is);\n            is.skip(id3v2HeadLength);\n            long total_to_read = src.length();\n            total_to_read -= id3v1Length;\n            total_to_read -= id3v2HeadLength;\n            total_to_read -= id3v2TailLength;\n            byte buffer[] = new byte[1024];\n            long total_read = 0;\n            while (total_read < total_to_read) {\n                int remainder = (int) (total_to_read - total_read);\n                int readSize = Math.min(buffer.length, remainder);\n                int read = is.read(buffer, 0, readSize);\n                if (read <= 0) throw new IOException(\"unexpected EOF\");\n                os.write(buffer, 0, read);\n                total_read += read;\n            }\n            if (!skipId3v2Tail && !skipId3v2 && id3v2TailTag != null) os.write(id3v2TailTag);\n            if (!skipId3v1 && id3v1Tag != null) os.write(id3v1Tag);\n        } finally {\n            try {\n                if (is != null) is.close();\n            } catch (Throwable e) {\n                Debug.debug(e);\n            }\n            try {\n                if (os != null) os.close();\n            } catch (Throwable e) {\n                Debug.debug(e);\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12469139",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic Program createNewProgram(int projectID, String name, String description) throws AdaptationException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public Program createNewProgram(int projectID, String name, String description) throws AdaptationException {\n        Program program = null;\n        Connection connection = null;\n        Statement statement = null;\n        ResultSet resultSet = null;\n        try {\n            connection = DriverManager.getConnection(CONN_STR);\n            connection.setAutoCommit(false);\n            statement = connection.createStatement();\n            String query = \"INSERT INTO Programs(projectID, name, \" + \"description, sourcePath) VALUES ( \" + projectID + \", \" + \"'\" + name + \"', \" + \"'\" + description + \"', \" + \"'\" + \"[unknown]\" + \"')\";\n            log.debug(\"SQL Query:\\n\" + query);\n            statement.executeUpdate(query);\n            query = \"SELECT * FROM Programs WHERE \" + \" projectID   =  \" + projectID + \"  AND \" + \" name        = '\" + name + \"' AND \" + \" description = '\" + description + \"'\";\n            resultSet = statement.executeQuery(query);\n            if (!resultSet.next()) {\n                connection.rollback();\n                String msg = \"Attempt to create program failed\";\n                log.error(msg);\n                throw new AdaptationException(msg);\n            }\n            program = getProgram(resultSet);\n            connection.commit();\n        } catch (SQLException ex) {\n            try {\n                connection.rollback();\n            } catch (Exception e) {\n            }\n            String msg = \"SQLException in createNewProgram\";\n            log.error(msg, ex);\n            throw new AdaptationException(msg, ex);\n        } finally {\n            try {\n                resultSet.close();\n            } catch (Exception ex) {\n            }\n            try {\n                statement.close();\n            } catch (Exception ex) {\n            }\n            try {\n                connection.close();\n            } catch (Exception ex) {\n            }\n        }\n        return program;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12469140",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic Program updateProgramPath(int id, String sourcePath) throws AdaptationException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public Program updateProgramPath(int id, String sourcePath) throws AdaptationException {\n        Program program = null;\n        Connection connection = null;\n        Statement statement = null;\n        ResultSet resultSet = null;\n        try {\n            String query = \"UPDATE Programs SET \" + \"sourcePath = '\" + sourcePath + \"' \" + \"WHERE id = \" + id;\n            connection = DriverManager.getConnection(CONN_STR);\n            statement = connection.createStatement();\n            statement.executeUpdate(query);\n            query = \"SELECT * from Programs WHERE id = \" + id;\n            resultSet = statement.executeQuery(query);\n            if (!resultSet.next()) {\n                connection.rollback();\n                String msg = \"Attempt to update program failed.\";\n                log.error(msg);\n                throw new AdaptationException(msg);\n            }\n            program = getProgram(resultSet);\n            connection.commit();\n        } catch (SQLException ex) {\n            try {\n                connection.rollback();\n            } catch (Exception e) {\n            }\n            String msg = \"SQLException in updateProgramPath\";\n            log.error(msg, ex);\n            throw new AdaptationException(msg, ex);\n        } finally {\n            try {\n                resultSet.close();\n            } catch (Exception ex) {\n            }\n            try {\n                statement.close();\n            } catch (Exception ex) {\n            }\n            try {\n                connection.close();\n            } catch (Exception ex) {\n            }\n        }\n        return program;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12469141",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic Program deleteProgram(int id) throws AdaptationException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public Program deleteProgram(int id) throws AdaptationException {\n        Program program = null;\n        Connection connection = null;\n        Statement statement = null;\n        ResultSet resultSet = null;\n        try {\n            String query = \"SELECT * FROM Programs WHERE id = \" + id;\n            connection = DriverManager.getConnection(CONN_STR);\n            statement = connection.createStatement();\n            resultSet = statement.executeQuery(query);\n            if (!resultSet.next()) {\n                connection.rollback();\n                String msg = \"Attempt to delete program failed.\";\n                log.error(msg);\n                throw new AdaptationException(msg);\n            }\n            program = getProgram(resultSet);\n            query = \"DELETE FROM Programs WHERE id = \" + id;\n            statement.executeUpdate(query);\n            connection.commit();\n        } catch (SQLException ex) {\n            try {\n                connection.rollback();\n            } catch (Exception e) {\n            }\n            String msg = \"SQLException in deleteProgram\";\n            log.error(msg, ex);\n            throw new AdaptationException(msg, ex);\n        } finally {\n            try {\n                resultSet.close();\n            } catch (Exception ex) {\n            }\n            try {\n                statement.close();\n            } catch (Exception ex) {\n            }\n            try {\n                connection.close();\n            } catch (Exception ex) {\n            }\n        }\n        return program;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12473411",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static void copyImage(String srcImg, String destImg) {\n        try {\n            FileChannel srcChannel = new FileInputStream(srcImg).getChannel();\n            FileChannel dstChannel = new FileOutputStream(destImg).getChannel();\n            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n            srcChannel.close();\n            dstChannel.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12477499",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic HttpResponse executeWithoutRewriting(HttpUriRequest request, HttpContext context) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public HttpResponse executeWithoutRewriting(HttpUriRequest request, HttpContext context) throws IOException {\n        int code = -1;\n        long start = SystemClock.elapsedRealtime();\n        try {\n            HttpResponse response;\n            mConnectionAllocated.set(null);\n            if (NetworkStatsEntity.shouldLogNetworkStats()) {\n                int uid = android.os.Process.myUid();\n                long startTx = NetStat.getUidTxBytes(uid);\n                long startRx = NetStat.getUidRxBytes(uid);\n                response = mClient.execute(request, context);\n                HttpEntity origEntity = response == null ? null : response.getEntity();\n                if (origEntity != null) {\n                    long now = SystemClock.elapsedRealtime();\n                    long elapsed = now - start;\n                    NetworkStatsEntity entity = new NetworkStatsEntity(origEntity, mAppName, uid, startTx, startRx, elapsed, now);\n                    response.setEntity(entity);\n                }\n            } else {\n                response = mClient.execute(request, context);\n            }\n            code = response.getStatusLine().getStatusCode();\n            return response;\n        } finally {\n            try {\n                long elapsed = SystemClock.elapsedRealtime() - start;\n                ContentValues values = new ContentValues();\n                values.put(Checkin.Stats.COUNT, 1);\n                values.put(Checkin.Stats.SUM, elapsed / 1000.0);\n                values.put(Checkin.Stats.TAG, Checkin.Stats.Tag.HTTP_REQUEST + \":\" + mAppName);\n                mResolver.insert(Checkin.Stats.CONTENT_URI, values);\n                if (mConnectionAllocated.get() == null && code >= 0) {\n                    values.put(Checkin.Stats.TAG, Checkin.Stats.Tag.HTTP_REUSED + \":\" + mAppName);\n                    mResolver.insert(Checkin.Stats.CONTENT_URI, values);\n                }\n                String status = code < 0 ? \"IOException\" : Integer.toString(code);\n                values.put(Checkin.Stats.TAG, Checkin.Stats.Tag.HTTP_STATUS + \":\" + mAppName + \":\" + status);\n                mResolver.insert(Checkin.Stats.CONTENT_URI, values);\n            } catch (Exception e) {\n                Log.e(TAG, \"Error recording stats\", e);\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12477501",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic HttpResponse execute(HttpUriRequest request, HttpContext context) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public HttpResponse execute(HttpUriRequest request, HttpContext context) throws IOException {\n        URI uri = request.getURI();\n        String original = uri.toString();\n        UrlRules rules = UrlRules.getRules(mResolver);\n        UrlRules.Rule rule = rules.matchRule(original);\n        String rewritten = rule.apply(original);\n        if (rewritten == null) {\n            Log.w(TAG, \"Blocked by \" + rule.mName + \": \" + original);\n            throw new BlockedRequestException(rule);\n        } else if (rewritten == original) {\n            return executeWithoutRewriting(request, context);\n        }\n        try {\n            uri = new URI(rewritten);\n        } catch (URISyntaxException e) {\n            throw new RuntimeException(\"Bad URL from rule: \" + rule.mName, e);\n        }\n        RequestWrapper wrapper = wrapRequest(request);\n        wrapper.setURI(uri);\n        request = wrapper;\n        if (LOCAL_LOGV) Log.v(TAG, \"Rule \" + rule.mName + \": \" + original + \" -> \" + rewritten);\n        return executeWithoutRewriting(request, context);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12482760",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic synchronized void connect() throws FTPConnectionException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public synchronized void connect() throws FTPConnectionException {\n        checkLocked();\n        try {\n            int reply;\n            this.disconnect();\n            if (isSecured()) {\n                this.client = new FTPSClient(protocol, protection, impliciteSec, null, null);\n            } else {\n                this.client = new FTPClient();\n            }\n            if (this.controlEncoding != null) {\n                this.client.setControlEncoding(this.controlEncoding);\n                debug(\"control encoding : \", controlEncoding);\n            }\n            Logger.defaultLogger().info(\"Trying to connect to server : \" + this.remoteServer + \" ...\");\n            debug(\"connect : connect\", remoteServer);\n            client.connect(remoteServer, this.remotePort);\n            Logger.defaultLogger().info(\"Received FTP server response : \" + formatFTPReplyString(client.getReplyString()));\n            this.connectionId = Util.getRndLong();\n            reply = client.getReplyCode();\n            if (!FTPReply.isPositiveCompletion(reply)) {\n                String msg = formatFTPReplyString(client.getReplyString());\n                this.disconnect();\n                throw new FTPConnectionException(\"Unable to communicate with remote FTP server. Got message : \" + msg);\n            } else {\n                Logger.defaultLogger().info(\"Trying to log in with user : \" + this.login + \" ...\");\n                debug(\"connect : login\", login + \"/\" + password);\n                if (!client.login(this.login, this.password)) {\n                    String msg = formatFTPReplyString(client.getReplyString());\n                    this.disconnect();\n                    throw new FTPConnectionException(\"Unable to login on FTP server (\" + login + \"/\" + password + \"). Received response : \" + msg);\n                } else {\n                    Logger.defaultLogger().info(\"Logged in with user : \" + this.login + \". Received response : \" + formatFTPReplyString(client.getReplyString()));\n                    if (this.passivMode) {\n                        Logger.defaultLogger().info(\"Switching to passive mode ...\");\n                        debug(\"connect : pasv\");\n                        client.enterLocalPassiveMode();\n                        reply = client.getReplyCode();\n                        if (!FTPReply.isPositiveCompletion(reply)) {\n                            String msg = formatFTPReplyString(client.getReplyString());\n                            this.disconnect();\n                            throw new FTPConnectionException(\"Unable to switch to passiv mode. Received response : \" + msg);\n                        } else {\n                            this.updateOpTime();\n                        }\n                    } else {\n                        this.updateOpTime();\n                    }\n                    debug(\"connect : bin\");\n                    client.setFileType(FTP.BINARY_FILE_TYPE);\n                    Logger.defaultLogger().info(\"Connected to server : \" + this.remoteServer);\n                }\n            }\n        } catch (UnknownHostException e) {\n            resetClient(e);\n            throw new FTPConnectionException(\"Unknown FTP server : \" + this.remoteServer);\n        } catch (SocketException e) {\n            resetClient(e);\n            throw new FTPConnectionException(\"Error during FTP connection : \" + e.getMessage());\n        } catch (IOException e) {\n            resetClient(e);\n            throw new FTPConnectionException(\"Error during FTP connection : \" + e.getMessage());\n        } finally {\n            clearCache();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12483251",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void weightAndPlaceClasses() {\n        int rows = getRows();\n        for (int curRow = _maxPackageRank; curRow < rows; curRow++) {\n            xPos = getHGap() / 2;\n            BOTLObjectSourceDiagramNode[] rowObject = getObjectsInRow(curRow);\n            for (int i = 0; i < rowObject.length; i++) {\n                if (curRow == _maxPackageRank) {\n                    int nDownlinks = rowObject[i].getDownlinks().size();\n                    rowObject[i].setWeight((nDownlinks > 0) ? (1 / nDownlinks) : 2);\n                } else {\n                    Vector uplinks = rowObject[i].getUplinks();\n                    int nUplinks = uplinks.size();\n                    if (nUplinks > 0) {\n                        float average_col = 0;\n                        for (int j = 0; j < uplinks.size(); j++) {\n                            average_col += ((BOTLObjectSourceDiagramNode) (uplinks.elementAt(j))).getColumn();\n                        }\n                        average_col /= nUplinks;\n                        rowObject[i].setWeight(average_col);\n                    } else {\n                        rowObject[i].setWeight(1000);\n                    }\n                }\n            }\n            int[] pos = new int[rowObject.length];\n            for (int i = 0; i < pos.length; i++) {\n                pos[i] = i;\n            }\n            boolean swapped = true;\n            while (swapped) {\n                swapped = false;\n                for (int i = 0; i < pos.length - 1; i++) {\n                    if (rowObject[pos[i]].getWeight() > rowObject[pos[i + 1]].getWeight()) {\n                        int temp = pos[i];\n                        pos[i] = pos[i + 1];\n                        pos[i + 1] = temp;\n                        swapped = true;\n                    }\n                }\n            }\n            for (int i = 0; i < pos.length; i++) {\n                rowObject[pos[i]].setColumn(i);\n                if ((i > _vMax) && (rowObject[pos[i]].getUplinks().size() == 0) && (rowObject[pos[i]].getDownlinks().size() == 0)) {\n                    if (getColumns(rows - 1) > _vMax) {\n                        rows++;\n                    }\n                    rowObject[pos[i]].setRank(rows - 1);\n                } else {\n                    rowObject[pos[i]].setLocation(new Point(xPos, yPos));\n                    xPos += rowObject[pos[i]].getSize().getWidth() + getHGap();\n                }\n            }\n            yPos += getRowHeight(curRow) + getVGap();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12488277",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void loginMD5() throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void loginMD5() throws Exception {\n        GetMethod get = new GetMethod(\"http://login.yahoo.com/config/login?.src=www&.done=http://www.yahoo.com\");\n        get.setRequestHeader(\"user-agent\", \"Mozilla/5.0 (Macintosh; U; PPC MacOS X; en-us) AppleWebKit/124 (KHTML, like Gecko) Safari/125.1\");\n        client.executeMethod(get);\n        parseResponse(get.getResponseBodyAsStream());\n        MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n        digest.update(password.getBytes(\"US-ASCII\"));\n        String hash1 = new String(digest.digest(), \"US-ASCII\");\n        String hash2 = hash1 + challenge;\n        digest.update(hash2.getBytes(\"US-ASCII\"));\n        String hash = new String(digest.digest(), \"US-ASCII\");\n        NameValuePair[] pairs = { new NameValuePair(\"login\", login), new NameValuePair(\"password\", hash), new NameValuePair(\".save\", \"1\"), new NameValuePair(\".tries\", \"1\"), new NameValuePair(\".src\", \"www\"), new NameValuePair(\".md5\", \"1\"), new NameValuePair(\".hash\", \"1\"), new NameValuePair(\".js\", \"1\"), new NameValuePair(\".last\", \"\"), new NameValuePair(\".promo\", \"\"), new NameValuePair(\".intl\", \"us\"), new NameValuePair(\".bypass\", \"\"), new NameValuePair(\".u\", u), new NameValuePair(\".v\", \"0\"), new NameValuePair(\".challenge\", challenge), new NameValuePair(\".yplus\", \"\"), new NameValuePair(\".emailCode\", \"\"), new NameValuePair(\"pkg\", \"\"), new NameValuePair(\"stepid\", \"\"), new NameValuePair(\".ev\", \"\"), new NameValuePair(\"hasMsgr\", \"0\"), new NameValuePair(\".chkP\", \"Y\"), new NameValuePair(\".done\", \"http://www.yahoo.com\"), new NameValuePair(\".persistent\", \"y\") };\n        get = new GetMethod(\"http://login.yahoo.com/config/login\");\n        get.setRequestHeader(\"user-agent\", \"Mozilla/5.0 (Macintosh; U; PPC MacOS X; en-us) AppleWebKit/124 (KHTML, like Gecko) Safari/125.1\");\n        get.addRequestHeader(\"Accept\", \"*/*\");\n        get.addRequestHeader(\"Accept-Language\", \"en-us, ja;q=0.21, de-de;q=0.86, de;q=0.79, fr-fr;q=0.71, fr;q=0.64, nl-nl;q=0.57, nl;q=0.50, it-it;q=0.43, it;q=0.36, ja-jp;q=0.29, en;q=0.93, es-es;q=0.14, es;q=0.07\");\n        get.setQueryString(pairs);\n        client.executeMethod(get);\n        get.getResponseBodyAsString();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12490144",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void createJCoPluginProject(IProgressMonitor monitor, String sourceFileName, String pluginName) throws CoreException, IOException {\n        monitor.subTask(MessageFormat.format(Messages.ProjectGenerator_CreatePluginTaskDescription, pluginName));\n        final Map<String, byte[]> files = readArchiveFile(sourceFileName);\n        monitor.worked(10);\n        IProject project = workspaceRoot.getProject(pluginName);\n        if (project.exists()) {\n            project.delete(true, true, new SubProgressMonitor(monitor, 5));\n        } else {\n            monitor.worked(5);\n        }\n        project.create(new SubProgressMonitor(monitor, 5));\n        project.open(new SubProgressMonitor(monitor, 5));\n        IProjectDescription description = project.getDescription();\n        description.setNatureIds(new String[] { JavaCore.NATURE_ID, PLUGIN_NATURE_ID });\n        project.setDescription(description, new SubProgressMonitor(monitor, 5));\n        IJavaProject javaProject = JavaCore.create(project);\n        IFolder binDir = project.getFolder(\"bin\");\n        IPath binPath = binDir.getFullPath();\n        javaProject.setOutputLocation(binPath, new SubProgressMonitor(monitor, 5));\n        project.getFolder(\"jni\").create(true, true, new SubProgressMonitor(monitor, 5));\n        project.getFile(\"sapjco3.jar\").create(new ByteArrayInputStream(files.get(\"sapjco3.jar\")), true, new SubProgressMonitor(monitor, 10));\n        IFolder metaInfFolder = project.getFolder(\"META-INF\");\n        metaInfFolder.create(true, true, new SubProgressMonitor(monitor, 5));\n        StringBuilder manifest = new StringBuilder();\n        manifest.append(\"Manifest-Version: 1.0\\n\");\n        manifest.append(\"Bundle-ManifestVersion: 2\\n\");\n        manifest.append(\"Bundle-Name: SAP Java Connector v3\\n\");\n        manifest.append(MessageFormat.format(\"Bundle-SymbolicName: {0}\\n\", pluginName));\n        manifest.append(\"Bundle-Version: 7.11.0\\n\");\n        manifest.append(\"Bundle-ClassPath: bin/,\\n\");\n        manifest.append(\" sapjco3.jar,\\n\");\n        manifest.append(\" jni/\\n\");\n        manifest.append(\"Bundle-Vendor: SAP AG, Walldorf (packaged using RCER)\\n\");\n        manifest.append(\"Bundle-RequiredExecutionEnvironment: J2SE-1.5\\n\");\n        manifest.append(\"Export-Package: com.sap.conn.jco,\\n\");\n        manifest.append(\" com.sap.conn.jco.ext,\\n\");\n        manifest.append(\" com.sap.conn.jco.monitor,\\n\");\n        manifest.append(\" com.sap.conn.jco.rt,\\n\");\n        manifest.append(\" com.sap.conn.jco.server\\n\");\n        manifest.append(\"Bundle-ActivationPolicy: lazy\\n\");\n        writeTextFile(monitor, manifest, metaInfFolder.getFile(\"MANIFEST.MF\"));\n        final IPath jcoPath = new Path(MessageFormat.format(\"/{0}/sapjco3.jar\", pluginName));\n        IClasspathEntry jcoEntry = JavaCore.newLibraryEntry(jcoPath, Path.EMPTY, Path.EMPTY, true);\n        final IPath jniPath = new Path(MessageFormat.format(\"/{0}/jni\", pluginName));\n        IClasspathEntry jniEntry = JavaCore.newLibraryEntry(jniPath, Path.EMPTY, Path.EMPTY, true);\n        javaProject.setRawClasspath(new IClasspathEntry[] { jcoEntry, jniEntry }, new SubProgressMonitor(monitor, 5));\n        StringBuilder buildProperties = new StringBuilder();\n        buildProperties.append(\"bin.includes = META-INF/,\\\\\\n\");\n        buildProperties.append(\"               sapjco3.jar,\\\\\\n\");\n        buildProperties.append(\"               jni/,\\\\\\n\");\n        buildProperties.append(\"               .\\n\");\n        writeTextFile(monitor, buildProperties, project.getFile(\"build.properties\"));\n        exportableBundles.add(modelManager.findModel(project));\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12490148",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void createIDocPluginProject(IProgressMonitor monitor, String sourceFileName, String pluginName, String pluginNameJCo) throws CoreException, IOException {\n        monitor.subTask(MessageFormat.format(Messages.ProjectGenerator_CreatePluginTaskDescription, pluginName));\n        final Map<String, byte[]> files = readArchiveFile(sourceFileName);\n        monitor.worked(10);\n        IProject project = workspaceRoot.getProject(pluginName);\n        if (project.exists()) {\n            project.delete(true, true, new SubProgressMonitor(monitor, 5));\n        } else {\n            monitor.worked(5);\n        }\n        project.create(new SubProgressMonitor(monitor, 5));\n        project.open(new SubProgressMonitor(monitor, 5));\n        IProjectDescription description = project.getDescription();\n        description.setNatureIds(new String[] { JavaCore.NATURE_ID, PLUGIN_NATURE_ID });\n        project.setDescription(description, new SubProgressMonitor(monitor, 5));\n        IJavaProject javaProject = JavaCore.create(project);\n        IFolder binDir = project.getFolder(\"bin\");\n        IPath binPath = binDir.getFullPath();\n        javaProject.setOutputLocation(binPath, new SubProgressMonitor(monitor, 5));\n        project.getFile(\"sapidoc3.jar\").create(new ByteArrayInputStream(files.get(\"sapidoc3.jar\")), true, new SubProgressMonitor(monitor, 15));\n        IFolder metaInfFolder = project.getFolder(\"META-INF\");\n        metaInfFolder.create(true, true, new SubProgressMonitor(monitor, 5));\n        StringBuilder manifest = new StringBuilder();\n        manifest.append(\"Manifest-Version: 1.0\\n\");\n        manifest.append(\"Bundle-ManifestVersion: 2\\n\");\n        manifest.append(\"Bundle-Name: SAP IDoc Library v3\\n\");\n        manifest.append(MessageFormat.format(\"Bundle-SymbolicName: {0}\\n\", pluginName));\n        manifest.append(\"Bundle-Version: 7.11.0\\n\");\n        manifest.append(\"Bundle-ClassPath: bin/,\\n\");\n        manifest.append(\" sapidoc3.jar\\n\");\n        manifest.append(\"Bundle-Vendor: SAP AG, Walldorf (packaged using RCER)\\n\");\n        manifest.append(\"Bundle-RequiredExecutionEnvironment: J2SE-1.5\\n\");\n        manifest.append(\"Export-Package: com.sap.conn.idoc,\\n\");\n        manifest.append(\" com.sap.conn.idoc.jco,\\n\");\n        manifest.append(\" com.sap.conn.idoc.rt.cp,\\n\");\n        manifest.append(\" com.sap.conn.idoc.rt.record,\\n\");\n        manifest.append(\" com.sap.conn.idoc.rt.record.impl,\\n\");\n        manifest.append(\" com.sap.conn.idoc.rt.trace,\\n\");\n        manifest.append(\" com.sap.conn.idoc.rt.util,\\n\");\n        manifest.append(\" com.sap.conn.idoc.rt.xml\\n\");\n        manifest.append(\"Bundle-ActivationPolicy: lazy\\n\");\n        manifest.append(MessageFormat.format(\"Require-Bundle: {0}\\n\", pluginNameJCo));\n        writeTextFile(monitor, manifest, metaInfFolder.getFile(\"MANIFEST.MF\"));\n        final IPath jcoPath = new Path(MessageFormat.format(\"/{0}/sapidoc3.jar\", pluginName));\n        IClasspathEntry jcoEntry = JavaCore.newLibraryEntry(jcoPath, Path.EMPTY, Path.EMPTY, true);\n        javaProject.setRawClasspath(new IClasspathEntry[] { jcoEntry }, new SubProgressMonitor(monitor, 5));\n        StringBuilder buildProperties = new StringBuilder();\n        buildProperties.append(\"bin.includes = META-INF/,\\\\\\n\");\n        buildProperties.append(\"               sapidoc3.jar,\\\\\\n\");\n        buildProperties.append(\"               .\\n\");\n        writeTextFile(monitor, buildProperties, project.getFile(\"build.properties\"));\n        exportableBundles.add(modelManager.findModel(project));\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12493156",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String hashPassword(String plaintext) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String hashPassword(String plaintext) {\n        if (plaintext == null) {\n            return \"\";\n        }\n        MessageDigest md = null;\n        try {\n            md = MessageDigest.getInstance(\"SHA1\");\n            md.update(plaintext.getBytes(\"UTF-8\"));\n        } catch (Exception e) {\n            logger.log(Level.SEVERE, \"Problem hashing password.\", e);\n        }\n        return new String(Base64.encodeBase64(md.digest()));\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12499284",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void runTask(HashMap pjobParms) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void runTask(HashMap pjobParms) throws Exception {\n        FTPClient lftpClient = null;\n        FileOutputStream lfosTargetFile = null;\n        JBJFPluginDefinition lpluginCipher = null;\n        IJBJFPluginCipher theCipher = null;\n        try {\n            JBJFFTPDefinition lxmlFTP = null;\n            if (getFTPDefinition() != null) {\n                lxmlFTP = getFTPDefinition();\n                this.mstrSourceDirectory = lxmlFTP.getSourceDirectory();\n                this.mstrTargetDirectory = lxmlFTP.getTargetDirectory();\n                this.mstrFilename = lxmlFTP.getFilename();\n                this.mstrRemoteServer = lxmlFTP.getServer();\n                if (getResources().containsKey(\"plugin-cipher\")) {\n                    lpluginCipher = (JBJFPluginDefinition) getResources().get(\"plugin-cipher\");\n                }\n                if (lpluginCipher != null) {\n                    theCipher = getTaskPlugins().getCipherPlugin(lpluginCipher.getPluginId());\n                }\n                if (theCipher != null) {\n                    this.mstrServerUsr = theCipher.decryptString(lxmlFTP.getUser());\n                    this.mstrServerPwd = theCipher.decryptString(lxmlFTP.getPass());\n                } else {\n                    this.mstrServerUsr = lxmlFTP.getUser();\n                    this.mstrServerPwd = lxmlFTP.getPass();\n                }\n            } else {\n                throw new Exception(\"Work unit [ \" + SHORT_NAME + \" ] is missing an FTP Definition.  Please check\" + \" your JBJF Batch Definition file an make sure\" + \" this work unit has a <resource> element added\" + \" within the <task> element.\");\n            }\n            lfosTargetFile = new FileOutputStream(mstrTargetDirectory + File.separator + mstrFilename);\n            lftpClient = new FTPClient();\n            lftpClient.connect(mstrRemoteServer);\n            lftpClient.setFileType(lxmlFTP.getFileTransferType());\n            if (!FTPReply.isPositiveCompletion(lftpClient.getReplyCode())) {\n                throw new Exception(\"FTP server [ \" + mstrRemoteServer + \" ] refused connection.\");\n            }\n            if (!lftpClient.login(mstrServerUsr, mstrServerPwd)) {\n                throw new Exception(\"Unable to login to server [ \" + mstrTargetDirectory + \" ].\");\n            }\n            if (!lftpClient.changeWorkingDirectory(mstrSourceDirectory)) {\n                throw new Exception(\"Unable to change to remote directory [ \" + mstrSourceDirectory + \"]\");\n            }\n            lftpClient.enterLocalPassiveMode();\n            if (!lftpClient.retrieveFile(mstrFilename, lfosTargetFile)) {\n                throw new Exception(\"Unable to download [ \" + mstrSourceDirectory + \"/\" + mstrFilename + \" to \" + mstrTargetDirectory + File.separator + mstrFilename + \" ] from server [ \" + mstrRemoteServer + \" ]\");\n            }\n            lfosTargetFile.close();\n            lftpClient.logout();\n        } catch (Exception e) {\n            throw e;\n        } finally {\n            if (lftpClient != null && lftpClient.isConnected()) {\n                try {\n                    lftpClient.disconnect();\n                } catch (IOException ioe) {\n                }\n            }\n            if (lfosTargetFile != null) {\n                try {\n                    lfosTargetFile.close();\n                } catch (Exception e) {\n                }\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12499532",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic File copyLocalFileAsTempFileInExternallyAccessableDir(String localFileRef) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public File copyLocalFileAsTempFileInExternallyAccessableDir(String localFileRef) throws IOException {\n        log.debug(\"copyLocalFileAsTempFileInExternallyAccessableDir\");\n        File f = this.createTempFileInExternallyAccessableDir();\n        FileChannel srcChannel = new FileInputStream(localFileRef).getChannel();\n        FileChannel dstChannel = new FileOutputStream(f).getChannel();\n        log.debug(\"before transferring via FileChannel from src-inputStream: \" + localFileRef + \" to dest-outputStream: \" + f.getAbsolutePath());\n        dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n        srcChannel.close();\n        dstChannel.close();\n        log.debug(\"copyLocalFileAsTempFileInExternallyAccessableDir returning: \" + f.getAbsolutePath());\n        return f;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12506616",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private InputStream fetch(String urlString) throws MalformedURLException, IOException {\n        DefaultHttpClient httpClient = new DefaultHttpClient();\n        HttpGet request = new HttpGet(urlString);\n        HttpResponse response = httpClient.execute(request);\n        return response.getEntity().getContent();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01251219",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "static String getMD5Hash(String str) throws NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(str.getBytes());\n        byte[] b = md.digest();\n        StringBuffer sb = new StringBuffer();\n        for (int i = 0; i < b.length; i++) {\n            int v = (int) b[i];\n            v = v < 0 ? 0x100 + v : v;\n            String cc = Integer.toHexString(v);\n            if (cc.length() == 1) sb.append('0');\n            sb.append(cc);\n        }\n        return sb.toString();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12512647",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void process(HttpServletRequest request, HttpServletResponse response) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n    public void process(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        String userAgentGroup = processUserAgent(request);\n        final LiwenxRequest lRequest = new LiwenxRequestImpl(request, response, messageSource, userAgentGroup);\n        Locator loc = router.route(lRequest);\n        if (loc instanceof RedirectLocator) {\n            response.sendRedirect(((RedirectLocator) loc).getPage());\n        } else {\n            ((AbstractLiwenxRequest) lRequest).setRequestedLocator(loc);\n            try {\n                LiwenxResponse resp = processPage(lRequest, lRequest.getRequestedLocator(), maxRedirections);\n                processHeaders(resp, response);\n                processCookies(resp, response);\n                if (resp instanceof ExternalRedirectionResponse) {\n                    response.sendRedirect(((ExternalRedirectionResponse) resp).getRedirectTo());\n                } else if (resp instanceof BinaryResponse) {\n                    BinaryResponse bResp = (BinaryResponse) resp;\n                    response.setContentType(bResp.getMimeType().toString());\n                    IOUtils.copy(bResp.getInputStream(), response.getOutputStream());\n                } else if (resp instanceof XmlResponse) {\n                    final Element root = ((XmlResponse) resp).getXml();\n                    Document doc = root.getDocument();\n                    if (doc == null) {\n                        doc = new Document(root);\n                    }\n                    final Locator l = lRequest.getCurrentLocator();\n                    final Device device = l.getDevice();\n                    response.setContentType(calculateContentType(device));\n                    response.setCharacterEncoding(encoding);\n                    if (device == Device.HTML) {\n                        view.processView(doc, l.getLocale(), userAgentGroup, response.getWriter());\n                    } else {\n                        Serializer s = new Serializer(response.getOutputStream(), encoding);\n                        s.write(doc);\n                    }\n                }\n            } catch (PageNotFoundException e) {\n                response.sendError(HttpServletResponse.SC_NOT_FOUND);\n            } catch (TooManyRedirectionsException e) {\n                throw e;\n            } catch (Exception e) {\n                throw e;\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12516574",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static Image getImage(URL url) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static Image getImage(URL url) throws IOException {\n        InputStream is = null;\n        try {\n            is = url.openStream();\n            Image img = getImage(is);\n            img.setUrl(url);\n            return img;\n        } finally {\n            if (is != null) {\n                is.close();\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12523607",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void render(ServiceContext serviceContext) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void render(ServiceContext serviceContext) throws Exception {\n        if (serviceContext.getTemplateName() == null) throw new Exception(\"no Template defined for service: \" + serviceContext.getServiceInfo().getRefName());\n        File f = new File(serviceContext.getTemplateName());\n        serviceContext.getResponse().setContentLength((int) f.length());\n        InputStream in = new FileInputStream(f);\n        IOUtils.copy(in, serviceContext.getResponse().getOutputStream(), 0, (int) f.length());\n        in.close();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12524253",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic DialogSongList(JFrame frame) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public DialogSongList(JFrame frame) {\n        super(frame, \"Menu_SongList\", \"songList\");\n        setMinimumSize(new Dimension(400, 200));\n        JPanel panel, spanel;\n        Container contentPane;\n        (contentPane = getContentPane()).add(songSelector = new SongSelector(configKey, null, true));\n        songSelector.setSelectionAction(new Runnable() {\n\n            public void run() {\n                final Item<URL, MidiFileInfo> item = songSelector.getSelectedInfo();\n                if (item != null) {\n                    try {\n                        selection = new File(item.getKey().toURI());\n                        author.setEnabled(true);\n                        title.setEnabled(true);\n                        difficulty.setEnabled(true);\n                        save.setEnabled(true);\n                        final MidiFileInfo info = item.getValue();\n                        author.setText(info.getAuthor());\n                        title.setText(info.getTitle());\n                        Util.selectKey(difficulty, info.getDifficulty());\n                        return;\n                    } catch (Exception e) {\n                    }\n                }\n                selection = null;\n                author.setEnabled(false);\n                title.setEnabled(false);\n                difficulty.setEnabled(false);\n                save.setEnabled(false);\n            }\n        });\n        contentPane.add(panel = new JPanel(), BorderLayout.SOUTH);\n        panel.setLayout(new BorderLayout());\n        JScrollPane scrollPane;\n        panel.add(scrollPane = new JScrollPane(spanel = new JPanel()), BorderLayout.NORTH);\n        scrollPane.setPreferredSize(new Dimension(0, 60));\n        Util.addLabeledComponent(spanel, \"Lbl_Author\", author = new JTextField(10));\n        Util.addLabeledComponent(spanel, \"Lbl_Title\", title = new JTextField(14));\n        Util.addLabeledComponent(spanel, \"Lbl_Difficulty\", difficulty = new JComboBox());\n        difficulty.addItem(new Item<Byte, String>((byte) -1, \"\"));\n        for (Map.Entry<Byte, String> entry : SongSelector.DIFFICULTIES.entrySet()) {\n            final String value = entry.getValue();\n            difficulty.addItem(new Item<Byte, String>(entry.getKey(), Util.getMsg(value, value), value));\n        }\n        spanel.add(save = new JButton());\n        Util.updateButtonText(save, \"Save\");\n        save.addActionListener(new ActionListener() {\n\n            public void actionPerformed(ActionEvent e) {\n                final File selected = MidiSong.setMidiFileInfo(selection, author.getText(), title.getText(), getAsByte(difficulty));\n                SongSelector.refresh();\n                try {\n                    songSelector.setSelected(selected == null ? null : selected.toURI().toURL());\n                } catch (MalformedURLException ex) {\n                }\n            }\n        });\n        author.setEnabled(false);\n        title.setEnabled(false);\n        difficulty.setEnabled(false);\n        save.setEnabled(false);\n        JButton button;\n        panel.add(spanel = new JPanel(), BorderLayout.WEST);\n        spanel.add(button = new JButton());\n        Util.updateButtonText(button, \"Import\");\n        button.addActionListener(new ActionListener() {\n\n            public void actionPerformed(ActionEvent e) {\n                final File inputFile = KeyboardHero.midiFile();\n                try {\n                    if (inputFile == null) return;\n                    final File dir = (new File(Util.DATA_FOLDER + MidiSong.MIDI_FILES_DIR));\n                    if (dir.exists()) {\n                        if (!dir.isDirectory()) {\n                            Util.error(Util.getMsg(\"Err_MidiFilesDirNotDirectory\"), dir.getParent());\n                            return;\n                        }\n                    } else if (!dir.mkdirs()) {\n                        Util.error(Util.getMsg(\"Err_CouldntMkDir\"), dir.getParent());\n                        return;\n                    }\n                    File outputFile = new File(dir.getPath() + File.separator + inputFile.getName());\n                    if (!outputFile.exists() || KeyboardHero.confirm(\"Que_FileExistsOverwrite\")) {\n                        final FileChannel inChannel = new FileInputStream(inputFile).getChannel();\n                        inChannel.transferTo(0, inChannel.size(), new FileOutputStream(outputFile).getChannel());\n                    }\n                } catch (Exception ex) {\n                    Util.getMsg(Util.getMsg(\"Err_CouldntImportSong\"), ex.toString());\n                }\n                SongSelector.refresh();\n            }\n        });\n        spanel.add(button = new JButton());\n        Util.updateButtonText(button, \"Delete\");\n        button.addActionListener(new ActionListener() {\n\n            public void actionPerformed(ActionEvent e) {\n                if (KeyboardHero.confirm(Util.getMsg(\"Que_SureToDelete\"))) {\n                    try {\n                        new File(songSelector.getSelectedFile().toURI()).delete();\n                    } catch (Exception ex) {\n                        Util.error(Util.getMsg(\"Err_CouldntDeleteFile\"), ex.toString());\n                    }\n                    SongSelector.refresh();\n                }\n            }\n        });\n        panel.add(spanel = new JPanel(), BorderLayout.CENTER);\n        spanel.setLayout(new FlowLayout());\n        spanel.add(button = new JButton());\n        Util.updateButtonText(button, \"Close\");\n        button.addActionListener(new ActionListener() {\n\n            public void actionPerformed(ActionEvent e) {\n                close();\n            }\n        });\n        spanel.add(button = new JButton());\n        Util.updateButtonText(button, \"Play\");\n        button.addActionListener(new ActionListener() {\n\n            public void actionPerformed(ActionEvent e) {\n                Game.newGame(songSelector.getSelectedFile());\n                close();\n            }\n        });\n        panel.add(spanel = new JPanel(), BorderLayout.EAST);\n        spanel.add(button = new JButton());\n        Util.updateButtonText(button, \"Refresh\");\n        button.addActionListener(new ActionListener() {\n\n            public void actionPerformed(ActionEvent e) {\n                SongSelector.refresh();\n            }\n        });\n        getRootPane().setDefaultButton(button);\n        instance = this;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12524256",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void actionPerformed(ActionEvent e) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void actionPerformed(ActionEvent e) {\n                final File inputFile = KeyboardHero.midiFile();\n                try {\n                    if (inputFile == null) return;\n                    final File dir = (new File(Util.DATA_FOLDER + MidiSong.MIDI_FILES_DIR));\n                    if (dir.exists()) {\n                        if (!dir.isDirectory()) {\n                            Util.error(Util.getMsg(\"Err_MidiFilesDirNotDirectory\"), dir.getParent());\n                            return;\n                        }\n                    } else if (!dir.mkdirs()) {\n                        Util.error(Util.getMsg(\"Err_CouldntMkDir\"), dir.getParent());\n                        return;\n                    }\n                    File outputFile = new File(dir.getPath() + File.separator + inputFile.getName());\n                    if (!outputFile.exists() || KeyboardHero.confirm(\"Que_FileExistsOverwrite\")) {\n                        final FileChannel inChannel = new FileInputStream(inputFile).getChannel();\n                        inChannel.transferTo(0, inChannel.size(), new FileOutputStream(outputFile).getChannel());\n                    }\n                } catch (Exception ex) {\n                    Util.getMsg(Util.getMsg(\"Err_CouldntImportSong\"), ex.toString());\n                }\n                SongSelector.refresh();\n            }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12524506",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copyFile(File in, File outDir) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copyFile(File in, File outDir) throws IOException {\n        FileChannel sourceChannel = null;\n        FileChannel destinationChannel = null;\n        try {\n            sourceChannel = new FileInputStream(in).getChannel();\n            File out = new File(outDir, in.getName());\n            destinationChannel = new FileOutputStream(out).getChannel();\n            sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\n        } finally {\n            try {\n                if (sourceChannel != null) {\n                    sourceChannel.close();\n                }\n            } finally {\n                if (destinationChannel != null) {\n                    destinationChannel.close();\n                }\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12528437",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void main(String[] args) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void main(String[] args) throws Exception {\n        SocketConnector socketConnector = new SocketConnector();\n        socketConnector.setPort(6080);\n        SslSocketConnector sslSocketConnector = new SslSocketConnector();\n        sslSocketConnector.setPort(6443);\n        String serverKeystore = MockHttpListenerWithAuthentication.class.getClassLoader().getResource(\"cert/serverkeystore.jks\").getPath();\n        sslSocketConnector.setKeystore(serverKeystore);\n        sslSocketConnector.setKeyPassword(\"serverpass\");\n        String serverTruststore = MockHttpListenerWithAuthentication.class.getClassLoader().getResource(\"cert/servertruststore.jks\").getPath();\n        sslSocketConnector.setTruststore(serverTruststore);\n        sslSocketConnector.setTrustPassword(\"serverpass\");\n        server.addConnector(socketConnector);\n        server.addConnector(sslSocketConnector);\n        SecurityHandler securityHandler = createBasicAuthenticationSecurityHandler();\n        HandlerList handlerList = new HandlerList();\n        handlerList.addHandler(securityHandler);\n        handlerList.addHandler(new AbstractHandler() {\n\n            @Override\n            public void handle(String s, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, int i) throws IOException, ServletException {\n                System.out.println(\"uri: \" + httpServletRequest.getRequestURI());\n                System.out.println(\"queryString: \" + httpServletRequest.getQueryString());\n                System.out.println(\"method: \" + httpServletRequest.getMethod());\n                ByteArrayOutputStream baos = new ByteArrayOutputStream();\n                IOUtils.copy(httpServletRequest.getInputStream(), baos);\n                System.out.println(\"body: \" + baos.toString());\n                PrintWriter writer = httpServletResponse.getWriter();\n                writer.append(\"testsvar\");\n                Random r = new Random();\n                for (int j = 0; j < 10; j++) {\n                    int value = r.nextInt(Integer.MAX_VALUE);\n                    writer.append(value + \"\");\n                }\n                System.out.println();\n                writer.close();\n                httpServletResponse.setStatus(HttpServletResponse.SC_OK);\n            }\n        });\n        server.addHandler(handlerList);\n        server.start();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12528438",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void handle(String s, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, int i) throws IOException, ServletException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n            public void handle(String s, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, int i) throws IOException, ServletException {\n                System.out.println(\"uri: \" + httpServletRequest.getRequestURI());\n                System.out.println(\"queryString: \" + httpServletRequest.getQueryString());\n                System.out.println(\"method: \" + httpServletRequest.getMethod());\n                ByteArrayOutputStream baos = new ByteArrayOutputStream();\n                IOUtils.copy(httpServletRequest.getInputStream(), baos);\n                System.out.println(\"body: \" + baos.toString());\n                PrintWriter writer = httpServletResponse.getWriter();\n                writer.append(\"testsvar\");\n                Random r = new Random();\n                for (int j = 0; j < 10; j++) {\n                    int value = r.nextInt(Integer.MAX_VALUE);\n                    writer.append(value + \"\");\n                }\n                System.out.println();\n                writer.close();\n                httpServletResponse.setStatus(HttpServletResponse.SC_OK);\n            }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12530708",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private int mergeFiles(Merge merge) throws MojoExecutionException {\n        String encoding = DEFAULT_ENCODING;\n        if (merge.getEncoding() != null && merge.getEncoding().length() > 0) {\n            encoding = merge.getEncoding();\n        }\n        int numMergedFiles = 0;\n        Writer ostream = null;\n        FileOutputStream fos = null;\n        try {\n            fos = new FileOutputStream(merge.getTargetFile(), true);\n            ostream = new OutputStreamWriter(fos, encoding);\n            BufferedWriter output = new BufferedWriter(ostream);\n            for (String orderingName : this.orderingNames) {\n                List<File> files = this.orderedFiles.get(orderingName);\n                if (files != null) {\n                    getLog().info(\"Appending: \" + files.size() + \" files that matched the name: \" + orderingName + \" to the target file: \" + merge.getTargetFile().getAbsolutePath() + \"...\");\n                    for (File file : files) {\n                        String fileName = file.getName();\n                        getLog().info(\"Appending file: \" + fileName + \" to the target file: \" + merge.getTargetFile().getAbsolutePath() + \"...\");\n                        InputStream input = null;\n                        try {\n                            input = new FileInputStream(file);\n                            if (merge.getSeparator() != null && merge.getSeparator().trim().length() > 0) {\n                                String replaced = merge.getSeparator().trim();\n                                replaced = replaced.replace(\"\\n\", \"\");\n                                replaced = replaced.replace(\"\\t\", \"\");\n                                replaced = replaced.replace(\"#{file.name}\", fileName);\n                                replaced = replaced.replace(\"#{parent.name}\", file.getParentFile() != null ? file.getParentFile().getName() : \"\");\n                                replaced = replaced.replace(\"\\\\n\", \"\\n\");\n                                replaced = replaced.replace(\"\\\\t\", \"\\t\");\n                                getLog().debug(\"Appending separator: \" + replaced);\n                                IOUtils.copy(new StringReader(replaced), output);\n                            }\n                            IOUtils.copy(input, output, encoding);\n                        } catch (IOException ioe) {\n                            throw new MojoExecutionException(\"Failed to append file: \" + fileName + \" to output file\", ioe);\n                        } finally {\n                            IOUtils.closeQuietly(input);\n                        }\n                        numMergedFiles++;\n                    }\n                }\n            }\n            output.flush();\n        } catch (IOException ioe) {\n            throw new MojoExecutionException(\"Failed to open stream file to output file: \" + merge.getTargetFile().getAbsolutePath(), ioe);\n        } finally {\n            if (fos != null) {\n                IOUtils.closeQuietly(fos);\n            }\n            if (ostream != null) {\n                IOUtils.closeQuietly(ostream);\n            }\n        }\n        return numMergedFiles;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12537270",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic Vector parse(String link) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public Vector parse(String link) {\n        addMessage(\"Parsing: \" + link);\n        links.removeAllElements();\n        URLConnection conn = null;\n        Reader rd = null;\n        EditorKit kit = new HTMLEditorKit();\n        Document doc = kit.createDefaultDocument();\n        doc.putProperty(\"IgnoreCharsetDirective\", Boolean.TRUE);\n        URL url = null;\n        try {\n            url = new URL(link);\n        } catch (MalformedURLException err) {\n            System.out.println(\"Malformed URL\");\n            return links;\n        }\n        try {\n            conn = new URL(link).openConnection();\n            rd = new InputStreamReader(conn.getInputStream());\n        } catch (Exception err) {\n            err.printStackTrace();\n            return links;\n        }\n        try {\n            kit.read(rd, doc, 0);\n            ElementIterator it = new ElementIterator(doc);\n            javax.swing.text.Element elem;\n            while ((elem = it.next()) != null) {\n                SimpleAttributeSet s = (SimpleAttributeSet) elem.getAttributes().getAttribute(HTML.Tag.A);\n                if (s != null) {\n                    if (s.toString().indexOf(\"script\") >= 0) continue;\n                    String lnk = \"\";\n                    try {\n                        lnk = s.getAttribute(HTML.Attribute.HREF).toString();\n                    } catch (Exception err) {\n                        continue;\n                    }\n                    int j = 0;\n                    if ((j = lnk.indexOf('#')) >= 0) lnk = lnk.substring(0, j);\n                    URL urlLink = new URL(url, lnk);\n                    if (!url.getHost().equals(urlLink.getHost())) continue;\n                    String str = urlLink.toString();\n                    if (!str.startsWith(\"http\")) continue;\n                    if (str.endsWith(\".pdf\")) {\n                        continue;\n                    }\n                    for (int i = 0; i < leaveSuffix.length; i++) {\n                        if ((str.endsWith(leaveSuffix[i]))) continue;\n                    }\n                    boolean skip = false;\n                    for (int i = 0; i < suffix.length; i++) {\n                        if ((str.endsWith(suffix[i]))) skip = true;\n                    }\n                    if (!skip) {\n                        try {\n                            conn = urlLink.openConnection();\n                        } catch (Exception err) {\n                        }\n                        String contentType = null;\n                        if (contentType == null) contentType = conn.getContentType();\n                        if (contentType.equals(\"application/pdf\")) {\n                            continue;\n                        } else if (!contentType.equals(\"text/html\")) {\n                            continue;\n                        }\n                    }\n                    if (!links.contains(urlLink.toString())) {\n                        links.addElement(urlLink.toString());\n                    }\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return links;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12539808",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void jsFunction_extract(ScriptableFile outputFile) throws IOException, FileSystemException, ArchiveException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void jsFunction_extract(ScriptableFile outputFile) throws IOException, FileSystemException, ArchiveException {\n        InputStream is = file.jsFunction_createInputStream();\n        OutputStream output = outputFile.jsFunction_createOutputStream();\n        BufferedInputStream buf = new BufferedInputStream(is);\n        ArchiveInputStream input = ScriptableZipArchive.getFactory().createArchiveInputStream(buf);\n        try {\n            long count = 0;\n            while (input.getNextEntry() != null) {\n                if (count == offset) {\n                    IOUtils.copy(input, output);\n                    break;\n                }\n                count++;\n            }\n        } finally {\n            input.close();\n            output.close();\n            is.close();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12542684",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic ServiceAdapterIfc deploy(String session, String name, byte jarBytes[], String jarName, String serviceClass, String serviceInterface) throws RemoteException, MalformedURLException, StartServiceException, SessionException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public ServiceAdapterIfc deploy(String session, String name, byte jarBytes[], String jarName, String serviceClass, String serviceInterface) throws RemoteException, MalformedURLException, StartServiceException, SessionException {\n        try {\n            File jarFile = new File(jarName);\n            jarName = jarFile.getName();\n            String jarName2 = jarName;\n            jarFile = new File(jarName2);\n            int n = 0;\n            while (jarFile.exists()) {\n                jarName2 = jarName + n++;\n                jarFile = new File(jarName2);\n            }\n            FileOutputStream fos = new FileOutputStream(jarName2);\n            IOUtils.copy(new ByteArrayInputStream(jarBytes), fos);\n            SCClassLoader cl = new SCClassLoader(new URL[] { new URL(\"file://\" + jarFile.getAbsolutePath()) }, getMasterNode().getSCClassLoaderCounter());\n            return startService(session, name, serviceClass, serviceInterface, cl);\n        } catch (SessionException e) {\n            throw e;\n        } catch (Exception e) {\n            throw new StartServiceException(\"Could not deploy service: \" + e.getMessage(), e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12542686",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static Object deployNewService(String scNodeRmiName, String userName, String password, String name, String jarName, String serviceClass, String serviceInterface, Logger log) throws RemoteException, MalformedURLException, StartServiceException, NotBoundException, IllegalArgumentException, SecurityException, InstantiationException, IllegalAccessException, InvocationTargetException, SessionException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static Object deployNewService(String scNodeRmiName, String userName, String password, String name, String jarName, String serviceClass, String serviceInterface, Logger log) throws RemoteException, MalformedURLException, StartServiceException, NotBoundException, IllegalArgumentException, SecurityException, InstantiationException, IllegalAccessException, InvocationTargetException, SessionException {\n        try {\n            SCNodeInterface node = (SCNodeInterface) Naming.lookup(scNodeRmiName);\n            String session = node.login(userName, password);\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            IOUtils.copy(new FileInputStream(jarName), baos);\n            ServiceAdapterIfc adapter = node.deploy(session, name, baos.toByteArray(), jarName, serviceClass, serviceInterface);\n            if (adapter != null) {\n                return new ExternalDomain(node, adapter, adapter.getUri(), log).getProxy(Thread.currentThread().getContextClassLoader());\n            }\n        } catch (Exception e) {\n            log.warn(\"Could not send deploy command: \" + e.getMessage(), e);\n        }\n        return null;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12543783",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private boolean copy(File in, File out) {\n        try {\n            FileInputStream fis = new FileInputStream(in);\n            FileOutputStream fos = new FileOutputStream(out);\n            FileChannel readableChannel = fis.getChannel();\n            FileChannel writableChannel = fos.getChannel();\n            writableChannel.truncate(0);\n            writableChannel.transferFrom(readableChannel, 0, readableChannel.size());\n            fis.close();\n            fos.close();\n            return true;\n        } catch (IOException ioe) {\n            System.out.println(\"Copy Error: IOException during copy\\r\\n\" + ioe.getMessage());\n            return false;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12544033",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private File Gzip(File f) throws IOException {\n        if (f == null || !f.exists()) return null;\n        File dest_dir = f.getParentFile();\n        String dest_filename = f.getName() + \".gz\";\n        File zipfile = new File(dest_dir, dest_filename);\n        GZIPOutputStream out = new GZIPOutputStream(new FileOutputStream(zipfile));\n        FileInputStream in = new FileInputStream(f);\n        byte buf[] = new byte[1024];\n        int len;\n        while ((len = in.read(buf)) > 0) out.write(buf, 0, len);\n        out.finish();\n        try {\n            in.close();\n        } catch (Exception e) {\n        }\n        try {\n            out.close();\n        } catch (Exception e) {\n        }\n        try {\n            f.delete();\n        } catch (Exception e) {\n        }\n        return zipfile;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12544564",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void getResponseAsStream(String _url, Object _stringOrStream, OutputStream _stream, Map _headers, Map _params, String _contentType, int _timeout) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void getResponseAsStream(String _url, Object _stringOrStream, OutputStream _stream, Map _headers, Map _params, String _contentType, int _timeout) throws IOException {\n        if (_url == null || _url.length() <= 0) throw new IllegalArgumentException(\"Url can not be null.\");\n        String temp = _url.toLowerCase();\n        if (!temp.startsWith(\"http://\") && !temp.startsWith(\"https://\")) _url = \"http://\" + _url;\n        HttpMethod method = null;\n        if (_stringOrStream == null && (_params == null || _params.size() <= 0)) method = new GetMethod(_url); else method = new PostMethod(_url);\n        HttpMethodParams params = ((HttpMethodBase) method).getParams();\n        if (params == null) {\n            params = new HttpMethodParams();\n            ((HttpMethodBase) method).setParams(params);\n        }\n        if (_timeout < 0) params.setSoTimeout(0); else params.setSoTimeout(_timeout);\n        if (_contentType != null && _contentType.length() > 0) {\n            if (_headers == null) _headers = new HashMap();\n            _headers.put(\"Content-Type\", _contentType);\n        }\n        if (_headers != null) {\n            Iterator iter = _headers.entrySet().iterator();\n            while (iter.hasNext()) {\n                Map.Entry entry = (Map.Entry) iter.next();\n                method.setRequestHeader((String) entry.getKey(), (String) entry.getValue());\n            }\n        }\n        if (method instanceof PostMethod && (_params != null && _params.size() > 0)) {\n            Iterator iter = _params.entrySet().iterator();\n            while (iter.hasNext()) {\n                Map.Entry entry = (Map.Entry) iter.next();\n                ((PostMethod) method).addParameter((String) entry.getKey(), (String) entry.getValue());\n            }\n        }\n        if (method instanceof EntityEnclosingMethod && _stringOrStream != null) {\n            if (_stringOrStream instanceof InputStream) {\n                RequestEntity entity = new InputStreamRequestEntity((InputStream) _stringOrStream);\n                ((EntityEnclosingMethod) method).setRequestEntity(entity);\n            } else {\n                RequestEntity entity = new StringRequestEntity(_stringOrStream.toString(), _contentType, null);\n                ((EntityEnclosingMethod) method).setRequestEntity(entity);\n            }\n        }\n        HttpClient httpClient = new HttpClient(new org.apache.commons.httpclient.SimpleHttpConnectionManager());\n        try {\n            int status = httpClient.executeMethod(method);\n            if (status != HttpStatus.SC_OK) {\n                if (status >= 500 && status < 600) throw new IOException(\"Remote service<\" + _url + \"> respose a error, status:\" + status);\n            }\n            InputStream instream = method.getResponseBodyAsStream();\n            IOUtils.copy(instream, _stream);\n            instream.close();\n        } catch (IOException err) {\n            throw err;\n        } finally {\n            if (method != null) method.releaseConnection();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12553787",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String getHash(String plaintext) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String getHash(String plaintext) {\n        String hash = null;\n        try {\n            String text = plaintext;\n            MessageDigest md = null;\n            try {\n                md = MessageDigest.getInstance(\"SHA-256\");\n                md.update(text.getBytes(\"UTF-8\"));\n                byte[] rawBytes = md.digest();\n                hash = new BASE64Encoder().encode(rawBytes);\n            } catch (NoSuchAlgorithmException e) {\n            }\n        } catch (IOException e) {\n        }\n        return hash;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12555621",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic String md5(Value request) throws FaultException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public String md5(Value request) throws FaultException {\n        MessageDigest md = null;\n        try {\n            md = MessageDigest.getInstance(\"MD5\");\n            md.update(request.strValue().getBytes(\"UTF8\"));\n        } catch (UnsupportedEncodingException e) {\n            throw new FaultException(\"UnsupportedOperation\", e);\n        } catch (NoSuchAlgorithmException e) {\n            throw new FaultException(\"UnsupportedOperation\", e);\n        }\n        int radix;\n        if ((radix = request.getFirstChild(\"radix\").intValue()) < 2) {\n            radix = 16;\n        }\n        return new BigInteger(1, md.digest()).toString(radix);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12561424",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private boolean copyFile(File file) throws Exception {\n        destination = new File(ServiceLocator.getSqliteDir(), file.getName());\n        logger.debug(\"Writing to: \" + destination);\n        if (destination.exists()) {\n            Frame.showMessage(ServiceLocator.getText(\"Error.file.exists\") + file.getName(), null);\n            logger.debug(\"File already exists: \" + file);\n            return false;\n        }\n        destination.createNewFile();\n        InputStream in = null;\n        OutputStream out = null;\n        try {\n            in = new FileInputStream(file);\n            out = new FileOutputStream(destination);\n            int read = 0;\n            byte[] buffer = new byte[2048];\n            while ((read = in.read(buffer)) > 0) {\n                out.write(buffer, 0, read);\n            }\n        } finally {\n            if (in != null) in.close();\n            if (out != null) out.close();\n        }\n        return true;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12561704",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void bubbleSort(int[] mas) {\n        boolean t = true;\n        while (t) {\n            t = false;\n            for (int i = 0; i < mas.length - 1; i++) {\n                if (mas[i] > mas[i + 1]) {\n                    int temp = mas[i];\n                    mas[i] = mas[i + 1];\n                    mas[i + 1] = temp;\n                    t = true;\n                }\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12568442",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String MD5(String text) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String MD5(String text) {\n        byte[] md5hash = new byte[32];\n        try {\n            MessageDigest md;\n            md = MessageDigest.getInstance(\"MD5\");\n            md.update(text.getBytes(\"iso-8859-1\"), 0, text.length());\n            md5hash = md.digest();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return convertToHex(md5hash);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12571472",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static ParsedXML parseXML(URL url) throws ParseException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static ParsedXML parseXML(URL url) throws ParseException {\n        try {\n            InputStream is = url.openStream();\n            ParsedXML px = parseXML(is);\n            is.close();\n            return px;\n        } catch (IOException e) {\n            throw new ParseException(\"could not read from URL\" + url.toString());\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01257543",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private String getTextResponse(String address) throws Exception {\n        URL url = new URL(address);\n        HttpURLConnection con = (HttpURLConnection) url.openConnection();\n        con.setUseCaches(false);\n        BufferedReader in = null;\n        try {\n            con.connect();\n            assertEquals(HttpURLConnection.HTTP_OK, con.getResponseCode());\n            in = new BufferedReader(new InputStreamReader(con.getInputStream()));\n            StringBuilder builder = new StringBuilder();\n            String inputLine = null;\n            while ((inputLine = in.readLine()) != null) {\n                builder.append(inputLine);\n            }\n            return builder.toString();\n        } finally {\n            if (in != null) {\n                in.close();\n            }\n            con.disconnect();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12575599",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void processSource() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n    public void processSource() {\n        try {\n            URL url = new URL(this.mensa.getJsonUrl(weekNumber));\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n            StringBuilder agentBuilder = new StringBuilder();\n            agentBuilder.append(cxt.getString(R.string.app_name)).append(' ').append(cxt.getString(R.string.app_version)).append('|').append(Build.DISPLAY).append('|').append(VERSION.RELEASE).append('|').append(Build.ID).append('|').append(Build.MODEL).append('|').append(Locale.getDefault().getLanguage()).append('-').append(Locale.getDefault().getCountry());\n            connection.setRequestProperty(\"User-Agent\", agentBuilder.toString());\n            InputStream inStream = connection.getInputStream();\n            String response = getStringFromInputStream(inStream);\n            JSONObject weekplanJsonObj = new JSONObject(response);\n            this.menues = parseWeekplan(weekplanJsonObj);\n            this.valuability = WeekPlan.VALUABLE;\n        } catch (IOException ex) {\n            this.valuability = WeekPlan.NOCON;\n            this.menues = null;\n        } catch (JSONException ex) {\n            this.valuability = WeekPlan.ERROR;\n            this.menues = null;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12576210",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static FTPClient createConnection(String hostname, int port, char[] username, char[] password, String workingDirectory, FileSystemOptions fileSystemOptions) throws FileSystemException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static FTPClient createConnection(String hostname, int port, char[] username, char[] password, String workingDirectory, FileSystemOptions fileSystemOptions) throws FileSystemException {\n        if (username == null) username = \"anonymous\".toCharArray();\n        if (password == null) password = \"anonymous\".toCharArray();\n        try {\n            final FTPClient client = new FTPClient();\n            String key = FtpFileSystemConfigBuilder.getInstance().getEntryParser(fileSystemOptions);\n            if (key != null) {\n                FTPClientConfig config = new FTPClientConfig(key);\n                String serverLanguageCode = FtpFileSystemConfigBuilder.getInstance().getServerLanguageCode(fileSystemOptions);\n                if (serverLanguageCode != null) config.setServerLanguageCode(serverLanguageCode);\n                String defaultDateFormat = FtpFileSystemConfigBuilder.getInstance().getDefaultDateFormat(fileSystemOptions);\n                if (defaultDateFormat != null) config.setDefaultDateFormatStr(defaultDateFormat);\n                String recentDateFormat = FtpFileSystemConfigBuilder.getInstance().getRecentDateFormat(fileSystemOptions);\n                if (recentDateFormat != null) config.setRecentDateFormatStr(recentDateFormat);\n                String serverTimeZoneId = FtpFileSystemConfigBuilder.getInstance().getServerTimeZoneId(fileSystemOptions);\n                if (serverTimeZoneId != null) config.setServerTimeZoneId(serverTimeZoneId);\n                String[] shortMonthNames = FtpFileSystemConfigBuilder.getInstance().getShortMonthNames(fileSystemOptions);\n                if (shortMonthNames != null) {\n                    StringBuffer shortMonthNamesStr = new StringBuffer(40);\n                    for (int i = 0; i < shortMonthNames.length; i++) {\n                        if (shortMonthNamesStr.length() > 0) shortMonthNamesStr.append(\"|\");\n                        shortMonthNamesStr.append(shortMonthNames[i]);\n                    }\n                    config.setShortMonthNames(shortMonthNamesStr.toString());\n                }\n                client.configure(config);\n            }\n            FTPFileEntryParserFactory myFactory = FtpFileSystemConfigBuilder.getInstance().getEntryParserFactory(fileSystemOptions);\n            if (myFactory != null) client.setParserFactory(myFactory);\n            try {\n                client.connect(hostname, port);\n                int reply = client.getReplyCode();\n                if (!FTPReply.isPositiveCompletion(reply)) throw new FileSystemException(\"vfs.provider.ftp/connect-rejected.error\", hostname);\n                if (!client.login(UserAuthenticatorUtils.toString(username), UserAuthenticatorUtils.toString(password))) throw new FileSystemException(\"vfs.provider.ftp/login.error\", new Object[] { hostname, UserAuthenticatorUtils.toString(username) }, null);\n                if (!client.setFileType(FTP.BINARY_FILE_TYPE)) throw new FileSystemException(\"vfs.provider.ftp/set-binary.error\", hostname);\n                Integer dataTimeout = FtpFileSystemConfigBuilder.getInstance().getDataTimeout(fileSystemOptions);\n                if (dataTimeout != null) client.setDataTimeout(dataTimeout.intValue());\n                try {\n                    FtpFileSystemConfigBuilder.getInstance().setHomeDir(fileSystemOptions, client.printWorkingDirectory());\n                } catch (IOException ex) {\n                    throw new FileSystemException(\"Error obtaining working directory!\");\n                }\n                Boolean userDirIsRoot = FtpFileSystemConfigBuilder.getInstance().getUserDirIsRoot(fileSystemOptions);\n                if (workingDirectory != null && (userDirIsRoot == null || !userDirIsRoot.booleanValue())) if (!client.changeWorkingDirectory(workingDirectory)) throw new FileSystemException(\"vfs.provider.ftp/change-work-directory.error\", workingDirectory);\n                Boolean passiveMode = FtpFileSystemConfigBuilder.getInstance().getPassiveMode(fileSystemOptions);\n                if (passiveMode != null && passiveMode.booleanValue()) client.enterLocalPassiveMode();\n            } catch (final IOException e) {\n                if (client.isConnected()) client.disconnect();\n                throw e;\n            }\n            return client;\n        } catch (final Exception exc) {\n            throw new FileSystemException(\"vfs.provider.ftp/connect.error\", new Object[] { hostname }, exc);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12577306",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        String url = \"http://jdkcn.com/checkUpdateNew.jsp?ver=\" + blogFacade.getDatabaseSiteConfig().getAppVersion();\n        response.setCharacterEncoding(\"UTF-8\");\n        URLConnection connection = new URL(url).openConnection();\n        BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream(), \"UTF-8\"));\n        StringBuilder sb = new StringBuilder();\n        String line = reader.readLine();\n        while (line != null) {\n            sb.append(line).append(\"\\r\\n\");\n            line = reader.readLine();\n        }\n        response.getWriter().println(sb.toString());\n        return null;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12577673",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void performOk(final IProject project, final TomcatPropertyPage page) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void performOk(final IProject project, final TomcatPropertyPage page) {\n            page.setPropertyValue(\"tomcat.jdbc.driver\", c_drivers.getText());\n            page.setPropertyValue(\"tomcat.jdbc.url\", url.getText());\n            page.setPropertyValue(\"tomcat.jdbc.user\", username.getText());\n            page.setPropertyValue(\"tomcat.jdbc.password\", password.getText());\n            File lib = new File(page.tomcatHome.getText(), \"lib\");\n            if (!lib.exists()) {\n                lib = new File(new File(page.tomcatHome.getText(), \"common\"), \"lib\");\n                if (!lib.exists()) {\n                    Logger.log(Logger.ERROR, \"Not properly location of Tomcat Home at :: \" + lib);\n                    throw new IllegalStateException(\"Not properly location of Tomcat Home\");\n                }\n            }\n            final File conf = new File(page.tomcatHome.getText(), \"conf/Catalina/localhost\");\n            if (!conf.exists()) {\n                final boolean create = NexOpenUIActivator.getDefault().getTomcatConfProperty();\n                if (create) {\n                    if (Logger.getLog().isDebugEnabled()) {\n                        Logger.getLog().debug(\"Create directory \" + conf);\n                    }\n                    try {\n                        conf.mkdirs();\n                    } catch (final SecurityException se) {\n                        Logger.getLog().error(\"Retrieved a Security exception creating \" + conf, se);\n                        Logger.log(Logger.ERROR, \"Not created \" + conf + \" directory. Not enough privilegies. Message :: \" + se.getMessage());\n                    }\n                }\n            }\n            String str_driverLibrary = LIBRARIES.get(c_drivers.getText());\n            if (\"<mysql_driver>\".equals(str_driverLibrary)) {\n                str_driverLibrary = NexOpenUIActivator.getDefault().getMySQLDriver();\n            }\n            final File driverLibrary = new File(lib, str_driverLibrary);\n            if (!driverLibrary.exists()) {\n                InputStream driver = null;\n                FileOutputStream fos = null;\n                try {\n                    driver = AppServerPropertyPage.toInputStream(new Path(\"jdbc/\" + str_driverLibrary));\n                    fos = new FileOutputStream(driverLibrary);\n                    IOUtils.copy(driver, fos);\n                } catch (IOException e) {\n                    Logger.log(Logger.ERROR, \"Could not copy the driver jar file to Tomcat\", e);\n                } finally {\n                    try {\n                        if (driver != null) {\n                            driver.close();\n                            driver = null;\n                        }\n                        if (fos != null) {\n                            fos.flush();\n                            fos.close();\n                            fos = null;\n                        }\n                    } catch (IOException e) {\n                    }\n                }\n            }\n            page.processTomcatCfg(c_drivers.getText(), url.getText(), username.getText(), password.getText());\n        }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12577738",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic boolean check(Object credentials) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public boolean check(Object credentials) {\n            try {\n                byte[] digest = null;\n                if (credentials instanceof Password || credentials instanceof String) {\n                    synchronized (__TYPE) {\n                        if (__md == null) __md = MessageDigest.getInstance(\"MD5\");\n                        __md.reset();\n                        __md.update(credentials.toString().getBytes(StringUtil.__ISO_8859_1));\n                        digest = __md.digest();\n                    }\n                    if (digest == null || digest.length != _digest.length) return false;\n                    for (int i = 0; i < digest.length; i++) if (digest[i] != _digest[i]) return false;\n                    return true;\n                } else if (credentials instanceof MD5) {\n                    MD5 md5 = (MD5) credentials;\n                    if (_digest.length != md5._digest.length) return false;\n                    for (int i = 0; i < _digest.length; i++) if (_digest[i] != md5._digest[i]) return false;\n                    return true;\n                } else if (credentials instanceof Credential) {\n                    return ((Credential) credentials).check(this);\n                } else {\n                    log.warn(\"Can't check \" + credentials.getClass() + \" against MD5\");\n                    return false;\n                }\n            } catch (Exception e) {\n                log.warn(LogSupport.EXCEPTION, e);\n                return false;\n            }\n        }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12577739",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String digest(String password) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String digest(String password) {\n            try {\n                byte[] digest;\n                synchronized (__TYPE) {\n                    if (__md == null) {\n                        try {\n                            __md = MessageDigest.getInstance(\"MD5\");\n                        } catch (Exception e) {\n                            log.warn(LogSupport.EXCEPTION, e);\n                            return null;\n                        }\n                    }\n                    __md.reset();\n                    __md.update(password.getBytes(StringUtil.__ISO_8859_1));\n                    digest = __md.digest();\n                }\n                return __TYPE + TypeUtil.toString(digest, 16);\n            } catch (Exception e) {\n                log.warn(LogSupport.EXCEPTION, e);\n                return null;\n            }\n        }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_00012579",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic DataTable generateDataTable(Query query, HttpServletRequest request) throws DataSourceException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n    public DataTable generateDataTable(Query query, HttpServletRequest request) throws DataSourceException {\n        String url = request.getParameter(URL_PARAM_NAME);\n        if (StringUtils.isEmpty(url)) {\n            log.error(\"url parameter not provided.\");\n            throw new DataSourceException(ReasonType.INVALID_REQUEST, \"url parameter not provided\");\n        }\n        Reader reader;\n        try {\n            reader = new BufferedReader(new InputStreamReader(new URL(url).openStream()));\n        } catch (MalformedURLException e) {\n            log.error(\"url is malformed: \" + url);\n            throw new DataSourceException(ReasonType.INVALID_REQUEST, \"url is malformed: \" + url);\n        } catch (IOException e) {\n            log.error(\"Couldn't read from url: \" + url, e);\n            throw new DataSourceException(ReasonType.INVALID_REQUEST, \"Couldn't read from url: \" + url);\n        }\n        DataTable dataTable = null;\n        ULocale requestLocale = DataSourceHelper.getLocaleFromRequest(request);\n        try {\n            dataTable = CsvDataSourceHelper.read(reader, null, true, requestLocale);\n        } catch (IOException e) {\n            log.error(\"Couldn't read from url: \" + url, e);\n            throw new DataSourceException(ReasonType.INVALID_REQUEST, \"Couldn't read from url: \" + url);\n        }\n        return dataTable;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12579074",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static XMLConfigurator loadFromDefaultSystemProperty() throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static XMLConfigurator loadFromDefaultSystemProperty() throws IOException {\n        String urlStr = System.getProperty(DEFAULT_SYS_PROP_NAME);\n        if (urlStr == null || urlStr.length() == 0) {\n            return null;\n        }\n        InputStream in = null;\n        DOMRetriever xmlDoc = null;\n        try {\n            URL url = new URL(urlStr);\n            xmlDoc = new DOMRetriever(in = url.openStream());\n        } catch (MalformedURLException e) {\n            throw new RuntimeException(e);\n        } finally {\n            if (in != null) in.close();\n        }\n        return newInstance(xmlDoc);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12579075",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static XMLConfigurator loadFromSystemProperty(String propertyName) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static XMLConfigurator loadFromSystemProperty(String propertyName) throws IOException {\n        String urlStr = System.getProperty(propertyName);\n        if (urlStr == null || urlStr.length() == 0) {\n            return null;\n        }\n        InputStream in = null;\n        DOMRetriever xmlDoc = null;\n        try {\n            URL url = new URL(urlStr);\n            xmlDoc = new DOMRetriever(in = url.openStream());\n        } catch (MalformedURLException e) {\n            throw new RuntimeException(e);\n        } finally {\n            if (in != null) in.close();\n        }\n        return newInstance(xmlDoc);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12583301",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void doFilter(final ServletRequest arg0, final ServletResponse arg1, final FilterChain arg2) throws IOException, ServletException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void doFilter(final ServletRequest arg0, final ServletResponse arg1, final FilterChain arg2) throws IOException, ServletException {\n        if (!this.init) {\n            final HttpServletResponse response = Dynamic._.Cast(arg1);\n            response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE, \"Mainfilter not initialized.\");\n            return;\n        }\n        if (this.mainFilter != null) {\n            try {\n                URL url = this.context.getResource(\"/WEB-INF/classes/log4j.properties\");\n                URLConnection uc = url.openConnection();\n                if (uc.getLastModified() != lastLoadLog4j) {\n                    lastLoadLog4j = uc.getLastModified();\n                    try {\n                        uc.getInputStream().close();\n                    } catch (Exception ignore) {\n                    }\n                    PropertyConfigurator.configure(url);\n                } else {\n                    try {\n                        uc.getInputStream().close();\n                    } catch (Exception ignore) {\n                    }\n                }\n            } catch (final Exception e) {\n            }\n            this.mainFilter.doFilter(arg0, arg1);\n        } else {\n            final HttpServletResponse response = Dynamic._.Cast(arg1);\n            response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE, \"Mainfilter bad setup.\");\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12586306",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void testGetContentInputStream() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void testGetContentInputStream() {\n        try {\n            URL url = new URL(\"http://www.designerfashion.de/Seiten/r2-Felljacke.html\");\n            InputStream in = url.openStream();\n            Content c = provider.getContent(in);\n            assertNotNull(c);\n            assertEquals(\"Web Page\", c.getType());\n            assertEquals(\"net.sf.iqser.plugin.web.html\", c.getProvider());\n            assertEquals(8, c.getAttributes().size());\n            assertEquals(\"Name\", c.getAttributes().iterator().next().getName());\n        } catch (MalformedURLException e) {\n            fail(\"Malformed URL - \" + e.getMessage());\n        } catch (IOException e) {\n            fail(\"Couldn't read source - \" + e.getMessage());\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12586404",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic List<ProvaSolution[]> run(ProvaService prova, String agent, String key, String src) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n    public List<ProvaSolution[]> run(ProvaService prova, String agent, String key, String src) throws IOException {\n        File file = new File(src);\n        BufferedReader in;\n        InputStream is = null;\n        try {\n            if (!file.exists() || !file.canRead()) {\n                try {\n                    is = Thread.currentThread().getContextClassLoader().getResourceAsStream(src);\n                    in = new BufferedReader(new InputStreamReader(is));\n                } catch (Exception ex1) {\n                    try {\n                        is = RuleReaderImpl.class.getResourceAsStream(src);\n                        in = new BufferedReader(new InputStreamReader(is));\n                    } catch (Exception ex2) {\n                        try {\n                            URL url = new URL(src);\n                            in = new BufferedReader(new InputStreamReader(url.openStream()));\n                        } catch (Exception ex3) {\n                            throw new IOException(\"Cannot read from \" + src);\n                        }\n                    }\n                }\n            } else {\n                FileReader fr = new FileReader(file);\n                in = new BufferedReader(fr);\n            }\n            List<ProvaSolution[]> results = prova.consult(agent, in, key);\n            return results;\n        } finally {\n            if (is != null) is.close();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01258712",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static Document loadXML(URL url) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static Document loadXML(URL url) {\n        Document doc = null;\n        try {\n            DocumentBuilder docBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n            doc = docBuilder.parse(url.openStream());\n        } catch (ParserConfigurationException pce) {\n        } catch (SAXException saxe) {\n        } catch (IOException ioe) {\n        }\n        return doc;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12593872",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic String upload(String urlString, ByteArrayOutputStream dataStream) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public String upload(String urlString, ByteArrayOutputStream dataStream) {\n        HttpURLConnection conn = null;\n        DataOutputStream dos = null;\n        String exsistingFileName = \"blah.png\";\n        String lineEnd = \"\\r\\n\";\n        String twoHyphens = \"--\";\n        String boundary = \"*****\";\n        try {\n            URL url = new URL(urlString);\n            conn = (HttpURLConnection) url.openConnection();\n            conn.setInstanceFollowRedirects(false);\n            conn.setDoInput(true);\n            conn.setDoOutput(true);\n            conn.setUseCaches(false);\n            conn.setRequestMethod(\"POST\");\n            conn.setRequestProperty(\"Connection\", \"Keep-Alive\");\n            conn.setRequestProperty(\"Content-Type\", \"multipart/form-data;boundary=\" + boundary);\n            dos = new DataOutputStream(conn.getOutputStream());\n            dos.writeBytes(twoHyphens + boundary + lineEnd);\n            dos.writeBytes(\"Content-Disposition: form-data; name=\\\"aFile\\\";\" + \" filename=\\\"\" + exsistingFileName + \"\\\"\" + lineEnd);\n            dos.writeBytes(lineEnd);\n            dos.write(dataStream.toByteArray());\n            dos.writeBytes(lineEnd);\n            dos.writeBytes(twoHyphens + boundary + twoHyphens + lineEnd);\n            dos.flush();\n            dos.close();\n            return conn.getHeaderField(\"location\");\n        } catch (MalformedURLException ex) {\n            log.log(Level.INFO, \"From ServletCom CLIENT REQUEST:\" + ex);\n        } catch (IOException ioe) {\n            log.log(Level.INFO, \"From ServletCom CLIENT REQUEST:\" + ioe);\n        }\n        return null;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12595519",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void main(String[] args) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@SuppressWarnings(\"unchecked\")\n    public static void main(String[] args) {\n        System.out.println(\"Starting encoding test....\");\n        Properties p = new Properties();\n        try {\n            InputStream pStream = ClassLoader.getSystemResourceAsStream(\"sample_weather.properties\");\n            p.load(pStream);\n        } catch (Exception e) {\n            System.err.println(\"Could not load properties file.\");\n            System.err.println(e.getMessage());\n            e.printStackTrace();\n            return;\n        }\n        if (WeatherUpdater.DEBUG) {\n            System.out.println(\"hostname: \" + p.getProperty(\"weather.hostname\"));\n        }\n        if (WeatherUpdater.DEBUG) {\n            System.out.println(\"database: \" + p.getProperty(\"weather.database\"));\n        }\n        if (WeatherUpdater.DEBUG) {\n            System.out.println(\"username: \" + p.getProperty(\"weather.username\"));\n        }\n        if (WeatherUpdater.DEBUG) {\n            System.out.println(\"password: \" + p.getProperty(\"weather.password\"));\n        }\n        SqlAccount sqlAccount = new SqlAccount(p.getProperty(\"weather.hostname\"), p.getProperty(\"weather.database\"), p.getProperty(\"weather.username\"), p.getProperty(\"weather.password\"));\n        DatabaseInterface dbi = null;\n        try {\n            dbi = new DatabaseInterface(sqlAccount);\n        } catch (Exception e) {\n            System.err.println(e.getMessage());\n            e.printStackTrace();\n            return;\n        }\n        System.out.println(\"Established connection to database.\");\n        String query = \"SELECT * FROM Current_Weather WHERE ZipCode = '99702'\";\n        ResultTable results;\n        System.out.println(\"Executing query: \" + query);\n        try {\n            results = dbi.executeQuery(query);\n        } catch (Exception e) {\n            System.err.println(e.getMessage());\n            e.printStackTrace();\n            return;\n        }\n        System.out.println(\"Got results from query.\");\n        System.out.println(\"Converted results into the following table:\");\n        System.out.println(results);\n        System.out.println();\n        Class<? extends ResultEncoder> encoder_class;\n        Class<? extends ResultDecoder> decoder_class;\n        try {\n            encoder_class = (Class<? extends ResultEncoder>) Class.forName(p.getProperty(\"mysms.coding.resultEncoder\"));\n            decoder_class = (Class<? extends ResultDecoder>) Class.forName(p.getProperty(\"mysms.coding.resultDecoder\"));\n        } catch (Exception e) {\n            System.err.println(\"Could not find specified encoder: \" + p.getProperty(\"result.encoder\"));\n            System.err.println(e.getMessage());\n            e.printStackTrace();\n            return;\n        }\n        System.out.println(\"Found class of encoder: \" + encoder_class);\n        System.out.println(\"Found class of decoder: \" + decoder_class);\n        ResultEncoder encoder;\n        ResultDecoder decoder;\n        try {\n            encoder = encoder_class.newInstance();\n            if (encoder_class.equals(decoder_class) && decoder_class.isInstance(encoder)) {\n                decoder = (ResultDecoder) encoder;\n            } else {\n                decoder = decoder_class.newInstance();\n            }\n        } catch (Exception e) {\n            System.err.println(\"Could not create instances of encoder and decoder.\");\n            System.err.println(e.getMessage());\n            e.printStackTrace();\n            return;\n        }\n        System.out.println(\"Created instances of encoder and decoder.\");\n        if (decoder.equals(encoder)) {\n            System.out.println(\"Decoder and encoder are same object.\");\n        }\n        ByteBuffer buffer;\n        try {\n            buffer = encoder.encode(null, results);\n        } catch (Exception e) {\n            System.err.println(\"Could not encode results.\");\n            System.err.println(e.getMessage());\n            e.printStackTrace();\n            return;\n        }\n        System.out.println(\"Encoded results to ByteBuffer with size: \" + buffer.capacity());\n        File temp;\n        try {\n            temp = File.createTempFile(\"encoding_test\", \".results\");\n            temp.deleteOnExit();\n            FileChannel out = new FileOutputStream(temp).getChannel();\n            out.write(buffer);\n            out.close();\n        } catch (Exception e) {\n            System.err.println(\"Could not write buffer to file.\");\n            System.err.println(e.getMessage());\n            e.printStackTrace();\n            return;\n        }\n        System.out.println(\"Wrote buffer to file: \\\"\" + temp.getName() + \"\\\" with length: \" + temp.length());\n        ByteBuffer re_buffer;\n        try {\n            FileInputStream in = new FileInputStream(temp.getAbsolutePath());\n            byte[] temp_buffer = new byte[(int) temp.length()];\n            int totalRead = 0;\n            int numRead = 0;\n            while (totalRead < temp_buffer.length) {\n                numRead = in.read(temp_buffer, totalRead, temp_buffer.length - totalRead);\n                if (numRead < 0) {\n                    break;\n                } else {\n                    totalRead += numRead;\n                }\n            }\n            re_buffer = ByteBuffer.wrap(temp_buffer);\n            in.close();\n        } catch (Exception e) {\n            System.err.println(\"Could not read from temporary file into buffer.\");\n            System.err.println(e.getMessage());\n            e.printStackTrace();\n            return;\n        }\n        System.out.println(\"Read file back into buffer with length: \" + re_buffer.capacity());\n        ResultTable re_results;\n        try {\n            re_results = decoder.decode(null, re_buffer);\n        } catch (Exception e) {\n            System.err.println(\"Could not decode buffer into a ResultTable.\");\n            System.err.println(e.getMessage());\n            e.printStackTrace();\n            return;\n        }\n        System.out.println(\"Decoded buffer back into the following table:\");\n        System.out.println(re_results);\n        System.out.println();\n        System.out.println(\"... encoding test complete.\");\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12606395",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        MessageDigest md;\n        md = MessageDigest.getInstance(\"SHA-1\");\n        byte[] sha1hash = new byte[40];\n        md.update(text.getBytes(\"iso-8859-1\"), 0, text.length());\n        sha1hash = md.digest();\n        return convertToHex(sha1hash);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12607168",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copyFile(File source, File destination) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copyFile(File source, File destination) {\n        if (!source.exists()) {\n            return;\n        }\n        if ((destination.getParentFile() != null) && (!destination.getParentFile().exists())) {\n            destination.getParentFile().mkdirs();\n        }\n        try {\n            FileChannel srcChannel = new FileInputStream(source).getChannel();\n            FileChannel dstChannel = new FileOutputStream(destination).getChannel();\n            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n            srcChannel.close();\n            dstChannel.close();\n        } catch (IOException ioe) {\n            ioe.printStackTrace();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01261429",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static String downloadMedia(String mediadir, URL remoteFile) throws Exception, InterruptedException {\n        File tmpDir = new File(System.getProperty(\"java.io.tmpdir\") + \"org.ogre4j.examples/\" + mediadir);\n        if (!tmpDir.exists()) {\n            tmpDir.mkdirs();\n        }\n        URLConnection urlConnection = remoteFile.openConnection();\n        if (urlConnection.getConnectTimeout() != 0) {\n            urlConnection.setConnectTimeout(0);\n        }\n        InputStream content = remoteFile.openStream();\n        BufferedInputStream bin = new BufferedInputStream(content);\n        String downloaded = tmpDir.getCanonicalPath() + File.separatorChar + new File(remoteFile.getFile()).getName();\n        File file = new File(downloaded);\n        BufferedOutputStream bout = new BufferedOutputStream(new FileOutputStream(file));\n        System.out.println(\"downloading file \" + remoteFile + \" ...\");\n        for (long i = 0; i < urlConnection.getContentLength(); i++) {\n            bout.write(bin.read());\n        }\n        bout.close();\n        bout = null;\n        bin.close();\n        return downloaded;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12614305",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static boolean encodeFileToFile(String infile, String outfile) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static boolean encodeFileToFile(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] buffer = new byte[65536];\n            int read = -1;\n            while ((read = in.read(buffer)) >= 0) {\n                out.write(buffer, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12614306",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static boolean decodeFileToFile(String infile, String outfile) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static boolean decodeFileToFile(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] buffer = new byte[65536];\n            int read = -1;\n            while ((read = in.read(buffer)) >= 0) {\n                out.write(buffer, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12618322",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic Set<Class<?>> in(Package pack) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@NotNull\n    public Set<Class<?>> in(Package pack) {\n        String packageName = pack.getName();\n        String packageOnly = pack.getName();\n        final boolean recursive = true;\n        Set<Class<?>> classes = new LinkedHashSet<Class<?>>();\n        String packageDirName = packageOnly.replace('.', '/');\n        Enumeration<URL> dirs;\n        try {\n            dirs = Thread.currentThread().getContextClassLoader().getResources(packageDirName);\n        } catch (IOException e) {\n            throw new PackageScanFailedException(\"Could not read from package directory: \" + packageDirName, e);\n        }\n        while (dirs.hasMoreElements()) {\n            URL url = dirs.nextElement();\n            String protocol = url.getProtocol();\n            if (\"file\".equals(protocol)) {\n                try {\n                    findClassesInDirPackage(packageOnly, URLDecoder.decode(url.getFile(), \"UTF-8\"), recursive, classes);\n                } catch (UnsupportedEncodingException e) {\n                    throw new PackageScanFailedException(\"Could not read from file: \" + url, e);\n                }\n            } else if (\"jar\".equals(protocol)) {\n                JarFile jar;\n                try {\n                    jar = ((JarURLConnection) url.openConnection()).getJarFile();\n                } catch (IOException e) {\n                    throw new PackageScanFailedException(\"Could not read from jar url: \" + url, e);\n                }\n                Enumeration<JarEntry> entries = jar.entries();\n                while (entries.hasMoreElements()) {\n                    JarEntry entry = entries.nextElement();\n                    String name = entry.getName();\n                    if (name.charAt(0) == '/') {\n                        name = name.substring(1);\n                    }\n                    if (name.startsWith(packageDirName)) {\n                        int idx = name.lastIndexOf('/');\n                        if (idx != -1) {\n                            packageName = name.substring(0, idx).replace('/', '.');\n                        }\n                        if ((idx != -1) || recursive) {\n                            if (name.endsWith(\".class\") && !entry.isDirectory()) {\n                                String className = name.substring(packageName.length() + 1, name.length() - 6);\n                                add(packageName, classes, className);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return classes;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_00126187",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static void readAndRewrite(File inFile, File outFile) throws IOException {\n        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n        Dataset ds = DcmObjectFactory.getInstance().newDataset();\n        dcmParser.setDcmHandler(ds.getDcmHandler());\n        dcmParser.parseDcmFile(null, Tags.PixelData);\n        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        System.out.println(\"reading \" + inFile + \"...\");\n        pdReader.readPixelData(false);\n        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n        ds.writeDataset(out, dcmEncParam);\n        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n        System.out.println(\"writing \" + outFile + \"...\");\n        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        pdWriter.writePixelData();\n        out.flush();\n        out.close();\n        System.out.println(\"done!\");\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12626917",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void xtestURL1() throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void xtestURL1() throws Exception {\n        URL url = new URL(IOTest.URL);\n        InputStream inputStream = url.openStream();\n        OutputStream outputStream = new FileOutputStream(\"C:/Temp/testURL1.mp4\");\n        IOUtils.copy(inputStream, outputStream);\n        inputStream.close();\n        outputStream.close();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12626918",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void xtestURL2() throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void xtestURL2() throws Exception {\n        URL url = new URL(IOTest.URL);\n        InputStream inputStream = url.openStream();\n        OutputStream outputStream = new FileOutputStream(\"C:/Temp/testURL2.mp4\");\n        IOUtils.copy(inputStream, outputStream);\n        inputStream.close();\n        outputStream.close();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12626919",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void xtestFile1() throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void xtestFile1() throws Exception {\n        InputStream inputStream = new FileInputStream(IOTest.FILE);\n        OutputStream outputStream = new FileOutputStream(\"C:/Temp/testFile1.mp4\");\n        IOUtils.copy(inputStream, outputStream);\n        inputStream.close();\n        outputStream.close();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12626920",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void xtestFile2() throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void xtestFile2() throws Exception {\n        InputStream inputStream = new FileInputStream(IOTest.FILE);\n        OutputStream outputStream = new FileOutputStream(\"C:/Temp/testFile2.mp4\");\n        IOUtils.copy(inputStream, outputStream);\n        inputStream.close();\n        outputStream.close();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01262833",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic Collection<Regula> citesteReguli() throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public Collection<Regula> citesteReguli() throws IOException {\n        URL url = new URL(urlulSpreLocatiaCurenta, fisier);\n        BufferedReader reader = new BufferedReader(new InputStreamReader((url.openStream())));\n        Collection<Regula> rezultat = new ArrayList<Regula>();\n        String line = \"\";\n        while (!\"\".equals(line = reader.readLine())) {\n            Regula r = parseazaRegula(line);\n            if (r != null) rezultat.add(r);\n        }\n        return rezultat;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01263069",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic boolean getAuth(String content) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public boolean getAuth(String content) throws IOException {\n        String resp_remote;\n        try {\n            URL url = new URL(remoteurl);\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n            connection.setDoOutput(true);\n            connection.setDoInput(true);\n            connection.setRequestMethod(\"POST\");\n            OutputStreamWriter writer = new OutputStreamWriter(connection.getOutputStream());\n            writer.write(\"md5sum=\" + content);\n            writer.close();\n            if (connection.getResponseCode() == HttpURLConnection.HTTP_OK) {\n                InputStream is = connection.getInputStream();\n                BufferedReader rd = new BufferedReader(new InputStreamReader(is));\n                String line;\n                StringBuffer response = new StringBuffer();\n                while ((line = rd.readLine()) != null) {\n                    response.append(line);\n                    response.append('\\r');\n                }\n                rd.close();\n                resp_remote = response.toString();\n                wd.del();\n                wd.setKey(resp_remote);\n                return true;\n            } else {\n                return false;\n            }\n        } catch (MalformedURLException e) {\n        } catch (IOException e) {\n        }\n        return false;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12631774",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String getMd5Hash(String plaintext) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String getMd5Hash(String plaintext) {\n        try {\n            MessageDigest md5 = MessageDigest.getInstance(\"MD5\");\n            md5.reset();\n            md5.update(plaintext.getBytes());\n            byte[] digest = md5.digest();\n            BigInteger bigInt = new BigInteger(1, digest);\n            String hashtext = bigInt.toString(16);\n            while (hashtext.length() < 32) {\n                hashtext = \"0\" + hashtext;\n            }\n            return hashtext;\n        } catch (final NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n        return \"\";\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12641711",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void scanURL(String packagePath, Collection<String> componentClassNames, URL url) throws IOException {\n        URLConnection connection = url.openConnection();\n        JarFile jarFile;\n        if (connection instanceof JarURLConnection) {\n            jarFile = ((JarURLConnection) connection).getJarFile();\n        } else {\n            jarFile = getAlternativeJarFile(url);\n        }\n        if (jarFile != null) {\n            scanJarFile(packagePath, componentClassNames, jarFile);\n        } else if (supportsDirStream(url)) {\n            Stack<Queued> queue = new Stack<Queued>();\n            queue.push(new Queued(url, packagePath));\n            while (!queue.isEmpty()) {\n                Queued queued = queue.pop();\n                scanDirStream(queued.packagePath, queued.packageURL, componentClassNames, queue);\n            }\n        } else {\n            String packageName = packagePath.replace(\"/\", \".\");\n            if (packageName.endsWith(\".\")) {\n                packageName = packageName.substring(0, packageName.length() - 1);\n            }\n            scanDir(packageName, new File(url.getFile()), componentClassNames);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12646326",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void weightAndPlaceClasses() {\n        int rows = getRows();\n        for (int curRow = _maxPackageRank; curRow < rows; curRow++) {\n            xPos = getHGap() / 2;\n            BOTLRuleDiagramNode[] rowObject = getObjectsInRow(curRow);\n            for (int i = 0; i < rowObject.length; i++) {\n                if (curRow == _maxPackageRank) {\n                    int nDownlinks = rowObject[i].getDownlinks().size();\n                    rowObject[i].setWeight((nDownlinks > 0) ? (1 / nDownlinks) : 2);\n                } else {\n                    Vector uplinks = rowObject[i].getUplinks();\n                    int nUplinks = uplinks.size();\n                    if (nUplinks > 0) {\n                        float average_col = 0;\n                        for (int j = 0; j < uplinks.size(); j++) {\n                            average_col += ((BOTLRuleDiagramNode) (uplinks.elementAt(j))).getColumn();\n                        }\n                        average_col /= nUplinks;\n                        rowObject[i].setWeight(average_col);\n                    } else {\n                        rowObject[i].setWeight(1000);\n                    }\n                }\n            }\n            int[] pos = new int[rowObject.length];\n            for (int i = 0; i < pos.length; i++) {\n                pos[i] = i;\n            }\n            boolean swapped = true;\n            while (swapped) {\n                swapped = false;\n                for (int i = 0; i < pos.length - 1; i++) {\n                    if (rowObject[pos[i]].getWeight() > rowObject[pos[i + 1]].getWeight()) {\n                        int temp = pos[i];\n                        pos[i] = pos[i + 1];\n                        pos[i + 1] = temp;\n                        swapped = true;\n                    }\n                }\n            }\n            for (int i = 0; i < pos.length; i++) {\n                rowObject[pos[i]].setColumn(i);\n                if ((i > _vMax) && (rowObject[pos[i]].getUplinks().size() == 0) && (rowObject[pos[i]].getDownlinks().size() == 0)) {\n                    if (getColumns(rows - 1) > _vMax) {\n                        rows++;\n                    }\n                    rowObject[pos[i]].setRank(rows - 1);\n                } else {\n                    rowObject[pos[i]].setLocation(new Point(xPos, yPos));\n                    xPos += rowObject[pos[i]].getSize().getWidth() + getHGap();\n                }\n            }\n            yPos += getRowHeight(curRow) + getVGap();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12646521",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic boolean check(int timeout) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public boolean check(int timeout) {\n            StringBuilder result = null;\n            java.net.URL url;\n            java.io.InputStream in = null;\n            try {\n                url = new java.net.URL(location + \"/prisms?method=test\");\n                java.net.URLConnection conn = url.openConnection();\n                conn.setConnectTimeout(timeout);\n                in = conn.getInputStream();\n                java.io.Reader reader = new java.io.InputStreamReader(in);\n                result = new StringBuilder();\n                int read = reader.read();\n                while (read >= 0) {\n                    result.append((char) read);\n                    read = reader.read();\n                }\n            } catch (java.io.IOException e) {\n                log.error(\"Instance check failed\", e);\n                if (in != null) try {\n                    in.close();\n                } catch (java.io.IOException e2) {\n                }\n            }\n            return result != null && result.toString().startsWith(\"success\");\n        }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12649112",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static void dumpUrl(URL url) throws IOException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\n        String s = reader.readLine();\n        while (s != null) {\n            System.out.println(s);\n            s = reader.readLine();\n        }\n        reader.close();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12660384",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void main(String[] args) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void main(String[] args) {\n        final String filePath1 = \"e:\\\\mysite\\\\data\\\\up\\\\itsite\";\n        final String filePath2 = \"d:\\\\works\\\\itsite\\\\itsite\";\n        IOUtils.listAllFilesNoRs(new File(filePath2), new FileFilter() {\n\n            @Override\n            public boolean accept(File file) {\n                if (file.getName().equals(\".svn\")) {\n                    return false;\n                }\n                final long modify = file.lastModified();\n                final long time = DateUtils.toDate(\"2012-03-21 17:43\", \"yyyy-MM-dd HH:mm\").getTime();\n                if (modify >= time) {\n                    if (file.isFile()) {\n                        File f = new File(StringsUtils.replace(file.getAbsolutePath(), filePath2, filePath1));\n                        f.getParentFile().mkdirs();\n                        try {\n                            IOUtils.copyFile(file, f);\n                        } catch (IOException e) {\n                            e.printStackTrace();\n                        }\n                        System.out.println(f.getName());\n                    }\n                }\n                return true;\n            }\n        });\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12660385",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic boolean accept(File file) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n            public boolean accept(File file) {\n                if (file.getName().equals(\".svn\")) {\n                    return false;\n                }\n                final long modify = file.lastModified();\n                final long time = DateUtils.toDate(\"2012-03-21 17:43\", \"yyyy-MM-dd HH:mm\").getTime();\n                if (modify >= time) {\n                    if (file.isFile()) {\n                        File f = new File(StringsUtils.replace(file.getAbsolutePath(), filePath2, filePath1));\n                        f.getParentFile().mkdirs();\n                        try {\n                            IOUtils.copyFile(file, f);\n                        } catch (IOException e) {\n                            e.printStackTrace();\n                        }\n                        System.out.println(f.getName());\n                    }\n                }\n                return true;\n            }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12670358",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private InputStream loadFromUrl(URL url, String contentType) throws IOException {\n        Proxy proxy = null;\n        if (isUseProxy) {\n            Authenticator.setDefault(new Authenticator() {\n\n                protected PasswordAuthentication getPasswordAuthentication() {\n                    return new PasswordAuthentication(proxyUser, proxyPassword.toCharArray());\n                }\n            });\n            proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(proxyHost, proxyPort));\n        } else {\n            proxy = Proxy.NO_PROXY;\n        }\n        URLConnection connection = url.openConnection(proxy);\n        connection.setRequestProperty(\"Accept-Charset\", DEFAULT_CHARSET);\n        connection.setRequestProperty(\"Content-Type\", contentType);\n        connection.setRequestProperty(\"User-Agent\", USER_AGENT);\n        InputStream response = connection.getInputStream();\n        return response;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12670642",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic boolean backupLastAuditSchema(File lastAuditSchema) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public boolean backupLastAuditSchema(File lastAuditSchema) {\n        boolean isBkupFileOK = false;\n        String writeTimestamp = DateFormatUtils.format(new java.util.Date(), configFile.getTimestampPattern());\n        File target = new File(configFile.getAuditSchemaFileDir() + File.separator + configFile.getAuditSchemaFileName() + \".bkup_\" + writeTimestamp);\n        FileChannel sourceChannel = null;\n        FileChannel targetChannel = null;\n        try {\n            sourceChannel = new FileInputStream(lastAuditSchema).getChannel();\n            targetChannel = new FileOutputStream(target).getChannel();\n            targetChannel.transferFrom(sourceChannel, 0, sourceChannel.size());\n        } catch (IOException e) {\n            logger.log(Level.SEVERE, \"IO exception occurred while copying file\", e);\n        } finally {\n            if ((target != null) && (target.exists()) && (target.length() > 0)) {\n                isBkupFileOK = true;\n            }\n            try {\n                if (sourceChannel != null) {\n                    sourceChannel.close();\n                }\n                if (targetChannel != null) {\n                    targetChannel.close();\n                }\n            } catch (IOException e) {\n                logger.warning(\"closing channels failed\");\n            }\n        }\n        return isBkupFileOK;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12678042",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void addEMInformation() {\n        try {\n            long emDate = System.currentTimeMillis();\n            if (_local == true) {\n                File emFile = new File(\"emprotz.dat\");\n                if (!emFile.exists()) {\n                    return;\n                }\n                emDate = emFile.lastModified();\n            }\n            if (emDate > this._emFileDate) {\n                this._emFileDate = emDate;\n                this._emDate = emDate;\n                for (int ii = 0; ii < this._projectInfo.size(); ii++) {\n                    Information info = getInfo(ii);\n                    if (info != null) {\n                        info._emDeadline = null;\n                        info._emFrames = null;\n                        info._emValue = null;\n                    }\n                }\n                Reader reader = null;\n                if (_local == true) {\n                    reader = new FileReader(\"emprotz.dat\");\n                } else {\n                    StringBuffer urlName = new StringBuffer();\n                    urlName.append(\"http://home.comcast.net/\");\n                    urlName.append(\"~wxdude1/emsite/download/\");\n                    urlName.append(\"emprotz.zip\");\n                    try {\n                        URL url = new URL(urlName.toString());\n                        InputStream stream = url.openStream();\n                        ZipInputStream zip = new ZipInputStream(stream);\n                        zip.getNextEntry();\n                        reader = new InputStreamReader(zip);\n                    } catch (MalformedURLException mue) {\n                        mue.printStackTrace();\n                    }\n                }\n                BufferedReader file = new BufferedReader(reader);\n                try {\n                    String line1 = null;\n                    int count = 0;\n                    while ((line1 = file.readLine()) != null) {\n                        String line2 = (line1 != null) ? file.readLine() : null;\n                        String line3 = (line2 != null) ? file.readLine() : null;\n                        String line4 = (line3 != null) ? file.readLine() : null;\n                        count++;\n                        if ((count > 1) && (line1 != null) && (line2 != null) && (line3 != null) && (line4 != null)) {\n                            if (line1.length() > 2) {\n                                int posBegin = line1.indexOf(\"\\\"\", 0);\n                                int posEnd = line1.indexOf(\"\\\"\", posBegin + 1);\n                                if ((posBegin >= 0) && (posEnd >= 0)) {\n                                    String project = line1.substring(posBegin + 1, posEnd - posBegin);\n                                    int projectNum = Integer.parseInt(project);\n                                    Integer deadline = Integer.valueOf(line2.trim());\n                                    Double value = Double.valueOf(line3.trim());\n                                    Integer frames = Integer.valueOf(line4.trim());\n                                    Information info = getInfo(projectNum);\n                                    if (info == null) {\n                                        info = createInfo(projectNum);\n                                    }\n                                    if (info._emValue == null) {\n                                        info._emDeadline = deadline;\n                                        info._emFrames = frames;\n                                        info._emValue = value;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                } catch (Exception e) {\n                    e.printStackTrace();\n                } finally {\n                    file.close();\n                }\n            }\n        } catch (FileNotFoundException e) {\n        } catch (IOException e) {\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12678045",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void addQDInformation() {\n        try {\n            long qdDate = System.currentTimeMillis();\n            if (_local == true) {\n                File qdFile = new File(\"qdinfo.dat\");\n                if (!qdFile.exists()) {\n                    return;\n                }\n                qdDate = qdFile.lastModified();\n            }\n            if (qdDate > this._qdFileDate) {\n                this._qdFileDate = qdDate;\n                for (int ii = 0; ii < this._projectInfo.size(); ii++) {\n                    Information info = getInfo(ii);\n                    if (info != null) {\n                        info._qdValue = null;\n                    }\n                }\n                Reader reader = null;\n                if (_local == true) {\n                    reader = new FileReader(\"qdinfo.dat\");\n                } else {\n                    StringBuffer urlName = new StringBuffer();\n                    urlName.append(\"http://boston.quik.com/rph/\");\n                    urlName.append(\"qdinfo.dat\");\n                    try {\n                        URL url = new URL(urlName.toString());\n                        InputStream stream = url.openStream();\n                        reader = new InputStreamReader(stream);\n                    } catch (MalformedURLException mue) {\n                        mue.printStackTrace();\n                    }\n                }\n                BufferedReader file = new BufferedReader(reader);\n                try {\n                    String line = null;\n                    while ((line = file.readLine()) != null) {\n                        if (line.startsWith(\"pg \")) {\n                            this._qdDate = Long.parseLong(line.substring(3), 16);\n                            this._qdDate = (this._qdDate + 946684800) * 1000;\n                        } else if (line.startsWith(\"pt \")) {\n                            line = line.substring(3).trim();\n                            int pos = -1;\n                            while ((line.length() > 0) && ((pos = line.indexOf(' ')) > 0)) {\n                                int projectNum = 0;\n                                Double value = null;\n                                if (pos > 0) {\n                                    projectNum = Integer.parseInt(line.substring(0, pos));\n                                    line = line.substring(pos).trim();\n                                }\n                                pos = line.indexOf(' ');\n                                if (pos > 0) {\n                                    value = new Double((double) Integer.parseInt(line.substring(0, pos)) / 100);\n                                    line = line.substring(pos).trim();\n                                }\n                                Information info = getInfo(projectNum);\n                                if (info == null) {\n                                    info = createInfo(projectNum);\n                                }\n                                if (info._qdValue == null) {\n                                    info._qdValue = value;\n                                }\n                            }\n                        }\n                    }\n                } finally {\n                    file.close();\n                }\n            }\n        } catch (FileNotFoundException e) {\n        } catch (IOException e) {\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12678588",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static boolean encodeFileToFile(String infile, String outfile) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static boolean encodeFileToFile(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] buffer = new byte[65536];\n            int read = -1;\n            while ((read = in.read(buffer)) >= 0) {\n                out.write(buffer, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12678589",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static boolean decodeFileToFile(String infile, String outfile) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static boolean decodeFileToFile(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] buffer = new byte[65536];\n            int read = -1;\n            while ((read = in.read(buffer)) >= 0) {\n                out.write(buffer, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12682066",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void decompressGZIP(File gzip, File to, long skip) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void decompressGZIP(File gzip, File to, long skip) throws IOException {\n        GZIPInputStream gis = null;\n        BufferedOutputStream bos = null;\n        try {\n            bos = new BufferedOutputStream(new FileOutputStream(to));\n            FileInputStream fis = new FileInputStream(gzip);\n            fis.skip(skip);\n            gis = new GZIPInputStream(fis);\n            final byte[] buffer = new byte[IO_BUFFER];\n            int read = -1;\n            while ((read = gis.read(buffer)) != -1) {\n                bos.write(buffer, 0, read);\n            }\n        } finally {\n            try {\n                gis.close();\n            } catch (Exception nope) {\n            }\n            try {\n                bos.flush();\n            } catch (Exception nope) {\n            }\n            try {\n                bos.close();\n            } catch (Exception nope) {\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12687609",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic boolean isWebServerAvaliable(String url) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public boolean isWebServerAvaliable(String url) {\n        long inicial = new Date().getTime();\n        HttpURLConnection connection = null;\n        try {\n            URL urlBase = urlBase = new URL(url);\n            getLog().info(\"Verificando se WebServer esta no ar: \" + urlBase.toString());\n            connection = (HttpURLConnection) urlBase.openConnection();\n            connection.connect();\n        } catch (Exception e) {\n            return false;\n        } finally {\n            try {\n                getLog().info(\"Resposta do WebServer: \" + connection.getResponseCode());\n            } catch (IOException e) {\n                e.printStackTrace();\n                return false;\n            }\n            long tfinal = new Date().getTime();\n            getLog().info(\"Tempo esperado: \" + ((tfinal - inicial) / 1000) + \" segundos!\");\n        }\n        return true;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12689310",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic HashMap<String, String> prepareDataFile(String fileName) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public HashMap<String, String> prepareDataFile(String fileName) {\n        File originalDataFile = new File(fileName);\n        String tableName = new String();\n        String line = new String();\n        BufferedReader br;\n        BufferedWriter bw;\n        long recordsNumber;\n        File tempDataFile;\n        HashMap<String, String> tableFileMap = new HashMap<String, String>();\n        String filePath = new String();\n        try {\n            br = new BufferedReader(new InputStreamReader(new FileInputStream(originalDataFile)));\n            if (br.ready()) {\n                if ((line = br.readLine()) != null) {\n                    do {\n                        tableName = \"temp_\" + getTableName(line);\n                        tempDataFile = new File(\"./Data/\" + tableName + \".txt\");\n                        tempDataFile.createNewFile();\n                        tableFileMap.put(tableName, tempDataFile.getCanonicalPath());\n                        recordsNumber = getRecordNumber(line);\n                        bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(tempDataFile)));\n                        for (long i = 0; i < recordsNumber; i++) {\n                            bw.write(br.readLine() + \"\\r\\n\");\n                        }\n                        bw.close();\n                    } while ((line = br.readLine()) != null);\n                }\n                br.close();\n                return tableFileMap;\n            }\n        } catch (Exception e) {\n            ExceptionHandler.handleExcptin(e);\n        }\n        return null;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12690725",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void login(String a_username, String a_password) throws GB_SecurityException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void login(String a_username, String a_password) throws GB_SecurityException {\n        Exception l_exception = null;\n        try {\n            if (clientFtp == null) {\n                clientFtp = new FTPClient();\n                clientFtp.connect(\"ftp://\" + ftp);\n            }\n            boolean b = clientFtp.login(a_username, a_password);\n            if (b) {\n                username = a_username;\n                password = a_password;\n                return;\n            }\n        } catch (Exception ex) {\n            l_exception = ex;\n        }\n        String l_msg = \"Cannot login to ftp server with user [{1}], {2}\";\n        String[] l_replaces = new String[] { a_username, ftp };\n        l_msg = STools.replace(l_msg, l_replaces);\n        throw new GB_SecurityException(l_msg, l_exception);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01269271",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic Scene load(URL url) throws FileNotFoundException, IncorrectFormatException, ParsingErrorException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public Scene load(URL url) throws FileNotFoundException, IncorrectFormatException, ParsingErrorException {\n        BufferedReader reader;\n        if (baseUrl == null) setBaseUrlFromUrl(url);\n        try {\n            reader = new BufferedReader(new InputStreamReader(url.openStream()));\n        } catch (IOException e) {\n            throw new FileNotFoundException(e.getMessage());\n        }\n        fromUrl = true;\n        return load(reader);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12694085",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "Object execute(String method, Vector params) throws XmlRpcException, IOException {\n            fault = false;\n            long now = 0;\n            if (XmlRpc.debug) {\n                System.err.println(\"Client calling procedure '\" + method + \"' with parameters \" + params);\n                now = System.currentTimeMillis();\n            }\n            try {\n                ByteArrayOutputStream bout = new ByteArrayOutputStream();\n                if (buffer == null) {\n                    buffer = new ByteArrayOutputStream();\n                } else {\n                    buffer.reset();\n                }\n                XmlWriter writer = new XmlWriter(buffer);\n                writeRequest(writer, method, params);\n                writer.flush();\n                byte[] request = buffer.toByteArray();\n                URLConnection con = url.openConnection();\n                con.setDoInput(true);\n                con.setDoOutput(true);\n                con.setUseCaches(false);\n                con.setAllowUserInteraction(false);\n                con.setRequestProperty(\"Content-Length\", Integer.toString(request.length));\n                con.setRequestProperty(\"Content-Type\", \"text/xml\");\n                if (auth != null) {\n                    con.setRequestProperty(\"Authorization\", \"Basic \" + auth);\n                }\n                OutputStream out = con.getOutputStream();\n                out.write(request);\n                out.flush();\n                out.close();\n                InputStream in = con.getInputStream();\n                parse(in);\n            } catch (Exception x) {\n                if (XmlRpc.debug) {\n                    x.printStackTrace();\n                }\n                throw new IOException(x.getMessage());\n            }\n            if (fault) {\n                XmlRpcException exception = null;\n                try {\n                    Hashtable f = (Hashtable) result;\n                    String faultString = (String) f.get(\"faultString\");\n                    int faultCode = Integer.parseInt(f.get(\"faultCode\").toString());\n                    exception = new XmlRpcException(faultCode, faultString.trim());\n                } catch (Exception x) {\n                    throw new XmlRpcException(0, \"Invalid fault response\");\n                }\n                throw exception;\n            }\n            if (XmlRpc.debug) {\n                System.err.println(\"Spent \" + (System.currentTimeMillis() - now) + \" in request\");\n            }\n            return result;\n        }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12706520",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private FTPClient connect() throws IOException {\n        FTPClient client = null;\n        Configuration conf = getConf();\n        String host = conf.get(\"fs.ftp.host\");\n        int port = conf.getInt(\"fs.ftp.host.port\", FTP.DEFAULT_PORT);\n        String user = conf.get(\"fs.ftp.user.\" + host);\n        String password = conf.get(\"fs.ftp.password.\" + host);\n        client = new FTPClient();\n        client.connect(host, port);\n        int reply = client.getReplyCode();\n        if (!FTPReply.isPositiveCompletion(reply)) {\n            throw new IOException(\"Server - \" + host + \" refused connection on port - \" + port);\n        } else if (client.login(user, password)) {\n            client.setFileTransferMode(FTP.BLOCK_TRANSFER_MODE);\n            client.setFileType(FTP.BINARY_FILE_TYPE);\n            client.setBufferSize(DEFAULT_BUFFER_SIZE);\n        } else {\n            throw new IOException(\"Login failed on server - \" + host + \", port - \" + port);\n        }\n        return client;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12716055",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void copyFile(File a_fileSrc, File a_fileDest, boolean a_append) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void copyFile(File a_fileSrc, File a_fileDest, boolean a_append) throws IOException {\n        a_fileDest.getParentFile().mkdirs();\n        FileInputStream in = null;\n        FileOutputStream out = null;\n        FileChannel fcin = null;\n        FileChannel fcout = null;\n        try {\n            in = new FileInputStream(a_fileSrc);\n            out = new FileOutputStream(a_fileDest, a_append);\n            fcin = in.getChannel();\n            fcout = out.getChannel();\n            ByteBuffer buffer = ByteBuffer.allocate(16 * 1024);\n            while (true) {\n                buffer.clear();\n                int r = fcin.read(buffer);\n                if (r == -1) {\n                    break;\n                }\n                buffer.flip();\n                fcout.write(buffer);\n            }\n        } catch (IOException ex) {\n            throw ex;\n        } finally {\n            if (in != null) {\n                in.close();\n            }\n            if (out != null) {\n                out.close();\n            }\n            if (fcin != null) {\n                fcin.close();\n            }\n            if (fcout != null) {\n                fcout.close();\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12718571",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private ArrayList loadHTML(URL url) {\n        ArrayList res = new ArrayList();\n        try {\n            URLConnection myCon = url.openConnection();\n            BufferedReader in = new BufferedReader(new InputStreamReader(myCon.getInputStream()));\n            String inputLine;\n            while ((inputLine = in.readLine()) != null) {\n                res.add(inputLine);\n            }\n            in.close();\n        } catch (Exception e) {\n            System.out.println(\"url> \" + url);\n        }\n        return res;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12721184",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static int fileCopy(String strSourceFilePath, String strDestinationFilePath, String strFileName) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static int fileCopy(String strSourceFilePath, String strDestinationFilePath, String strFileName) throws IOException {\n        String SEPARATOR = System.getProperty(\"file.separator\");\n        File dir = new File(strSourceFilePath);\n        if (!dir.exists()) dir.mkdirs();\n        File realDir = new File(strDestinationFilePath);\n        if (!realDir.exists()) realDir.mkdirs();\n        FileInputStream fis = null;\n        FileOutputStream fos = null;\n        try {\n            fis = new FileInputStream(new File(strSourceFilePath + SEPARATOR + strFileName));\n            fos = new FileOutputStream(new File(strDestinationFilePath + SEPARATOR + strFileName));\n            IOUtils.copy(fis, fos);\n        } catch (Exception ex) {\n            return -1;\n        } finally {\n            try {\n                fos.close();\n                fis.close();\n            } catch (Exception ex2) {\n            }\n        }\n        return 0;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12721185",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static int fileUpload(long lngFileSize, InputStream inputStream, String strFilePath, String strFileName) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static int fileUpload(long lngFileSize, InputStream inputStream, String strFilePath, String strFileName) throws IOException {\n        String SEPARATOR = System.getProperty(\"file.separator\");\n        if (lngFileSize > (10 * 1024 * 1024)) {\n            return -1;\n        }\n        InputStream is = null;\n        FileOutputStream fos = null;\n        try {\n            File dir = new File(strFilePath);\n            if (!dir.exists()) dir.mkdirs();\n            is = inputStream;\n            fos = new FileOutputStream(new File(strFilePath + SEPARATOR + strFileName));\n            IOUtils.copy(is, fos);\n        } catch (Exception ex) {\n            return -2;\n        } finally {\n            try {\n                fos.close();\n                is.close();\n            } catch (Exception ex2) {\n            }\n        }\n        return 0;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12724823",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void checkForNewVersion() {\n        try {\n            org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(net.xan.taskstack.TaskStackApp.class).getContext().getResourceMap(NewTaskDialog.class);\n            String versionUrl = resourceMap.getString(\"Application.versionFileUrl\");\n            long startTime = System.currentTimeMillis();\n            System.out.println(\"Retrieving version file from\\n\" + versionUrl);\n            URL url = new URL(versionUrl);\n            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n            String str;\n            while ((str = in.readLine()) != null) {\n                if (str.startsWith(\"LastVersion\")) {\n                    String remoteVersion = str.substring(str.indexOf(\"=\") + 1);\n                    String localVersion = resourceMap.getString(\"Application.version\");\n                    System.out.println(\"Version file found\");\n                    System.out.println(\"Local version: \" + localVersion);\n                    System.out.println(\"Remote version: \" + remoteVersion);\n                    if (remoteVersion.compareTo(localVersion) > 0) {\n                        askDownloadNewVersion(remoteVersion, localVersion);\n                    }\n                    break;\n                }\n            }\n            long endTime = System.currentTimeMillis();\n            System.out.println(\"Elapsed time \" + (endTime - startTime) + \"ms\");\n            in.close();\n        } catch (MalformedURLException e) {\n            System.err.println(e.getMessage());\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12724876",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void loadURL(URL url, String username, String password, JLabel statusDialogMBLabel) throws IOException {\n        URLConnection connection = url.openConnection();\n        if (username != null && !username.equals(\"\")) {\n            if (password == null) {\n                password = \"\";\n            }\n            String encoding = new sun.misc.BASE64Encoder().encode(new String(username + \":\" + password).getBytes());\n            connection.setRequestProperty(\"Authorization\", \"Basic \" + encoding);\n        }\n        BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));\n        String inputLine;\n        this.tmpVRMLFile = File.createTempFile(\"xnavi-\", null, null);\n        System.out.println(\"Created tmp file: \" + this.tmpVRMLFile.getAbsolutePath());\n        FileWriter fw = new FileWriter(this.tmpVRMLFile);\n        long bytesInFile = this.tmpVRMLFile.length();\n        double sizeInMB = ((double) bytesInFile) / (1024.0 * 1024.0);\n        String response = \"\";\n        while ((inputLine = in.readLine()) != null) {\n            response = inputLine + \"\\n\";\n            fw.write(response);\n            fw.flush();\n            if (statusDialogMBLabel != null) {\n                bytesInFile = this.tmpVRMLFile.length();\n                sizeInMB = ((double) bytesInFile) / (1024.0 * 1024.0);\n                sizeInMB *= 100.0;\n                sizeInMB = (double) ((int) sizeInMB);\n                sizeInMB /= 100.0;\n                statusDialogMBLabel.setText(sizeInMB + \" MB\");\n                statusDialogMBLabel.repaint();\n            }\n        }\n        fw.close();\n        System.out.println(\"Wrote file \" + this.tmpVRMLFile.getAbsolutePath());\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12727792",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copyFile(File source, File target) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copyFile(File source, File target) throws Exception {\n        if (source == null || target == null) {\n            throw new IllegalArgumentException(\"The arguments may not be null.\");\n        }\n        try {\n            FileChannel srcChannel = new FileInputStream(source).getChannel();\n            FileChannel dtnChannel = new FileOutputStream(target).getChannel();\n            srcChannel.transferTo(0, srcChannel.size(), dtnChannel);\n            srcChannel.close();\n            dtnChannel.close();\n        } catch (Exception e) {\n            String message = \"Unable to copy file '\" + source.getName() + \"' to '\" + target.getName() + \"'.\";\n            logger.error(message, e);\n            throw new Exception(message, e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12728035",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copyFile(File in, File out) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copyFile(File in, File out) throws IOException {\n        FileChannel inChannel = new FileInputStream(in).getChannel();\n        FileChannel outChannel = new FileOutputStream(out).getChannel();\n        try {\n            inChannel.transferTo(0, inChannel.size(), outChannel);\n        } catch (IOException e) {\n            throw e;\n        } finally {\n            if (inChannel != null) inChannel.close();\n            if (outChannel != null) outChannel.close();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12728214",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "protected GraphicalViewer createGraphicalViewer(Composite parent) {\n        GraphicalViewer viewer = new ScrollingGraphicalViewer();\n        viewer.createControl(parent);\n        viewer.getControl().setBackground(parent.getBackground());\n        viewer.setRootEditPart(new ScalableFreeformRootEditPart());\n        GraphicalViewerKeyHandler graphicalViewerKeyHandler = new GraphicalViewerKeyHandler(viewer);\n        KeyHandler parentKeyHandler = graphicalViewerKeyHandler.setParent(getCommonKeyHandler());\n        viewer.setKeyHandler(parentKeyHandler);\n        getEditDomain().addViewer(viewer);\n        getSite().setSelectionProvider(viewer);\n        ContextMenuProvider provider = new TestContextMenuProvider(viewer, getActionRegistry());\n        viewer.setContextMenu(provider);\n        getSite().registerContextMenu(\"cubicTestPlugin.editor.contextmenu\", provider, viewer);\n        viewer.addDropTargetListener(new DataEditDropTargetListner(((IFileEditorInput) getEditorInput()).getFile().getProject(), viewer));\n        viewer.addDropTargetListener(new FileTransferDropTargetListener(viewer));\n        viewer.setEditPartFactory(getEditPartFactory());\n        viewer.setContents(getContent());\n        return viewer;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12730349",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String do_checksum(String data) throws NoSuchAlgorithmException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String do_checksum(String data) throws NoSuchAlgorithmException {\n        MessageDigest md5 = MessageDigest.getInstance(\"MD5\");\n        StringBuffer strbuf = new StringBuffer();\n        md5.update(data.getBytes(), 0, data.length());\n        byte[] digest = md5.digest();\n        for (int i = 0; i < digest.length; i++) {\n            strbuf.append(toHexString(digest[i]));\n        }\n        return strbuf.toString();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12731597",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void SetRoles(Connection conn, User user, String[] roles) throws NpsException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void SetRoles(Connection conn, User user, String[] roles) throws NpsException {\n        if (!IsSysAdmin() && !IsLocalAdmin()) throw new NpsException(ErrorHelper.ACCESS_NOPRIVILEGE);\n        PreparedStatement pstmt = null;\n        ResultSet rs = null;\n        try {\n            String sql = \"delete from userrole where userid=?\";\n            pstmt = conn.prepareStatement(sql);\n            pstmt.setString(1, user.id);\n            pstmt.executeUpdate();\n            if (roles != null && roles.length > 0) {\n                try {\n                    pstmt.close();\n                } catch (Exception e1) {\n                }\n                sql = \"insert into userrole(userid,roleid) values(?,?)\";\n                pstmt = conn.prepareStatement(sql);\n                for (int i = 0; i < roles.length; i++) {\n                    if (roles[i] != null && roles[i].length() > 0) {\n                        pstmt.setString(1, user.GetId());\n                        pstmt.setString(2, roles[i]);\n                        pstmt.executeUpdate();\n                    }\n                }\n            }\n            try {\n                pstmt.close();\n            } catch (Exception e1) {\n            }\n            if (user.roles_by_name != null) user.roles_by_name.clear();\n            if (user.roles_by_id != null) user.roles_by_id.clear();\n            if (roles != null && roles.length > 0) {\n                sql = \"select b.* from UserRole a,Role b where a.roleid = b.id and a.userid=?\";\n                pstmt = conn.prepareStatement(sql);\n                pstmt.setString(1, user.id);\n                rs = pstmt.executeQuery();\n                while (rs.next()) {\n                    if (user.roles_by_name == null) user.roles_by_name = new Hashtable();\n                    if (user.roles_by_id == null) user.roles_by_id = new Hashtable();\n                    user.roles_by_name.put(rs.getString(\"name\"), rs.getString(\"id\"));\n                    user.roles_by_id.put(rs.getString(\"id\"), rs.getString(\"name\"));\n                }\n            }\n        } catch (Exception e) {\n            try {\n                conn.rollback();\n            } catch (Exception e1) {\n            }\n            nps.util.DefaultLog.error(e);\n        } finally {\n            if (rs != null) try {\n                rs.close();\n            } catch (Exception e) {\n            }\n            if (pstmt != null) try {\n                pstmt.close();\n            } catch (Exception e1) {\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12734324",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String post(String url, Map params, String line_delimiter) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String post(String url, Map params, String line_delimiter) {\n        String response = \"\";\n        try {\n            URL _url = new URL(url);\n            URLConnection conn = _url.openConnection();\n            conn.setDoOutput(true);\n            OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());\n            String postdata = \"\";\n            int mapsize = params.size();\n            Iterator keyValue = params.entrySet().iterator();\n            for (int i = 0; i < mapsize; i++) {\n                Map.Entry entry = (Map.Entry) keyValue.next();\n                String key = (String) entry.getKey();\n                String value = (String) entry.getValue();\n                if (i > 0) postdata += \"&\";\n                postdata += URLEncoder.encode(key, \"UTF-8\") + \"=\" + URLEncoder.encode(value, \"UTF-8\");\n            }\n            wr.write(postdata);\n            wr.flush();\n            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n            String line;\n            while ((line = rd.readLine()) != null) response += line + line_delimiter;\n            wr.close();\n            rd.close();\n        } catch (Exception e) {\n            System.err.println(e);\n        }\n        return response;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12739583",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void testPreparedStatement0009() throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void testPreparedStatement0009() throws Exception {\n        Connection cx = getConnection();\n        dropTable(\"#t0009\");\n        Statement stmt = cx.createStatement();\n        stmt.executeUpdate(\"create table #t0009 \" + \"  (i  integer  not null,      \" + \"   s  char(10) not null)      \");\n        cx.setAutoCommit(false);\n        PreparedStatement pStmt = cx.prepareStatement(\"insert into #t0009 values (?, ?)\");\n        int rowsToAdd = 8;\n        final String theString = \"abcdefghijklmnopqrstuvwxyz\";\n        int count = 0;\n        for (int i = 1; i <= rowsToAdd; i++) {\n            pStmt.setInt(1, i);\n            pStmt.setString(2, theString.substring(0, i));\n            count += pStmt.executeUpdate();\n        }\n        assertTrue(count == rowsToAdd);\n        cx.rollback();\n        stmt = cx.createStatement();\n        ResultSet rs = stmt.executeQuery(\"select s, i from #t0009\");\n        assertNotNull(rs);\n        count = 0;\n        while (rs.next()) {\n            count++;\n            assertTrue(rs.getString(1).trim().length() == rs.getInt(2));\n        }\n        assertTrue(count == 0);\n        cx.commit();\n        rowsToAdd = 6;\n        count = 0;\n        for (int i = 1; i <= rowsToAdd; i++) {\n            pStmt.setInt(1, i);\n            pStmt.setString(2, theString.substring(0, i));\n            count += pStmt.executeUpdate();\n        }\n        assertTrue(count == rowsToAdd);\n        cx.commit();\n        rs = stmt.executeQuery(\"select s, i from #t0009\");\n        count = 0;\n        while (rs.next()) {\n            count++;\n            assertTrue(rs.getString(1).trim().length() == rs.getInt(2));\n        }\n        assertTrue(count == rowsToAdd);\n        cx.commit();\n        cx.setAutoCommit(true);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12739584",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void testTransactions0010() throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void testTransactions0010() throws Exception {\n        Connection cx = getConnection();\n        dropTable(\"#t0010\");\n        Statement stmt = cx.createStatement();\n        stmt.executeUpdate(\"create table #t0010 \" + \"  (i  integer  not null,      \" + \"   s  char(10) not null)      \");\n        cx.setAutoCommit(false);\n        PreparedStatement pStmt = cx.prepareStatement(\"insert into #t0010 values (?, ?)\");\n        int rowsToAdd = 8;\n        final String theString = \"abcdefghijklmnopqrstuvwxyz\";\n        int count = 0;\n        for (int i = 1; i <= rowsToAdd; i++) {\n            pStmt.setInt(1, i);\n            pStmt.setString(2, theString.substring(0, i));\n            count += pStmt.executeUpdate();\n        }\n        assertTrue(count == rowsToAdd);\n        cx.rollback();\n        stmt = cx.createStatement();\n        ResultSet rs = stmt.executeQuery(\"select s, i from #t0010\");\n        assertNotNull(rs);\n        count = 0;\n        while (rs.next()) {\n            count++;\n            assertTrue(rs.getString(1).trim().length() == rs.getInt(2));\n        }\n        assertTrue(count == 0);\n        cx.commit();\n        rowsToAdd = 6;\n        for (int j = 1; j <= 2; j++) {\n            count = 0;\n            for (int i = 1; i <= rowsToAdd; i++) {\n                pStmt.setInt(1, i + ((j - 1) * rowsToAdd));\n                pStmt.setString(2, theString.substring(0, i));\n                count += pStmt.executeUpdate();\n            }\n            assertTrue(count == rowsToAdd);\n            cx.commit();\n        }\n        rs = stmt.executeQuery(\"select s, i from #t0010\");\n        count = 0;\n        while (rs.next()) {\n            count++;\n            int i = rs.getInt(2);\n            if (i > rowsToAdd) i -= rowsToAdd;\n            assertTrue(rs.getString(1).trim().length() == i);\n        }\n        assertTrue(count == (2 * rowsToAdd));\n        cx.commit();\n        cx.setAutoCommit(true);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12741414",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void saveMessage(String server, Message message, byte[] bytes) throws Exception {\n            ConnectionProvider cp = null;\n            Connection conn = null;\n            PreparedStatement ps = null;\n            try {\n                SessionFactoryImplementor impl = (SessionFactoryImplementor) getPortalDao().getSessionFactory();\n                cp = impl.getConnectionProvider();\n                conn = cp.getConnection();\n                conn.setAutoCommit(false);\n                long orgId = 0;\n                String className = \"\";\n                long classId = 0;\n                if (message.getBody() instanceof Entity) {\n                    Entity entity = (Entity) message.getBody();\n                    orgId = entity.getOrgId();\n                    className = entity.getClass().getName();\n                    classId = entity.getId();\n                }\n                ps = conn.prepareStatement(\"insert into light_replication_message (orgId,server,event,className,classId,message,createDate) values(?,?,?,?,?,?,?);\");\n                ps.setLong(1, orgId);\n                ps.setString(2, server);\n                ps.setString(3, message.getEvent().toString());\n                ps.setString(4, className);\n                ps.setLong(5, classId);\n                ps.setBytes(6, bytes);\n                ps.setTimestamp(7, new Timestamp(System.currentTimeMillis()));\n                ps.executeUpdate();\n                conn.commit();\n                ps.close();\n                conn.close();\n            } catch (Exception e) {\n                conn.rollback();\n                ps.close();\n                conn.close();\n                e.printStackTrace();\n                throw new Exception(e);\n            }\n        }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01274215",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void main(String[] args) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void main(String[] args) {\n        try {\n            if (args.length < 2) {\n                System.err.println(\"usage: test [src] [dest]\");\n                return;\n            }\n            FileInputStream in = new FileInputStream(args[0]);\n            FileOutputStream out = new FileOutputStream(args[1]);\n            FileChannel src = in.getChannel();\n            FileChannel channel = out.getChannel();\n            long pos = 0, len = src.size(), ret;\n            while (len > 0) {\n                if ((ret = channel.transferFrom(src, pos, len)) < 0) break;\n                len -= ret;\n                pos += ret;\n            }\n            out.close();\n            in.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12744196",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic RandomGUID() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public RandomGUID() {\n        MessageDigest md5 = null;\n        try {\n            md5 = MessageDigest.getInstance(\"MD5\");\n        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e.getClass().getName() + \": \" + e.getMessage());\n        }\n        try {\n            long time = System.currentTimeMillis();\n            long rand = 0;\n            rand = myRand.nextLong();\n            StringBuffer sb = new StringBuffer();\n            sb.append(s_id);\n            sb.append(\":\");\n            sb.append(Long.toString(time));\n            sb.append(\":\");\n            sb.append(Long.toString(rand));\n            md5.update(sb.toString().getBytes());\n            byte[] array = md5.digest();\n            sb.setLength(0);\n            for (int j = 0; j < array.length; ++j) {\n                int b = array[j] & 0xFF;\n                if (b < 0x10) sb.append('0');\n                sb.append(Integer.toHexString(b));\n            }\n            valueAfterMD5 = sb.toString();\n        } catch (Exception e) {\n            throw new RuntimeException(e.getClass().getName() + \": \" + e.getMessage());\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12744653",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void getRandomGUID(boolean secure) {\n        MessageDigest md5 = null;\n        StringBuffer sbValueBeforeMD5 = new StringBuffer();\n        try {\n            md5 = MessageDigest.getInstance(\"MD5\");\n        } catch (NoSuchAlgorithmException e) {\n            System.out.println(\"Error: \" + e);\n        }\n        try {\n            long time = System.currentTimeMillis();\n            long rand = 0;\n            if (secure) {\n                rand = mySecureRand.nextLong();\n            } else {\n                rand = myRand.nextLong();\n            }\n            sbValueBeforeMD5.append(s_id);\n            sbValueBeforeMD5.append(\":\");\n            sbValueBeforeMD5.append(Long.toString(time));\n            sbValueBeforeMD5.append(\":\");\n            sbValueBeforeMD5.append(Long.toString(rand));\n            valueBeforeMD5 = sbValueBeforeMD5.toString();\n            md5.update(valueBeforeMD5.getBytes());\n            byte[] array = md5.digest();\n            StringBuffer sb = new StringBuffer();\n            for (int j = 0; j < array.length; ++j) {\n                int b = array[j] & 0xFF;\n                if (b < 0x10) {\n                    sb.append('0');\n                }\n                sb.append(Integer.toHexString(b));\n            }\n            valueAfterMD5 = sb.toString();\n        } catch (Exception e) {\n            System.out.println(\"Error:\" + e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12747045",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void init() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void init() {\n        try {\n            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n        } catch (Throwable e) {\n        }\n        Container c = getContentPane();\n        c.setLayout(new BoxLayout(c, BoxLayout.Y_AXIS));\n        String[] lines = getAppletInfo().split(\"\\n\");\n        for (int i = 0; i < lines.length; i++) {\n            c.add(new JLabel(lines[i]));\n        }\n        new Worker() {\n\n            public Object construct() {\n                Object result;\n                try {\n                    if (getParameter(\"data\") != null && getParameter(\"data\").length() > 0) {\n                        NanoXMLDOMInput domi = new NanoXMLDOMInput(new UMLFigureFactory(), new StringReader(getParameter(\"data\")));\n                        result = domi.readObject(0);\n                    } else if (getParameter(\"datafile\") != null) {\n                        InputStream in = null;\n                        try {\n                            URL url = new URL(getDocumentBase(), getParameter(\"datafile\"));\n                            in = url.openConnection().getInputStream();\n                            NanoXMLDOMInput domi = new NanoXMLDOMInput(new UMLFigureFactory(), in);\n                            result = domi.readObject(0);\n                        } finally {\n                            if (in != null) in.close();\n                        }\n                    } else {\n                        result = null;\n                    }\n                } catch (Throwable t) {\n                    result = t;\n                }\n                return result;\n            }\n\n            public void finished(Object result) {\n                Container c = getContentPane();\n                c.setLayout(new BorderLayout());\n                c.removeAll();\n                initComponents();\n                if (result != null) {\n                    if (result instanceof Drawing) {\n                        setDrawing((Drawing) result);\n                    } else if (result instanceof Throwable) {\n                        getDrawing().add(new TextFigure(result.toString()));\n                        ((Throwable) result).printStackTrace();\n                    }\n                }\n                boolean isLiveConnect;\n                try {\n                    Class.forName(\"netscape.javascript.JSObject\");\n                    isLiveConnect = true;\n                } catch (Throwable t) {\n                    isLiveConnect = false;\n                }\n                loadButton.setEnabled(isLiveConnect && getParameter(\"dataread\") != null);\n                saveButton.setEnabled(isLiveConnect && getParameter(\"datawrite\") != null);\n                if (isLiveConnect) {\n                    String methodName = getParameter(\"dataread\");\n                    if (methodName.indexOf('(') > 0) {\n                        methodName = methodName.substring(0, methodName.indexOf('(') - 1);\n                    }\n                    JSObject win = JSObject.getWindow(UMLLiveConnectApplet.this);\n                    Object data = win.call(methodName, new Object[0]);\n                    if (data instanceof String) {\n                        setData((String) data);\n                    }\n                }\n                c.validate();\n            }\n        }.start();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12747046",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic Object construct() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public Object construct() {\n                Object result;\n                try {\n                    if (getParameter(\"data\") != null && getParameter(\"data\").length() > 0) {\n                        NanoXMLDOMInput domi = new NanoXMLDOMInput(new UMLFigureFactory(), new StringReader(getParameter(\"data\")));\n                        result = domi.readObject(0);\n                    } else if (getParameter(\"datafile\") != null) {\n                        InputStream in = null;\n                        try {\n                            URL url = new URL(getDocumentBase(), getParameter(\"datafile\"));\n                            in = url.openConnection().getInputStream();\n                            NanoXMLDOMInput domi = new NanoXMLDOMInput(new UMLFigureFactory(), in);\n                            result = domi.readObject(0);\n                        } finally {\n                            if (in != null) in.close();\n                        }\n                    } else {\n                        result = null;\n                    }\n                } catch (Throwable t) {\n                    result = t;\n                }\n                return result;\n            }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12747342",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void bubbleSort(final int[] s) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void bubbleSort(final int[] s) {\n        source = s;\n        if (source.length < 2) return;\n        boolean go = true;\n        while (go) {\n            go = false;\n            for (int i = 0; i < source.length - 1; i++) {\n                int temp = source[i];\n                if (temp > source[i + 1]) {\n                    source[i] = source[i + 1];\n                    source[i + 1] = temp;\n                    go = true;\n                }\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12754270",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void fileUpload() throws IOException {\n        HttpClient httpclient = new DefaultHttpClient();\n        HttpPost httppost = new HttpPost(postURL);\n        MultipartEntity mpEntity = new MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE);\n        mpEntity.addPart(\"Filename\", new StringBody(file.getName()));\n        mpEntity.addPart(\"Filedata\", new MonitoredFileBody(file, uploadProgress));\n        httppost.setEntity(mpEntity);\n        NULogger.getLogger().log(Level.INFO, \"executing request {0}\", httppost.getRequestLine());\n        NULogger.getLogger().info(\"Now uploading your file into sharesend.com\");\n        status = UploadStatus.UPLOADING;\n        HttpResponse response = httpclient.execute(httppost);\n        status = UploadStatus.GETTINGLINK;\n        HttpEntity resEntity = response.getEntity();\n        NULogger.getLogger().info(response.getStatusLine().toString());\n        if (resEntity != null) {\n            uploadresponse = EntityUtils.toString(resEntity);\n        }\n        NULogger.getLogger().log(Level.INFO, \"Upload Response : {0}\", uploadresponse);\n        NULogger.getLogger().log(Level.INFO, \"Download Link : http://sharesend.com/{0}\", uploadresponse);\n        downloadlink = \"http://sharesend.com/\" + uploadresponse;\n        downURL = downloadlink;\n        httpclient.getConnectionManager().shutdown();\n        uploadFinished();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12754505",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static final String MD5(String value) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static final String MD5(String value) {\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            md.update(value.getBytes());\n            BigInteger hash = new BigInteger(1, md.digest());\n            String newValue = hash.toString(16);\n            return newValue;\n        } catch (NoSuchAlgorithmException ns) {\n            ns.printStackTrace();\n            return null;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12757148",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        resp.addHeader(\"Cache-Control\", \"max-age=\" + Constants.HTTP_CACHE_SECONDS);\n        String uuid = req.getRequestURI().substring(req.getRequestURI().indexOf(Constants.SERVLET_THUMBNAIL_PREFIX) + Constants.SERVLET_THUMBNAIL_PREFIX.length() + 1);\n        if (uuid != null && !\"\".equals(uuid)) {\n            resp.setContentType(\"image/jpeg\");\n            StringBuffer sb = new StringBuffer();\n            sb.append(config.getFedoraHost()).append(\"/objects/\").append(uuid).append(\"/datastreams/IMG_THUMB/content\");\n            InputStream is = null;\n            if (!Constants.MISSING.equals(uuid)) {\n                is = RESTHelper.get(sb.toString(), config.getFedoraLogin(), config.getFedoraPassword(), true);\n            } else {\n                is = new FileInputStream(new File(\"images/other/file_not_found.png\"));\n            }\n            if (is == null) {\n                return;\n            }\n            ServletOutputStream os = resp.getOutputStream();\n            try {\n                IOUtils.copyStreams(is, os);\n            } catch (IOException e) {\n            } finally {\n                os.flush();\n                if (is != null) {\n                    try {\n                        is.close();\n                    } catch (IOException e) {\n                    } finally {\n                        is = null;\n                    }\n                }\n            }\n            resp.setStatus(200);\n        } else {\n            resp.setStatus(404);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12759328",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "final void importSelectedEntity() {\n        TreePath path = projectsTree.getSelectionPath();\n        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) path.getLastPathComponent();\n        Object userObject = selectedNode.getUserObject();\n        if (userObject instanceof ProjectSet) {\n            JFileChooser fileChooser = new JFileChooser();\n            fileChooser.setMultiSelectionEnabled(false);\n            fileChooser.setFileFilter(new FileNameExtensionFilter(\"JFPSM Projects\", \"jfpsm.zip\"));\n            int result = fileChooser.showOpenDialog(mainWindow.getApplicativeFrame());\n            if (result == JFileChooser.APPROVE_OPTION) {\n                String fullname = fileChooser.getSelectedFile().getName();\n                String projectName = fullname.substring(0, fullname.length() - Project.getFileExtension().length());\n                ProjectSet workspace = (ProjectSet) userObject;\n                boolean confirmLoad = true;\n                if (Arrays.asList(workspace.getProjectNames()).contains(projectName)) {\n                    confirmLoad = JOptionPane.showConfirmDialog(mainWindow.getApplicativeFrame(), \"Overwrite project \\\"\" + projectName + \"\\\"\" + \"?\", \"Overwrite project\", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION;\n                    if (confirmLoad) {\n                        final int count = selectedNode.getChildCount();\n                        DefaultMutableTreeNode projectNode = null;\n                        for (int i = 0; i < count; i++) if (((Project) ((DefaultMutableTreeNode) selectedNode.getChildAt(i)).getUserObject()).getName().equals(projectName)) {\n                            projectNode = (DefaultMutableTreeNode) selectedNode.getChildAt(i);\n                            break;\n                        }\n                        Project project = (Project) projectNode.getUserObject();\n                        for (FloorSet floorSet : project.getLevelSet().getFloorSetsList()) for (Floor floor : floorSet.getFloorsList()) mainWindow.getEntityViewer().closeEntityView(floor);\n                        for (Tile tile : project.getTileSet().getTilesList()) mainWindow.getEntityViewer().closeEntityView(tile);\n                        workspace.removeProject(project);\n                        ((DefaultTreeModel) projectsTree.getModel()).removeNodeFromParent(projectNode);\n                    }\n                }\n                if (confirmLoad) {\n                    File projectFile = new File(workspace.createProjectPath(projectName));\n                    boolean success = true;\n                    try {\n                        success = projectFile.createNewFile();\n                        if (success) {\n                            BufferedInputStream bis = new BufferedInputStream(new FileInputStream(fileChooser.getSelectedFile()));\n                            BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(projectFile));\n                            byte[] buf = new byte[1024];\n                            int len;\n                            while ((len = bis.read(buf)) > 0) bos.write(buf, 0, len);\n                            bis.close();\n                            bos.close();\n                        }\n                    } catch (Throwable throwable) {\n                        displayErrorMessage(throwable, false);\n                        success = false;\n                    }\n                    if (success) addProject(projectName);\n                }\n            }\n        } else if (userObject instanceof Map) {\n            Map map = (Map) userObject;\n            Floor floor = (Floor) ((DefaultMutableTreeNode) selectedNode.getParent()).getUserObject();\n            importImageForSelectedMap(floor, map);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12759854",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void execute(File tsvFile, File xmlFile) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void execute(File tsvFile, File xmlFile) {\n        BufferedReader reader = null;\n        Writer writer = null;\n        Boolean isFileSuccessfullyConverted = Boolean.TRUE;\n        TableConfiguration tableConfig = null;\n        try {\n            xmlFile.getParentFile().mkdirs();\n            reader = new BufferedReader(new InputStreamReader(new FileInputStream(tsvFile), INPUT_ENCODING));\n            writer = new OutputStreamWriter(new FileOutputStream(xmlFile), OUTPUT_ENCODING);\n            tableConfig = Tsv2DocbookConverter.convert2(tableConfigManager, idScanner.extractIdentification(tsvFile), reader, writer, inputPolisher);\n            isFileSuccessfullyConverted = (tableConfig != null);\n        } catch (UnsupportedEncodingException e) {\n            logger.error(\"Failed to create reader with UTF-8 encoding: \" + e.getMessage(), e);\n        } catch (FileNotFoundException fnfe) {\n            logger.error(\"Failed to open tsv input file '\" + tsvFile + \"'. \" + fnfe.getMessage());\n        } catch (Throwable cause) {\n            logger.error(\"Failed to convert input tsv file '\" + tsvFile + \"'.\", cause);\n        } finally {\n            if (reader != null) {\n                try {\n                    reader.close();\n                } catch (IOException ioe) {\n                    logger.warn(\"Unable to close input file.\", ioe);\n                }\n            }\n            if (writer != null) {\n                try {\n                    writer.close();\n                } catch (IOException ioe) {\n                    logger.warn(\"Unable to close output file.\", ioe);\n                }\n            }\n        }\n        if (isFileSuccessfullyConverted) {\n            String newOutputFileName = tableConfig.getFileName(idScanner.extractIdentification(tsvFile));\n            if (newOutputFileName != null) {\n                File newOutputFile = new File(xmlFile.getParentFile(), newOutputFileName);\n                if (!xmlFile.renameTo(newOutputFile)) {\n                    logger.warn(\"Unable to rename '\" + xmlFile + \"' to '\" + newOutputFile + \"'.\");\n                    logger.info(\"Created successfully '\" + xmlFile + \"'.\");\n                } else {\n                    logger.info(\"Created successfully '\" + newOutputFileName + \"'.\");\n                }\n            } else {\n                logger.info(\"Created successfully '\" + xmlFile + \"'.\");\n            }\n        } else {\n            logger.warn(\"Unable to convert input tsv file '\" + Tsv2DocBookApplication.trimPath(sourceDir, tsvFile) + \"' to docbook.\");\n            if (xmlFile.exists() && !xmlFile.delete()) {\n                logger.warn(\"Unable to remove (empty) output file '\" + xmlFile + \"', which was created as target for the docbook table.\");\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12760982",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String MD5Encode(String password) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String MD5Encode(String password) {\n        MessageDigest messageDigest;\n        try {\n            messageDigest = MessageDigest.getInstance(\"MD5\");\n            messageDigest.update(password.getBytes());\n            final byte[] digest = messageDigest.digest();\n            final StringBuilder buf = new StringBuilder(digest.length * 2);\n            final char[] HEX_DIGITS = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };\n            for (int j = 0; j < digest.length; j++) {\n                buf.append(HEX_DIGITS[(digest[j] >> 4) & 0x0f]);\n                buf.append(HEX_DIGITS[digest[j] & 0x0f]);\n            }\n            return buf.toString();\n        } catch (NoSuchAlgorithmException e) {\n            return password;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12763612",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n    protected String doInBackground(MarketData... market) {\n        publishProgress(-1);\n        InputStream input = null;\n        OutputStream output = null;\n        long lenghtOfFile = 0;\n        int lengthRead = 0;\n        try {\n            HttpGet newReq = new HttpGet(market[0].apkURL);\n            HttpResponse response = HttpManager.execute(newReq);\n            Log.i(Main.TAG, \"req:\" + response.getStatusLine().getStatusCode());\n            while (response.getStatusLine().getStatusCode() == HttpStatus.SC_MOVED_TEMPORARILY || response.getStatusLine().getStatusCode() == HttpStatus.SC_MOVED_PERMANENTLY) {\n                Log.i(Main.TAG, \"redirect to:\" + response.getFirstHeader(\"Location\").getValue());\n                newReq = new HttpGet(response.getFirstHeader(\"Location\").getValue());\n                response = HttpManager.execute(newReq);\n                Log.i(Main.TAG, \"req:\" + response.getStatusLine().getStatusCode());\n            }\n            lenghtOfFile = response.getEntity().getContentLength();\n            input = response.getEntity().getContent();\n            output = new FileOutputStream(market[0].getFile());\n            lengthRead = copy(input, output, lenghtOfFile);\n        } catch (MalformedURLException e) {\n            Log.w(Main.TAG, \"error downloading \" + market[0].apkURL, e);\n        } catch (IOException e) {\n            Log.w(Main.TAG, \"error downloading \" + market[0].apkURL, e);\n        } finally {\n            Log.v(Main.TAG, \"failed to download \" + market[0].apkURL + \" \" + lengthRead + \"/\" + lenghtOfFile);\n            if (lenghtOfFile != 0 && lengthRead != lenghtOfFile) {\n                Log.w(Main.TAG, \"failed to download \" + market[0].apkURL + \" \" + lengthRead + \"/\" + lenghtOfFile);\n                try {\n                    if (input != null) input.close();\n                    if (output != null) output.close();\n                    market[0].getFile().delete();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        Log.v(Main.TAG, \"copied \" + market[0].apkURL + \" to \" + market[0].getFile());\n        return null;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01276377",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String send(String ipStr, int port, String password, String command, InetAddress localhost, int localPort) throws SocketTimeoutException, BadRcon, ResponseEmpty {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String send(String ipStr, int port, String password, String command, InetAddress localhost, int localPort) throws SocketTimeoutException, BadRcon, ResponseEmpty {\n        StringBuffer response = new StringBuffer();\n        try {\n            rconSocket = new Socket();\n            rconSocket.bind(new InetSocketAddress(localhost, localPort));\n            rconSocket.connect(new InetSocketAddress(ipStr, port), RESPONSE_TIMEOUT);\n            out = rconSocket.getOutputStream();\n            in = rconSocket.getInputStream();\n            BufferedReader buffRead = new BufferedReader(new InputStreamReader(in));\n            rconSocket.setSoTimeout(RESPONSE_TIMEOUT);\n            String digestSeed = \"\";\n            boolean loggedIn = false;\n            boolean keepGoing = true;\n            while (keepGoing) {\n                String receivedContent = buffRead.readLine();\n                if (receivedContent.startsWith(\"### Digest seed: \")) {\n                    digestSeed = receivedContent.substring(17, receivedContent.length());\n                    try {\n                        MessageDigest md5 = MessageDigest.getInstance(\"MD5\");\n                        md5.update(digestSeed.getBytes());\n                        md5.update(password.getBytes());\n                        String digestStr = \"login \" + digestedToHex(md5.digest()) + \"\\n\";\n                        out.write(digestStr.getBytes());\n                    } catch (NoSuchAlgorithmException e1) {\n                        response.append(\"MD5 algorithm not available - unable to complete RCON request.\");\n                        keepGoing = false;\n                    }\n                } else if (receivedContent.startsWith(\"error: not authenticated: you can only invoke 'login'\")) {\n                    throw new BadRcon();\n                } else if (receivedContent.startsWith(\"Authentication failed.\")) {\n                    throw new BadRcon();\n                } else if (receivedContent.startsWith(\"Authentication successful, rcon ready.\")) {\n                    keepGoing = false;\n                    loggedIn = true;\n                }\n            }\n            if (loggedIn) {\n                String cmd = \"\u0002exec \" + command + \"\\n\";\n                out.write(cmd.getBytes());\n                readResponse(buffRead, response);\n                if (response.length() == 0) {\n                    throw new ResponseEmpty();\n                }\n            }\n        } catch (SocketTimeoutException timeout) {\n            throw timeout;\n        } catch (UnknownHostException e) {\n            response.append(\"UnknownHostException: \" + e.getMessage());\n        } catch (IOException e) {\n            response.append(\"Couldn't get I/O for the connection: \" + e.getMessage());\n            e.printStackTrace();\n        } finally {\n            try {\n                if (out != null) {\n                    out.close();\n                }\n                if (in != null) {\n                    in.close();\n                }\n                if (rconSocket != null) {\n                    rconSocket.close();\n                }\n            } catch (IOException e1) {\n            }\n        }\n        return response.toString();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12764163",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic Out(Article article) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public Out(Article article) throws Exception {\n            String body = article.meta(ARTICLE_BODY).getString();\n            String url = find(\"a\", \"href\", body);\n            while (url.length() > 0 && url.startsWith(\"http://\")) {\n                System.out.println(url);\n                conn = (HttpURLConnection) new URL(url).openConnection();\n                conn.setRequestMethod(\"POST\");\n                int code = conn.getResponseCode();\n                String ping = conn.getHeaderField(\"X-Pingback\");\n                System.out.println(ping);\n                if (ping != null) {\n                    conn = (HttpURLConnection) new URL(ping).openConnection();\n                    conn.setDoOutput(true);\n                    StringBuffer buffer = new StringBuffer();\n                    buffer.append(\"<?xml version=\\\"1.0\\\"?>\\n\");\n                    buffer.append(\"<methodCall>\\n\");\n                    buffer.append(\"  <methodName>pingback.ping</methodName>\\n\");\n                    buffer.append(\"  <params>\\n\");\n                    buffer.append(\"    <param><value><string>http://\" + User.host + \"/article?id=\" + article.getId() + \"</string></value></param>\\n\");\n                    buffer.append(\"    <param><value><string>\" + url + \"</string></value></param>\\n\");\n                    buffer.append(\"  </params>\\n\");\n                    buffer.append(\"</methodCall>\\n\");\n                    System.out.println(buffer.toString());\n                    OutputStream out = conn.getOutputStream();\n                    out.write(buffer.toString().getBytes(\"UTF-8\"));\n                    code = conn.getResponseCode();\n                    InputStream in = null;\n                    if (code == 200) {\n                        in = conn.getInputStream();\n                    } else if (code < 0) {\n                        throw new IOException(\"HTTP response unreadable.\");\n                    } else {\n                        in = conn.getErrorStream();\n                    }\n                    Deploy.pipe(in, System.out);\n                    in.close();\n                }\n                url = find(\"a\", \"href\", body);\n            }\n        }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12764800",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void extractZipFile(String filename) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void extractZipFile(String filename) {\n        try {\n            byte[] buf = new byte[1024];\n            ZipInputStream zipinputstream = null;\n            ZipEntry zipentry;\n            zipinputstream = new ZipInputStream(new FileInputStream(filename));\n            zipentry = zipinputstream.getNextEntry();\n            while (zipentry != null) {\n                String entryName = zipentry.getName();\n                int n;\n                FileOutputStream fileoutputstream;\n                File newFile = new File(entryName);\n                String directory = newFile.getParent();\n                if (directory == null) {\n                    if (newFile.isDirectory()) break;\n                }\n                fileoutputstream = new FileOutputStream(entryName);\n                while ((n = zipinputstream.read(buf, 0, 1024)) > -1) fileoutputstream.write(buf, 0, n);\n                fileoutputstream.close();\n                zipinputstream.closeEntry();\n                zipentry = zipinputstream.getNextEntry();\n            }\n            zipinputstream.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12766377",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic Document index() throws CrawlingException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public Document index() throws CrawlingException {\n        log.debug(\"BEGINIG indexing page [code=\" + getCode() + \"] ...\");\n        URL url = null;\n        InputStream in = null;\n        String contentType = null;\n        try {\n            url = new URL(getServer().getProtocol() + \"://\" + getServer().getHost() + \":\" + getServer().getPort() + getPath());\n            HttpURLConnection pageContent = (HttpURLConnection) url.openConnection();\n            if (pageContent.getResponseCode() != HttpURLConnection.HTTP_OK) {\n                log.debug(\"page pk[\" + getCode() + \",\" + url.toExternalForm() + \"] is invalid\");\n                return null;\n            }\n            String redireccion = pageContent.getHeaderField(\"location\");\n            if (redireccion != null) {\n                log.debug(\"Page \" + url.toExternalForm() + \" redirected to \" + redireccion);\n                recordLink(redireccion);\n                return null;\n            }\n            contentType = pageContent.getContentType();\n            in = new BufferedInputStream(pageContent.getInputStream(), 32768);\n        } catch (MalformedURLException e) {\n            log.error(\"Invalid page address\", e);\n        } catch (ConnectException e) {\n            if (getServer() != null) {\n                log.error(\"Unable to connect to page: \" + getServer().getProtocol() + \"://\" + getServer().getHost() + \":\" + getServer().getPort() + getPath(), e);\n            }\n        } catch (UnknownHostException uhe) {\n            log.warn(\"Unknow host indexing page \" + getURL(), uhe);\n        } catch (IOException e) {\n            log.warn(\"Unable to index page \" + getURL(), e);\n        }\n        Document doc = generateDocument(contentType, in);\n        log.debug(\"END indexing page [code=\" + getCode() + \"]\");\n        return doc;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12766394",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void testReadHelloWorldTxt() throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void testReadHelloWorldTxt() throws Exception {\n        final InputStream helloWorldIS = this.getClass().getClassLoader().getResourceAsStream(BASE_DIR + \"/HelloWorld.txt\");\n        FileUtils.forceMkdir(new File(this.testDir.getAbsolutePath() + \"/org/settings4j/contentresolver\"));\n        final String helloWorldPath = this.testDir.getAbsolutePath() + \"/org/settings4j/contentresolver/HelloWorld.txt\";\n        final FileOutputStream fileOutputStream = new FileOutputStream(new File(helloWorldPath));\n        IOUtils.copy(helloWorldIS, fileOutputStream);\n        IOUtils.closeQuietly(helloWorldIS);\n        IOUtils.closeQuietly(fileOutputStream);\n        LOG.info(\"helloWorldPath: \" + helloWorldPath);\n        final FSContentResolver contentResolver = new FSContentResolver();\n        contentResolver.setRootFolderPath(this.testDir.getAbsolutePath());\n        byte[] content = contentResolver.getContent(\"org/settings4j/contentresolver/HelloWorld.txt\");\n        assertNotNull(content);\n        assertEquals(\"Hello World\", new String(content, \"UTF-8\"));\n        content = contentResolver.getContent(\"file:org/settings4j/contentresolver/HelloWorld.txt\");\n        assertNotNull(content);\n        assertEquals(\"Hello World\", new String(content, \"UTF-8\"));\n        content = contentResolver.getContent(\"file:/org/settings4j/contentresolver/HelloWorld.txt\");\n        assertNotNull(content);\n        assertEquals(\"Hello World\", new String(content, \"UTF-8\"));\n        content = contentResolver.getContent(\"file:laksjdhalksdhfa\");\n        assertNull(content);\n        content = contentResolver.getContent(\"/org/settings4j/contentresolver/HelloWorld.txt\");\n        assertNotNull(content);\n        assertEquals(\"Hello World\", new String(content, \"UTF-8\"));\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12768281",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "int doOne(int bid, int tid, int aid, int delta) {\n            int aBalance = 0;\n            if (Conn == null) {\n                incrementFailedTransactionCount();\n                return 0;\n            }\n            try {\n                if (prepared_stmt) {\n                    pstmt1.setInt(1, delta);\n                    pstmt1.setInt(2, aid);\n                    pstmt1.executeUpdate();\n                    pstmt1.clearWarnings();\n                    pstmt2.setInt(1, aid);\n                    ResultSet RS = pstmt2.executeQuery();\n                    pstmt2.clearWarnings();\n                    while (RS.next()) {\n                        aBalance = RS.getInt(1);\n                    }\n                    pstmt3.setInt(1, delta);\n                    pstmt3.setInt(2, tid);\n                    pstmt3.executeUpdate();\n                    pstmt3.clearWarnings();\n                    pstmt4.setInt(1, delta);\n                    pstmt4.setInt(2, bid);\n                    pstmt4.executeUpdate();\n                    pstmt4.clearWarnings();\n                    pstmt5.setInt(1, tid);\n                    pstmt5.setInt(2, bid);\n                    pstmt5.setInt(3, aid);\n                    pstmt5.setInt(4, delta);\n                    pstmt5.executeUpdate();\n                    pstmt5.clearWarnings();\n                } else {\n                    Statement Stmt = Conn.createStatement();\n                    String Query = \"UPDATE accounts \";\n                    Query += \"SET     Abalance = Abalance + \" + delta + \" \";\n                    Query += \"WHERE   Aid = \" + aid;\n                    int res = Stmt.executeUpdate(Query);\n                    Stmt.clearWarnings();\n                    Query = \"SELECT Abalance \";\n                    Query += \"FROM   accounts \";\n                    Query += \"WHERE  Aid = \" + aid;\n                    ResultSet RS = Stmt.executeQuery(Query);\n                    Stmt.clearWarnings();\n                    while (RS.next()) {\n                        aBalance = RS.getInt(1);\n                    }\n                    Query = \"UPDATE tellers \";\n                    Query += \"SET    Tbalance = Tbalance + \" + delta + \" \";\n                    Query += \"WHERE  Tid = \" + tid;\n                    Stmt.executeUpdate(Query);\n                    Stmt.clearWarnings();\n                    Query = \"UPDATE branches \";\n                    Query += \"SET    Bbalance = Bbalance + \" + delta + \" \";\n                    Query += \"WHERE  Bid = \" + bid;\n                    Stmt.executeUpdate(Query);\n                    Stmt.clearWarnings();\n                    Query = \"INSERT INTO history(Tid, Bid, Aid, delta) \";\n                    Query += \"VALUES (\";\n                    Query += tid + \",\";\n                    Query += bid + \",\";\n                    Query += aid + \",\";\n                    Query += delta + \")\";\n                    Stmt.executeUpdate(Query);\n                    Stmt.clearWarnings();\n                    Stmt.close();\n                }\n                if (transactions) {\n                    Conn.commit();\n                }\n                return aBalance;\n            } catch (Exception E) {\n                if (verbose) {\n                    System.out.println(\"Transaction failed: \" + E.getMessage());\n                    E.printStackTrace();\n                }\n                incrementFailedTransactionCount();\n                if (transactions) {\n                    try {\n                        Conn.rollback();\n                    } catch (SQLException E1) {\n                    }\n                }\n            }\n            return 0;\n        }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12776420",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic Bitmap getImage() throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public Bitmap getImage() throws IOException {\n        int recordBegin = 78 + 8 * mCount;\n        Bitmap result = null;\n        FileChannel channel = new FileInputStream(mFile).getChannel();\n        channel.position(mRecodeOffset[mPage]);\n        ByteBuffer bodyBuffer;\n        if (mPage + 1 < mCount) {\n            int length = mRecodeOffset[mPage + 1] - mRecodeOffset[mPage];\n            bodyBuffer = channel.map(MapMode.READ_ONLY, mRecodeOffset[mPage], length);\n            byte[] tmpCache = new byte[bodyBuffer.capacity()];\n            bodyBuffer.get(tmpCache);\n            FileOutputStream o = new FileOutputStream(\"/sdcard/test.bmp\");\n            o.write(tmpCache);\n            o.flush();\n            o.getFD().sync();\n            o.close();\n            result = BitmapFactory.decodeByteArray(tmpCache, 0, length);\n        } else {\n        }\n        channel.close();\n        return result;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12776677",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void checkLogin(String email, String password) throws JspTagException {\n        String cryptedPassword;\n        try {\n            MessageDigest crypt = MessageDigest.getInstance(\"MD5\");\n            crypt.update(password.getBytes());\n            byte digest[] = crypt.digest();\n            StringBuffer hexString = new StringBuffer();\n            for (int i = 0; i < digest.length; i++) {\n                hexString.append(hexDigit(digest[i]));\n            }\n            cryptedPassword = hexString.toString();\n            crypt.reset();\n            InitialContext context = new InitialContext();\n            java.lang.Object homeRef = context.lookup(\"java:comp/env/ejb/Value\");\n            ValueHome valueHome = (ValueHome) PortableRemoteObject.narrow(homeRef, ValueHome.class);\n            Value value = valueHome.findByPasswordCheck(email, cryptedPassword);\n            pageContext.setAttribute(\"validLogin\", new Boolean(true));\n            HttpSession session = pageContext.getSession();\n            session.setAttribute(\"jspShop.userID\", value.getObjectID());\n        } catch (NoSuchAlgorithmException e) {\n            System.err.println(\"jspShop: Could not get instance of MD5 algorithm. Please fix this!\" + e.getMessage());\n            e.printStackTrace();\n            throw new JspTagException(\"Error crypting password!: \" + e.getMessage());\n        } catch (ObjectNotFoundException e) {\n            pageContext.setAttribute(\"validLogin\", new Boolean(false));\n        } catch (NamingException e) {\n            System.err.println(\"jspShop: Could not initialise context in LoginTag\");\n            e.printStackTrace();\n        } catch (RemoteException e) {\n            System.err.println(\"jspShop: Could not connect to container in LoginTag\");\n        } catch (FinderException e) {\n            System.err.println(\"jspShop: Error using finderQuery in LoginTag\");\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12782570",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void logging() throws Fault {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void logging() throws Fault {\n        final InterceptorWrapper wrap = new InterceptorWrapper(message);\n        final LoggingMessage buffer = new LoggingMessage(\"Inbound Message\\n----------------------------\");\n        String encoding = (String) wrap.getEncoding();\n        if (encoding != null) {\n            buffer.getEncoding().append(encoding);\n        }\n        Object headers = wrap.getProtocolHeaders();\n        if (headers != null) {\n            buffer.getHeader().append(headers);\n        }\n        InputStream is = (InputStream) wrap.getContent(InputStream.class);\n        if (is != null) {\n            CachedOutputStream bos = new CachedOutputStream();\n            try {\n                IOUtils.copy(is, bos);\n                bos.flush();\n                is.close();\n                this.message.setContent(InputStream.class, bos.getInputStream());\n                if (bos.getTempFile() != null) {\n                    logger.error(\"\\nMessage (saved to tmp file):\\n\");\n                    logger.error(\"Filename: \" + bos.getTempFile().getAbsolutePath() + \"\\n\");\n                }\n                if (bos.size() > limit) {\n                    logger.error(\"(message truncated to \" + limit + \" bytes)\\n\");\n                }\n                bos.writeCacheTo(buffer.getPayload(), limit);\n                bos.close();\n            } catch (IOException e) {\n                throw new Fault(e);\n            }\n        }\n        logger.debug(\"Message received :\\n\" + buffer.getPayload().toString());\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12783713",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void sendErrorMessage(String message) throws EntriesException, StatementNotExecutedException, NotConnectedException, MessagingException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n    public void sendErrorMessage(String message) throws EntriesException, StatementNotExecutedException, NotConnectedException, MessagingException {\n        if (query == null) {\n            throw new NotConnectedException();\n        }\n        ArrayList<String> recipients = query.getUserManager().getTecMail();\n        Mail mail = new Mail(recipients);\n        try {\n            ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(\"log/ossobooklog.zip\"));\n            FileInputStream fis = new FileInputStream(\"log/ossobook.log\");\n            ZipEntry entry = new ZipEntry(\"ossobook.log\");\n            zos.putNextEntry(entry);\n            byte[] buffer = new byte[8192];\n            int read = 0;\n            while ((read = fis.read(buffer, 0, 1024)) != -1) {\n                zos.write(buffer, 0, read);\n            }\n            zos.closeEntry();\n            fis.close();\n            zos.close();\n            mail.sendErrorMessage(message, new File(\"log/ossobooklog.zip\"), getUserName());\n        } catch (Exception ex) {\n            ex.printStackTrace();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12783807",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void handle(String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void handle(String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\n        response.setHeader(\"Content-type\", \"application/force-download\");\n        response.setHeader(\"Content-disposition\", \"attachment\");\n        response.setHeader(\"filename\", \"export.txt\");\n        response.setHeader(\"Pragma\", \"no-cache\");\n        response.setHeader(\"Expires\", \"0\");\n        response.setStatus(HttpServletResponse.SC_OK);\n        baseRequest.setHandled(true);\n        InputStream x = baseRequest.getInputStream();\n        StringWriter writer = new StringWriter();\n        IOUtils.copy(x, writer);\n        String theString = writer.toString();\n        System.out.println(theString);\n        response.getWriter().println(request.getParameter(\"file\").replace(\"*\", \"\\n\"));\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12786252",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private OSD downloadList() throws IOException, IllegalStateException, ParseException, URISyntaxException {\n        OSD osd = null;\n        HttpClient client = new DefaultHttpClient();\n        HttpGet getMethod = new HttpGet(new URI(listUri));\n        try {\n            HttpResponse response = client.execute(getMethod);\n            if (response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {\n                throw new HttpResponseException(response.getStatusLine().getStatusCode(), response.getStatusLine().getReasonPhrase());\n            }\n            HttpEntity entity = response.getEntity();\n            if (entity != null) {\n                InputStream stream = entity.getContent();\n                String charset = null;\n                if (entity.getContentType() != null) {\n                    HeaderElement values[] = entity.getContentType().getElements();\n                    if (values.length > 0) {\n                        NameValuePair param = values[0].getParameterByName(\"charset\");\n                        if (param != null) {\n                            charset = param.getValue();\n                        }\n                    }\n                }\n                if (charset == null) {\n                    charset = HTTP.DEFAULT_CONTENT_CHARSET;\n                }\n                osd = OSD.parse(stream, charset);\n            }\n        } finally {\n            getMethod.abort();\n        }\n        return osd;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12787570",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static void copyContent(final File srcFile, final File dstFile, final boolean gzipContent) throws IOException {\n        final File dstFolder = dstFile.getParentFile();\n        dstFolder.mkdirs();\n        if (!dstFolder.exists()) {\n            throw new RuntimeException(\"Unable to create the folder \" + dstFolder.getAbsolutePath());\n        }\n        final InputStream in = new FileInputStream(srcFile);\n        OutputStream out = new FileOutputStream(dstFile);\n        if (gzipContent) {\n            out = new GZIPOutputStream(out);\n        }\n        try {\n            final byte[] buffer = new byte[1024];\n            int read;\n            while ((read = in.read(buffer)) != -1) {\n                out.write(buffer, 0, read);\n            }\n        } finally {\n            in.close();\n            out.close();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12791062",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static boolean isUrlAvailable(String url) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static boolean isUrlAvailable(String url) {\n        boolean flag = true;\n        try {\n            URLConnection conn = (new URL(url)).openConnection();\n            conn.setConnectTimeout(5000);\n            conn.setReadTimeout(5000);\n            conn.connect();\n            if (conn.getDate() == 0) {\n                flag = false;\n            }\n        } catch (IOException e) {\n            log.error(e);\n            flag = false;\n        }\n        return flag;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01279675",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic Mappings read() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public Mappings read() {\n        Mappings result = null;\n        InputStream stream = null;\n        try {\n            XMLParser parser = new XMLParser();\n            stream = url.openStream();\n            result = parser.parse(stream);\n        } catch (Throwable e) {\n            log.error(\"Error in loading dozer mapping file url: [\" + url + \"] : \" + e);\n            MappingUtils.throwMappingException(e);\n        } finally {\n            try {\n                if (stream != null) {\n                    stream.close();\n                }\n            } catch (IOException e) {\n                MappingUtils.throwMappingException(e);\n            }\n        }\n        return result;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12798072",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String encrypt(String txt) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String encrypt(String txt) throws Exception {\n        MessageDigest md = MessageDigest.getInstance(\"SHA\");\n        md.update(txt.getBytes(\"UTF-8\"));\n        byte raw[] = md.digest();\n        String hash = (new BASE64Encoder()).encode(raw);\n        return hash;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12798566",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static void process(String urlstring) {\n        try {\n            URL url = new URL(urlstring);\n            System.out.println(\"Connecting to \" + url);\n            URLConnection connection = url.openConnection();\n            connection.connect();\n            BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));\n            for (String line; (line = in.readLine()) != null; ) if (line.startsWith(MARKER)) {\n                System.out.println(TAG.matcher(line).replaceAll(\"\"));\n            }\n            in.close();\n        } catch (IOException ioe) {\n            System.err.println(\"\" + ioe);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12800568",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void exportFile() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void exportFile() {\n        String expfolder = PropertyHandler.getInstance().getProperty(PropertyHandler.KINDLE_EXPORT_FOLDER_KEY);\n        File out = new File(expfolder + File.separator + previewInfo.getTitle() + \".prc\");\n        File f = new File(absPath);\n        try {\n            FileOutputStream fout = new FileOutputStream(out);\n            FileInputStream fin = new FileInputStream(f);\n            int read = 0;\n            byte[] buffer = new byte[1024 * 1024];\n            while ((read = fin.read(buffer)) > 0) {\n                fout.write(buffer, 0, read);\n            }\n            fin.close();\n            fout.close();\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12803512",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic CheckAvailabilityResult execute(final CheckAvailabilityAction action, final ExecutionContext context) throws ActionException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n    public CheckAvailabilityResult execute(final CheckAvailabilityAction action, final ExecutionContext context) throws ActionException {\n        if (LOGGER.isDebugEnabled()) {\n            String serverName = null;\n            if (action.getServerId() == CheckAvailability.FEDORA_ID) {\n                serverName = \"fedora\";\n            } else if (action.getServerId() == CheckAvailability.KRAMERIUS_ID) {\n                serverName = \"kramerius\";\n            }\n            LOGGER.debug(\"Processing action: CheckAvailability: \" + serverName);\n        }\n        ServerUtils.checkExpiredSession(httpSessionProvider);\n        boolean status = true;\n        String url = null;\n        String usr = \"\";\n        String pass = \"\";\n        if (action.getServerId() == CheckAvailability.FEDORA_ID) {\n            url = configuration.getFedoraHost();\n            usr = configuration.getFedoraLogin();\n            pass = configuration.getFedoraPassword();\n        } else if (action.getServerId() == CheckAvailability.KRAMERIUS_ID) {\n            url = configuration.getKrameriusHost() + SOME_STATIC_KRAMERIUS_PAGE;\n        } else {\n            throw new ActionException(\"Unknown server id\");\n        }\n        try {\n            URLConnection con = RESTHelper.openConnection(url, usr, pass, false);\n            if (con instanceof HttpURLConnection) {\n                HttpURLConnection httpConnection = (HttpURLConnection) con;\n                int resp = httpConnection.getResponseCode();\n                if (resp < 200 || resp >= 308) {\n                    status = false;\n                    LOGGER.info(\"Server \" + url + \" answered with HTTP code \" + httpConnection.getResponseCode());\n                }\n            } else {\n                status = false;\n            }\n        } catch (MalformedURLException e) {\n            status = false;\n            e.printStackTrace();\n        } catch (IOException e) {\n            status = false;\n            e.printStackTrace();\n        }\n        return new CheckAvailabilityResult(status, url);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12815923",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void main(String[] args) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void main(String[] args) {\n        log.info(\"Passage param\u00e8tres \" + args);\n        try {\n            URL url = new URL(\"http://localhost:8082/HomeAutomateCore/ListenerServlet/\");\n            URLConnection conn = url.openConnection();\n            conn.setDoOutput(true);\n            BufferedWriter out = new BufferedWriter(new OutputStreamWriter(conn.getOutputStream()));\n            out.write(\"username = JavaWorld \\r \\n \");\n            out.flush();\n            out.close();\n            BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n            String reponse = \"\";\n            while ((reponse = in.readLine()) != null) {\n                System.out.println(reponse);\n            }\n            System.out.println(\"Fin\");\n            in.close();\n        } catch (MalformedURLException ex) {\n            ex.printStackTrace();\n            System.out.println(\"Fin1 \" + ex.getMessage() + \" \" + ex.getCause());\n        } catch (IOException ex) {\n            ex.printStackTrace();\n            System.out.println(\"Fin2 \" + ex.getMessage() + \" \" + ex.getCause());\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12816475",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "protected void writePage(final CacheItem entry, final TranslationResponse response, ModifyTimes times) throws IOException {\n        if (entry == null) {\n            return;\n        }\n        Set<ResponseHeader> headers = new TreeSet<ResponseHeader>();\n        for (ResponseHeader h : entry.getHeaders()) {\n            if (TranslationResponse.ETAG.equals(h.getName())) {\n                if (!times.isFileLastModifiedKnown()) {\n                    headers.add(new ResponseHeaderImpl(h.getName(), doETagStripWeakMarker(h.getValues())));\n                }\n            } else {\n                headers.add(h);\n            }\n        }\n        response.addHeaders(headers);\n        if (!times.isFileLastModifiedKnown()) {\n            response.setLastModified(entry.getLastModified());\n        }\n        response.setTranslationCount(entry.getTranslationCount());\n        response.setFailCount(entry.getFailCount());\n        OutputStream output = response.getOutputStream();\n        try {\n            InputStream input = entry.getContentAsStream();\n            try {\n                IOUtils.copy(input, output);\n            } finally {\n                input.close();\n            }\n        } finally {\n            response.setEndState(ResponseStateOk.getInstance());\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12816795",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static FileChannel getFileChannel(Object o) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static FileChannel getFileChannel(Object o) throws IOException {\n        Class c = o.getClass();\n        try {\n            Method m = c.getMethod(\"getChannel\", null);\n            return (FileChannel) m.invoke(o, null);\n        } catch (IllegalAccessException x) {\n        } catch (NoSuchMethodException x) {\n        } catch (InvocationTargetException x) {\n            if (x.getTargetException() instanceof IOException) throw (IOException) x.getTargetException();\n        }\n        if (o instanceof FileInputStream) return new MyFileChannelImpl((FileInputStream) o);\n        if (o instanceof FileOutputStream) return new MyFileChannelImpl((FileOutputStream) o);\n        if (o instanceof RandomAccessFile) return new MyFileChannelImpl((RandomAccessFile) o);\n        Assert.UNREACHABLE(o.getClass().toString());\n        return null;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12819863",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String generatePassword(String userKey, int applicationId, String applicationKey) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String generatePassword(String userKey, int applicationId, String applicationKey) {\n        String nonce = generateNonce();\n        String createDate = fmtDate.format(new Date());\n        String keyDigest = null;\n        MessageDigest sha1 = null;\n        try {\n            sha1 = MessageDigest.getInstance(\"SHA1\");\n            sha1.update(nonce.getBytes(\"UTF-8\"));\n            sha1.update(createDate.getBytes(\"UTF-8\"));\n            sha1.update(userKey.getBytes(\"UTF-8\"));\n            sha1.update(applicationKey.getBytes(\"UTF-8\"));\n            keyDigest = getHexaDecimal(sha1.digest());\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n        StringBuilder sb = new StringBuilder();\n        sb.append(applicationId);\n        sb.append(',');\n        sb.append(nonce);\n        sb.append(',');\n        sb.append(createDate);\n        sb.append(',');\n        sb.append(keyDigest);\n        return sb.toString();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12820117",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "static void invalidSlave(String msg, Socket sock) throws IOException {\n        BufferedReader _sinp = null;\n        PrintWriter _sout = null;\n        try {\n            _sout = new PrintWriter(sock.getOutputStream(), true);\n            _sinp = new BufferedReader(new InputStreamReader(sock.getInputStream()));\n            _sout.println(msg);\n            logger.info(\"NEW< \" + msg);\n            String txt = SocketSlaveListener.readLine(_sinp, 30);\n            String sname = \"\";\n            String spass = \"\";\n            String shash = \"\";\n            try {\n                String[] items = txt.split(\" \");\n                sname = items[1].trim();\n                spass = items[2].trim();\n                shash = items[3].trim();\n            } catch (Exception e) {\n                throw new IOException(\"Slave Inititalization Faailed\");\n            }\n            String pass = sname + spass + _pass;\n            MessageDigest md5 = MessageDigest.getInstance(\"MD5\");\n            md5.reset();\n            md5.update(pass.getBytes());\n            String hash = SocketSlaveListener.hash2hex(md5.digest()).toLowerCase();\n            if (!hash.equals(shash)) {\n                throw new IOException(\"Slave Inititalization Faailed\");\n            }\n        } catch (Exception e) {\n        }\n        throw new IOException(\"Slave Inititalization Faailed\");\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12821749",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void fastBackup(File file) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void fastBackup(File file) {\n        FileChannel in = null;\n        FileChannel out = null;\n        FileInputStream fin = null;\n        FileOutputStream fout = null;\n        try {\n            in = (fin = new FileInputStream(file)).getChannel();\n            out = (fout = new FileOutputStream(file.getAbsolutePath() + \".bak\")).getChannel();\n            in.transferTo(0, in.size(), out);\n        } catch (IOException e) {\n            Logging.getErrorLog().reportError(\"Fast backup failure (\" + file.getAbsolutePath() + \"): \" + e.getMessage());\n        } finally {\n            if (fin != null) {\n                try {\n                    fin.close();\n                } catch (IOException e) {\n                    Logging.getErrorLog().reportException(\"Failed to close file input stream\", e);\n                }\n            }\n            if (fout != null) {\n                try {\n                    fout.close();\n                } catch (IOException e) {\n                    Logging.getErrorLog().reportException(\"Failed to close file output stream\", e);\n                }\n            }\n            if (in != null) {\n                try {\n                    in.close();\n                } catch (IOException e) {\n                    Logging.getErrorLog().reportException(\"Failed to close file channel\", e);\n                }\n            }\n            if (out != null) {\n                try {\n                    out.close();\n                } catch (IOException e) {\n                    Logging.getErrorLog().reportException(\"Failed to close file channel\", e);\n                }\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12822637",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void doLogin(String password) throws LoginFailedException, IncorrectPasswordException {\n        long mgr = Constants.MANAGER;\n        Data data, response;\n        try {\n            response = sendAndWait(new Request(mgr)).get(0);\n            MessageDigest md;\n            try {\n                md = MessageDigest.getInstance(\"MD5\");\n            } catch (NoSuchAlgorithmException e) {\n                throw new RuntimeException(\"MD5 hash not supported.\");\n            }\n            byte[] challenge = response.getBytes();\n            md.update(challenge);\n            md.update(password.getBytes(Data.STRING_ENCODING));\n            try {\n                data = Data.valueOf(md.digest());\n                response = sendAndWait(new Request(mgr).add(0, data)).get(0);\n            } catch (ExecutionException ex) {\n                throw new IncorrectPasswordException();\n            }\n            loginMessage = response.getString();\n            response = sendAndWait(new Request(mgr).add(0, getLoginData())).get(0);\n            ID = response.getWord();\n        } catch (InterruptedException ex) {\n            throw new LoginFailedException(ex);\n        } catch (ExecutionException ex) {\n            throw new LoginFailedException(ex);\n        } catch (IOException ex) {\n            throw new LoginFailedException(ex);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12829110",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String encrypt(String data) throws IOException, NoSuchAlgorithmException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String encrypt(String data) throws IOException, NoSuchAlgorithmException {\n        Properties props = Configuration.getInstance().getProperties();\n        String algorithm = props.getProperty(\"com.makeabyte.jhosting.server.persistence.security.algorithm\");\n        String encryptedData = data;\n        boolean encrypt = Boolean.parseBoolean(props.getProperty(\"com.makeabyte.jhosting.server.persistence.security.encrypt\"));\n        if (encrypt) {\n            if (algorithm.equalsIgnoreCase(\"UTF-16LE\")) return encryptActiveDirectory(data);\n            MessageDigest md = java.security.MessageDigest.getInstance(algorithm);\n            md.reset();\n            md.update(data.getBytes());\n            encryptedData = md.digest().toString();\n        }\n        return encryptedData;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12829112",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic String getDigest(String algorithm, String data) throws IOException, NoSuchAlgorithmException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public String getDigest(String algorithm, String data) throws IOException, NoSuchAlgorithmException {\n        MessageDigest md = java.security.MessageDigest.getInstance(algorithm);\n        md.reset();\n        md.update(data.getBytes());\n        return md.digest().toString();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12829832",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private Document parseResponse(String url) throws IOException, MalformedURLException, ParserConfigurationException, SAXException {\n        DocumentBuilder db = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n        InputStream stream = null;\n        try {\n            stream = new URL(url).openStream();\n            return db.parse(stream);\n        } finally {\n            PetstoreUtil.closeIgnoringException(stream);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12835734",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String md5(String plainText) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String md5(String plainText) {\n        String ret = null;\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            md.update(plainText.getBytes());\n            byte b[] = md.digest();\n            int i;\n            StringBuffer buf = new StringBuffer(\"\");\n            for (int offset = 0; offset < b.length; offset++) {\n                i = b[offset];\n                if (i < 0) i += 256;\n                if (i < 16) buf.append(\"0\");\n                buf.append(Integer.toHexString(i));\n            }\n            ret = buf.toString();\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n        return ret;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12838273",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic BufferedImage extractUsingCompositor() throws IOException, DjatokaException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public BufferedImage extractUsingCompositor() throws IOException, DjatokaException {\n        boolean useRegion = false;\n        int left = 0;\n        int top = 0;\n        int width = 50;\n        int height = 50;\n        boolean useleftDouble = false;\n        Double leftDouble = 0.0;\n        boolean usetopDouble = false;\n        Double topDouble = 0.0;\n        boolean usewidthDouble = false;\n        Double widthDouble = 0.0;\n        boolean useheightDouble = false;\n        Double heightDouble = 0.0;\n        if (params.getRegion() != null) {\n            StringTokenizer st = new StringTokenizer(params.getRegion(), \"{},\");\n            String token;\n            if ((token = st.nextToken()).contains(\".\")) {\n                topDouble = Double.parseDouble(token);\n                usetopDouble = true;\n            } else top = Integer.parseInt(token);\n            if ((token = st.nextToken()).contains(\".\")) {\n                leftDouble = Double.parseDouble(token);\n                useleftDouble = true;\n            } else left = Integer.parseInt(token);\n            if ((token = st.nextToken()).contains(\".\")) {\n                heightDouble = Double.parseDouble(token);\n                useheightDouble = true;\n            } else height = Integer.parseInt(token);\n            if ((token = st.nextToken()).contains(\".\")) {\n                widthDouble = Double.parseDouble(token);\n                usewidthDouble = true;\n            } else width = Integer.parseInt(token);\n            useRegion = true;\n        }\n        if (is != null) {\n            File f = File.createTempFile(\"tmp\", \".jp2\");\n            f.deleteOnExit();\n            FileOutputStream fos = new FileOutputStream(f);\n            sourceFile = f.getAbsolutePath();\n            IOUtils.copyStream(is, fos);\n        }\n        Kdu_simple_file_source raw_src = null;\n        Jp2_family_src family_src = new Jp2_family_src();\n        Jpx_source wrapped_src = new Jpx_source();\n        Kdu_region_compositor compositor = null;\n        BufferedImage image = null;\n        try {\n            family_src.Open(sourceFile);\n            int success = wrapped_src.Open(family_src, true);\n            if (success < 0) {\n                family_src.Close();\n                wrapped_src.Close();\n                raw_src = new Kdu_simple_file_source(sourceFile);\n            }\n            compositor = new Kdu_region_compositor();\n            if (raw_src != null) compositor.Create(raw_src); else compositor.Create(wrapped_src);\n            Kdu_dims imageDimensions = new Kdu_dims();\n            compositor.Get_total_composition_dims(imageDimensions);\n            Kdu_coords imageSize = imageDimensions.Access_size();\n            Kdu_coords imagePosition = imageDimensions.Access_pos();\n            if (useleftDouble) left = imagePosition.Get_x() + (int) Math.round(leftDouble * imageSize.Get_x());\n            if (usetopDouble) top = imagePosition.Get_y() + (int) Math.round(topDouble * imageSize.Get_y());\n            if (useheightDouble) height = (int) Math.round(heightDouble * imageSize.Get_y());\n            if (usewidthDouble) width = (int) Math.round(widthDouble * imageSize.Get_x());\n            if (useRegion) {\n                imageSize.Set_x(width);\n                imageSize.Set_y(height);\n                imagePosition.Set_x(left);\n                imagePosition.Set_y(top);\n            }\n            int reduce = 1 << params.getLevelReductionFactor();\n            imageSize.Set_x(imageSize.Get_x());\n            imageSize.Set_y(imageSize.Get_y());\n            imagePosition.Set_x(imagePosition.Get_x() / reduce - (1 / reduce - 1) / 2);\n            imagePosition.Set_y(imagePosition.Get_y() / reduce - (1 / reduce - 1) / 2);\n            Kdu_dims viewDims = new Kdu_dims();\n            viewDims.Assign(imageDimensions);\n            viewDims.Access_size().Set_x(imageSize.Get_x());\n            viewDims.Access_size().Set_y(imageSize.Get_y());\n            compositor.Add_compositing_layer(0, viewDims, viewDims);\n            if (params.getRotationDegree() == 90) compositor.Set_scale(true, false, true, 1.0F); else if (params.getRotationDegree() == 180) compositor.Set_scale(false, true, true, 1.0F); else if (params.getRotationDegree() == 270) compositor.Set_scale(true, true, false, 1.0F); else compositor.Set_scale(false, false, false, 1.0F);\n            compositor.Get_total_composition_dims(viewDims);\n            Kdu_coords viewSize = viewDims.Access_size();\n            compositor.Set_buffer_surface(viewDims);\n            int[] imgBuffer = new int[viewSize.Get_x() * viewSize.Get_y()];\n            Kdu_compositor_buf compositorBuffer = compositor.Get_composition_buffer(viewDims);\n            int regionBufferSize = 0;\n            int[] kduBuffer = null;\n            Kdu_dims newRegion = new Kdu_dims();\n            while (compositor.Process(100000, newRegion)) {\n                Kdu_coords newOffset = newRegion.Access_pos();\n                Kdu_coords newSize = newRegion.Access_size();\n                newOffset.Subtract(viewDims.Access_pos());\n                int newPixels = newSize.Get_x() * newSize.Get_y();\n                if (newPixels == 0) continue;\n                if (newPixels > regionBufferSize) {\n                    regionBufferSize = newPixels;\n                    kduBuffer = new int[regionBufferSize];\n                }\n                compositorBuffer.Get_region(newRegion, kduBuffer);\n                int imgBuffereIdx = newOffset.Get_x() + newOffset.Get_y() * viewSize.Get_x();\n                int kduBufferIdx = 0;\n                int xDiff = viewSize.Get_x() - newSize.Get_x();\n                for (int j = 0; j < newSize.Get_y(); j++, imgBuffereIdx += xDiff) {\n                    for (int i = 0; i < newSize.Get_x(); i++) {\n                        imgBuffer[imgBuffereIdx++] = kduBuffer[kduBufferIdx++];\n                    }\n                }\n            }\n            if (params.getRotationDegree() == 90 || params.getRotationDegree() == 270) image = new BufferedImage(imageSize.Get_y(), imageSize.Get_x(), BufferedImage.TYPE_INT_RGB); else image = new BufferedImage(imageSize.Get_x(), imageSize.Get_y(), BufferedImage.TYPE_INT_RGB);\n            image.setRGB(0, 0, viewSize.Get_x(), viewSize.Get_y(), imgBuffer, 0, viewSize.Get_x());\n            if (compositor != null) compositor.Native_destroy();\n            wrapped_src.Native_destroy();\n            family_src.Native_destroy();\n            if (raw_src != null) raw_src.Native_destroy();\n            return image;\n        } catch (KduException e) {\n            e.printStackTrace();\n            throw new DjatokaException(e);\n        } catch (Exception e) {\n            e.printStackTrace();\n            throw new DjatokaException(e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12838274",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic BufferedImage extract() throws DjatokaException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public BufferedImage extract() throws DjatokaException {\n        boolean useRegion = false;\n        int left = 0;\n        int top = 0;\n        int width = 50;\n        int height = 50;\n        boolean useleftDouble = false;\n        Double leftDouble = 0.0;\n        boolean usetopDouble = false;\n        Double topDouble = 0.0;\n        boolean usewidthDouble = false;\n        Double widthDouble = 0.0;\n        boolean useheightDouble = false;\n        Double heightDouble = 0.0;\n        if (params.getRegion() != null) {\n            StringTokenizer st = new StringTokenizer(params.getRegion(), \"{},\");\n            String token;\n            if ((token = st.nextToken()).contains(\".\")) {\n                topDouble = Double.parseDouble(token);\n                usetopDouble = true;\n            } else top = Integer.parseInt(token);\n            if ((token = st.nextToken()).contains(\".\")) {\n                leftDouble = Double.parseDouble(token);\n                useleftDouble = true;\n            } else left = Integer.parseInt(token);\n            if ((token = st.nextToken()).contains(\".\")) {\n                heightDouble = Double.parseDouble(token);\n                useheightDouble = true;\n            } else height = Integer.parseInt(token);\n            if ((token = st.nextToken()).contains(\".\")) {\n                widthDouble = Double.parseDouble(token);\n                usewidthDouble = true;\n            } else width = Integer.parseInt(token);\n            useRegion = true;\n        }\n        try {\n            if (is != null) {\n                File f = File.createTempFile(\"tmp\", \".jp2\");\n                f.deleteOnExit();\n                FileOutputStream fos = new FileOutputStream(f);\n                sourceFile = f.getAbsolutePath();\n                IOUtils.copyStream(is, fos);\n                is.close();\n                fos.close();\n            }\n        } catch (IOException e) {\n            throw new DjatokaException(e);\n        }\n        try {\n            Jp2_source inputSource = new Jp2_source();\n            Kdu_compressed_source input = null;\n            Jp2_family_src jp2_family_in = new Jp2_family_src();\n            Jp2_locator loc = new Jp2_locator();\n            jp2_family_in.Open(sourceFile, true);\n            inputSource.Open(jp2_family_in, loc);\n            inputSource.Read_header();\n            input = inputSource;\n            Kdu_codestream codestream = new Kdu_codestream();\n            codestream.Create(input);\n            Kdu_channel_mapping channels = new Kdu_channel_mapping();\n            if (inputSource.Exists()) channels.Configure(inputSource, false); else channels.Configure(codestream);\n            int ref_component = channels.Get_source_component(0);\n            Kdu_coords ref_expansion = getReferenceExpansion(ref_component, channels, codestream);\n            Kdu_dims image_dims = new Kdu_dims();\n            codestream.Get_dims(ref_component, image_dims);\n            Kdu_coords imageSize = image_dims.Access_size();\n            Kdu_coords imagePosition = image_dims.Access_pos();\n            if (useleftDouble) left = imagePosition.Get_x() + (int) Math.round(leftDouble * imageSize.Get_x());\n            if (usetopDouble) top = imagePosition.Get_y() + (int) Math.round(topDouble * imageSize.Get_y());\n            if (useheightDouble) height = (int) Math.round(heightDouble * imageSize.Get_y());\n            if (usewidthDouble) width = (int) Math.round(widthDouble * imageSize.Get_x());\n            if (useRegion) {\n                imageSize.Set_x(width);\n                imageSize.Set_y(height);\n                imagePosition.Set_x(left);\n                imagePosition.Set_y(top);\n            }\n            int reduce = 1 << params.getLevelReductionFactor();\n            imageSize.Set_x(imageSize.Get_x() * ref_expansion.Get_x());\n            imageSize.Set_y(imageSize.Get_y() * ref_expansion.Get_y());\n            imagePosition.Set_x(imagePosition.Get_x() * ref_expansion.Get_x() / reduce - ((ref_expansion.Get_x() / reduce - 1) / 2));\n            imagePosition.Set_y(imagePosition.Get_y() * ref_expansion.Get_y() / reduce - ((ref_expansion.Get_y() / reduce - 1) / 2));\n            Kdu_dims view_dims = new Kdu_dims();\n            view_dims.Assign(image_dims);\n            view_dims.Access_size().Set_x(imageSize.Get_x());\n            view_dims.Access_size().Set_y(imageSize.Get_y());\n            int region_buf_size = imageSize.Get_x() * imageSize.Get_y();\n            int[] region_buf = new int[region_buf_size];\n            Kdu_region_decompressor decompressor = new Kdu_region_decompressor();\n            decompressor.Start(codestream, channels, -1, params.getLevelReductionFactor(), 16384, image_dims, ref_expansion, new Kdu_coords(1, 1), false, Kdu_global.KDU_WANT_OUTPUT_COMPONENTS);\n            Kdu_dims new_region = new Kdu_dims();\n            Kdu_dims incomplete_region = new Kdu_dims();\n            Kdu_coords viewSize = view_dims.Access_size();\n            incomplete_region.Assign(image_dims);\n            int[] imgBuffer = new int[viewSize.Get_x() * viewSize.Get_y()];\n            int[] kduBuffer = null;\n            while (decompressor.Process(region_buf, image_dims.Access_pos(), 0, 0, region_buf_size, incomplete_region, new_region)) {\n                Kdu_coords newOffset = new_region.Access_pos();\n                Kdu_coords newSize = new_region.Access_size();\n                newOffset.Subtract(view_dims.Access_pos());\n                kduBuffer = region_buf;\n                int imgBuffereIdx = newOffset.Get_x() + newOffset.Get_y() * viewSize.Get_x();\n                int kduBufferIdx = 0;\n                int xDiff = viewSize.Get_x() - newSize.Get_x();\n                for (int j = 0; j < newSize.Get_y(); j++, imgBuffereIdx += xDiff) {\n                    for (int i = 0; i < newSize.Get_x(); i++) {\n                        imgBuffer[imgBuffereIdx++] = kduBuffer[kduBufferIdx++];\n                    }\n                }\n            }\n            BufferedImage image = new BufferedImage(imageSize.Get_x(), imageSize.Get_y(), BufferedImage.TYPE_INT_RGB);\n            image.setRGB(0, 0, viewSize.Get_x(), viewSize.Get_y(), imgBuffer, 0, viewSize.Get_x());\n            if (params.getRotationDegree() > 0) {\n                image = ImageProcessingUtils.rotate(image, params.getRotationDegree());\n            }\n            decompressor.Native_destroy();\n            channels.Native_destroy();\n            if (codestream.Exists()) codestream.Destroy();\n            inputSource.Native_destroy();\n            input.Native_destroy();\n            jp2_family_in.Native_destroy();\n            return image;\n        } catch (KduException e) {\n            e.printStackTrace();\n            throw new DjatokaException(e);\n        } catch (Exception e) {\n            e.printStackTrace();\n            throw new DjatokaException(e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12844597",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private String findTitle(URL url) {\n            HTMLEditorKit.ParserCallback callback;\n            try {\n                URLConnection conn = url.openConnection();\n                Reader rd = new InputStreamReader(conn.getInputStream());\n                ParserDelegator parser = new ParserDelegator();\n                callback = new Callback();\n                parser.parse(rd, callback, true);\n            } catch (Exception exp) {\n                System.err.println(exp);\n            }\n            return title;\n        }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12847055",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic MobileAgentProperties(Class declaringClass, String propertyFile) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public MobileAgentProperties(Class declaringClass, String propertyFile) throws IOException {\n            this.defaults = (MobileAgent) AnnotationElement.getAnyAnnotation(declaringClass, MobileAgent.class);\n            URL url = getClass().getClassLoader().getResource(propertyFile);\n            if (url != null) {\n                props.load(url.openStream());\n                log.info(\"MobileAgent parameters loaded from file \" + url);\n            }\n        }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12851326",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static boolean initLOG4JProperties(String homeDir) {\n        String Log4jURL = homeDir + LOG4J_URL;\n        try {\n            URL log4jurl = getURL(Log4jURL);\n            InputStream inStreamLog4j = log4jurl.openStream();\n            Properties propertiesLog4j = new Properties();\n            try {\n                propertiesLog4j.load(inStreamLog4j);\n                PropertyConfigurator.configure(propertiesLog4j);\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        } catch (Exception e) {\n            logger.info(\"Failed to initialize LOG4J with properties file.\");\n            return false;\n        }\n        return true;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12853333",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String getURLContent(String href) throws BuildException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String getURLContent(String href) throws BuildException {\n        URL url = null;\n        String content;\n        try {\n            URL context = new URL(\"file:\" + System.getProperty(\"user.dir\") + \"/\");\n            url = new URL(context, href);\n            InputStream is = url.openStream();\n            InputStreamReader isr = new InputStreamReader(is);\n            StringBuffer stringBuffer = new StringBuffer();\n            char[] buffer = new char[1024];\n            int len;\n            while ((len = isr.read(buffer, 0, 1024)) > 0) stringBuffer.append(buffer, 0, len);\n            content = stringBuffer.toString();\n            isr.close();\n        } catch (Exception ex) {\n            throw new BuildException(\"Cannot get content of URL \" + href + \": \" + ex);\n        }\n        return content;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12859344",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void sendFile(File file, HttpServletResponse response) throws IOException {\n        response.setContentLength((int) file.length());\n        InputStream inputStream = null;\n        try {\n            inputStream = new FileInputStream(file);\n            IOUtils.copy(inputStream, response.getOutputStream());\n        } finally {\n            IOUtils.closeQuietly(inputStream);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12863275",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n    protected Integer doInBackground() throws Exception {\n        int numOfRows = 0;\n        combinationMap = new HashMap<AnsweredQuestion, Integer>();\n        combinationMapReverse = new HashMap<Integer, AnsweredQuestion>();\n        LinkedHashSet<AnsweredQuestion> answeredQuestionSet = new LinkedHashSet<AnsweredQuestion>();\n        LinkedHashSet<Integer> studentSet = new LinkedHashSet<Integer>();\n        final String delimiter = \";\";\n        final String typeToProcess = \"F\";\n        String line;\n        String[] chunks = new String[9];\n        try {\n            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream(), \"ISO-8859-2\"));\n            in.readLine();\n            while ((line = in.readLine()) != null) {\n                chunks = line.split(delimiter);\n                numOfRows++;\n                if (chunks[2].equals(typeToProcess)) {\n                    answeredQuestionSet.add(new AnsweredQuestion(chunks[4], chunks[5]));\n                    studentSet.add(new Integer(chunks[0]));\n                }\n            }\n            in.close();\n            int i = 0;\n            Integer I;\n            for (AnsweredQuestion pair : answeredQuestionSet) {\n                I = new Integer(i++);\n                combinationMap.put(pair, I);\n                combinationMapReverse.put(I, pair);\n            }\n            matrix = new SparseObjectMatrix2D(answeredQuestionSet.size(), studentSet.size());\n            int lastStudentNumber = -1;\n            AnsweredQuestion pair;\n            in = new BufferedReader(new InputStreamReader(url.openStream(), \"ISO-8859-2\"));\n            in.readLine();\n            while ((line = in.readLine()) != null) {\n                chunks = line.split(delimiter);\n                pair = null;\n                if (chunks[2].equals(typeToProcess)) {\n                    if (Integer.parseInt(chunks[0]) != lastStudentNumber) {\n                        lastStudentNumber++;\n                    }\n                    pair = new AnsweredQuestion(chunks[4], chunks[5]);\n                    if (combinationMap.containsKey(pair)) {\n                        matrix.setQuick(combinationMap.get(pair), lastStudentNumber, Boolean.TRUE);\n                    }\n                }\n            }\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        supportVector = new int[combinationMap.size()];\n        ObjectMatrix1D row = null;\n        for (int i = 0; i < combinationMap.size(); i++) {\n            row = matrix.viewRow(i);\n            int sum = 0;\n            for (int k = 0; k < row.size(); k++) {\n                if (row.getQuick(k) != null && row.getQuick(k).equals(Boolean.TRUE)) {\n                    sum++;\n                }\n            }\n            supportVector[i] = sum;\n        }\n        applet.combinationMap = this.combinationMap;\n        applet.combinationMapReverse = this.combinationMapReverse;\n        applet.matrix = this.matrix;\n        applet.supportVector = supportVector;\n        System.out.println(\"data loaded.\");\n        return null;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12863885",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static String md5(String input) {\n        String res = \"\";\n        try {\n            MessageDigest cript = MessageDigest.getInstance(\"MD5\");\n            cript.reset();\n            cript.update(input.getBytes());\n            byte[] md5 = cript.digest();\n            String tmp = \"\";\n            for (int i = 0; i < md5.length; i++) {\n                tmp = (Integer.toHexString(0xFF & md5[i]));\n                if (tmp.length() == 1) {\n                    res += \"0\" + tmp;\n                } else {\n                    res += tmp;\n                }\n            }\n        } catch (NoSuchAlgorithmException ex) {\n            Log4k.error(pdfPrinter.class.getName(), ex.getMessage());\n        }\n        return res;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12869602",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void test_validate_tag_getTopAlbums() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Test\n    public void test_validate_tag_getTopAlbums() {\n        try {\n            SchemaFactory factory = SchemaFactory.newInstance(\"http://www.w3.org/2001/XMLSchema\");\n            File schemaLocation = new File(\"tes.xsd\");\n            Schema schema = factory.newSchema(schemaLocation);\n            Validator validator = schema.newValidator();\n            URL url = new URL(\"http://ws.audioscrobbler.com/2.0/?method=tag.gettopalbums&tag=disco&api_key=b25b959554ed76058ac220b7b2e0a026\");\n            InputStream inputStream = url.openStream();\n            Source source = new StreamSource(inputStream);\n            validator.validate(source);\n        } catch (IOException ex) {\n            Logger.getLogger(GetTopAlbums_Test.class.getName()).log(Level.SEVERE, null, ex);\n            assertFalse(\"File not found\", true);\n        } catch (SAXException ex) {\n            Logger.getLogger(GetTopAlbums_Test.class.getName()).log(Level.SEVERE, null, ex);\n            assertFalse(\"Schema did not validate\", true);\n        }\n        assertTrue(true);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12876684",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic String getMD5(String data) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public String getMD5(String data) {\n        try {\n            MessageDigest md5Algorithm = MessageDigest.getInstance(\"MD5\");\n            md5Algorithm.update(data.getBytes(), 0, data.length());\n            byte[] digest = md5Algorithm.digest();\n            StringBuffer hexString = new StringBuffer();\n            String hexDigit = null;\n            for (int i = 0; i < digest.length; i++) {\n                hexDigit = Integer.toHexString(0xFF & digest[i]);\n                if (hexDigit.length() < 2) {\n                    hexDigit = \"0\" + hexDigit;\n                }\n                hexString.append(hexDigit);\n            }\n            return hexString.toString();\n        } catch (NoSuchAlgorithmException ne) {\n            return data;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12879112",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "protected String getGraphPath(String name) throws ServletException {\n        String hash;\n        try {\n            MessageDigest md = MessageDigest.getInstance(m_messagedigest_algorithm);\n            md.update(name.getBytes());\n            hash = bytesToHex(md.digest());\n        } catch (NoSuchAlgorithmException e) {\n            throw new ServletException(\"NoSuchAlgorithmException while \" + \"attempting to hash file name: \" + e);\n        }\n        File tempDir = (File) getServletContext().getAttribute(\"javax.servlet.context.tempdir\");\n        return tempDir.getAbsolutePath() + File.separatorChar + hash;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12879117",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "protected String insertCommand(String command) throws ServletException {\n        String digest;\n        try {\n            MessageDigest md = MessageDigest.getInstance(m_messagedigest_algorithm);\n            md.update(command.getBytes());\n            byte bytes[] = new byte[20];\n            m_random.nextBytes(bytes);\n            md.update(bytes);\n            digest = bytesToHex(md.digest());\n        } catch (NoSuchAlgorithmException e) {\n            throw new ServletException(\"NoSuchAlgorithmException while \" + \"attempting to generate graph ID: \" + e);\n        }\n        String id = System.currentTimeMillis() + \"-\" + digest;\n        m_map.put(id, command);\n        return id;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12881123",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "ServerInfo getServerInfo(String key, String protocol) throws InvalidKeyException, NoSuchAlgorithmException, InvalidKeySpecException, NoSuchPaddingException, IOException, ClassNotFoundException, IllegalBlockSizeException, BadPaddingException {\n        DESedeKeySpec ks = new DESedeKeySpec(Base64.decode(key));\n        SecretKeyFactory skf = SecretKeyFactory.getInstance(\"DESede\");\n        SecretKey sk = skf.generateSecret(ks);\n        Cipher cipher = Cipher.getInstance(\"DESede\");\n        cipher.init(Cipher.DECRYPT_MODE, sk);\n        ClassLoader cl = this.getClass().getClassLoader();\n        URL url = cl.getResource(protocol + \".sobj\");\n        JarURLConnection jc = (JarURLConnection) url.openConnection();\n        ObjectInputStream os = new ObjectInputStream(jc.getInputStream());\n        SealedObject so = (SealedObject) os.readObject();\n        return (ServerInfo) so.getObject(cipher);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12883117",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic PhoneSetImpl(URL url) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public PhoneSetImpl(URL url) throws IOException {\n        BufferedReader reader;\n        String line;\n        phonesetMap = new HashMap();\n        reader = new BufferedReader(new InputStreamReader(url.openStream()));\n        line = reader.readLine();\n        lineCount++;\n        while (line != null) {\n            if (!line.startsWith(\"***\")) {\n                parseAndAdd(line);\n            }\n            line = reader.readLine();\n        }\n        reader.close();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12883277",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void createWikiPages(WikiContext context) throws PluginException {\n        OntologyWikiPageName owpn = new OntologyWikiPageName(omemo.getFormDataAlias().toUpperCase(), omemo.getFormDataVersionDate());\n        String wikiPageFullFileName = WikiPageName2FullFileName(context, owpn.toString());\n        String rdfFileNameWithPath = getWorkDir(context) + File.separator + owpn.toFileName();\n        FileOutputStream fos = null;\n        FileInputStream fis = null;\n        try {\n            fos = new FileOutputStream(wikiPageFullFileName);\n            fis = new FileInputStream(rdfFileNameWithPath);\n            InfoExtractor infoe = new InfoExtractor(fis, omemo.getFormDataNS(), omemo.getFormDataOntLang());\n            infoe.writePage(getWorkDir(context), owpn, Omemo.checksWikiPageName);\n            fis.close();\n            fos.close();\n        } catch (Exception e) {\n            log.error(\"Can not read local rdf file or can not write wiki page\");\n            throw new PluginException(\"Error creating wiki pages. See logs\");\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12887758",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String getSignature(String s) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String getSignature(String s) {\n        try {\n            final AsciiEncoder coder = new AsciiEncoder();\n            final MessageDigest msgDigest = MessageDigest.getInstance(\"MD5\");\n            msgDigest.update(s.getBytes(\"UTF-8\"));\n            final byte[] digest = msgDigest.digest();\n            return coder.encode(digest);\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n            throw new IllegalStateException();\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n            throw new IllegalStateException();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12887881",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static byte[] request(String remoteUrl, boolean keepalive) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static byte[] request(String remoteUrl, boolean keepalive) throws Exception {\n        Log.d(TAG, String.format(\"started request(remote=%s)\", remoteUrl));\n        Process.setThreadPriority(Process.THREAD_PRIORITY_LOWEST);\n        byte[] buffer = new byte[1024];\n        URL url = new URL(remoteUrl);\n        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n        connection.setAllowUserInteraction(false);\n        connection.setRequestProperty(\"Viewer-Only-Client\", \"1\");\n        connection.setRequestProperty(\"Client-Daap-Version\", \"3.10\");\n        connection.setRequestProperty(\"Accept-Encoding\", \"gzip, deflate\");\n        if (!keepalive) {\n            connection.setConnectTimeout(1200000);\n            connection.setReadTimeout(1200000);\n        } else {\n            connection.setReadTimeout(0);\n        }\n        connection.connect();\n        if (connection.getResponseCode() >= HttpURLConnection.HTTP_UNAUTHORIZED) throw new RequestException(\"HTTP Error Response Code: \" + connection.getResponseCode(), connection.getResponseCode());\n        String encoding = connection.getContentEncoding();\n        InputStream inputStream = null;\n        if (encoding != null && encoding.equalsIgnoreCase(\"gzip\")) {\n            inputStream = new GZIPInputStream(connection.getInputStream());\n        } else if (encoding != null && encoding.equalsIgnoreCase(\"deflate\")) {\n            inputStream = new InflaterInputStream(connection.getInputStream(), new Inflater(true));\n        } else {\n            inputStream = connection.getInputStream();\n        }\n        ByteArrayOutputStream os = new ByteArrayOutputStream();\n        try {\n            int bytesRead;\n            while ((bytesRead = inputStream.read(buffer)) != -1) {\n                os.write(buffer, 0, bytesRead);\n            }\n        } finally {\n            if (os != null) {\n                os.flush();\n                os.close();\n            }\n            if (inputStream != null) {\n                inputStream.close();\n            }\n        }\n        return os.toByteArray();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12894191",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void doHandler(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n    public void doHandler(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\n        String directURL = request.getRequestURL().toString();\n        response.setCharacterEncoding(\"gbk\");\n        PrintWriter out = response.getWriter();\n        try {\n            directURL = urlTools.urlFilter(directURL, true);\n            URL url = new URL(directURL);\n            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream(), \"gbk\"));\n            String line;\n            while ((line = in.readLine()) != null) {\n                out.println(line);\n            }\n            in.close();\n        } catch (Exception e) {\n            out.println(\"file not find\");\n        }\n        out.flush();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12903179",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copyFile(File sourceFile, File destFile) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copyFile(File sourceFile, File destFile) throws IOException {\n        if (!sourceFile.exists()) {\n            return;\n        }\n        if (!destFile.exists()) {\n            destFile.createNewFile();\n        }\n        FileChannel source = null;\n        FileChannel destination = null;\n        source = new FileInputStream(sourceFile).getChannel();\n        destination = new FileOutputStream(destFile).getChannel();\n        if (destination != null && source != null) {\n            destination.transferFrom(source, 0, source.size());\n        }\n        if (source != null) {\n            source.close();\n        }\n        if (destination != null) {\n            destination.close();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12907074",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static int sendButton(String url, String id, String command) throws ClientProtocolException, IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static int sendButton(String url, String id, String command) throws ClientProtocolException, IOException {\n        String connectString = url + \"/rest/button/\" + id + \"/\" + command;\n        HttpClient client = new DefaultHttpClient();\n        HttpPost post = new HttpPost(connectString);\n        HttpResponse response = client.execute(post);\n        int code = response.getStatusLine().getStatusCode();\n        return code;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12908231",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void readFromStorableInput(String filename) {\n        try {\n            URL url = new URL(getCodeBase(), filename);\n            InputStream stream = url.openStream();\n            StorableInput input = new StorableInput(stream);\n            fDrawing.release();\n            fDrawing = (Drawing) input.readStorable();\n            view().setDrawing(fDrawing);\n        } catch (IOException e) {\n            initDrawing();\n            showStatus(\"Error:\" + e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12908232",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void readFromObjectInput(String filename) {\n        try {\n            URL url = new URL(getCodeBase(), filename);\n            InputStream stream = url.openStream();\n            ObjectInput input = new ObjectInputStream(stream);\n            fDrawing.release();\n            fDrawing = (Drawing) input.readObject();\n            view().setDrawing(fDrawing);\n        } catch (IOException e) {\n            initDrawing();\n            showStatus(\"Error: \" + e);\n        } catch (ClassNotFoundException e) {\n            initDrawing();\n            showStatus(\"Class not found: \" + e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12908415",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private synchronized void persist() {\n        Connection conn = null;\n        try {\n            PoolManager pm = PoolManager.getInstance();\n            conn = pm.getConnection(JukeXTrackStore.DB_NAME);\n            conn.setAutoCommit(false);\n            Statement state = conn.createStatement();\n            state.executeUpdate(\"DELETE FROM PlaylistEntry WHERE playlistid=\" + this.id);\n            if (this.size() > 0) {\n                StringBuffer sql = new StringBuffer();\n                sql.append(\"INSERT INTO PlaylistEntry ( playlistid , trackid , position ) VALUES \");\n                int location = 0;\n                Iterator i = ll.iterator();\n                while (i.hasNext()) {\n                    long currTrackID = ((DatabaseObject) i.next()).getId();\n                    sql.append('(').append(this.id).append(',').append(currTrackID).append(',').append(location++).append(')');\n                    if (i.hasNext()) sql.append(',');\n                }\n                state.executeUpdate(sql.toString());\n            }\n            conn.commit();\n            conn.setAutoCommit(true);\n            state.close();\n        } catch (SQLException se) {\n            try {\n                conn.rollback();\n            } catch (SQLException ignore) {\n            }\n            log.error(\"Encountered an error persisting a playlist\", se);\n        } finally {\n            try {\n                conn.close();\n            } catch (SQLException ignore) {\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12909291",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void render(Map model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void render(Map model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        response.setContentType(s_contentType);\n        response.setHeader(\"Cache-control\", \"no-cache\");\n        InputStream graphStream = getGraphStream(request);\n        OutputStream out = getOutputStream(response);\n        IOUtils.copy(graphStream, out);\n        out.flush();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_00129098",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic Configuration(URL url) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public Configuration(URL url) {\n        InputStream in = null;\n        try {\n            load(in = url.openStream());\n        } catch (Exception e) {\n            throw new RuntimeException(\"Could not load configuration from \" + url, e);\n        } finally {\n            if (in != null) {\n                try {\n                    in.close();\n                } catch (IOException ignore) {\n                }\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12913232",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        String fullUrl = req.getRequestURL().toString();\n        if (fullUrl.indexOf(ip) != -1) {\n            fullUrl = fullUrl.replaceAll(ip, \"a.tbcdn.cn\");\n        }\n        URL url = new URL(fullUrl);\n        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n        PrintWriter out = resp.getWriter();\n        String line;\n        while ((line = in.readLine()) != null) {\n            out.println(line);\n        }\n        in.close();\n        out.flush();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12914531",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic int procesar() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public int procesar() {\n        int mas = 0;\n        String uriOntologia = \"\", source = \"\", uri = \"\";\n        String fichOrigenHTML = \"\", fichOrigenLN = \"\";\n        String ficheroOutOWL = \"\";\n        md5 firma = null;\n        StringTokenV2 entra = null, entra2 = null, entra3 = null;\n        FileInputStream lengNat = null;\n        BufferedInputStream lengNat2 = null;\n        DataInputStream entradaLenguajeNatural = null;\n        FileWriter salOWL = null;\n        BufferedWriter salOWL2 = null;\n        PrintWriter salidaOWL = null;\n        String sujeto = \"\", verbo = \"\", CD = \"\", CI = \"\", fraseOrigen = \"\";\n        StringTokenV2 token2;\n        boolean bandera = false;\n        OntClass c = null;\n        OntClass cBak = null;\n        String claseTrabajo = \"\";\n        String nombreClase = \"\", nombrePropiedad = \"\", variasPalabras = \"\";\n        int incre = 0, emergencia = 0;\n        String lineaSalida = \"\";\n        String[] ontologia = new String[5];\n        ontologia[0] = \"http://www.criado.info/owl/vertebrados_es.owl#\";\n        ontologia[1] = \"http://www.w3.org/2001/sw/WebOnt/guide-src/wine#\";\n        ontologia[2] = \"http://www.co-ode.org/ontologies/pizza/2005/10/18/pizza.owl#\";\n        ontologia[3] = \"http://www.w3.org/2001/sw/WebOnt/guide-src/food#\";\n        ontologia[4] = \"http://www.daml.org/2001/01/gedcom/gedcom#\";\n        String[] ontologiaSource = new String[5];\n        ontologiaSource[0] = this.directorioMapeo + \"\\\\\" + \"mapeo_vertebrados_es.xml\";\n        ontologiaSource[1] = this.directorioMapeo + \"\\\\\" + \"mapeo_wine_es.xml\";\n        ontologiaSource[2] = this.directorioMapeo + \"\\\\\" + \"mapeo_pizza_es.xml\";\n        ontologiaSource[3] = this.directorioMapeo + \"\\\\\" + \"mapeo_food_es.xml\";\n        ontologiaSource[4] = this.directorioMapeo + \"\\\\\" + \"mapeo_parentesco_es.xml\";\n        mapeoIdiomas clasesOntologias;\n        try {\n            if ((entrada = entradaFichero.readLine()) != null) {\n                if (entrada.trim().length() > 10) {\n                    entrada2 = new StringTokenV2(entrada.trim(), \"\\\"\");\n                    if (entrada2.isIncluidaSubcadena(\"<fichero ontologia=\")) {\n                        ontologiaOrigen = entrada2.getToken(2);\n                        fichOrigenHTML = entrada2.getToken(4);\n                        fichOrigenLN = entrada2.getToken(6);\n                        if (ontologiaOrigen.equals(\"VERTEBRADOS\")) {\n                            source = ontologiaSource[0];\n                            uriOntologia = ontologia[0];\n                        }\n                        if (ontologiaOrigen.equals(\"WINE\")) {\n                            source = ontologiaSource[1];\n                            uriOntologia = ontologia[1];\n                        }\n                        if (ontologiaOrigen.equals(\"PIZZA\")) {\n                            source = ontologiaSource[2];\n                            uriOntologia = ontologia[2];\n                        }\n                        if (ontologiaOrigen.equals(\"FOOD\")) {\n                            source = ontologiaSource[3];\n                            uriOntologia = ontologia[3];\n                        }\n                        if (ontologiaOrigen.equals(\"PARENTESCOS\")) {\n                            source = ontologiaSource[4];\n                            uriOntologia = ontologia[4];\n                        }\n                        firma = new md5(uriOntologia, false);\n                        clasesOntologias = new mapeoIdiomas(source);\n                        uri = \"\";\n                        ficheroOutOWL = \"\";\n                        entra2 = new StringTokenV2(fichOrigenHTML, \"\\\\\");\n                        int numToken = entra2.getNumeroTokenTotales();\n                        entra = new StringTokenV2(fichOrigenHTML, \" \");\n                        if (entra.isIncluidaSubcadena(directorioLocal)) {\n                            entra = new StringTokenV2(entra.getQuitar(directorioLocal) + \"\", \" \");\n                            uri = entra.getCambiar(\"\\\\\", \"/\");\n                            uri = entra.getQuitar(entra2.getToken(numToken)) + \"\";\n                            entra3 = new StringTokenV2(entra2.getToken(numToken), \".\");\n                            ficheroOutOWL = entra3.getToken(1) + \"_\" + firma.toString() + \".owl\";\n                            uri = urlPatron + uri + ficheroOutOWL;\n                        }\n                        entra3 = new StringTokenV2(fichOrigenHTML, \".\");\n                        ficheroOutOWL = entra3.getToken(1) + \"_\" + firma.toString() + \".owl\";\n                        lineaSalida = \"<vistasemantica origen=\\\"\" + fichOrigenLN + \"\\\" destino=\\\"\" + uri + \"\\\" />\";\n                        lengNat = new FileInputStream(fichOrigenLN);\n                        lengNat2 = new BufferedInputStream(lengNat);\n                        entradaLenguajeNatural = new DataInputStream(lengNat2);\n                        salOWL = new FileWriter(ficheroOutOWL);\n                        salOWL2 = new BufferedWriter(salOWL);\n                        salidaOWL = new PrintWriter(salOWL2);\n                        while ((entradaInstancias = entradaLenguajeNatural.readLine()) != null) {\n                            sujeto = \"\";\n                            verbo = \"\";\n                            CD = \"\";\n                            CI = \"\";\n                            fraseOrigen = \"\";\n                            if (entradaInstancias.trim().length() > 10) {\n                                entrada2 = new StringTokenV2(entradaInstancias.trim(), \"\\\"\");\n                                if (entrada2.isIncluidaSubcadena(\"<oracion sujeto=\")) {\n                                    sujeto = entrada2.getToken(2).trim();\n                                    verbo = entrada2.getToken(4).trim();\n                                    CD = entrada2.getToken(6).trim();\n                                    CI = entrada2.getToken(8).trim();\n                                    fraseOrigen = entrada2.getToken(10).trim();\n                                    if (sujeto.length() > 0 & verbo.length() > 0 & CD.length() > 0) {\n                                        bandera = false;\n                                        c = null;\n                                        cBak = null;\n                                        nombreClase = clasesOntologias.getClaseInstancia(CD);\n                                        if (nombreClase.length() > 0) {\n                                            bandera = true;\n                                        }\n                                        if (bandera) {\n                                            if (incre == 0) {\n                                                salidaOWL.write(\" <rdf:RDF        \" + \"\\n\");\n                                                salidaOWL.write(\"     xmlns:j.0=\\\"\" + uriOntologia + \"\\\"\" + \"\\n\");\n                                                salidaOWL.write(\"     xmlns:protege=\\\"http://protege.stanford.edu/plugins/owl/protege#\\\"\" + \"\\n\");\n                                                salidaOWL.write(\"     xmlns:rdf=\\\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\\\"\" + \"\\n\");\n                                                salidaOWL.write(\"     xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema#\\\"\" + \"\\n\");\n                                                salidaOWL.write(\"     xmlns:rdfs=\\\"http://www.w3.org/2000/01/rdf-schema#\\\"\" + \"\\n\");\n                                                salidaOWL.write(\"     xmlns:owl=\\\"http://www.w3.org/2002/07/owl#\\\"    \" + \"\\n\");\n                                                salidaOWL.write(\"     xmlns=\\\"\" + uri + \"#\\\"\" + \"\\n\");\n                                                salidaOWL.write(\"   xml:base=\\\"\" + uri + \"\\\">\" + \"\\n\");\n                                                salidaOWL.write(\"   <owl:Ontology rdf:about=\\\"\\\">\" + \"\\n\");\n                                                salidaOWL.write(\"     <owl:imports rdf:resource=\\\"\" + uriOntologia + \"\\\"/>\" + \"\\n\");\n                                                salidaOWL.write(\"   </owl:Ontology>\" + \"\\n\");\n                                                salidaOWL.flush();\n                                                salida.write(lineaSalida + \"\\n\");\n                                                salida.flush();\n                                                incre = 1;\n                                            }\n                                            salidaOWL.write(\"    <j.0:\" + nombreClase + \" rdf:ID=\\\"\" + sujeto.toUpperCase() + \"\\\"/>\" + \"\\n\");\n                                            salidaOWL.write(\"    <owl:AllDifferent>\" + \"\\n\");\n                                            salidaOWL.write(\"      <owl:distinctMembers rdf:parseType=\\\"Collection\\\">\" + \"\\n\");\n                                            salidaOWL.write(\"        <\" + nombreClase + \" rdf:about=\\\"#\" + sujeto.toUpperCase() + \"\\\"/>\" + \"\\n\");\n                                            salidaOWL.write(\"      </owl:distinctMembers>\" + \"\\n\");\n                                            salidaOWL.write(\"    </owl:AllDifferent>\" + \"\\n\");\n                                            salidaOWL.flush();\n                                            bandera = false;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        salidaOWL.write(\" </rdf:RDF>\" + \"\\n\" + \"\\n\");\n                        salidaOWL.write(\"<!-- Creado por [html2ws]  http://www.luis.criado.org -->\" + \"\\n\");\n                        salidaOWL.flush();\n                    }\n                }\n                mas = 1;\n            } else {\n                salida.write(\"</listaVistasSemanticas>\\n\");\n                salida.flush();\n                salida.close();\n                bw2.close();\n                fw2.close();\n                salidaOWL.close();\n                entradaFichero.close();\n                ent2.close();\n                ent1.close();\n                mas = -1;\n            }\n        } catch (Exception e) {\n            mas = -2;\n            salida.write(\"No se encuentra: \" + fichOrigen + \"\\n\");\n            salida.flush();\n        }\n        return mas;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12914949",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void downloadImage(final String sImgName) {\n        if (sImgName != null && sImgName.length() > 0) {\n            File f = new File(m_sTargetDir);\n            if (f.canWrite()) {\n                f = new File(f, sImgName);\n                if (!f.exists()) {\n                    try {\n                        URL url = new URL(m_sCodeBase + '/' + sImgName);\n                        BufferedInputStream is = new BufferedInputStream(url.openStream());\n                        BufferedOutputStream os = new BufferedOutputStream(new FileOutputStream(f));\n                        int c;\n                        while ((c = is.read()) != -1) {\n                            os.write(c);\n                        }\n                        is.close();\n                        os.close();\n                    } catch (Exception exc) {\n                        System.out.println(\"TestImagesHelper::downloadImage(): \" + exc);\n                    }\n                }\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12915753",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private String readDataFromUrl(URL url) throws IOException {\n        InputStream inputStream = null;\n        InputStreamReader streamReader = null;\n        BufferedReader in = null;\n        StringBuffer data = new StringBuffer();\n        try {\n            inputStream = url.openStream();\n            streamReader = new InputStreamReader(inputStream);\n            in = new BufferedReader(streamReader);\n            String inputLine;\n            while ((inputLine = in.readLine()) != null) data.append(inputLine);\n        } finally {\n            if (in != null) {\n                in.close();\n            }\n            if (streamReader != null) {\n                streamReader.close();\n            }\n            if (inputStream != null) {\n                inputStream.close();\n            }\n        }\n        return data.toString();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01292366",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void command() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void command() {\n        JFileChooser chooser = new JFileChooser();\n        chooser.setCurrentDirectory(new File(dir));\n        int returnVal = chooser.showOpenDialog(null);\n        if (returnVal == JFileChooser.APPROVE_OPTION) {\n            filename = chooser.getSelectedFile().getAbsolutePath();\n            String f2 = \"\";\n            for (int i = 0; i < filename.length(); ++i) {\n                if (filename.charAt(i) != '\\\\') {\n                    f2 = f2 + filename.charAt(i);\n                } else f2 = f2 + '/';\n            }\n            filename = f2;\n            if (filename.contains(dir)) {\n                filename = filename.substring(dir.length());\n            } else {\n                try {\n                    FileChannel srcFile = new FileInputStream(filename).getChannel();\n                    FileChannel dstFile;\n                    filename = \"ueditor_files/\" + chooser.getSelectedFile().getName();\n                    File newFile;\n                    if (!(newFile = new File(dir + filename)).createNewFile()) {\n                        dstFile = new FileInputStream(dir + filename).getChannel();\n                        newFile = null;\n                    } else {\n                        dstFile = new FileOutputStream(newFile).getChannel();\n                    }\n                    dstFile.transferFrom(srcFile, 0, srcFile.size());\n                    srcFile.close();\n                    dstFile.close();\n                    System.out.println(\"file copyed to: \" + dir + filename);\n                } catch (Exception e) {\n                    e.printStackTrace();\n                    label.setIcon(InputText.iconX);\n                    filename = null;\n                    for (Group g : groups) {\n                        g.updateValidity(true);\n                    }\n                    return;\n                }\n            }\n            label.setIcon(InputText.iconV);\n            for (Group g : groups) {\n                g.updateValidity(true);\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12923790",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void insertContent(ImageData imageData, Element element) {\n        URL url = getClass().getResource(imageData.getURL());\n        try {\n            File imageFileRead = new File(url.toURI());\n            FileInputStream inputStream = new FileInputStream(imageFileRead);\n            String imageFileWritePath = \"htmlReportFiles\" + \"/\" + imageData.getURL();\n            File imageFileWrite = new File(imageFileWritePath);\n            String[] filePathTokens = imageFileWritePath.split(\"/\");\n            String directoryPathCreate = filePathTokens[0];\n            int i = 1;\n            while (i < filePathTokens.length - 1) {\n                directoryPathCreate = directoryPathCreate + \"/\" + filePathTokens[i];\n                i++;\n            }\n            File fileDirectoryPathCreate = new File(directoryPathCreate);\n            if (!fileDirectoryPathCreate.exists()) {\n                boolean successfulFileCreation = fileDirectoryPathCreate.mkdirs();\n                if (successfulFileCreation == false) {\n                    throw new ExplanationException(\"Unable to create folders in path \" + directoryPathCreate);\n                }\n            }\n            FileOutputStream fileOutputStream = new FileOutputStream(imageFileWrite);\n            byte[] data = new byte[1024];\n            int readDataNumberOfBytes = 0;\n            while (readDataNumberOfBytes != -1) {\n                readDataNumberOfBytes = inputStream.read(data, 0, data.length);\n                if (readDataNumberOfBytes != -1) {\n                    fileOutputStream.write(data, 0, readDataNumberOfBytes);\n                }\n            }\n            inputStream.close();\n            fileOutputStream.close();\n        } catch (Exception ex) {\n            throw new ExplanationException(ex.getMessage());\n        }\n        String caption = imageData.getCaption();\n        Element imageElement = element.addElement(\"img\");\n        if (imageData.getURL().charAt(0) != '/') imageElement.addAttribute(\"src\", \"htmlReportFiles\" + \"/\" + imageData.getURL()); else imageElement.addAttribute(\"src\", \"htmlReportFiles\" + imageData.getURL());\n        imageElement.addAttribute(\"alt\", \"image not available\");\n        if (caption != null) {\n            element.addElement(\"br\");\n            element.addText(caption);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12927596",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void get_PK_data() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void get_PK_data() {\n        try {\n            FileWriter file_writer = new FileWriter(\"xml_data/PK_data_dump.xml\");\n            BufferedWriter file_buffered_writer = new BufferedWriter(file_writer);\n            URL fdt = new URL(\"http://opendata.5t.torino.it/get_pk\");\n            URLConnection url_connection = fdt.openConnection();\n            BufferedReader in = new BufferedReader(new InputStreamReader(url_connection.getInputStream()));\n            String input_line;\n            int num_lines = 0;\n            while ((input_line = in.readLine()) != null) {\n                file_buffered_writer.write(input_line + \"\\n\");\n                num_lines++;\n            }\n            System.out.println(\"Parking :: Writed \" + num_lines + \" lines.\");\n            in.close();\n        } catch (Exception e) {\n            System.err.println(\"Error: \" + e.getMessage());\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12935678",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static String makeMD5(String str) {\n        byte[] bytes = new byte[32];\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            md.update(str.getBytes(\"iso-8859-1\"), 0, str.length());\n            bytes = md.digest();\n        } catch (Exception e) {\n            return null;\n        }\n        return convertToHex(bytes);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01293656",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic int addDecisionInstruction(int condition, String frameSlot, String linkName, int objectId, String attribute, int positive, int negative) throws FidoDatabaseException, ObjectNotFoundException, InstructionNotFoundException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public int addDecisionInstruction(int condition, String frameSlot, String linkName, int objectId, String attribute, int positive, int negative) throws FidoDatabaseException, ObjectNotFoundException, InstructionNotFoundException {\n        try {\n            Connection conn = null;\n            Statement stmt = null;\n            try {\n                if ((condition == ConditionalOperatorTable.CONTAINS_LINK) || (condition == ConditionalOperatorTable.NOT_CONTAINS_LINK)) {\n                    ObjectTable ot = new ObjectTable();\n                    if (ot.contains(objectId) == false) throw new ObjectNotFoundException(objectId);\n                }\n                conn = fido.util.FidoDataSource.getConnection();\n                conn.setAutoCommit(false);\n                stmt = conn.createStatement();\n                if (contains(stmt, positive) == false) throw new InstructionNotFoundException(positive);\n                if (contains(stmt, negative) == false) throw new InstructionNotFoundException(negative);\n                String sql = \"insert into Instructions (Type, Operator, FrameSlot, LinkName, ObjectId, AttributeName) \" + \"values (2, \" + condition + \", '\" + frameSlot + \"', '\" + linkName + \"', \" + objectId + \", '\" + attribute + \"')\";\n                stmt.executeUpdate(sql);\n                int id = getCurrentId(stmt);\n                InstructionGroupTable groupTable = new InstructionGroupTable();\n                groupTable.deleteInstruction(stmt, id);\n                if (positive != -1) groupTable.addInstructionAt(stmt, id, 1, positive);\n                if (negative != -1) groupTable.addInstructionAt(stmt, id, 2, negative);\n                conn.commit();\n                return id;\n            } catch (SQLException e) {\n                if (conn != null) conn.rollback();\n                throw e;\n            } finally {\n                if (stmt != null) stmt.close();\n                if (conn != null) conn.close();\n            }\n        } catch (SQLException e) {\n            throw new FidoDatabaseException(e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01293657",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void modifyDecisionInstruction(int id, int condition, String frameSlot, String linkName, int objectId, String attribute, int positive, int negative) throws FidoDatabaseException, ObjectNotFoundException, InstructionNotFoundException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void modifyDecisionInstruction(int id, int condition, String frameSlot, String linkName, int objectId, String attribute, int positive, int negative) throws FidoDatabaseException, ObjectNotFoundException, InstructionNotFoundException {\n        try {\n            Connection conn = null;\n            Statement stmt = null;\n            try {\n                if ((condition == ConditionalOperatorTable.CONTAINS_LINK) || (condition == ConditionalOperatorTable.NOT_CONTAINS_LINK)) {\n                    ObjectTable ot = new ObjectTable();\n                    if (ot.contains(objectId) == false) throw new ObjectNotFoundException(objectId);\n                }\n                conn = fido.util.FidoDataSource.getConnection();\n                conn.setAutoCommit(false);\n                stmt = conn.createStatement();\n                if (contains(stmt, positive) == false) throw new InstructionNotFoundException(positive);\n                if (contains(stmt, negative) == false) throw new InstructionNotFoundException(negative);\n                String sql = \"update Instructions set Operator = \" + condition + \", \" + \"                        FrameSlot = '\" + frameSlot + \"', \" + \"                        LinkName = '\" + linkName + \"', \" + \"                        ObjectId = \" + objectId + \", \" + \"                        AttributeName = '\" + attribute + \"' \" + \"where InstructionId = \" + id;\n                stmt.executeUpdate(sql);\n                InstructionGroupTable groupTable = new InstructionGroupTable();\n                groupTable.deleteInstruction(stmt, id);\n                if (positive != -1) groupTable.addInstructionAt(stmt, id, 1, positive);\n                if (negative != -1) groupTable.addInstructionAt(stmt, id, 2, negative);\n                conn.commit();\n            } catch (SQLException e) {\n                if (conn != null) conn.rollback();\n                throw e;\n            } finally {\n                if (stmt != null) stmt.close();\n                if (conn != null) conn.close();\n            }\n        } catch (SQLException e) {\n            throw new FidoDatabaseException(e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01293658",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic int addCollectionInstruction() throws FidoDatabaseException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public int addCollectionInstruction() throws FidoDatabaseException {\n        try {\n            Connection conn = null;\n            Statement stmt = null;\n            try {\n                String sql = \"insert into Instructions (Type, Operator) \" + \"values (1, 0)\";\n                conn = fido.util.FidoDataSource.getConnection();\n                stmt = conn.createStatement();\n                stmt.executeUpdate(sql);\n                return getCurrentId(stmt);\n            } catch (SQLException e) {\n                if (conn != null) conn.rollback();\n                throw e;\n            } finally {\n                if (stmt != null) stmt.close();\n                if (conn != null) conn.close();\n            }\n        } catch (SQLException e) {\n            throw new FidoDatabaseException(e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01293659",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void delete(int id) throws FidoDatabaseException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void delete(int id) throws FidoDatabaseException {\n        try {\n            Connection conn = null;\n            Statement stmt = null;\n            try {\n                conn = fido.util.FidoDataSource.getConnection();\n                conn.setAutoCommit(false);\n                stmt = conn.createStatement();\n                String sql = \"delete from Instructions where InstructionId = \" + id;\n                stmt.executeUpdate(sql);\n                sql = \"delete from InstructionGroups where InstructionId = \" + id;\n                stmt.executeUpdate(sql);\n                conn.commit();\n            } catch (SQLException e) {\n                if (conn != null) conn.rollback();\n                throw e;\n            } finally {\n                if (stmt != null) stmt.close();\n                if (conn != null) conn.close();\n            }\n        } catch (SQLException e) {\n            throw new FidoDatabaseException(e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12937087",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic ChatClient registerPlayer(int playerId, String playerLogin) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public ChatClient registerPlayer(int playerId, String playerLogin) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n        md.reset();\n        md.update(playerLogin.getBytes(\"UTF-8\"), 0, playerLogin.length());\n        byte[] accountToken = md.digest();\n        byte[] token = generateToken(accountToken);\n        ChatClient chatClient = new ChatClient(playerId, token);\n        players.put(playerId, chatClient);\n        return chatClient;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12940372",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private String encryptPassword(String password) {\n        String result = password;\n        if (password != null) {\n            try {\n                MessageDigest md5 = MessageDigest.getInstance(\"MD5\");\n                md5.reset();\n                md5.update(password.getBytes());\n                BigInteger hash = new BigInteger(1, md5.digest());\n                result = hash.toString(16);\n                if ((result.length() % 2) != 0) {\n                    result = \"0\" + result;\n                }\n            } catch (NoSuchAlgorithmException e) {\n                e.printStackTrace();\n                getLogger().error(\"Cannot generate MD5\", e);\n            }\n        }\n        return result;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12942575",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private int saveToTempTable(ArrayList cons, String tempTableName, boolean truncateFirst) throws SQLException {\n        if (truncateFirst) {\n            this.executeUpdate(\"TRUNCATE TABLE \" + tempTableName);\n            Categories.dataDb().debug(\"TABLE \" + tempTableName + \" TRUNCATED.\");\n        }\n        PreparedStatement ps = null;\n        int rows = 0;\n        try {\n            String insert = \"INSERT INTO \" + tempTableName + \" VALUES (?)\";\n            ps = this.conn.prepareStatement(insert);\n            for (int i = 0; i < cons.size(); i++) {\n                ps.setLong(1, ((Long) cons.get(i)).longValue());\n                rows = ps.executeUpdate();\n                if ((i % 500) == 0) {\n                    this.conn.commit();\n                }\n            }\n            this.conn.commit();\n        } catch (SQLException sqle) {\n            this.conn.rollback();\n            throw sqle;\n        } finally {\n            if (ps != null) {\n                ps.close();\n            }\n        }\n        return rows;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12955229",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copyFile(File sourceFile, File destFile, boolean overwrite) throws IOException, DirNotFoundException, FileNotFoundException, FileExistsAlreadyException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copyFile(File sourceFile, File destFile, boolean overwrite) throws IOException, DirNotFoundException, FileNotFoundException, FileExistsAlreadyException {\n        File destDir = new File(destFile.getParent());\n        if (!destDir.exists()) {\n            throw new DirNotFoundException(destDir.getAbsolutePath());\n        }\n        if (!sourceFile.exists()) {\n            throw new FileNotFoundException(sourceFile.getAbsolutePath());\n        }\n        if (!overwrite && destFile.exists()) {\n            throw new FileExistsAlreadyException(destFile.getAbsolutePath());\n        }\n        FileInputStream in = new FileInputStream(sourceFile);\n        FileOutputStream out = new FileOutputStream(destFile);\n        byte[] buffer = new byte[8 * 1024];\n        int count = 0;\n        do {\n            out.write(buffer, 0, count);\n            count = in.read(buffer, 0, buffer.length);\n        } while (count != -1);\n        in.close();\n        out.close();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12962189",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private boolean verifyPassword(String password, byte[] hash) {\n        boolean returnValue = false;\n        try {\n            MessageDigest msgDigest = MessageDigest.getInstance(\"SHA-1\");\n            msgDigest.update(password.getBytes(\"UTF-8\"));\n            byte[] digest = msgDigest.digest();\n            returnValue = Arrays.equals(hash, digest);\n        } catch (UnsupportedEncodingException ex) {\n            Logger.getLogger(AuthentificationState.class.getName()).log(Level.SEVERE, null, ex);\n        } catch (NoSuchAlgorithmException ex) {\n            Logger.getLogger(AuthentificationState.class.getName()).log(Level.SEVERE, null, ex);\n        }\n        return returnValue;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12967783",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void doExecute(String[] args) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n    public void doExecute(String[] args) {\n        if (args.length != 2) {\n            printUsage();\n        } else {\n            int fileNo = 0;\n            try {\n                fileNo = Integer.parseInt(args[1]) - 1;\n            } catch (NumberFormatException e) {\n                printUsage();\n                return;\n            }\n            if (fileNo < 0) {\n                printUsage();\n                return;\n            }\n            StorageFile[] files = (StorageFile[]) ctx.getRemoteDir().listFiles();\n            try {\n                StorageFile file = files[fileNo];\n                File outFile = getOutFile(file);\n                FileOutputStream out = new FileOutputStream(outFile);\n                InputStream in = file.openStream();\n                IOUtils.copy(in, out);\n                IOUtils.closeQuietly(out);\n                afterSave(outFile);\n                if (outFile.exists()) {\n                    print(\"File written to: \" + outFile.getAbsolutePath());\n                }\n            } catch (IOException e) {\n                printError(\"Failed to load file. \" + e.getMessage());\n            } catch (Exception e) {\n                printUsage();\n                return;\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01296795",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "static InputStream getUrlStream(String url) throws IOException {\n        System.out.print(\"getting : \" + url + \" ... \");\n        long start = System.currentTimeMillis();\n        URLConnection c = new URL(url).openConnection();\n        InputStream is = c.getInputStream();\n        System.out.print((System.currentTimeMillis() - start) + \"ms\\n\");\n        return is;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12971450",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copy(FileInputStream in, File destination) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copy(FileInputStream in, File destination) throws IOException {\n        FileChannel srcChannel = null;\n        FileChannel dstChannel = null;\n        try {\n            srcChannel = in.getChannel();\n            dstChannel = new FileOutputStream(destination).getChannel();\n            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n        } finally {\n            if (srcChannel != null) {\n                srcChannel.close();\n            }\n            if (dstChannel != null) {\n                dstChannel.close();\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12973065",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void getRandomGUID(boolean secure) {\n        MessageDigest md5 = null;\n        StringBuffer sbValueBeforeMD5 = new StringBuffer();\n        try {\n            md5 = MessageDigest.getInstance(\"MD5\");\n        } catch (NoSuchAlgorithmException e) {\n            System.out.println(\"Error: \" + e);\n        }\n        try {\n            long time = System.currentTimeMillis();\n            long rand = 0;\n            if (secure) {\n                rand = mySecureRand.nextLong();\n            } else {\n                rand = myRand.nextLong();\n            }\n            sbValueBeforeMD5.append(s_id);\n            sbValueBeforeMD5.append(\":\");\n            sbValueBeforeMD5.append(Long.toString(time));\n            sbValueBeforeMD5.append(\":\");\n            sbValueBeforeMD5.append(Long.toString(rand));\n            valueBeforeMD5 = sbValueBeforeMD5.toString();\n            md5.update(valueBeforeMD5.getBytes());\n            byte[] array = md5.digest();\n            StringBuffer sb = new StringBuffer();\n            for (int j = 0; j < array.length; ++j) {\n                int b = array[j] & 0xFF;\n                if (b < 0x10) sb.append('0');\n                sb.append(Integer.toHexString(b));\n            }\n            valueAfterMD5 = sb.toString();\n        } catch (Exception e) {\n            System.out.println(\"Error:\" + e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12973146",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copyFile(String fromFile, String toFile) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copyFile(String fromFile, String toFile) {\n        FileInputStream from = null;\n        FileOutputStream to = null;\n        try {\n            from = new FileInputStream(fromFile);\n            to = new FileOutputStream(toFile);\n            byte[] buffer = new byte[4096];\n            int bytesRead;\n            while ((bytesRead = from.read(buffer)) != -1) to.write(buffer, 0, bytesRead);\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            if (from != null) try {\n                from.close();\n            } catch (IOException e) {\n                ;\n            }\n            if (to != null) try {\n                to.close();\n            } catch (IOException e) {\n                ;\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12973570",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic boolean executeUpdate(String strSql) throws SQLException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public boolean executeUpdate(String strSql) throws SQLException {\n        getConnection();\n        boolean flag = false;\n        stmt = con.createStatement();\n        logger.info(\"###############::\u6267\u884cSQL\u8bed\u53e5\u64cd\u4f5c(\u66f4\u65b0\u6570\u636e \u65e0\u53c2\u6570):\" + strSql);\n        try {\n            if (0 < stmt.executeUpdate(strSql)) {\n                close_DB_Object();\n                flag = true;\n                con.commit();\n            }\n        } catch (SQLException ex) {\n            logger.info(\"###############Error DBManager Line126::\u6267\u884cSQL\u8bed\u53e5\u64cd\u4f5c(\u66f4\u65b0\u6570\u636e \u65e0\u53c2\u6570):\" + strSql + \"\u5931\u8d25!\");\n            flag = false;\n            con.rollback();\n            throw ex;\n        }\n        return flag;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12973571",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic boolean executeUpdate(String strSql, HashMap<Integer, Object> prams) throws SQLException, ClassNotFoundException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public boolean executeUpdate(String strSql, HashMap<Integer, Object> prams) throws SQLException, ClassNotFoundException {\n        getConnection();\n        boolean flag = false;\n        try {\n            pstmt = con.prepareStatement(strSql);\n            setParamet(pstmt, prams);\n            logger.info(\"###############::\u6267\u884cSQL\u8bed\u53e5\u64cd\u4f5c(\u66f4\u65b0\u6570\u636e \u6709\u53c2\u6570):\" + strSql);\n            if (0 < pstmt.executeUpdate()) {\n                close_DB_Object();\n                flag = true;\n                con.commit();\n            }\n        } catch (SQLException ex) {\n            logger.info(\"###############Error DBManager Line121::\u6267\u884cSQL\u8bed\u53e5\u64cd\u4f5c(\u66f4\u65b0\u6570\u636e \u65e0\u53c2\u6570):\" + strSql + \"\u5931\u8d25!\");\n            flag = false;\n            con.rollback();\n            throw ex;\n        } catch (ClassNotFoundException ex) {\n            logger.info(\"###############Error DBManager Line152::\u6267\u884cSQL\u8bed\u53e5\u64cd\u4f5c(\u66f4\u65b0\u6570\u636e \u65e0\u53c2\u6570):\" + strSql + \"\u5931\u8d25! \u53c2\u6570\u8bbe\u7f6e\u7c7b\u578b\u9519\u8bef!\");\n            con.rollback();\n            throw ex;\n        }\n        return flag;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12977779",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void run() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void run() {\n        FileInputStream src;\n        FileOutputStream dest;\n        try {\n            dest = new FileOutputStream(srcName);\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n            return;\n        }\n        FileChannel destC = dest.getChannel();\n        FileChannel srcC;\n        ByteBuffer buf = ByteBuffer.allocateDirect(BUFFER_SIZE);\n        try {\n            int fileNo = 0;\n            while (true) {\n                int i = 1;\n                String destName = srcName + \"_\" + fileNo;\n                src = new FileInputStream(destName);\n                srcC = src.getChannel();\n                while ((i > 0)) {\n                    i = srcC.read(buf);\n                    buf.flip();\n                    destC.write(buf);\n                    buf.compact();\n                }\n                srcC.close();\n                src.close();\n                fileNo++;\n            }\n        } catch (IOException e1) {\n            e1.printStackTrace();\n            return;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12979701",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic List<SheetFullName> importSheets(INetxiliaSystem workbookProcessor, WorkbookId workbookName, URL url, IProcessingConsole console) throws ImportException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n    public List<SheetFullName> importSheets(INetxiliaSystem workbookProcessor, WorkbookId workbookName, URL url, IProcessingConsole console) throws ImportException {\n        try {\n            return importSheets(workbookProcessor, workbookName, url.openStream(), console);\n        } catch (Exception e) {\n            throw new ImportException(url, \"Cannot open workbook:\" + e, e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12980227",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void copy(File src, File dest) throws FileNotFoundException, IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void copy(File src, File dest) throws FileNotFoundException, IOException {\n        FileInputStream srcStream = new FileInputStream(src);\n        FileOutputStream destStream = new FileOutputStream(dest);\n        FileChannel srcChannel = srcStream.getChannel();\n        FileChannel destChannel = destStream.getChannel();\n        srcChannel.transferTo(0, srcChannel.size(), destChannel);\n        destChannel.close();\n        srcChannel.close();\n        destStream.close();\n        srcStream.close();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12980352",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic List<Class<?>> getImplementingClasses(Class<?> ancestor, boolean searchAllClasspath) throws MutableClassLoaderException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public List<Class<?>> getImplementingClasses(Class<?> ancestor, boolean searchAllClasspath) throws MutableClassLoaderException {\n        List<Class<?>> classes = new LinkedList<Class<?>>();\n        for (URL url : (searchAllClasspath ? getURLs() : getAddedURLs())) {\n            Log.verbose(\"Checking classpath item \" + url);\n            if (!url.getPath().toLowerCase().endsWith(\"/\")) {\n                try {\n                    JarInputStream jis = new JarInputStream(url.openStream());\n                    JarEntry je;\n                    while ((je = jis.getNextJarEntry()) != null) {\n                        Log.verbose(\"Checking resource \" + je.getName());\n                        try {\n                            if (je.getName().endsWith(\".class\")) {\n                                Class<?> c = this.loadClass(je.getName().replaceAll(\"/\", \".\").replaceAll(\".class$\", \"\"));\n                                if (!Modifier.isAbstract(c.getModifiers()) && !Modifier.isInterface(c.getModifiers()) && ancestor.isAssignableFrom(c)) {\n                                    Log.verbose(\"Found class \" + c.getCanonicalName() + \" which implements class \" + ancestor.getCanonicalName());\n                                    classes.add(c);\n                                }\n                            }\n                        } catch (Error e) {\n                        } catch (RuntimeException re) {\n                        } catch (Exception e) {\n                        }\n                    }\n                } catch (Exception e) {\n                    Log.error(e);\n                }\n            } else if (url.getPath().endsWith(\"/\")) {\n                File root = new File(url.getPath());\n                for (File file : FileFunctions.getFileTree(root)) {\n                    try {\n                        if (file.getName().toLowerCase().endsWith(\".class\")) {\n                            Class<?> c = this.loadClass(file.getAbsolutePath().replaceAll(\"^\" + root.getAbsolutePath() + \"/\", \"\").replaceAll(\"/\", \".\").replaceAll(\".class$\", \"\"));\n                            if (!Modifier.isAbstract(c.getModifiers()) && !Modifier.isInterface(c.getModifiers()) && ancestor.isAssignableFrom(c)) {\n                                Log.verbose(\"Found class \" + c.getCanonicalName() + \" which implements class \" + ancestor.getCanonicalName());\n                                classes.add(c);\n                            }\n                        }\n                    } catch (Exception e) {\n                        Log.error(e);\n                    }\n                }\n            }\n        }\n        return classes;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12980532",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic String htmlContentSimple(String urlStr, String charset) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public String htmlContentSimple(String urlStr, String charset) {\n        StringBuffer html = new StringBuffer();\n        URL url = null;\n        BufferedReader reader = null;\n        try {\n            url = new URL(urlStr);\n            reader = new BufferedReader(new InputStreamReader(url.openStream(), charset));\n            String line;\n            while ((line = reader.readLine()) != null) {\n                html.append(line).append(\"\\r\\n\");\n            }\n        } catch (MalformedURLException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            if (reader != null) try {\n                reader.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        return html.toString();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12985350",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String encryptPassword(String password) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String encryptPassword(String password) {\n        String hash = null;\n        try {\n            MessageDigest md = null;\n            md = MessageDigest.getInstance(\"SHA\");\n            md.update(password.getBytes(\"UTF-8\"));\n            byte raw[] = md.digest();\n            hash = Base64.encode(raw, false);\n        } catch (Exception e) {\n        }\n        return hash;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12985466",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n    protected Map<String, Definition> loadDefinitionsFromURL(URL url) {\n        Map<String, Definition> defsMap = null;\n        try {\n            URLConnection connection = url.openConnection();\n            connection.connect();\n            lastModifiedDates.put(url.toExternalForm(), connection.getLastModified());\n            defsMap = reader.read(connection.getInputStream());\n        } catch (IOException e) {\n            if (log.isDebugEnabled()) {\n                log.debug(\"File \" + null + \" not found, continue [\" + e.getMessage() + \"]\");\n            }\n        }\n        return defsMap;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_00129856",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic String getScenarioData(String urlForSalesData) throws IOException, Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public String getScenarioData(String urlForSalesData) throws IOException, Exception {\n        InputStream inputStream = null;\n        BufferedReader bufferedReader = null;\n        DataInputStream input = null;\n        StringBuffer sBuf = new StringBuffer();\n        Proxy proxy;\n        if (httpWebProxyServer != null && Integer.toString(httpWebProxyPort) != null) {\n            SocketAddress address = new InetSocketAddress(httpWebProxyServer, httpWebProxyPort);\n            proxy = new Proxy(Proxy.Type.HTTP, address);\n        } else {\n            proxy = null;\n        }\n        proxy = null;\n        URL url;\n        try {\n            url = new URL(urlForSalesData);\n            HttpURLConnection httpUrlConnection;\n            if (proxy != null) httpUrlConnection = (HttpURLConnection) url.openConnection(proxy); else httpUrlConnection = (HttpURLConnection) url.openConnection();\n            httpUrlConnection.setDoInput(true);\n            httpUrlConnection.setRequestMethod(\"GET\");\n            String name = rb.getString(\"WRAP_NAME\");\n            String password = rb.getString(\"WRAP_PASSWORD\");\n            Credentials simpleAuthCrentials = new Credentials(TOKEN_TYPE.SimpleApiAuthToken, name, password);\n            ACSTokenProvider tokenProvider = new ACSTokenProvider(httpWebProxyServer, httpWebProxyPort, simpleAuthCrentials);\n            String requestUriStr1 = \"https://\" + solutionName + \".\" + acmHostName + \"/\" + serviceName;\n            String appliesTo1 = rb.getString(\"SIMPLEAPI_APPLIES_TO\");\n            String token = tokenProvider.getACSToken(requestUriStr1, appliesTo1);\n            httpUrlConnection.addRequestProperty(\"token\", \"WRAPv0.9 \" + token);\n            httpUrlConnection.addRequestProperty(\"solutionName\", solutionName);\n            httpUrlConnection.connect();\n            if (httpUrlConnection.getResponseCode() == HttpServletResponse.SC_UNAUTHORIZED) {\n                List<TestSalesOrderService> salesOrderServiceBean = new ArrayList<TestSalesOrderService>();\n                TestSalesOrderService response = new TestSalesOrderService();\n                response.setResponseCode(HttpServletResponse.SC_UNAUTHORIZED);\n                response.setResponseMessage(httpUrlConnection.getResponseMessage());\n                salesOrderServiceBean.add(response);\n            }\n            inputStream = httpUrlConnection.getInputStream();\n            input = new DataInputStream(inputStream);\n            bufferedReader = new BufferedReader(new InputStreamReader(input));\n            String str;\n            while (null != ((str = bufferedReader.readLine()))) {\n                sBuf.append(str);\n            }\n            String responseString = sBuf.toString();\n            return responseString;\n        } catch (MalformedURLException e) {\n            throw e;\n        } catch (IOException e) {\n            throw e;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_12994590",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic String saveOrUpdate(FileItem file, User user, MapOriginal map) throws HttpRpcException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@HttpAction(name = \"map.saveOrUpdate\", method = { HttpAction.Method.post }, responseType = \"text/plain\")\n    @HttpAuthentication(method = { HttpAuthentication.Method.WSSE })\n    public String saveOrUpdate(FileItem file, User user, MapOriginal map) throws HttpRpcException {\n        File tmpFile;\n        GenericDAO<MapOriginal> mapDao = DAOFactory.createDAO(MapOriginal.class);\n        try {\n            assert (file != null);\n            String jobid = null;\n            if (file.getContentType().startsWith(\"image/\")) {\n                tmpFile = File.createTempFile(\"gmap\", \"img\");\n                OutputStream out = new FileOutputStream(tmpFile);\n                IOUtils.copy(file.getInputStream(), out);\n                out.flush();\n                out.close();\n                map.setState(MapOriginal.MapState.UPLOAD);\n                map.setUser(user);\n                map.setMapPath(tmpFile.getPath());\n                map.setThumbnailUrl(\"/map/inproc.gif\");\n                map.setMimeType(file.getContentType());\n                mapDao.saveOrUpdate(map);\n                jobid = PoolFactory.getClientPool().put(map, TaskState.STATE_MO_FINISH, MapOverrideStrategy.class);\n            }\n            return jobid;\n        } catch (IOException e) {\n            logger.error(e);\n            throw ERROR_INTERNAL;\n        } catch (DAOException e) {\n            logger.error(e);\n            throw ERROR_INTERNAL;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01300030",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic PhoneDurationsImpl(URL url) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public PhoneDurationsImpl(URL url) throws IOException {\n        BufferedReader reader;\n        String line;\n        phoneDurations = new HashMap();\n        reader = new BufferedReader(new InputStreamReader(url.openStream()));\n        line = reader.readLine();\n        while (line != null) {\n            if (!line.startsWith(\"***\")) {\n                parseAndAdd(line);\n            }\n            line = reader.readLine();\n        }\n        reader.close();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13012591",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "protected String getPasswordHash(String password) {\n        MessageDigest md = null;\n        try {\n            md = MessageDigest.getInstance(\"MD5\");\n        } catch (NoSuchAlgorithmException e) {\n            log.error(\"MD5 algorithm not found\", e);\n            throw new ServiceException(e);\n        }\n        md.update(password.getBytes());\n        byte[] hash = md.digest();\n        StringBuffer buf = new StringBuffer();\n        for (int i = 0; i < hash.length; i++) {\n            buf.append(Integer.toHexString(hash[i] & 0xff));\n        }\n        return buf.toString();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13013560",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static Node carregaModeloJME(String caminho) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static Node carregaModeloJME(String caminho) {\n        try {\n            URL urlModelo = ModelUtils.class.getClassLoader().getResource(caminho);\n            BufferedInputStream leitorBinario = new BufferedInputStream(urlModelo.openStream());\n            Node modelo = (Node) BinaryImporter.getInstance().load(leitorBinario);\n            modelo.setModelBound(new BoundingBox());\n            modelo.updateModelBound();\n            return modelo;\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13015489",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void prepareOutput(HttpServletRequest req) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void prepareOutput(HttpServletRequest req) {\n        EaasyStreet.logTrace(METHOD_IN + className + OUTPUT_METHOD);\n        super.prepareOutput(req);\n        String content = Constants.EMPTY_STRING;\n        String rawContent = null;\n        List parts = null;\n        try {\n            URL url = new URL(sourceUrl);\n            BufferedReader input = new BufferedReader(new InputStreamReader(url.openStream()));\n            String line = \"\";\n            StringBuffer buffer = new StringBuffer();\n            while ((line = input.readLine()) != null) {\n                buffer.append(line);\n                buffer.append(Constants.LF);\n            }\n            rawContent = buffer.toString();\n        } catch (FileNotFoundException nf) {\n            req.setAttribute(Constants.RAK_SYSTEM_ACTION, Constants.SYSTEM_ACTION_BACK);\n            EaasyStreet.handleSafeEvent(req, new Event(Constants.EAA0012I, new String[] { \"URL\", nf.getMessage(), nf.toString() }));\n        } catch (Exception e) {\n            req.setAttribute(Constants.RAK_SYSTEM_ACTION, Constants.SYSTEM_ACTION_BACK);\n            EaasyStreet.handleSafeEvent(req, new Event(Constants.EAA0012I, new String[] { \"URL\", e.getMessage(), e.toString() }));\n        }\n        if (rawContent != null) {\n            if (startDelimiter != null) {\n                parts = StringUtils.split(rawContent, startDelimiter);\n                if (parts != null && parts.size() > 1) {\n                    rawContent = (String) parts.get(1);\n                    if (parts.size() > 2) {\n                        for (int x = 2; x < parts.size(); x++) {\n                            rawContent += startDelimiter;\n                            rawContent += parts.get(x);\n                        }\n                    }\n                } else {\n                    rawContent = null;\n                }\n            }\n        }\n        if (rawContent != null) {\n            if (endDelimiter != null) {\n                parts = StringUtils.split(rawContent, endDelimiter);\n                if (parts != null && parts.size() > 0) {\n                    rawContent = (String) parts.get(0);\n                } else {\n                    rawContent = null;\n                }\n            }\n        }\n        if (rawContent != null) {\n            if (replacementValues != null && !replacementValues.isEmpty()) {\n                for (int x = 0; x < replacementValues.size(); x++) {\n                    LabelValueBean bean = (LabelValueBean) replacementValues.get(x);\n                    rawContent = StringUtils.replace(rawContent, bean.getLabel(), bean.getValue());\n                }\n            }\n        }\n        if (rawContent != null) {\n            content = rawContent;\n        }\n        req.setAttribute(getFormName(), content);\n        EaasyStreet.logTrace(METHOD_OUT + className + OUTPUT_METHOD);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13017908",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static boolean downFile(String url, String username, String password, String remotePath, Date DBLastestDate, String localPath) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static boolean downFile(String url, String username, String password, String remotePath, Date DBLastestDate, String localPath) {\n        File dFile = new File(localPath);\n        if (!dFile.exists()) {\n            dFile.mkdir();\n        }\n        boolean success = false;\n        FTPClient ftp = new FTPClient();\n        ftp.setConnectTimeout(connectTimeout);\n        System.out.println(\"FTP begin!!\");\n        try {\n            int reply;\n            ftp.connect(url);\n            ftp.login(username, password);\n            reply = ftp.getReplyCode();\n            if (!FTPReply.isPositiveCompletion(reply)) {\n                ftp.disconnect();\n                return success;\n            }\n            ftp.changeWorkingDirectory(remotePath);\n            String[] filesName = ftp.listNames();\n            if (DBLastestDate == null) {\n                System.out.println(\" \u521d\u6b21\u4e0b\u8f7d\uff0c\u5168\u90e8\u4e0b\u8f7d \");\n                for (String string : filesName) {\n                    if (!string.matches(\"[0-9]{12}\")) {\n                        continue;\n                    }\n                    File localFile = new File(localPath + \"/\" + string);\n                    OutputStream is = new FileOutputStream(localFile);\n                    ftp.retrieveFile(string, is);\n                    is.close();\n                }\n            } else {\n                System.out.println(\" \u52a0\u4e00\u4e0b\u8f7d \");\n                Date date = DBLastestDate;\n                long ldate = date.getTime();\n                Date nowDate = new Date();\n                String nowDateStr = Constants.DatetoString(nowDate, Constants.Time_template_LONG);\n                String fileName;\n                do {\n                    ldate += 60 * 1000;\n                    Date converterDate = new Date(ldate);\n                    fileName = Constants.DatetoString(converterDate, Constants.Time_template_LONG);\n                    File localFile = new File(localPath + \"/\" + fileName);\n                    OutputStream is = new FileOutputStream(localFile);\n                    if (!ftp.retrieveFile(fileName, is)) {\n                        localFile.delete();\n                    }\n                    is.close();\n                } while (fileName.compareTo(nowDateStr) < 0);\n            }\n            ftp.logout();\n            success = true;\n        } catch (IOException e) {\n            System.out.println(\"FTP timeout return\");\n            e.printStackTrace();\n        } finally {\n            if (ftp.isConnected()) {\n                try {\n                    ftp.disconnect();\n                } catch (IOException ioe) {\n                }\n            }\n        }\n        return success;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13020691",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void getRandomGUID(boolean secure) {\n        MessageDigest md5 = null;\n        StringBuffer sbValueBeforeMD5 = new StringBuffer();\n        try {\n            md5 = MessageDigest.getInstance(\"MD5\");\n        } catch (NoSuchAlgorithmException e) {\n        }\n        try {\n            long time = System.currentTimeMillis();\n            long rand = 0;\n            if (secure) {\n                rand = mySecureRand.nextLong();\n            } else {\n                rand = myRand.nextLong();\n            }\n            sbValueBeforeMD5.append(s_id);\n            sbValueBeforeMD5.append(\":\");\n            sbValueBeforeMD5.append(Long.toString(time));\n            sbValueBeforeMD5.append(\":\");\n            sbValueBeforeMD5.append(Long.toString(rand));\n            valueBeforeMD5 = sbValueBeforeMD5.toString();\n            md5.update(valueBeforeMD5.getBytes());\n            byte[] array = md5.digest();\n            StringBuffer sb = new StringBuffer();\n            for (int j = 0; j < array.length; ++j) {\n                int b = array[j] & 0xFF;\n                if (b < 0x10) sb.append('0');\n                sb.append(Integer.toHexString(b));\n            }\n            valueAfterMD5 = sb.toString();\n        } catch (Exception e) {\n            System.out.println(\"Error:\" + e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13024208",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String CreateHash(String s) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String CreateHash(String s) {\n        String str = s.toString();\n        if (str == null || str.length() == 0) {\n            throw new IllegalArgumentException(\"String cannot be null or empty\");\n        }\n        StringBuffer hexString = new StringBuffer();\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            md.update(str.getBytes());\n            byte[] hash = md.digest();\n            for (int i = 0; i < hash.length; i++) {\n                if ((0xff & hash[i]) < 0x10) {\n                    hexString.append(\"0\" + Integer.toHexString((0xFF & hash[i])));\n                } else {\n                    hexString.append(Integer.toHexString(0xFF & hash[i]));\n                }\n            }\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n        return (hexString.toString());\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13024538",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String getHash(String uri) throws NoSuchAlgorithmException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String getHash(String uri) throws NoSuchAlgorithmException {\n        MessageDigest mDigest = MessageDigest.getInstance(\"MD5\");\n        mDigest.update(uri.getBytes());\n        byte d[] = mDigest.digest();\n        StringBuffer hash = new StringBuffer();\n        for (int i = 0; i < d.length; i++) {\n            hash.append(Integer.toHexString(0xFF & d[i]));\n        }\n        return hash.toString();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13026685",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic DoSearch(String searchType, String searchString) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public DoSearch(String searchType, String searchString) {\n        String urlString = dms_url + \"/servlet/com.ufnasoft.dms.server.ServerDoSearch\";\n        String rvalue = \"\";\n        String filename = dms_home + FS + \"temp\" + FS + username + \"search.xml\";\n        try {\n            String urldata = urlString + \"?username=\" + URLEncoder.encode(username, \"UTF-8\") + \"&key=\" + key + \"&search=\" + URLEncoder.encode(searchString, \"UTF-8\") + \"&searchtype=\" + URLEncoder.encode(searchType, \"UTF-8\") + \"&filename=\" + URLEncoder.encode(username, \"UTF-8\") + \"search.xml\";\n            ;\n            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n            DocumentBuilder parser = factory.newDocumentBuilder();\n            URL u = new URL(urldata);\n            DataInputStream is = new DataInputStream(u.openStream());\n            FileOutputStream os = new FileOutputStream(filename);\n            int iBufSize = is.available();\n            byte inBuf[] = new byte[20000 * 1024];\n            int iNumRead;\n            while ((iNumRead = is.read(inBuf, 0, iBufSize)) > 0) os.write(inBuf, 0, iNumRead);\n            os.close();\n            is.close();\n            File f = new File(filename);\n            InputStream inputstream = new FileInputStream(f);\n            Document document = parser.parse(inputstream);\n            NodeList nodelist = document.getElementsByTagName(\"entry\");\n            int num = nodelist.getLength();\n            searchDocs = new String[num][3];\n            searchDocImageName = new String[num];\n            searchDocsToolTip = new String[num];\n            for (int i = 0; i < num; i++) {\n                searchDocs[i][0] = DOMUtil.getSimpleElementText((Element) nodelist.item(i), \"filename\");\n                searchDocs[i][1] = DOMUtil.getSimpleElementText((Element) nodelist.item(i), \"project\");\n                searchDocs[i][2] = DOMUtil.getSimpleElementText((Element) nodelist.item(i), \"documentid\");\n                searchDocImageName[i] = DOMUtil.getSimpleElementText((Element) nodelist.item(i), \"imagename\");\n                searchDocsToolTip[i] = DOMUtil.getSimpleElementText((Element) nodelist.item(i), \"description\");\n            }\n        } catch (MalformedURLException ex) {\n            System.out.println(ex);\n        } catch (ParserConfigurationException ex) {\n            System.out.println(ex);\n        } catch (Exception ex) {\n            System.out.println(ex);\n        }\n        System.out.println(rvalue);\n        if (rvalue.equalsIgnoreCase(\"yes\")) {\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13028546",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static boolean encodeFileToFile(String infile, String outfile) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static boolean encodeFileToFile(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] buffer = new byte[65536];\n            int read = -1;\n            while ((read = in.read(buffer)) >= 0) {\n                out.write(buffer, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13028547",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static boolean decodeFileToFile(String infile, String outfile) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static boolean decodeFileToFile(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] buffer = new byte[65536];\n            int read = -1;\n            while ((read = in.read(buffer)) >= 0) {\n                out.write(buffer, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13029548",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic String getUser() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public String getUser() {\n        try {\n            HttpGet get = new HttpGet(\"http://twemoi.status.net/api/account/verify_credentials.xml\");\n            consumer.sign(get);\n            HttpClient client = new DefaultHttpClient();\n            HttpResponse response = client.execute(get);\n            if (response != null) {\n                int statusCode = response.getStatusLine().getStatusCode();\n                if (statusCode != 200) {\n                    this.enviarMensaje(\"Error: Usuario no autenticado en la red de Status\");\n                    return \"\";\n                }\n                StringBuffer sBuf = new StringBuffer();\n                String linea;\n                BufferedReader reader = new BufferedReader(new InputStreamReader(response.getEntity().getContent(), \"UTF-8\"));\n                while ((linea = reader.readLine()) != null) {\n                    sBuf.append(linea);\n                }\n                reader.close();\n                response.getEntity().consumeContent();\n                get.abort();\n                String salida = sBuf.toString();\n                String user_name = salida.split(\"</screen_name>\")[0].split(\"<screen_name>\")[1];\n                return user_name;\n            }\n        } catch (UnsupportedEncodingException e) {\n            this.enviarMensaje(\"Error: Usuario no autenticado en la red de Status\");\n        } catch (IOException e) {\n            this.enviarMensaje(\"Error: Usuario no autenticado en la red de Status\");\n        } catch (OAuthMessageSignerException e) {\n            this.enviarMensaje(\"Error: Usuario no autenticado en la red de Status\");\n        } catch (OAuthExpectationFailedException e) {\n            this.enviarMensaje(\"Error: Usuario no autenticado en la red de Status\");\n        } catch (OAuthCommunicationException e) {\n            this.enviarMensaje(\"Error: Usuario no autenticado en la red de Status\");\n        }\n        return null;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13031531",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "protected String getOldHash(String text) {\n        String hash = null;\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"SHA\");\n            md.update(text.getBytes(\"UTF-8\"));\n            byte[] digestedBytes = md.digest();\n            hash = HexUtils.convert(digestedBytes);\n        } catch (NoSuchAlgorithmException e) {\n            log.log(Level.SEVERE, \"Error creating SHA password hash:\" + e.getMessage());\n            hash = text;\n        } catch (UnsupportedEncodingException e) {\n            log.log(Level.SEVERE, \"UTF-8 not supported!?!\");\n        }\n        return hash;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13031564",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void viewFile(int file_nx) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void viewFile(int file_nx) {\n            FTPClient ftp = new FTPClient();\n            boolean error = false;\n            try {\n                int reply;\n                ftp.connect(\"tgftp.nws.noaa.gov\");\n                ftp.login(\"anonymous\", \"\");\n                Log.d(\"WXDroid\", \"Connected to tgftp.nws.noaa.gov.\");\n                Log.d(\"WXDroid\", ftp.getReplyString());\n                reply = ftp.getReplyCode();\n                if (!FTPReply.isPositiveCompletion(reply)) {\n                    ftp.disconnect();\n                    System.err.println(\"FTP server refused connection.\");\n                    System.exit(1);\n                }\n                ftp.changeWorkingDirectory(\"fax\");\n                Log.d(\"WXDroid\", \"working directory: \" + ftp.printWorkingDirectory());\n                ftp.setFileType(FTPClient.BINARY_FILE_TYPE);\n                InputStream img_file = ftp.retrieveFileStream(\"PYAA10.gif\");\n                Intent intent = new Intent();\n                intent.setClass(WXdroid.this, showProgressFTP.class);\n                startActivity(intent);\n                String storage_state = Environment.getExternalStorageState();\n                if (storage_state.contains(\"mounted\")) {\n                    String filepath = Environment.getExternalStorageDirectory().getAbsolutePath() + \"/NOAAWX/\";\n                    File imageDirectory = new File(filepath);\n                    File local_file = new File(filepath + \"PYAA10.gif\");\n                    OutputStream out = new FileOutputStream(local_file);\n                    byte[] buffer = new byte[1024];\n                    int count;\n                    while ((count = img_file.read(buffer)) != -1) {\n                        if (Thread.interrupted() == true) {\n                            String functionName = Thread.currentThread().getStackTrace()[2].getMethodName() + \"()\";\n                            throw new InterruptedException(\"The function \" + functionName + \" was interrupted.\");\n                        }\n                        out.write(buffer, 0, count);\n                    }\n                    showImage();\n                    out.flush();\n                    out.close();\n                    img_file.close();\n                    Log.d(\"WXDroid\", \"file saved: \" + filepath + \" \" + local_file);\n                } else {\n                    Log.d(\"WXDroid\", \"The SD card is not mounted\");\n                }\n                ftp.logout();\n                ftp.disconnect();\n            } catch (IOException e) {\n                error = true;\n                e.printStackTrace();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            } finally {\n                if (ftp.isConnected()) {\n                    try {\n                        ftp.disconnect();\n                    } catch (IOException ioe) {\n                    }\n                }\n            }\n        }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13039812",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic String getImageURL(String text) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public String getImageURL(String text) {\n        String imgURL = \"\";\n        try {\n            URL url = new URL(\"http://images.search.yahoo.com/search/images?p=\" + URLEncoder.encode(text));\n            URLConnection connection = url.openConnection();\n            DataInputStream in = new DataInputStream(connection.getInputStream());\n            String line;\n            Pattern imgPattern = Pattern.compile(\"isrc=\\\"([^\\\"]*)\\\"\");\n            while ((line = in.readLine()) != null) {\n                Matcher match = imgPattern.matcher(line);\n                if (match.find()) {\n                    imgURL = match.group(1);\n                    break;\n                }\n            }\n            in.close();\n        } catch (Exception e) {\n        }\n        return imgURL;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13041693",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void vote(String urlString, Map<String, String> headData, Map<String, String> paramData) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n    public void vote(String urlString, Map<String, String> headData, Map<String, String> paramData) {\n        HttpURLConnection httpConn = null;\n        try {\n            URL url = new URL(urlString);\n            httpConn = (HttpURLConnection) url.openConnection();\n            String cookies = getCookies(httpConn);\n            System.out.println(cookies);\n            BufferedReader post = new BufferedReader(new InputStreamReader(httpConn.getInputStream(), \"GB2312\"));\n            String text = null;\n            while ((text = post.readLine()) != null) {\n                System.out.println(text);\n            }\n        } catch (MalformedURLException e) {\n            e.printStackTrace();\n            throw new VoteBeanException(\"\u7f51\u5740\u4e0d\u6b63\u786e\", e);\n        } catch (IOException e) {\n            e.printStackTrace();\n            throw new VoteBeanException(\"\u4e0d\u80fd\u6253\u5f00\u7f51\u5740\", e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13044936",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic List<SatelliteElementSet> parseTLE(String urlString) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public List<SatelliteElementSet> parseTLE(String urlString) throws IOException {\n        List<SatelliteElementSet> elementSets = new ArrayList<SatelliteElementSet>();\n        BufferedReader reader = null;\n        try {\n            String line = null;\n            int i = 0;\n            URL url = new URL(urlString);\n            String[] lines = new String[3];\n            reader = new BufferedReader(new InputStreamReader(url.openStream()));\n            while ((line = reader.readLine()) != null) {\n                i++;\n                switch(i) {\n                    case 1:\n                        {\n                            lines[0] = line;\n                            break;\n                        }\n                    case 2:\n                        {\n                            lines[1] = line;\n                            break;\n                        }\n                    case 3:\n                        {\n                            lines[2] = line;\n                            Long catnum = Long.parseLong(StringUtils.strip(lines[1].substring(2, 7)));\n                            long setnum = Long.parseLong(StringUtils.strip(lines[1].substring(64, 68)));\n                            elementSets.add(new SatelliteElementSet(catnum, lines, setnum, Calendar.getInstance(TZ).getTime()));\n                            i = 0;\n                            break;\n                        }\n                    default:\n                        {\n                            throw new IOException(\"TLE string did not contain three elements\");\n                        }\n                }\n            }\n        } finally {\n            if (null != reader) {\n                reader.close();\n            }\n        }\n        return elementSets;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13046328",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic FlickrObject perform(boolean chkResponse) throws FlickrException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public FlickrObject perform(boolean chkResponse) throws FlickrException {\n        validate();\n        String data = getRequestData();\n        OutputStream os = null;\n        InputStream is = null;\n        try {\n            URL url = null;\n            try {\n                url = new URL(m_url);\n            } catch (MalformedURLException mux) {\n                IllegalStateException iax = new IllegalStateException();\n                iax.initCause(mux);\n                throw iax;\n            }\n            HttpURLConnection con = (HttpURLConnection) url.openConnection();\n            con.setDoOutput(true);\n            con.setRequestMethod(\"POST\");\n            os = con.getOutputStream();\n            OutputStreamWriter osw = new OutputStreamWriter(os);\n            osw.write(data);\n            osw.flush();\n            is = con.getInputStream();\n            return processRespons(is, chkResponse);\n        } catch (FlickrException fx) {\n            throw fx;\n        } catch (IOException iox) {\n            throw new FlickrException(iox);\n        } finally {\n            if (os != null) try {\n                os.close();\n            } catch (IOException _) {\n            }\n            if (is != null) try {\n                is.close();\n            } catch (IOException _) {\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13048961",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private final void saveCopy(String source, String destination) {\n        BufferedInputStream from = null;\n        BufferedOutputStream to = null;\n        try {\n            from = new BufferedInputStream(new FileInputStream(source));\n            to = new BufferedOutputStream(new FileOutputStream(destination));\n            byte[] buffer = new byte[65535];\n            int bytes_read;\n            while ((bytes_read = from.read(buffer)) != -1) to.write(buffer, 0, bytes_read);\n        } catch (Exception e) {\n            LogWriter.writeLog(\"Exception \" + e + \" copying file\");\n        }\n        try {\n            to.close();\n            from.close();\n        } catch (Exception e) {\n            LogWriter.writeLog(\"Exception \" + e + \" closing files\");\n        }\n        to = null;\n        from = null;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13048962",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic final void saveAsCopy(String current_image, String destination) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public final void saveAsCopy(String current_image, String destination) {\n        BufferedInputStream from = null;\n        BufferedOutputStream to = null;\n        String source = temp_dir + key + current_image;\n        try {\n            from = new BufferedInputStream(new FileInputStream(source));\n            to = new BufferedOutputStream(new FileOutputStream(destination));\n            byte[] buffer = new byte[65535];\n            int bytes_read;\n            while ((bytes_read = from.read(buffer)) != -1) to.write(buffer, 0, bytes_read);\n        } catch (Exception e) {\n            LogWriter.writeLog(\"Exception \" + e + \" copying file\");\n        }\n        try {\n            to.close();\n            from.close();\n        } catch (Exception e) {\n            LogWriter.writeLog(\"Exception \" + e + \" closing files\");\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13048963",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static final void copy(String source, String destination) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static final void copy(String source, String destination) {\n        BufferedInputStream from = null;\n        BufferedOutputStream to = null;\n        try {\n            from = new BufferedInputStream(new FileInputStream(source));\n            to = new BufferedOutputStream(new FileOutputStream(destination));\n            byte[] buffer = new byte[65535];\n            int bytes_read;\n            while ((bytes_read = from.read(buffer)) != -1) to.write(buffer, 0, bytes_read);\n        } catch (Exception e) {\n            LogWriter.writeLog(\"Exception \" + e + \" copying file\");\n        }\n        try {\n            to.close();\n            from.close();\n        } catch (Exception e) {\n            LogWriter.writeLog(\"Exception \" + e + \" closing files\");\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_00130541",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void doVersionCheck(View view) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void doVersionCheck(View view) {\n        view.showWaitCursor();\n        try {\n            URL url = new URL(jEdit.getProperty(\"version-check.url\"));\n            InputStream in = url.openStream();\n            BufferedReader bin = new BufferedReader(new InputStreamReader(in));\n            String line;\n            String develBuild = null;\n            String stableBuild = null;\n            while ((line = bin.readLine()) != null) {\n                if (line.startsWith(\".build\")) develBuild = line.substring(6).trim(); else if (line.startsWith(\".stablebuild\")) stableBuild = line.substring(12).trim();\n            }\n            bin.close();\n            if (develBuild != null && stableBuild != null) {\n                doVersionCheck(view, stableBuild, develBuild);\n            }\n        } catch (IOException e) {\n            String[] args = { jEdit.getProperty(\"version-check.url\"), e.toString() };\n            GUIUtilities.error(view, \"read-error\", args);\n        }\n        view.hideWaitCursor();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13063241",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copyFile(File src, File dest) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copyFile(File src, File dest) throws IOException {\n        FileInputStream fis = new FileInputStream(src);\n        FileOutputStream fos = new FileOutputStream(dest);\n        java.nio.channels.FileChannel channelSrc = fis.getChannel();\n        java.nio.channels.FileChannel channelDest = fos.getChannel();\n        channelSrc.transferTo(0, channelSrc.size(), channelDest);\n        fis.close();\n        fos.close();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13064742",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic DataRecord addRecord(InputStream input) throws DataStoreException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public DataRecord addRecord(InputStream input) throws DataStoreException {\n        File temporary = null;\n        try {\n            temporary = newTemporaryFile();\n            DataIdentifier tempId = new DataIdentifier(temporary.getName());\n            usesIdentifier(tempId);\n            long length = 0;\n            MessageDigest digest = MessageDigest.getInstance(DIGEST);\n            OutputStream output = new DigestOutputStream(new FileOutputStream(temporary), digest);\n            try {\n                length = IOUtils.copyLarge(input, output);\n            } finally {\n                output.close();\n            }\n            DataIdentifier identifier = new DataIdentifier(digest.digest());\n            File file;\n            synchronized (this) {\n                usesIdentifier(identifier);\n                file = getFile(identifier);\n                System.out.println(\"new file name: \" + file.getName());\n                File parent = file.getParentFile();\n                System.out.println(\"parent file: \" + file.getParentFile().getName());\n                if (!parent.isDirectory()) {\n                    parent.mkdirs();\n                }\n                if (!file.exists()) {\n                    temporary.renameTo(file);\n                    if (!file.exists()) {\n                        throw new IOException(\"Can not rename \" + temporary.getAbsolutePath() + \" to \" + file.getAbsolutePath() + \" (media read only?)\");\n                    }\n                } else {\n                    long now = System.currentTimeMillis();\n                    if (file.lastModified() < now) {\n                        file.setLastModified(now);\n                    }\n                }\n                if (!file.isFile()) {\n                    throw new IOException(\"Not a file: \" + file);\n                }\n                if (file.length() != length) {\n                    throw new IOException(DIGEST + \" collision: \" + file);\n                }\n            }\n            inUse.remove(tempId);\n            return new FileDataRecord(identifier, file);\n        } catch (NoSuchAlgorithmException e) {\n            throw new DataStoreException(DIGEST + \" not available\", e);\n        } catch (IOException e) {\n            throw new DataStoreException(\"Could not add record\", e);\n        } finally {\n            if (temporary != null) {\n                temporary.delete();\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13067555",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String MD5Digest(String source) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String MD5Digest(String source) {\n        MessageDigest digest;\n        try {\n            digest = java.security.MessageDigest.getInstance(\"MD5\");\n            digest.update(source.getBytes(\"UTF8\"));\n            byte[] hash = digest.digest();\n            String strHash = byteArrayToHexString(hash);\n            return strHash;\n        } catch (NoSuchAlgorithmException e) {\n            String msg = \"%s: %s\";\n            msg = String.format(msg, e.getClass().getName(), e.getMessage());\n            logger.error(msg);\n            return null;\n        } catch (UnsupportedEncodingException e) {\n            String msg = \"%s: %s\";\n            msg = String.format(msg, e.getClass().getName(), e.getMessage());\n            logger.error(msg);\n            return null;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13068082",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic JobOfferPage(JobPageLink link) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public JobOfferPage(JobPageLink link) {\n        this.link = link;\n        try {\n            URL url = new URL(link.getUrl());\n            URLConnection urlConn = url.openConnection();\n            urlConn.setRequestProperty(\"User-Agent\", \"Mozilla/4.0 (compatible; MSIE 5.5; Windows NT 4.0)\");\n            urlConn.setRequestProperty(\"Accept-Language\", \"en-us\");\n            this.content = (String) url.getContent();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        this.jobOfferHtmlList = extractJobOfferHtmlList();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13071869",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void loginImageShack() throws Exception {\n        loginsuccessful = false;\n        HttpParams params = new BasicHttpParams();\n        params.setParameter(\"http.useragent\", \"Mozilla/5.0 (Windows; U; Windows NT 6.1; en-GB; rv:1.9.2) Gecko/20100115 Firefox/3.6\");\n        DefaultHttpClient httpclient = new DefaultHttpClient(params);\n        NULogger.getLogger().info(\"Trying to log in to imageshack.us\");\n        HttpPost httppost = new HttpPost(\"http://imageshack.us/auth.php\");\n        httppost.setHeader(\"Referer\", \"http://www.uploading.com/\");\n        httppost.setHeader(\"Accept\", \"application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5\");\n        httppost.setHeader(\"Cookie\", newcookie + \";\" + phpsessioncookie + \";\" + imgshckcookie + \";\" + uncookie + \";\" + latestcookie + \";\" + langcookie);\n        List<NameValuePair> formparams = new ArrayList<NameValuePair>();\n        formparams.add(new BasicNameValuePair(\"username\", getUsername()));\n        formparams.add(new BasicNameValuePair(\"password\", getPassword()));\n        formparams.add(new BasicNameValuePair(\"stay_logged_in\", \"\"));\n        formparams.add(new BasicNameValuePair(\"format\", \"json\"));\n        UrlEncodedFormEntity entity = new UrlEncodedFormEntity(formparams, \"UTF-8\");\n        httppost.setEntity(entity);\n        HttpResponse httpresponse = httpclient.execute(httppost);\n        HttpEntity en = httpresponse.getEntity();\n        uploadresponse = EntityUtils.toString(en);\n        NULogger.getLogger().log(Level.INFO, \"Upload response : {0}\", uploadresponse);\n        NULogger.getLogger().info(\"Getting cookies........\");\n        Iterator<Cookie> it = httpclient.getCookieStore().getCookies().iterator();\n        Cookie escookie = null;\n        while (it.hasNext()) {\n            escookie = it.next();\n            if (escookie.getName().equalsIgnoreCase(\"myid\")) {\n                myidcookie = escookie.getValue();\n                NULogger.getLogger().info(myidcookie);\n                loginsuccessful = true;\n            }\n            if (escookie.getName().equalsIgnoreCase(\"myimages\")) {\n                myimagescookie = escookie.getValue();\n                NULogger.getLogger().info(myimagescookie);\n            }\n            if (escookie.getName().equalsIgnoreCase(\"isUSER\")) {\n                usercookie = escookie.getValue();\n                NULogger.getLogger().info(usercookie);\n            }\n        }\n        if (loginsuccessful) {\n            NULogger.getLogger().info(\"ImageShack Login Success\");\n            loginsuccessful = true;\n            username = getUsername();\n            password = getPassword();\n        } else {\n            NULogger.getLogger().info(\"ImageShack Login failed\");\n            loginsuccessful = false;\n            username = \"\";\n            password = \"\";\n            JOptionPane.showMessageDialog(NeembuuUploader.getInstance(), \"<html><b>\" + HOSTNAME + \"</b> \" + TranslationProvider.get(\"neembuuuploader.accounts.loginerror\") + \"</html>\", HOSTNAME, JOptionPane.WARNING_MESSAGE);\n            AccountsManager.getInstance().setVisible(true);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13073411",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void render(RenderRequest renderRequest, RenderResponse renderResponse) throws PortletException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void render(RenderRequest renderRequest, RenderResponse renderResponse) throws PortletException {\n        Writer out = null;\n        PreparedStatement ps = null;\n        DatabaseAdapter dbDyn = null;\n        try {\n            AuthSession auth_ = (AuthSession) renderRequest.getUserPrincipal();\n            if (auth_ == null || !auth_.isUserInRole(\"webmill.upload_image\")) {\n                throw new PortletSecurityException(\"You have not enough right\");\n            }\n            if (log.isDebugEnabled()) log.debug(\"Start commit new image from file\");\n            dbDyn = DatabaseAdapter.getInstance();\n            String index_page = PortletService.url(\"mill.image.index\", renderRequest, renderResponse);\n            if (log.isDebugEnabled()) log.debug(\"right to commit image - \" + auth_.isUserInRole(\"webmill.upload_image\"));\n            PortletSession sess = renderRequest.getPortletSession(true);\n            if ((sess.getAttribute(\"MILL.IMAGE.ID_MAIN\") == null) || (sess.getAttribute(\"MILL.IMAGE.DESC_IMAGE\") == null)) {\n                out.write(\"Not all parametrs initialized\");\n                return;\n            }\n            Long id_main = (Long) sess.getAttribute(\"MILL.IMAGE.ID_MAIN\");\n            String desc = ((String) sess.getAttribute(\"MILL.IMAGE.DESC_IMAGE\"));\n            if (log.isDebugEnabled()) log.debug(\"image description \" + desc);\n            CustomSequenceType seq = new CustomSequenceType();\n            seq.setSequenceName(\"seq_image_number_file\");\n            seq.setTableName(\"MAIN_FORUM_THREADS\");\n            seq.setColumnName(\"ID_THREAD\");\n            Long currID = dbDyn.getSequenceNextValue(seq);\n            String storage_ = portletConfig.getPortletContext().getRealPath(\"/\") + File.separatorChar + \"image\";\n            String fileName = storage_ + File.separator + StringTools.appendString(\"\" + currID, '0', 7, true) + \"-\";\n            if (log.isDebugEnabled()) log.debug(\"image fileName \" + fileName);\n            String newFileName = \"\";\n            String supportExtension[] = { \".jpg\", \".jpeg\", \".gif\", \".png\" };\n            try {\n                if (true) throw new UploadFileException(\"Todo need fix\");\n            } catch (UploadFileException e) {\n                log.error(\"Error save image to disk\", e);\n                out.write(\"<html><head></head<body>\" + \"Error while processing this page:<br>\" + ExceptionTools.getStackTrace(e, 20, \"<br>\") + \"<br>\" + \"<p><a href=\\\"\" + index_page + \"\\\">continue</a></p>\" + \"</body></html>\");\n                return;\n            }\n            if (log.isDebugEnabled()) log.debug(\"newFileName \" + newFileName);\n            UserInfo userInfo = auth_.getUserInfo();\n            CustomSequenceType seqImageDir = new CustomSequenceType();\n            seqImageDir.setSequenceName(\"seq_WM_image_dir\");\n            seqImageDir.setTableName(\"WM_IMAGE_DIR\");\n            seqImageDir.setColumnName(\"ID_IMAGE_DIR\");\n            Long seqValue = dbDyn.getSequenceNextValue(seqImageDir);\n            ps = dbDyn.prepareStatement(\"insert into WM_IMAGE_DIR \" + \"( ID_IMAGE_DIR, ID_FIRM, is_group, id, id_main, name_file, description )\" + \"(?, ?, 0, ?, ?, ?, ?\");\n            RsetTools.setLong(ps, 1, seqValue);\n            RsetTools.setLong(ps, 2, userInfo.getCompanyId());\n            RsetTools.setLong(ps, 3, currID);\n            RsetTools.setLong(ps, 4, id_main);\n            ps.setString(5, \"/image/\" + newFileName);\n            ps.setString(6, desc);\n            ps.executeUpdate();\n            dbDyn.commit();\n            if (log.isDebugEnabled()) log.debug(\"redirect to indexPage - \" + index_page);\n            out.write(\"Image successful uploaded\");\n            return;\n        } catch (Exception e) {\n            try {\n                dbDyn.rollback();\n            } catch (SQLException e1) {\n            }\n            final String es = \"Error upload image\";\n            log.error(es, e);\n            throw new PortletException(es, e);\n        } finally {\n            DatabaseManager.close(dbDyn, ps);\n            dbDyn = null;\n            ps = null;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13075308",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static void fileUpload() throws Exception {\n        DefaultHttpClient httpclient = new DefaultHttpClient();\n        HttpPost httppost = new HttpPost(postURL);\n        file = new File(\"h:\\\\Rock Lee.jpg\");\n        MultipartEntity mpEntity = new MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE);\n        ContentBody cbFile = new FileBody(file);\n        mpEntity.addPart(\"file\", cbFile);\n        httppost.setEntity(mpEntity);\n        System.out.println(\"executing request \" + httppost.getRequestLine());\n        System.out.println(\"Now uploading your file into bayfiles.com\");\n        HttpResponse response = httpclient.execute(httppost);\n        HttpEntity resEntity = response.getEntity();\n        System.out.println(response.getStatusLine());\n        if (resEntity != null) {\n            uploadresponse = EntityUtils.toString(resEntity);\n        }\n        System.out.println(\"Upload response : \" + uploadresponse);\n        downloadlink = parseResponse(uploadresponse, \"\\\"downloadUrl\\\":\\\"\", \"\\\"\");\n        downloadlink = downloadlink.replaceAll(\"\\\\\\\\\", \"\");\n        deletelink = parseResponse(uploadresponse, \"\\\"deleteUrl\\\":\\\"\", \"\\\"\");\n        deletelink = deletelink.replaceAll(\"\\\\\\\\\", \"\");\n        System.out.println(\"Download link : \" + downloadlink);\n        System.out.println(\"Delete link : \" + deletelink);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13075309",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void loginBayFiles() throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void loginBayFiles() throws Exception {\n        HttpParams params = new BasicHttpParams();\n        params.setParameter(\"http.useragent\", \"Mozilla/5.0 (Windows; U; Windows NT 6.1; en-GB; rv:1.9.2) Gecko/20100115 Firefox/3.6\");\n        DefaultHttpClient httpclient = new DefaultHttpClient(params);\n        System.out.println(\"Trying to log in to bayfiles.com\");\n        HttpPost httppost = new HttpPost(\"http://bayfiles.com/ajax_login\");\n        List<NameValuePair> formparams = new ArrayList<NameValuePair>();\n        formparams.add(new BasicNameValuePair(\"action\", \"login\"));\n        formparams.add(new BasicNameValuePair(\"username\", \"\"));\n        formparams.add(new BasicNameValuePair(\"password\", \"\"));\n        UrlEncodedFormEntity entity = new UrlEncodedFormEntity(formparams, \"UTF-8\");\n        httppost.setEntity(entity);\n        HttpResponse httpresponse = httpclient.execute(httppost);\n        System.out.println(\"Getting cookies........\");\n        Iterator<Cookie> it = httpclient.getCookieStore().getCookies().iterator();\n        Cookie escookie = null;\n        while (it.hasNext()) {\n            escookie = it.next();\n            if (escookie.getName().equalsIgnoreCase(\"SESSID\")) {\n                sessioncookie = \"SESSID=\" + escookie.getValue();\n                System.out.println(sessioncookie);\n                login = true;\n                System.out.println(\"BayFiles.com Login success :)\");\n            }\n        }\n        if (!login) {\n            System.out.println(\"BayFiles.com Login failed :(\");\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_00130757",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static void readAndRewrite(File inFile, File outFile) throws IOException {\n        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n        Dataset ds = DcmObjectFactory.getInstance().newDataset();\n        dcmParser.setDcmHandler(ds.getDcmHandler());\n        dcmParser.parseDcmFile(null, Tags.PixelData);\n        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        System.out.println(\"reading \" + inFile + \"...\");\n        pdReader.readPixelData(false);\n        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n        ds.writeDataset(out, dcmEncParam);\n        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n        System.out.println(\"writing \" + outFile + \"...\");\n        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        pdWriter.writePixelData();\n        out.flush();\n        out.close();\n        System.out.println(\"done!\");\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01307907",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void testHttpsConnection() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void testHttpsConnection() {\n        try {\n            URL url = new URL(\"https://addons.mozilla.org/zh-CN/firefox/\");\n            HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\n            connection.setDoOutput(true);\n            connection.getOutputStream().write(\"hello\".getBytes());\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13086935",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void run() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void getInfoFromXML() {\n        final ProgressDialog dialog = ProgressDialog.show(this, \"\", getString(R.string.loading), true, true);\n        setProgressBarIndeterminateVisibility(true);\n        Thread t3 = new Thread() {\n\n            public void run() {\n                waiting(200);\n                txtinfo.post(new Runnable() {\n\n                    public void run() {\n                        txtinfo.setText(\"Searching\");\n                    }\n                });\n                try {\n                    URL url = new URL(urlAddress);\n                    SAXParserFactory spf = SAXParserFactory.newInstance();\n                    SAXParser sp = spf.newSAXParser();\n                    XMLReader xr = sp.getXMLReader();\n                    XMLHandlerReviews myXMLHandler = new XMLHandlerReviews();\n                    xr.setContentHandler(myXMLHandler);\n                    xr.parse(new InputSource(url.openStream()));\n                    if (statuscode != 200 && statuscode != 206) {\n                        throw new Exception();\n                    }\n                    nReviewsOnPage = myXMLHandler.nItems;\n                    statuscode = myXMLHandler.statuscode;\n                    if (nReviewsOnPage > 0) {\n                        authors = new String[nReviewsOnPage];\n                        reviews = new String[nReviewsOnPage];\n                        ratings = new String[nReviewsOnPage];\n                        titles = new String[nReviewsOnPage];\n                        listtext = new String[nReviewsOnPage];\n                        for (int i = 0; i < nReviewsOnPage; i++) {\n                            reviews[i] = myXMLHandler.reviews[i];\n                            authors[i] = myXMLHandler.authors[i];\n                            titles[i] = myXMLHandler.titles[i];\n                            ratings[i] = myXMLHandler.ratings[i];\n                            if (authors[i] == null || authors[i] == \"\") {\n                                authors[i] = \"Anonymous\";\n                            }\n                            if (ratings[i] == null || ratings[i] == \"\") {\n                                listtext[i] = titles[i] + \" - \" + reviews[i] + \" - \" + authors[i];\n                            } else {\n                                listtext[i] = \"Score: \" + ratings[i] + \" - \" + titles[i] + \" - \" + reviews[i] + \" - \" + authors[i];\n                            }\n                        }\n                        nTotalReviews = myXMLHandler.nTotalItems;\n                        final int fnmin = iFirstReviewOnPage;\n                        final int fnmax = iFirstReviewOnPage + nReviewsOnPage - 1;\n                        final int fntotalitems = nTotalReviews;\n                        if (nTotalReviews > fnmax) {\n                            nextButton.post(new Runnable() {\n\n                                public void run() {\n                                    nextButton.setVisibility(0);\n                                }\n                            });\n                        } else {\n                            nextButton.post(new Runnable() {\n\n                                public void run() {\n                                    nextButton.setVisibility(8);\n                                }\n                            });\n                        }\n                        if (iFirstReviewOnPage > 1) {\n                            previousButton.post(new Runnable() {\n\n                                public void run() {\n                                    previousButton.setVisibility(0);\n                                }\n                            });\n                        } else if (nTotalReviews > fnmax) {\n                            previousButton.post(new Runnable() {\n\n                                public void run() {\n                                    previousButton.setVisibility(8);\n                                }\n                            });\n                        } else {\n                            previousButton.post(new Runnable() {\n\n                                public void run() {\n                                    previousButton.setVisibility(4);\n                                }\n                            });\n                        }\n                        txtinfo.post(new Runnable() {\n\n                            public void run() {\n                                if (title != null && title != \"\") {\n                                    txtinfo.setText(title + \"\\n\" + getString(R.string.showing) + \" \" + fnmin + \" \" + getString(R.string.through) + \" \" + fnmax + \" \" + getString(R.string.of) + \" \" + fntotalitems);\n                                } else {\n                                    txtinfo.setText(getString(R.string.showing) + \" \" + fnmin + \" \" + getString(R.string.through) + \" \" + fnmax + \" \" + getString(R.string.of) + \" \" + fntotalitems);\n                                }\n                            }\n                        });\n                        handlerSetList.sendEmptyMessage(0);\n                    } else {\n                        txtinfo.post(new Runnable() {\n\n                            public void run() {\n                                txtinfo.setText(title + getString(R.string.no_reviews_for_this_album));\n                            }\n                        });\n                    }\n                } catch (Exception e) {\n                    final Exception ef = e;\n                    txtinfo.post(new Runnable() {\n\n                        public void run() {\n                            txtinfo.setText(R.string.search_failed);\n                        }\n                    });\n                }\n                dialog.dismiss();\n                handlerDoneLoading.sendEmptyMessage(0);\n            }\n        };\n        t3.start();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13086936",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void run() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void run() {\n                waiting(200);\n                txtinfo.post(new Runnable() {\n\n                    public void run() {\n                        txtinfo.setText(\"Searching\");\n                    }\n                });\n                try {\n                    URL url = new URL(urlAddress);\n                    SAXParserFactory spf = SAXParserFactory.newInstance();\n                    SAXParser sp = spf.newSAXParser();\n                    XMLReader xr = sp.getXMLReader();\n                    XMLHandlerReviews myXMLHandler = new XMLHandlerReviews();\n                    xr.setContentHandler(myXMLHandler);\n                    xr.parse(new InputSource(url.openStream()));\n                    if (statuscode != 200 && statuscode != 206) {\n                        throw new Exception();\n                    }\n                    nReviewsOnPage = myXMLHandler.nItems;\n                    statuscode = myXMLHandler.statuscode;\n                    if (nReviewsOnPage > 0) {\n                        authors = new String[nReviewsOnPage];\n                        reviews = new String[nReviewsOnPage];\n                        ratings = new String[nReviewsOnPage];\n                        titles = new String[nReviewsOnPage];\n                        listtext = new String[nReviewsOnPage];\n                        for (int i = 0; i < nReviewsOnPage; i++) {\n                            reviews[i] = myXMLHandler.reviews[i];\n                            authors[i] = myXMLHandler.authors[i];\n                            titles[i] = myXMLHandler.titles[i];\n                            ratings[i] = myXMLHandler.ratings[i];\n                            if (authors[i] == null || authors[i] == \"\") {\n                                authors[i] = \"Anonymous\";\n                            }\n                            if (ratings[i] == null || ratings[i] == \"\") {\n                                listtext[i] = titles[i] + \" - \" + reviews[i] + \" - \" + authors[i];\n                            } else {\n                                listtext[i] = \"Score: \" + ratings[i] + \" - \" + titles[i] + \" - \" + reviews[i] + \" - \" + authors[i];\n                            }\n                        }\n                        nTotalReviews = myXMLHandler.nTotalItems;\n                        final int fnmin = iFirstReviewOnPage;\n                        final int fnmax = iFirstReviewOnPage + nReviewsOnPage - 1;\n                        final int fntotalitems = nTotalReviews;\n                        if (nTotalReviews > fnmax) {\n                            nextButton.post(new Runnable() {\n\n                                public void run() {\n                                    nextButton.setVisibility(0);\n                                }\n                            });\n                        } else {\n                            nextButton.post(new Runnable() {\n\n                                public void run() {\n                                    nextButton.setVisibility(8);\n                                }\n                            });\n                        }\n                        if (iFirstReviewOnPage > 1) {\n                            previousButton.post(new Runnable() {\n\n                                public void run() {\n                                    previousButton.setVisibility(0);\n                                }\n                            });\n                        } else if (nTotalReviews > fnmax) {\n                            previousButton.post(new Runnable() {\n\n                                public void run() {\n                                    previousButton.setVisibility(8);\n                                }\n                            });\n                        } else {\n                            previousButton.post(new Runnable() {\n\n                                public void run() {\n                                    previousButton.setVisibility(4);\n                                }\n                            });\n                        }\n                        txtinfo.post(new Runnable() {\n\n                            public void run() {\n                                if (title != null && title != \"\") {\n                                    txtinfo.setText(title + \"\\n\" + getString(R.string.showing) + \" \" + fnmin + \" \" + getString(R.string.through) + \" \" + fnmax + \" \" + getString(R.string.of) + \" \" + fntotalitems);\n                                } else {\n                                    txtinfo.setText(getString(R.string.showing) + \" \" + fnmin + \" \" + getString(R.string.through) + \" \" + fnmax + \" \" + getString(R.string.of) + \" \" + fntotalitems);\n                                }\n                            }\n                        });\n                        handlerSetList.sendEmptyMessage(0);\n                    } else {\n                        txtinfo.post(new Runnable() {\n\n                            public void run() {\n                                txtinfo.setText(title + getString(R.string.no_reviews_for_this_album));\n                            }\n                        });\n                    }\n                } catch (Exception e) {\n                    final Exception ef = e;\n                    txtinfo.post(new Runnable() {\n\n                        public void run() {\n                            txtinfo.setText(R.string.search_failed);\n                        }\n                    });\n                }\n                dialog.dismiss();\n                handlerDoneLoading.sendEmptyMessage(0);\n            }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13098121",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic Object run() throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private URLConnection openConnection(final URL url) throws IOException {\n        try {\n            return (URLConnection) AccessController.doPrivileged(new PrivilegedExceptionAction() {\n\n                public Object run() throws IOException {\n                    return url.openConnection();\n                }\n            });\n        } catch (PrivilegedActionException e) {\n            throw (IOException) e.getException();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13099033",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void process(HttpServletRequest req, HttpServletResponse resp) throws IOException, ServletException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void process(HttpServletRequest req, HttpServletResponse resp) throws IOException, ServletException {\n        String UrlStr = req.getRequestURL().toString();\n        URL domainurl = new URL(UrlStr);\n        domain = domainurl.getHost();\n        pathinfo = req.getPathInfo();\n        String user_agent = req.getHeader(\"user-agent\");\n        UserAgent userAgent = UserAgent.parseUserAgentString(user_agent);\n        String browser = userAgent.getBrowser().getName();\n        String[] shot_domain_array = domain.split(\"\\\\.\");\n        shot_domain = shot_domain_array[1] + \".\" + shot_domain_array[2];\n        if (browser.equalsIgnoreCase(\"Robot/Spider\") || browser.equalsIgnoreCase(\"Lynx\") || browser.equalsIgnoreCase(\"Downloading Tool\")) {\n            JSONObject domainJsonObject = CsvReader.CsvReader(\"domainparUpdated.csv\", shot_domain);\n            log.info(domainJsonObject.toString());\n        } else {\n            String title;\n            String locale;\n            String facebookid;\n            String color;\n            String headImage;\n            String google_ad_client;\n            String google_ad_slot1;\n            String google_ad_width1;\n            String google_ad_height1;\n            String google_ad_slot2;\n            String google_ad_width2;\n            String google_ad_height2;\n            String google_ad_slot3;\n            String google_ad_width3;\n            String google_ad_height3;\n            String countrycode = null;\n            String city = null;\n            String gmclickval = null;\n            String videos = null;\n            int intcount = 0;\n            String strcount = \"0\";\n            boolean countExist = false;\n            Cookie[] cookies = req.getCookies();\n            if (cookies != null) {\n                for (int i = 0; i < cookies.length; i++) {\n                    if (cookies[i].getName().equals(\"count\")) {\n                        strcount = cookies[i].getValue();\n                        if (strcount != null && strcount.length() > 0) {\n                            log.info(\"Check count \" + strcount + \" path \" + cookies[i].getPath());\n                            intcount = Integer.parseInt(strcount);\n                            intcount++;\n                        } else {\n                            intcount = 1;\n                        }\n                        log.info(\"New count \" + intcount);\n                        LongLivedCookie count = new LongLivedCookie(\"count\", Integer.toString(intcount));\n                        resp.addCookie(count);\n                        countExist = true;\n                    }\n                    if (cookies[i].getName().equals(\"countrycode\")) {\n                        countrycode = cookies[i].getValue();\n                    }\n                    if (cookies[i].getName().equals(\"city\")) {\n                        city = cookies[i].getValue();\n                    }\n                    if (cookies[i].getName().equals(\"videos\")) {\n                        videos = cookies[i].getValue();\n                        log.info(\"Welcome videos \" + videos);\n                    }\n                    if (cookies[i].getName().equals(\"gmclick\")) {\n                        log.info(\"gmclick exist!!\");\n                        gmclickval = cookies[i].getValue();\n                        if (intcount % 20 == 0 && intcount > 0) {\n                            log.info(\"Cancell gmclick -> \" + gmclickval + \" intcount \" + intcount + \" path \" + cookies[i].getPath());\n                            Cookie gmclick = new Cookie(\"gmclick\", \"0\");\n                            gmclick.setPath(\"/\");\n                            gmclick.setMaxAge(0);\n                            resp.addCookie(gmclick);\n                        }\n                    }\n                }\n                if (!countExist) {\n                    LongLivedCookie count = new LongLivedCookie(\"count\", \"0\");\n                    resp.addCookie(count);\n                    log.info(\" Not First visit count Don't Exist!!\");\n                }\n                if (videos == null) {\n                    LongLivedCookie videoscookies = new LongLivedCookie(\"videos\", \"0\");\n                    resp.addCookie(videoscookies);\n                    log.info(\"Not First visit VIDEOS Don't Exist!!\");\n                }\n            } else {\n                LongLivedCookie count = new LongLivedCookie(\"count\", strcount);\n                resp.addCookie(count);\n                LongLivedCookie videosfirstcookies = new LongLivedCookie(\"videos\", \"0\");\n                resp.addCookie(videosfirstcookies);\n                log.info(\"First visit count = \" + intcount + \" videos 0\");\n            }\n            String[] dompar = CommUtils.CsvParsing(domain, \"domainpar.csv\");\n            title = dompar[0];\n            locale = dompar[1];\n            facebookid = dompar[2];\n            color = dompar[3];\n            headImage = dompar[4];\n            google_ad_client = dompar[5];\n            google_ad_slot1 = dompar[6];\n            google_ad_width1 = dompar[7];\n            google_ad_height1 = dompar[8];\n            google_ad_slot2 = dompar[9];\n            google_ad_width2 = dompar[10];\n            google_ad_height2 = dompar[11];\n            google_ad_slot3 = dompar[12];\n            google_ad_width3 = dompar[13];\n            google_ad_height3 = dompar[14];\n            String ip = req.getRemoteHost();\n            if ((countrycode == null) || (city == null)) {\n                String ipServiceCall = \"http://api.ipinfodb.com/v2/ip_query.php?key=abbb04fd823793c5343a046e5d56225af37861b9020e9bc86313eb20486b6133&ip=\" + ip + \"&output=json\";\n                String strCallResult = \"\";\n                URL url = new URL(ipServiceCall);\n                BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream(), \"UTF8\"));\n                StringBuffer response = new StringBuffer();\n                String line;\n                while ((line = reader.readLine()) != null) {\n                    response.append(line);\n                }\n                reader.close();\n                strCallResult = response.toString();\n                try {\n                    JSONObject jso = new JSONObject(strCallResult);\n                    log.info(\"Status -> \" + jso.get(\"Status\").toString());\n                    log.info(\"City -> \" + jso.get(\"City\").toString());\n                    city = jso.get(\"City\").toString();\n                    countrycode = jso.get(\"CountryCode\").toString();\n                    log.info(\"countrycode -> \" + countrycode);\n                    if ((city.length() == 0) || (city == null)) {\n                        LongLivedCookie cookcity = new LongLivedCookie(\"city\", \"Helsinki\");\n                        resp.addCookie(cookcity);\n                        city = \"Helsinki\";\n                    } else {\n                        LongLivedCookie cookcity = new LongLivedCookie(\"city\", city);\n                        resp.addCookie(cookcity);\n                    }\n                    if (countrycode.length() == 0 || (countrycode == null) || countrycode.equals(\"RD\")) {\n                        LongLivedCookie cookcountrycode = new LongLivedCookie(\"countrycode\", \"FI\");\n                        resp.addCookie(cookcountrycode);\n                        countrycode = \"FI\";\n                    } else {\n                        LongLivedCookie cookcountrycode = new LongLivedCookie(\"countrycode\", countrycode);\n                        resp.addCookie(cookcountrycode);\n                    }\n                } catch (JSONException e) {\n                    log.severe(e.getMessage());\n                } finally {\n                    if ((countrycode == null) || (city == null)) {\n                        log.severe(\"need use finally!!!\");\n                        countrycode = \"FI\";\n                        city = \"Helsinki\";\n                        LongLivedCookie cookcity = new LongLivedCookie(\"city\", \"Helsinki\");\n                        resp.addCookie(cookcity);\n                        LongLivedCookie cookcountrycode = new LongLivedCookie(\"countrycode\", \"FI\");\n                        resp.addCookie(cookcountrycode);\n                    }\n                }\n            }\n            JSONArray startjsonarray = new JSONArray();\n            JSONArray memjsonarray = new JSONArray();\n            Map<String, Object> map = new HashMap<String, Object>();\n            Map<String, Object> mapt = new HashMap<String, Object>();\n            mapt.put(\"img\", headImage);\n            mapt.put(\"color\", color);\n            mapt.put(\"title\", title);\n            mapt.put(\"locale\", locale);\n            mapt.put(\"domain\", domain);\n            mapt.put(\"facebookid\", facebookid);\n            mapt.put(\"ip\", ip);\n            mapt.put(\"countrycode\", countrycode);\n            mapt.put(\"city\", city);\n            map.put(\"theme\", mapt);\n            startjsonarray.put(map);\n            String[] a = { \"mem0\", \"mem20\", \"mem40\", \"mem60\", \"mem80\", \"mem100\", \"mem120\", \"mem140\", \"mem160\", \"mem180\" };\n            List memlist = Arrays.asList(a);\n            Collections.shuffle(memlist);\n            Map<String, Object> mammap = new HashMap<String, Object>();\n            mammap.put(\"memlist\", memlist);\n            memjsonarray.put(mammap);\n            log.info(memjsonarray.toString());\n            resp.setContentType(\"text/html\");\n            resp.setCharacterEncoding(\"UTF-8\");\n            PrintWriter out = resp.getWriter();\n            out.println(\"<!DOCTYPE HTML PUBLIC \\\"-//W3C//DTD HTML 4.01 Transitional//EN\\\" \\\"http://www.w3.org/TR/html4/loose.dtd\\\">\");\n            out.println(\"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" xmlns:fb=\\\"http://www.facebook.com/2008/fbml\\\">\");\n            out.println(\"<head>\");\n            out.println(\"<meta http-equiv=\\\"content-type\\\" content=\\\"text/html; charset=UTF-8\\\">\");\n            out.println(\"<meta name=\\\"gwt:property\\\" content=\\\"locale=\" + locale + \"\\\">\");\n            out.println(\"<link type=\\\"text/css\\\" rel=\\\"stylesheet\\\" href=\\\"NewTube.css\\\">\");\n            out.println(\"<title>\" + title + \"</title>\");\n            out.println(\"<script type=\\\"text/javascript\\\" language=\\\"javascript\\\" src=\\\"newtube/newtube.nocache.js\\\"></script>\");\n            out.println(\"<script type='text/javascript'>var jsonStartParams = \" + startjsonarray.toString() + \";</script>\");\n            out.println(\"<script type='text/javascript'>var girlsphones = \" + CommUtils.CsvtoJson(\"girlsphones.csv\").toString() + \";</script>\");\n            out.println(\"<script type='text/javascript'>\");\n            out.println(\"var mem = \" + memjsonarray.toString() + \";\");\n            out.println(\"</script>\");\n            out.println(\"</head>\");\n            out.println(\"<body>\");\n            out.println(\"<div id='fb-root'></div>\");\n            out.println(\"<script>\");\n            out.println(\"window.fbAsyncInit = function() {\");\n            out.println(\"FB.init({appId: '\" + facebookid + \"', status: true, cookie: true,xfbml: true});};\");\n            out.println(\"(function() {\");\n            out.println(\"var e = document.createElement('script'); e.async = true;\");\n            out.println(\"e.src = document.location.protocol +\");\n            out.println(\"'//connect.facebook.net/\" + locale + \"/all.js';\");\n            out.println(\"document.getElementById('fb-root').appendChild(e);\");\n            out.println(\"}());\");\n            out.println(\"</script>\");\n            out.println(\"<div id=\\\"start\\\"></div>\");\n            out.println(\"<div id=\\\"seo_content\\\">\");\n            BufferedReader bufRdr = new BufferedReader(new InputStreamReader(new FileInputStream(domain + \".html\"), \"UTF8\"));\n            String contline = null;\n            while ((contline = bufRdr.readLine()) != null) {\n                out.println(contline);\n            }\n            bufRdr.close();\n            if (countrycode != null && !countrycode.equalsIgnoreCase(\"US\") && !countrycode.equalsIgnoreCase(\"IE\") && !countrycode.equalsIgnoreCase(\"UK\") && intcount > 2 && intcount < 51) {\n                out.println(\"<script type=\\\"text/javascript\\\"><!--\");\n                out.println(\"google_ad_client = \\\"\" + google_ad_client + \"\\\";\");\n                out.println(\"google_ad_slot = \\\"\" + google_ad_slot1 + \"\\\";\");\n                out.println(\"google_ad_width = \" + google_ad_width1 + \";\");\n                out.println(\"google_ad_height = \" + google_ad_height1 + \";\");\n                out.println(\"//-->\");\n                out.println(\"</script>\");\n                out.println(\"<script type=\\\"text/javascript\\\"\");\n                out.println(\"src=\\\"\" + google_ad_client + \".js\\\">\");\n                out.println(\"</script>\");\n                out.println(\"<script type=\\\"text/javascript\\\"><!--\");\n                out.println(\"google_ad_client = \\\"\" + google_ad_client + \"\\\";\");\n                out.println(\"google_ad_slot = \\\"\" + google_ad_slot2 + \"\\\";\");\n                out.println(\"google_ad_width = \" + google_ad_width2 + \";\");\n                out.println(\"google_ad_height = \" + google_ad_height2 + \";\");\n                out.println(\"//-->\");\n                out.println(\"</script>\");\n                out.println(\"<script type=\\\"text/javascript\\\"\");\n                out.println(\"src=\\\"\" + google_ad_client + \".js\\\">\");\n                out.println(\"</script>\");\n                out.println(\"<script type=\\\"text/javascript\\\"><!--\");\n                out.println(\"google_ad_client = \\\"\" + google_ad_client + \"\\\";\");\n                out.println(\"google_ad_slot = \\\"\" + google_ad_slot3 + \"\\\";\");\n                out.println(\"google_ad_width = \" + google_ad_width3 + \";\");\n                out.println(\"google_ad_height = \" + google_ad_height3 + \";\");\n                out.println(\"//-->\");\n                out.println(\"</script>\");\n                out.println(\"<script type=\\\"text/javascript\\\"\");\n                out.println(\"src=\\\"\" + google_ad_client + \".js\\\">\");\n                out.println(\"</script>\");\n            }\n            if (countrycode != null && !countrycode.equalsIgnoreCase(\"US\") && !countrycode.equalsIgnoreCase(\"IE\") && !countrycode.equalsIgnoreCase(\"UK\") && intcount > 50) {\n                out.println(\"<script type=\\\"text/javascript\\\"><!--\");\n                out.println(\"google_ad_client = \\\"\" + \"pub-9496078135369870\" + \"\\\";\");\n                out.println(\"google_ad_slot = \\\"\" + \"8683942065\" + \"\\\";\");\n                out.println(\"google_ad_width = \" + \"160\" + \";\");\n                out.println(\"google_ad_height = \" + \"600\" + \";\");\n                out.println(\"//-->\");\n                out.println(\"</script>\");\n                out.println(\"<script type=\\\"text/javascript\\\"\");\n                out.println(\"src=\\\"pub-9496078135369870\" + \"\" + \".js\\\">\");\n                out.println(\"</script>\");\n                out.println(\"<script type=\\\"text/javascript\\\"><!--\");\n                out.println(\"google_ad_client = \\\"\" + \"pub-9496078135369870\" + \"\\\";\");\n                out.println(\"google_ad_slot = \\\"\" + \"0941291340\" + \"\\\";\");\n                out.println(\"google_ad_width = \" + \"728\" + \";\");\n                out.println(\"google_ad_height = \" + \"90\" + \";\");\n                out.println(\"//-->\");\n                out.println(\"</script>\");\n                out.println(\"<script type=\\\"text/javascript\\\"\");\n                out.println(\"src=\\\"\" + \"pub-9496078135369870\" + \".js\\\">\");\n                out.println(\"</script>\");\n                out.println(\"<script type=\\\"text/javascript\\\"><!--\");\n                out.println(\"google_ad_client = \\\"\" + \"pub-9496078135369870\" + \"\\\";\");\n                out.println(\"google_ad_slot = \\\"\" + \"4621616265\" + \"\\\";\");\n                out.println(\"google_ad_width = \" + \"468\" + \";\");\n                out.println(\"google_ad_height = \" + \"60\" + \";\");\n                out.println(\"//-->\");\n                out.println(\"</script>\");\n                out.println(\"<script type=\\\"text/javascript\\\"\");\n                out.println(\"src=\\\"\" + \"pub-9496078135369870\" + \".js\\\">\");\n                out.println(\"</script>\");\n            }\n            out.println(\"</div>\");\n            out.println(\"</body></html>\");\n            out.close();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13099597",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void deleteGroup(String groupID) throws XregistryException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void deleteGroup(String groupID) throws XregistryException {\n        try {\n            Connection connection = context.createConnection();\n            connection.setAutoCommit(false);\n            try {\n                PreparedStatement statement1 = connection.prepareStatement(DELETE_GROUP_SQL_MAIN);\n                statement1.setString(1, groupID);\n                int updateCount = statement1.executeUpdate();\n                if (updateCount == 0) {\n                    throw new XregistryException(\"Database is not updated, Can not find such Group \" + groupID);\n                }\n                if (cascadingDeletes) {\n                    PreparedStatement statement2 = connection.prepareStatement(DELETE_GROUP_SQL_DEPEND);\n                    statement2.setString(1, groupID);\n                    statement2.setString(2, groupID);\n                    statement2.executeUpdate();\n                }\n                connection.commit();\n                groups.remove(groupID);\n                log.info(\"Delete Group \" + groupID + (cascadingDeletes ? \" with cascading deletes \" : \"\"));\n            } catch (SQLException e) {\n                connection.rollback();\n                throw new XregistryException(e);\n            } finally {\n                context.closeConnection(connection);\n            }\n        } catch (SQLException e) {\n            throw new XregistryException(e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13099598",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void deleteUser(String userID) throws XregistryException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void deleteUser(String userID) throws XregistryException {\n        try {\n            userID = Utils.canonicalizeDN(userID);\n            Connection connection = context.createConnection();\n            connection.setAutoCommit(false);\n            try {\n                PreparedStatement statement1 = connection.prepareStatement(DELETE_USER_SQL_MAIN);\n                statement1.setString(1, userID);\n                statement1.executeUpdate();\n                PreparedStatement statement2 = connection.prepareStatement(DELETE_USER_SQL_DEPEND);\n                statement2.setString(1, userID);\n                statement2.executeUpdate();\n                connection.commit();\n                Collection<Group> groupList = groups.values();\n                for (Group group : groupList) {\n                    group.removeUser(userID);\n                }\n                log.info(\"Delete User \" + userID);\n            } catch (SQLException e) {\n                connection.rollback();\n                throw new XregistryException(e);\n            } finally {\n                context.closeConnection(connection);\n            }\n        } catch (SQLException e) {\n            throw new XregistryException(e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13102388",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void callBatch(final List<JsonRpcClient.Call> calls, final JsonRpcClient.BatchCallback callback) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void callBatch(final List<JsonRpcClient.Call> calls, final JsonRpcClient.BatchCallback callback) {\n        HttpPost httpPost = new HttpPost(mRpcUrl);\n        JSONObject requestJson = new JSONObject();\n        JSONArray callsJson = new JSONArray();\n        try {\n            for (int i = 0; i < calls.size(); i++) {\n                JsonRpcClient.Call call = calls.get(i);\n                JSONObject callJson = new JSONObject();\n                callJson.put(\"method\", call.getMethodName());\n                if (call.getParams() != null) {\n                    JSONObject callParams = (JSONObject) call.getParams();\n                    @SuppressWarnings(\"unchecked\") Iterator<String> keysIterator = callParams.keys();\n                    String key;\n                    while (keysIterator.hasNext()) {\n                        key = keysIterator.next();\n                        callJson.put(key, callParams.get(key));\n                    }\n                }\n                callsJson.put(i, callJson);\n            }\n            requestJson.put(\"calls\", callsJson);\n            httpPost.setEntity(new StringEntity(requestJson.toString(), \"UTF-8\"));\n            if (Log.isLoggable(TAG, Log.VERBOSE)) {\n                Log.v(TAG, \"POST request: \" + requestJson.toString());\n            }\n        } catch (JSONException e) {\n        } catch (UnsupportedEncodingException e) {\n        }\n        try {\n            HttpResponse httpResponse = mHttpClient.execute(httpPost);\n            final int responseStatusCode = httpResponse.getStatusLine().getStatusCode();\n            if (200 <= responseStatusCode && responseStatusCode < 300) {\n                BufferedReader reader = new BufferedReader(new InputStreamReader(httpResponse.getEntity().getContent(), \"UTF-8\"), 8 * 1024);\n                StringBuilder sb = new StringBuilder();\n                String line;\n                while ((line = reader.readLine()) != null) {\n                    sb.append(line).append(\"\\n\");\n                }\n                if (Log.isLoggable(TAG, Log.VERBOSE)) {\n                    Log.v(TAG, \"POST response: \" + sb.toString());\n                }\n                JSONTokener tokener = new JSONTokener(sb.toString());\n                JSONObject responseJson = new JSONObject(tokener);\n                JSONArray resultsJson = responseJson.getJSONArray(\"results\");\n                Object[] resultData = new Object[calls.size()];\n                for (int i = 0; i < calls.size(); i++) {\n                    JSONObject result = resultsJson.getJSONObject(i);\n                    if (result.has(\"error\")) {\n                        callback.onError(i, new JsonRpcException((int) result.getInt(\"error\"), calls.get(i).getMethodName(), result.getString(\"message\"), null));\n                        resultData[i] = null;\n                    } else {\n                        resultData[i] = result.get(\"data\");\n                    }\n                }\n                callback.onData(resultData);\n            } else {\n                callback.onError(-1, new JsonRpcException(-1, \"Received HTTP status code other than HTTP 2xx: \" + httpResponse.getStatusLine().getReasonPhrase()));\n            }\n        } catch (IOException e) {\n            Log.e(\"JsonRpcJavaClient\", e.getMessage());\n            e.printStackTrace();\n        } catch (JSONException e) {\n            Log.e(\"JsonRpcJavaClient\", \"Error parsing server JSON response: \" + e.getMessage());\n            e.printStackTrace();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13104737",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void actionPerformed(ActionEvent e) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void initialize() {\n        StringBuffer license = new StringBuffer();\n        URL url;\n        InputStreamReader in;\n        BufferedReader reader;\n        String str;\n        JTextArea textArea;\n        JButton button;\n        GridBagConstraints c;\n        setTitle(\"Mibble License\");\n        setSize(600, 600);\n        setDefaultCloseOperation(DISPOSE_ON_CLOSE);\n        getContentPane().setLayout(new GridBagLayout());\n        url = getClass().getClassLoader().getResource(\"LICENSE.txt\");\n        if (url == null) {\n            license.append(\"Couldn't locate license file (LICENSE.txt).\");\n        } else {\n            try {\n                in = new InputStreamReader(url.openStream());\n                reader = new BufferedReader(in);\n                while ((str = reader.readLine()) != null) {\n                    if (!str.equals(\"\f\")) {\n                        license.append(str);\n                    }\n                    license.append(\"\\n\");\n                }\n                reader.close();\n            } catch (IOException e) {\n                license.append(\"Error reading license file \");\n                license.append(\"(LICENSE.txt):\\n\\n\");\n                license.append(e.getMessage());\n            }\n        }\n        textArea = new JTextArea(license.toString());\n        textArea.setEditable(false);\n        c = new GridBagConstraints();\n        c.fill = GridBagConstraints.BOTH;\n        c.weightx = 1.0d;\n        c.weighty = 1.0d;\n        c.insets = new Insets(4, 5, 4, 5);\n        getContentPane().add(new JScrollPane(textArea), c);\n        button = new JButton(\"Close\");\n        button.addActionListener(new ActionListener() {\n\n            public void actionPerformed(ActionEvent e) {\n                dispose();\n            }\n        });\n        c = new GridBagConstraints();\n        c.gridy = 1;\n        c.anchor = GridBagConstraints.CENTER;\n        c.insets = new Insets(10, 10, 10, 10);\n        getContentPane().add(button, c);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13106834",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void copyFilesIntoProject(HashMap<String, String> files) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void copyFilesIntoProject(HashMap<String, String> files) {\n        Set<String> filenames = files.keySet();\n        for (String key : filenames) {\n            String realPath = files.get(key);\n            if (key.equals(\"fw4ex.xml\")) {\n                try {\n                    FileReader in = new FileReader(new File(realPath));\n                    FileWriter out = new FileWriter(new File(project.getLocation() + \"/\" + bundle.getString(\"Stem\") + STEM_FILE_EXETENSION));\n                    int c;\n                    while ((c = in.read()) != -1) out.write(c);\n                    in.close();\n                    out.close();\n                } catch (FileNotFoundException e) {\n                    Activator.getDefault().showMessage(\"File \" + key + \" not found... Error while moving files to the new project.\");\n                } catch (IOException ie) {\n                    Activator.getDefault().showMessage(\"Error while moving \" + key + \" to the new project.\");\n                }\n            } else {\n                try {\n                    FileReader in = new FileReader(new File(realPath));\n                    FileWriter out = new FileWriter(new File(project.getLocation() + \"/\" + key));\n                    int c;\n                    while ((c = in.read()) != -1) out.write(c);\n                    in.close();\n                    out.close();\n                } catch (FileNotFoundException e) {\n                    Activator.getDefault().showMessage(\"File \" + key + \" not found... Error while moving files to the new project.\");\n                } catch (IOException ie) {\n                    Activator.getDefault().showMessage(\"Error while moving \" + key + \" to the new project.\");\n                }\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13111022",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static void copy(File source, File target) throws IOException {\n        InputStream is = null;\n        OutputStream os = null;\n        try {\n            is = new BufferedInputStream(new FileInputStream(source));\n            os = new BufferedOutputStream(new FileOutputStream(target));\n            int b;\n            while ((b = is.read()) > -1) os.write(b);\n        } finally {\n            try {\n                if (is != null) is.close();\n            } catch (IOException ignore) {\n            }\n            try {\n                if (os != null) os.close();\n            } catch (IOException ignore) {\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13120648",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        String arg = req.getParameter(\"file\");\n        if (arg == null) {\n            resp.sendError(404, \"Missing 'file' Arg\");\n            return;\n        }\n        int mfid = NumberUtils.toInt(arg);\n        Object sageFile = MediaFileAPI.GetMediaFileForID(mfid);\n        if (sageFile == null) {\n            resp.sendError(404, \"Sage File not found \" + mfid);\n            return;\n        }\n        int seconds = NumberUtils.toInt(req.getParameter(\"ss\"), -1);\n        long offset = NumberUtils.toLong(req.getParameter(\"sb\"), -1);\n        if (seconds < 0 && offset < 0) {\n            resp.sendError(501, \"Missing 'ss' or 'sb' args\");\n            return;\n        }\n        int width = NumberUtils.toInt(req.getParameter(\"w\"), 320);\n        int height = NumberUtils.toInt(req.getParameter(\"h\"), 320);\n        File dir = new File(Phoenix.getInstance().getUserCacheDir(), \"videothumb/\" + mfid);\n        if (!dir.exists()) {\n            dir.mkdirs();\n        }\n        String prefix = \"\";\n        if (offset > 0) {\n            prefix = \"O\" + offset;\n        } else {\n            prefix = \"S\" + seconds;\n        }\n        File f = new File(dir, prefix + \"_\" + width + \"_\" + height + \".jpg\").getCanonicalFile();\n        if (!f.exists()) {\n            try {\n                generateThumbnailNew(sageFile, f, seconds, offset, width, height);\n            } catch (Exception e) {\n                e.printStackTrace();\n                resp.sendError(503, \"Failed to generate thumbnail\\n \" + e.getMessage());\n                return;\n            }\n        }\n        if (!f.exists()) {\n            resp.sendError(404, \"Missing File: \" + f);\n            return;\n        }\n        resp.setContentType(\"image/jpeg\");\n        resp.setContentLength((int) f.length());\n        FileInputStream fis = null;\n        try {\n            fis = new FileInputStream(f);\n            OutputStream os = resp.getOutputStream();\n            IOUtils.copyLarge(fis, os);\n            os.flush();\n            fis.close();\n        } catch (Throwable e) {\n            log.error(\"Failed to send file: \" + f);\n            resp.sendError(500, \"Failed to get file \" + f);\n        } finally {\n            IOUtils.closeQuietly(fis);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13121131",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copyFile(File in, File out) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copyFile(File in, File out) throws IOException {\n        FileChannel inChannel = new FileInputStream(in).getChannel();\n        FileChannel outChannel = new FileOutputStream(out).getChannel();\n        try {\n            inChannel.transferTo(0, inChannel.size(), outChannel);\n        } catch (IOException e) {\n            throw e;\n        } finally {\n            if (inChannel != null) inChannel.close();\n            if (outChannel != null) outChannel.close();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13122191",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copy(String inputFile, String outputFile) throws EDITSException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copy(String inputFile, String outputFile) throws EDITSException {\n        try {\n            FileReader in = new FileReader(inputFile);\n            FileWriter out = new FileWriter(outputFile);\n            int c;\n            while ((c = in.read()) != -1) out.write(c);\n            in.close();\n            out.close();\n        } catch (Exception e) {\n            throw new EDITSException(\"Could not copy \" + inputFile + \" into \" + outputFile + \" because:\\n\" + e.getMessage());\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13122193",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void createModelZip(String filename, String tempdir) throws EDITSException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void createModelZip(String filename, String tempdir) throws EDITSException {\n        try {\n            BufferedInputStream origin = null;\n            FileOutputStream dest = new FileOutputStream(filename);\n            ZipOutputStream out = new ZipOutputStream(new BufferedOutputStream(dest));\n            int BUFFER = 2048;\n            byte data[] = new byte[BUFFER];\n            File f = new File(tempdir);\n            for (File fs : f.listFiles()) {\n                FileInputStream fi = new FileInputStream(fs.getAbsolutePath());\n                origin = new BufferedInputStream(fi, BUFFER);\n                ZipEntry entry = new ZipEntry(fs.getName());\n                out.putNextEntry(entry);\n                int count;\n                while ((count = origin.read(data, 0, BUFFER)) != -1) out.write(data, 0, count);\n                out.closeEntry();\n                origin.close();\n            }\n            out.close();\n        } catch (Exception e) {\n            throw new EDITSException(\"Can not create a model in file \" + filename + \" from folder \" + tempdir);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13122204",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void unzipModel(String filename, String tempdir) throws EDITSException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void unzipModel(String filename, String tempdir) throws EDITSException {\n        try {\n            BufferedOutputStream dest = null;\n            FileInputStream fis = new FileInputStream(filename);\n            int BUFFER = 2048;\n            ZipInputStream zis = new ZipInputStream(new BufferedInputStream(fis));\n            ZipEntry entry;\n            while ((entry = zis.getNextEntry()) != null) {\n                int count;\n                byte data[] = new byte[BUFFER];\n                FileOutputStream fos = new FileOutputStream(tempdir + entry.getName());\n                dest = new BufferedOutputStream(fos, BUFFER);\n                while ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count);\n                dest.flush();\n                dest.close();\n            }\n            zis.close();\n        } catch (Exception e) {\n            throw new EDITSException(\"Can not expand model in \\\"\" + tempdir + \"\\\" because:\\n\" + e.getMessage());\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13124924",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic HttpURLConnection getURLConnection() throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public HttpURLConnection getURLConnection() throws IOException {\n        HttpURLConnection conn = null;\n        try {\n            conn = (HttpURLConnection) _url.openConnection();\n            conn.setUseCaches(false);\n            conn.setRequestProperty(\"User-Agent\", \"WD-2.0\");\n            if (_doConditionalGET) {\n                ResourceInfo ri = (ResourceInfo) conditionalGetTable().get(_url.toString());\n                if (ri != null) {\n                    if (ri.lastModified != null) {\n                        conn.setRequestProperty(\"If-Modified-Since\", ri.lastModified);\n                    }\n                    if (ri.etag != null) {\n                        conn.setRequestProperty(\"If-None-Match\", ri.etag);\n                    }\n                }\n            }\n            if (_username != null && _password != null) {\n                String authenticationStr = _username + \":\" + _password;\n                String encodedAuthStr = Base64.encodeBytes(authenticationStr.getBytes());\n                conn.setRequestProperty(\"Authorization\", \"Basic \" + encodedAuthStr);\n            }\n            _httpResponseCode = conn.getResponseCode();\n            if (_httpResponseCode == HttpURLConnection.HTTP_OK) {\n                if (_doConditionalGET) {\n                    ResourceInfo ri = new ResourceInfo();\n                    ri.lastModified = conn.getHeaderField(\"Last-Modified\");\n                    ri.etag = conn.getHeaderField(\"ETag\");\n                    Hashtable table = conditionalGetTable();\n                    table.put(_url.toString(), ri);\n                    storeConditionalGetTable(table);\n                }\n            } else if (_httpResponseCode == HttpURLConnection.HTTP_NOT_MODIFIED) {\n                _shouldGET = false;\n            } else {\n                Log.getInstance().write(\"Error getting url: \" + _url + \"\\n\" + \"Error code: \" + _httpResponseCode);\n                _error = HTTP_NOT_OK;\n                conn.disconnect();\n                conn = null;\n            }\n        } catch (SocketException ex) {\n            conn.disconnect();\n            conn = null;\n            _error = NETWORK_DOWN;\n        }\n        return conn;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01312612",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void initFromXml(final String xmlFileName) throws java.net.MalformedURLException, ConfigurationException, IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void initFromXml(final String xmlFileName) throws java.net.MalformedURLException, ConfigurationException, IOException {\n        if (xmlInitialized) {\n            return;\n        }\n        templates = null;\n        MergeTemplateWriter.setTokenList(getTokenProvider().getKnownTokens());\n        java.net.URL url = new FileFinder().getUrl(getTokenProvider().getClass(), xmlFileName);\n        InputStreamReader xmlFileReader = new InputStreamReader(url.openStream());\n        KnownTemplates temps = MergeTemplateWriter.importFromXML(xmlFileReader);\n        xmlFileReader.close();\n        KnownTemplates.setDefaultInstance(temps);\n        setTemplates(temps);\n        setInitialized(true);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13131643",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void init(File file) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void init(File file) {\n        InputStream is = null;\n        ByteArrayOutputStream os = null;\n        try {\n            is = new FileInputStream(file);\n            os = new ByteArrayOutputStream();\n            IOUtils.copy(is, os);\n        } catch (Throwable e) {\n            throw new VisualizerEngineException(\"Unexcpected exception while reading MDF file\", e);\n        }\n        if (simulationEngine != null) simulationEngine.stopSimulation();\n        simulationEngine = new TrafficAsynchSimulationEngine();\n        simulationEngine.init(MDFReader.read(os.toByteArray()));\n        simulationEngineThread = null;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_00131318",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic Vector _getSiteNames() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public Vector _getSiteNames() {\n        Vector _mySites = new Vector();\n        boolean gotSites = false;\n        while (!gotSites) {\n            try {\n                URL dataurl = new URL(getDocumentBase(), siteFile);\n                BufferedReader readme = new BufferedReader(new InputStreamReader(new GZIPInputStream(dataurl.openStream())));\n                while (true) {\n                    String S = readme.readLine();\n                    if (S == null) break;\n                    StringTokenizer st = new StringTokenizer(S);\n                    _mySites.addElement(st.nextToken());\n                }\n                gotSites = true;\n            } catch (IOException e) {\n                _mySites.removeAllElements();\n                gotSites = false;\n            }\n        }\n        return (_mySites);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01313409",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void setPilot(PilotData pilotData) throws UsernameNotValidException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void setPilot(PilotData pilotData) throws UsernameNotValidException {\n        try {\n            if (pilotData.username.trim().equals(\"\") || pilotData.password.trim().equals(\"\")) throw new UsernameNotValidException(1, \"Username or password missing\");\n            PreparedStatement psta;\n            if (pilotData.id == 0) {\n                psta = jdbc.prepareStatement(\"INSERT INTO pilot \" + \"(name, address1, address2, zip, city, state, country, birthdate, \" + \"pft_theory, pft, medical, passenger, instructor, loc_language, \" + \"loc_country, loc_variant, username, password, id) \" + \"VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,pilot_id_seq.nextval)\");\n            } else {\n                psta = jdbc.prepareStatement(\"UPDATE pilot SET \" + \"name = ?, address1 = ?, address2 = ?, \" + \"zip = ?, city = ?, state = ?, country = ?, birthdate = ?, pft_theory = ?,\" + \"pft = ?, medical = ?, passenger = ?, instructor = ?, loc_language = ?, \" + \"loc_country = ?, loc_variant = ?, username = ?, password = ? \" + \"WHERE id = ?\");\n            }\n            psta.setString(1, pilotData.name);\n            psta.setString(2, pilotData.address1);\n            psta.setString(3, pilotData.address2);\n            psta.setString(4, pilotData.zip);\n            psta.setString(5, pilotData.city);\n            psta.setString(6, pilotData.state);\n            psta.setString(7, pilotData.country);\n            if (pilotData.birthdate != null) psta.setLong(8, pilotData.birthdate.getTime()); else psta.setNull(8, java.sql.Types.INTEGER);\n            if (pilotData.pft_theory != null) psta.setLong(9, pilotData.pft_theory.getTime()); else psta.setNull(9, java.sql.Types.INTEGER);\n            if (pilotData.pft != null) psta.setLong(10, pilotData.pft.getTime()); else psta.setNull(10, java.sql.Types.INTEGER);\n            if (pilotData.medical != null) psta.setLong(11, pilotData.medical.getTime()); else psta.setNull(11, java.sql.Types.INTEGER);\n            if (pilotData.passenger) psta.setString(12, \"Y\"); else psta.setString(12, \"N\");\n            if (pilotData.instructor) psta.setString(13, \"Y\"); else psta.setString(13, \"N\");\n            psta.setString(14, pilotData.loc_language);\n            psta.setString(15, pilotData.loc_country);\n            psta.setString(16, pilotData.loc_variant);\n            psta.setString(17, pilotData.username);\n            psta.setString(18, pilotData.password);\n            if (pilotData.id != 0) {\n                psta.setInt(19, pilotData.id);\n            }\n            psta.executeUpdate();\n            jdbc.commit();\n        } catch (SQLException sql) {\n            jdbc.rollback();\n            sql.printStackTrace();\n            throw new UsernameNotValidException(2, \"Username allready exist\");\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13139077",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "protected void loadResourceLocations() {\n        try {\n            for (String path : resourceLocations) {\n                if (path.startsWith(\"${\") && path.endsWith(\"}\")) {\n                    int start = path.indexOf('{') + 1;\n                    int end = path.indexOf('}');\n                    String key = path.substring(start, end).trim();\n                    if (key.equals(ApplicationConstants.RESOURCE_SQL_LOCATION_PROP_NAME)) path = AdminHelper.getRepository().getURI(\"sql\"); else path = AdminHelper.getRepository().getSetupApplicationProperties().get(key);\n                    log.debug(key + \"=\" + path);\n                }\n                FileObject fo = VFSUtils.resolveFile(path);\n                if (fo.exists()) {\n                    URL url = fo.getURL();\n                    url.openConnection();\n                    if (fastDeploy) {\n                        if (log.isDebugEnabled()) {\n                            log.debug(\"Fast deploy : \" + url);\n                            AdminSqlQueryFactory builder = null;\n                            for (DirectoryListener listener : scanner.getDirectoryListeners()) {\n                                if (listener instanceof AdminSqlQueryFactory) {\n                                    builder = (AdminSqlQueryFactory) listener;\n                                }\n                            }\n                            File file = new File(url.getFile());\n                            fastDeploy(file, builder);\n                        }\n                    }\n                    scanner.addScanURL(url);\n                }\n            }\n        } catch (Exception e) {\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13139266",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String encripta(String senha) throws GCIException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String encripta(String senha) throws GCIException {\n        LOGGER.debug(INICIANDO_METODO + \"encripta(String)\");\n        try {\n            MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n            digest.update(senha.getBytes());\n            BASE64Encoder encoder = new BASE64Encoder();\n            return encoder.encode(digest.digest());\n        } catch (NoSuchAlgorithmException e) {\n            LOGGER.fatal(e.getMessage(), e);\n            throw new GCIException(e);\n        } finally {\n            LOGGER.debug(FINALIZANDO_METODO + \"encripta(String)\");\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13139267",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String descripta(String senha) throws GCIException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String descripta(String senha) throws GCIException {\n        LOGGER.debug(INICIANDO_METODO + \"descripta(String)\");\n        try {\n            MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n            digest.update(senha.getBytes());\n            BASE64Encoder encoder = new BASE64Encoder();\n            return encoder.encode(digest.digest());\n        } catch (NoSuchAlgorithmException e) {\n            LOGGER.fatal(e.getMessage(), e);\n            throw new GCIException(e);\n        } finally {\n            LOGGER.debug(FINALIZANDO_METODO + \"descripta(String)\");\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01314931",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private InputStream classpathStream(String path) {\n        InputStream in = null;\n        URL url = getClass().getClassLoader().getResource(path);\n        if (url != null) {\n            try {\n                in = url.openStream();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        return in;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13152325",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void loadExistingAntlibs(ClassLoader classLoader) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void loadExistingAntlibs(ClassLoader classLoader) {\n        URL antlibUrl;\n        URI antlibUri;\n        try {\n            Enumeration<URL> resources = classLoader == null ? ClassLoader.getSystemResources(antLibsResource) : classLoader.getResources(antLibsResource);\n            while (resources.hasMoreElements()) {\n                URL url = resources.nextElement();\n                InputStream stream = url.openStream();\n                BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n                for (String line = reader.readLine(); line != null; line = reader.readLine()) {\n                    String pkg = line.trim();\n                    URI uri = URI.create(\"antlib:\" + pkg);\n                    URI resource2antlib = URI.create(antLibsResource2root + pkg.replace('.', '/') + (pkg.isEmpty() ? \"\" : \"/\") + \"antlib.xml\");\n                    antlibUri = NetUtils.resolve(url.toURI(), resource2antlib);\n                    try {\n                        antlibUrl = antlibUri.toURL();\n                    } catch (IllegalArgumentException e) {\n                        System.err.println(\"base uri: \" + url);\n                        System.err.println(\"relativepath: \" + resource2antlib);\n                        System.err.println(\"target uri: \" + antlibUri);\n                        throw new RuntimeException(antlibUri.toString(), e);\n                    }\n                    loadAntLib(antlibUrl, uri);\n                }\n                reader.close();\n                stream.close();\n            }\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        } catch (URISyntaxException e) {\n            throw new RuntimeException(e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13159394",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic HttpResponse fetch(HttpServletRequest request) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public HttpResponse fetch(HttpServletRequest request) throws IOException {\n        GUI = SwingUI.getApplicatoin();\n        DefaultHttpClient httpclient = new DefaultHttpClient();\n        CookieSpecFactory csf = new CookieSpecFactory() {\n\n            public CookieSpec newInstance(HttpParams params) {\n                return new BrowserCompatSpec() {\n\n                    @Override\n                    public void validate(Cookie cookie, CookieOrigin origin) throws MalformedCookieException {\n                    }\n                };\n            }\n        };\n        if (Helper.useProxy()) {\n            HttpHost proxy = new HttpHost(Helper.getProxyServer(), Helper.getProxyPort());\n            httpclient.getParams().setParameter(ConnRoutePNames.DEFAULT_PROXY, proxy);\n        }\n        httpclient.getCookieSpecs().register(\"easy\", csf);\n        httpclient.getParams().setParameter(ClientPNames.COOKIE_POLICY, \"easy\");\n        String currentRemoteGAEHost = Helper.getRemoteServer();\n        try {\n            HttpUriRequest httpRequest = createRequest(request);\n            addHeader(request, httpRequest);\n            HttpResponse response = httpclient.execute(httpRequest);\n            if (response.getStatusLine().getStatusCode() == HttpStatus.SC_FORBIDDEN) {\n                challengeProxy(currentRemoteGAEHost);\n            }\n            logger.info(Helper.count.incrementAndGet() + \" Response received from \" + request.getRequestURL().toString() + \", status is \" + response.getStatusLine());\n            GUI.updateFetchCount();\n            return response;\n        } catch (ClientProtocolException e) {\n            logger.error(\"Fetch ClientProtocol Error\", e);\n            throw e;\n        } catch (IOException e) {\n            logger.error(\"Fetch IO Error\", e);\n            throw e;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13163484",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "String getLatestVersion() {\n        try {\n            URL url = new URL(Constants.VERSION_FILE_URL);\n            URLConnection connection = url.openConnection();\n            connection.setConnectTimeout(15000);\n            InputStream in = connection.getInputStream();\n            BufferedReader br = new BufferedReader(new InputStreamReader(in));\n            return br.readLine();\n        } catch (Exception ex) {\n            return null;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13167991",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void connectToUrl(String url_address) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void connectToUrl(String url_address) {\n        message = new StringBuffer(\"\");\n        try {\n            URL url = new URL(url_address);\n            try {\n                HttpsURLConnection httpsConnection = (HttpsURLConnection) url.openConnection();\n                httpsConnection.setDoOutput(false);\n                httpsConnection.connect();\n                message.append(\"<BR>\\n Connection Code:[\" + httpsConnection.getResponseCode() + \"]\");\n                message.append(\"<BR>\\n Response Message:[\" + httpsConnection.getResponseMessage() + \"]\");\n                InputStreamReader insr = new InputStreamReader(httpsConnection.getInputStream());\n                BufferedReader in = new BufferedReader(insr);\n                fullStringBuffer = new StringBuffer(\"\");\n                String temp = in.readLine();\n                while (temp != null) {\n                    fullStringBuffer.append(temp);\n                    temp = in.readLine();\n                }\n                in.close();\n            } catch (IOException e) {\n                message.append(\"<BR>\\n [Error][IOException][\" + e.getMessage() + \"]\");\n            }\n        } catch (MalformedURLException e) {\n            message.append(\"<BR>\\n [Error][MalformedURLException][\" + e.getMessage() + \"]\");\n        } catch (Exception e) {\n            message.append(\"<BR>\\n [Error][Exception][\" + e.getMessage() + \"]\");\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13176901",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic boolean refresh() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public boolean refresh() {\n        try {\n            synchronized (text) {\n                stream = (new URL(url)).openStream();\n                BufferedReader reader = new BufferedReader(new InputStreamReader(stream));\n                String line;\n                StringBuilder sb = new StringBuilder();\n                while ((line = reader.readLine()) != null) {\n                    sb.append(line);\n                    sb.append(\"\\n\");\n                }\n                text = sb.toString();\n            }\n            price = 0;\n            date = null;\n        } catch (MalformedURLException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n            return false;\n        } finally {\n            if (stream != null) try {\n                stream.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        return true;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_00131811",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void convert(File src, File dest) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void convert(File src, File dest) throws IOException {\n        InputStream in = new BufferedInputStream(new FileInputStream(src));\n        DcmParser p = pfact.newDcmParser(in);\n        Dataset ds = fact.newDataset();\n        p.setDcmHandler(ds.getDcmHandler());\n        try {\n            FileFormat format = p.detectFileFormat();\n            if (format != FileFormat.ACRNEMA_STREAM) {\n                System.out.println(\"\\n\" + src + \": not an ACRNEMA stream!\");\n                return;\n            }\n            p.parseDcmFile(format, Tags.PixelData);\n            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n                System.out.println(\"\\n\" + src + \": contains UIDs!\" + \" => probable already DICOM - do not convert\");\n                return;\n            }\n            boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n            int pxlen = p.getReadLength();\n            if (hasPixelData) {\n                if (inflate) {\n                    ds.putUS(Tags.BitsAllocated, 16);\n                    pxlen = pxlen * 4 / 3;\n                }\n                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n                    System.out.println(\"\\n\" + src + \": mismatch pixel data length!\" + \" => do not convert\");\n                    return;\n                }\n            }\n            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n            ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n            ds.putUI(Tags.SOPClassUID, classUID);\n            if (!ds.contains(Tags.NumberOfSamples)) {\n                ds.putUS(Tags.NumberOfSamples, 1);\n            }\n            if (!ds.contains(Tags.PhotometricInterpretation)) {\n                ds.putCS(Tags.PhotometricInterpretation, \"MONOCHROME2\");\n            }\n            if (fmi) {\n                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n            }\n            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n            try {\n            } finally {\n                ds.writeFile(out, encodeParam());\n                if (hasPixelData) {\n                    if (!skipGroupLen) {\n                        out.write(PXDATA_GROUPLEN);\n                        int grlen = pxlen + 8;\n                        out.write((byte) grlen);\n                        out.write((byte) (grlen >> 8));\n                        out.write((byte) (grlen >> 16));\n                        out.write((byte) (grlen >> 24));\n                    }\n                    out.write(PXDATA_TAG);\n                    out.write((byte) pxlen);\n                    out.write((byte) (pxlen >> 8));\n                    out.write((byte) (pxlen >> 16));\n                    out.write((byte) (pxlen >> 24));\n                }\n                if (inflate) {\n                    int b2, b3;\n                    for (; pxlen > 0; pxlen -= 3) {\n                        out.write(in.read());\n                        b2 = in.read();\n                        b3 = in.read();\n                        out.write(b2 & 0x0f);\n                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n                        out.write(b3 >> 4);\n                    }\n                } else {\n                    for (; pxlen > 0; --pxlen) {\n                        out.write(in.read());\n                    }\n                }\n                out.close();\n            }\n            System.out.print('.');\n        } finally {\n            in.close();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13183435",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n        protected DefaultHttpClient doInBackground(Account... params) {\n            AccountManager accountManager = AccountManager.get(mainActivity);\n            Account account = params[0];\n            try {\n                Bundle bundle = accountManager.getAuthToken(account, \"ah\", false, null, null).getResult();\n                Intent intent = (Intent) bundle.get(AccountManager.KEY_INTENT);\n                if (intent != null) {\n                    mainActivity.startActivity(intent);\n                } else {\n                    String auth_token = bundle.getString(AccountManager.KEY_AUTHTOKEN);\n                    http_client.getParams().setBooleanParameter(ClientPNames.HANDLE_REDIRECTS, false);\n                    HttpGet http_get = new HttpGet(\"http://3dforandroid.appspot.com/_ah\" + \"/login?continue=http://localhost/&auth=\" + auth_token);\n                    HttpResponse response = http_client.execute(http_get);\n                    if (response.getStatusLine().getStatusCode() != 302) return null;\n                    for (Cookie cookie : http_client.getCookieStore().getCookies()) {\n                        if (cookie.getName().equals(\"ACSID\")) {\n                            authClient = http_client;\n                            String json = createJsonFile(Kind);\n                            initializeSQLite();\n                            initializeServer(json);\n                        }\n                    }\n                }\n            } catch (OperationCanceledException e) {\n                e.printStackTrace();\n            } catch (AuthenticatorException e) {\n                e.printStackTrace();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            return http_client;\n        }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13192161",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "protected List<String[]> execute(String queryString, String sVar1, String sVar2, String filter) throws Exception {\n        String query = URLEncoder.encode(queryString, \"UTF-8\");\n        String urlString = \"http://sparql.bibleontology.com/sparql.jsp?sparql=\" + query + \"&type1=xml\";\n        URL url;\n        BufferedReader br = null;\n        ArrayList<String[]> values = new ArrayList<String[]>();\n        try {\n            url = new URL(urlString);\n            URLConnection conn = url.openConnection();\n            br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n            StringBuffer sb = new StringBuffer();\n            String line;\n            String sURI1 = null;\n            String sURI2 = null;\n            boolean b1 = false;\n            boolean b2 = false;\n            while ((line = br.readLine()) != null) {\n                if (line.indexOf(\"</result>\") != -1) {\n                    if (sURI1 != null && sURI2 != null) {\n                        String pair[] = { sURI1, sURI2 };\n                        values.add(pair);\n                    }\n                    sURI1 = null;\n                    sURI2 = null;\n                    b1 = false;\n                    b2 = false;\n                }\n                if (line.indexOf(\"binding name=\\\"\" + sVar1 + \"\\\"\") != -1) {\n                    b1 = true;\n                    continue;\n                } else if (b1) {\n                    String s1 = getURI(line);\n                    if (s1 != null) {\n                        s1 = checkURISyntax(s1);\n                        if (filter == null || s1.startsWith(filter)) {\n                            sURI1 = s1;\n                        }\n                    }\n                    b1 = false;\n                    continue;\n                }\n                if (line.indexOf(\"binding name=\\\"\" + sVar2 + \"\\\"\") != -1) {\n                    b2 = true;\n                    continue;\n                } else if (b2) {\n                    String s2 = getURI(line);\n                    if (s2 != null) {\n                        s2 = checkURISyntax(s2);\n                        if (filter == null || s2.startsWith(filter)) {\n                            sURI2 = s2;\n                        }\n                    }\n                    b2 = false;\n                    continue;\n                }\n            }\n        } catch (MalformedURLException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            br.close();\n        }\n        return values;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13192162",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "protected List<String> execute(String queryString, String sVar, String filter) throws UnsupportedEncodingException, IOException {\n        String query = URLEncoder.encode(queryString, \"UTF-8\");\n        String urlString = \"http://sparql.bibleontology.com/sparql.jsp?sparql=\" + query + \"&type1=xml\";\n        URL url;\n        BufferedReader br = null;\n        ArrayList<String> values = new ArrayList<String>();\n        try {\n            url = new URL(urlString);\n            URLConnection conn = url.openConnection();\n            br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n            StringBuffer sb = new StringBuffer();\n            String line;\n            while ((line = br.readLine()) != null) {\n                String sURI = getURI(line);\n                if (sURI != null) {\n                    sURI = checkURISyntax(sURI);\n                    if (filter == null || sURI.startsWith(filter)) {\n                        values.add(sURI);\n                    }\n                }\n            }\n        } catch (MalformedURLException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            br.close();\n        }\n        return values;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13196323",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void sendMessage(Message msg) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void sendMessage(Message msg) {\n        if (!blackList.contains(msg.getTo())) {\n            Hashtable<String, String> content = msg.getContent();\n            Enumeration<String> keys = content.keys();\n            String key;\n            String data = \"to=\" + msg.getTo() + \"&from=\" + msg.getFrom() + \"&\";\n            while (keys.hasMoreElements()) {\n                key = (String) keys.nextElement();\n                data += key + \"=\" + content.get(key) + \"&\";\n            }\n            URL url = null;\n            try {\n                logger.log(this, Level.FINER, \"sending \" + data + \" to \" + msg.getTo());\n                url = new URL(\"http://\" + msg.getTo() + \":8080/webmsgservice?\" + data);\n                BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n                in.readLine();\n                in.close();\n                logger.log(this, Level.FINER, \"message sent to \" + msg.getTo());\n            } catch (MalformedURLException e) {\n                blackList.add(msg.getTo());\n                logger.log(this, Level.WARNING, \"an error occured during message sending (\" + msg.getTo() + \") : \" + e.getMessage());\n                e.printStackTrace();\n            } catch (IOException e) {\n                logger.log(this, Level.WARNING, \"an error occured during message sending (\" + msg.getTo() + \") : \" + e.getMessage());\n                blackList.add(msg.getTo());\n            }\n        } else {\n            logger.log(this, Level.FINE, \"will not send message to \" + msg.getTo() + \" because black listed IP\");\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13198370",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic XMLResourceBundle() throws MissingResourceException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public XMLResourceBundle() throws MissingResourceException {\n        String systemId = getShortName() + \".xml\";\n        URL url;\n        if ((url = getClass().getResource(systemId)) != null) {\n            InputStream is = null;\n            try {\n                is = url.openStream();\n                SAXParserFactory factory = SAXParserFactory.newInstance();\n                factory.setNamespaceAware(false);\n                factory.setValidating(false);\n                XMLReader xmlReader = factory.newSAXParser().getXMLReader();\n                xmlReader.setContentHandler(new MessageContentHandler());\n                xmlReader.parse(new InputSource(is));\n            } catch (IOException ioe) {\n                System.err.println(ioe.getMessage());\n                ioe.printStackTrace();\n            } catch (SAXException se) {\n                System.err.println(se.getMessage());\n                se.printStackTrace();\n            } catch (ParserConfigurationException pce) {\n                System.err.println(pce.getMessage());\n                pce.printStackTrace();\n            } finally {\n                try {\n                    if (is != null) is.close();\n                } catch (IOException ioe) {\n                    System.err.println(ioe.getMessage());\n                    ioe.printStackTrace();\n                }\n            }\n        } else {\n            throw new MissingResourceException(\"Resource file '\" + systemId + \"' could not be found.\", systemId, null);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13199957",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private File copyFile(String fileInClassPath, String systemPath) throws Exception {\n        InputStream is = getClass().getResourceAsStream(fileInClassPath);\n        OutputStream os = new FileOutputStream(systemPath);\n        IOUtils.copy(is, os);\n        is.close();\n        os.close();\n        return new File(systemPath);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13202429",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private ProgramYek getYek(String keyFilename) {\n        File f = new File(keyFilename);\n        InputStream is = null;\n        try {\n            is = new FileInputStream(f);\n        } catch (java.io.FileNotFoundException ee) {\n        } catch (Exception e) {\n            System.out.println(\"** Exception reading key: \" + e);\n        }\n        if (is == null) {\n            try {\n                URL url = ChiselResources.getResourceByName(ProgramYek.getVidSys(), ChiselResources.LOADFROMCLASSPATH);\n                if (url == null) {\n                } else {\n                    is = url.openStream();\n                }\n            } catch (Exception e) {\n                System.out.println(\"** Exception reading key: \" + e);\n            }\n        }\n        ProgramYek y = null;\n        if (is != null) {\n            try {\n                y = ProgramYek.read(is);\n            } catch (Exception e) {\n                System.out.println(\"** Exception reading key: \" + e);\n            }\n        } else {\n            File chk = new File(checkFilename);\n            if (chk.exists()) {\n                System.out.println(\"This is the evaluation version of \" + appname);\n                y = new ProgramYek(appname, \"Evaluation\", \"\", 15);\n                ProgramYek.serialize(y, keyFilename);\n            }\n        }\n        return y;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13206754",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String md5Encrypt(String valueToEncrypted) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String md5Encrypt(String valueToEncrypted) {\n        String encryptedValue = \"\";\n        try {\n            MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n            digest.update(valueToEncrypted.getBytes());\n            BigInteger hash = new BigInteger(1, digest.digest());\n            encryptedValue = hash.toString(16);\n        } catch (NoSuchAlgorithmException nsae) {\n            nsae.printStackTrace();\n        }\n        return encryptedValue;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13207434",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic String sendRequest(java.lang.String servletName, java.lang.String request) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public String sendRequest(java.lang.String servletName, java.lang.String request) {\n        String reqxml = \"\";\n        org.jdom.Document retdoc = null;\n        String myurl = java.util.prefs.Preferences.systemRoot().get(\"serverurl\", \"\");\n        String myport = \"\";\n        myport = java.util.prefs.Preferences.systemRoot().get(\"portno\", \"8080\");\n        if (myport == null || myport.trim().equals(\"\")) {\n            myport = \"80\";\n        }\n        if (this.serverURL == null) {\n            try {\n                java.net.URL codebase = newgen.presentation.NewGenMain.getAppletInstance().getCodeBase();\n                if (codebase != null) serverURL = codebase.getHost(); else serverURL = \"localhost\";\n            } catch (Exception exp) {\n                exp.printStackTrace();\n                serverURL = \"localhost\";\n            }\n            newgen.presentation.component.IPAddressPortNoDialog ipdig = new newgen.presentation.component.IPAddressPortNoDialog(myurl, myport);\n            ipdig.show();\n            serverURL = myurl = ipdig.getIPAddress();\n            myport = ipdig.getPortNo();\n            java.util.prefs.Preferences.systemRoot().put(\"serverurl\", serverURL);\n            java.util.prefs.Preferences.systemRoot().put(\"portno\", myport);\n            System.out.println(serverURL);\n        }\n        try {\n            System.out.println(\"http://\" + serverURL + \":\" + myport + \"/newgenlibctxt/\" + servletName);\n            java.net.URL url = new java.net.URL(\"http://\" + serverURL + \":\" + myport + \"/newgenlibctxt/\" + servletName);\n            java.net.URLConnection urlconn = (java.net.URLConnection) url.openConnection();\n            urlconn.setDoOutput(true);\n            urlconn.setRequestProperty(\"Content-type\", \"text/xml; charset=UTF-8\");\n            java.io.OutputStream os = urlconn.getOutputStream();\n            String req1xml = request;\n            java.util.zip.CheckedOutputStream cos = new java.util.zip.CheckedOutputStream(os, new java.util.zip.Adler32());\n            java.util.zip.GZIPOutputStream gop = new java.util.zip.GZIPOutputStream(cos);\n            java.io.OutputStreamWriter dos = new java.io.OutputStreamWriter(gop, \"UTF-8\");\n            System.out.println(\"#########***********$$$$$$$$##########\" + req1xml);\n            dos.write(req1xml);\n            dos.flush();\n            dos.close();\n            System.out.println(\"url conn: \" + urlconn.getContentEncoding() + \"  \" + urlconn.getContentType());\n            java.io.InputStream ios = urlconn.getInputStream();\n            java.util.zip.CheckedInputStream cis = new java.util.zip.CheckedInputStream(ios, new java.util.zip.Adler32());\n            java.util.zip.GZIPInputStream gip = new java.util.zip.GZIPInputStream(cis);\n            java.io.InputStreamReader br = new java.io.InputStreamReader(gip, \"UTF-8\");\n            retdoc = (new org.jdom.input.SAXBuilder()).build(br);\n        } catch (java.net.ConnectException conexp) {\n            javax.swing.JOptionPane.showMessageDialog(null, newgen.presentation.NewGenMain.getAppletInstance().getMyResource().getString(\"ConnectExceptionMessage\"), \"Critical error\", javax.swing.JOptionPane.ERROR_MESSAGE);\n        } catch (Exception exp) {\n            exp.printStackTrace(System.out);\n            TroubleShootConnectivity troubleShoot = new TroubleShootConnectivity();\n        }\n        System.out.println(reqxml);\n        return (new org.jdom.output.XMLOutputter()).outputString(retdoc);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13207436",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic Object sendObjectRequestToSpecifiedServer(java.lang.String serverName, java.lang.String servletName, java.lang.Object request) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public Object sendObjectRequestToSpecifiedServer(java.lang.String serverName, java.lang.String servletName, java.lang.Object request) {\n        Object reqxml = null;\n        org.jdom.Document retdoc = null;\n        String myurl = java.util.prefs.Preferences.systemRoot().get(\"serverurl\", \"\");\n        String myport = java.util.prefs.Preferences.systemRoot().get(\"portno\", \"8080\");\n        if (myport == null || myport.trim().equals(\"\")) {\n            myport = \"80\";\n        }\n        if (this.serverURL == null) {\n            try {\n                java.net.URL codebase = newgen.presentation.NewGenMain.getAppletInstance().getCodeBase();\n                if (codebase != null) serverURL = codebase.getHost(); else serverURL = \"localhost\";\n            } catch (Exception exp) {\n                exp.printStackTrace();\n                serverURL = \"localhost\";\n            }\n            newgen.presentation.component.IPAddressPortNoDialog ipdig = new newgen.presentation.component.IPAddressPortNoDialog(myurl, myport);\n            ipdig.show();\n            serverURL = myurl = ipdig.getIPAddress();\n            myport = ipdig.getPortNo();\n            java.util.prefs.Preferences.systemRoot().put(\"serverurl\", serverURL);\n            java.util.prefs.Preferences.systemRoot().put(\"portno\", myport);\n            System.out.println(serverURL);\n        }\n        try {\n            java.net.URL url = new java.net.URL(\"http://\" + serverName + \":\" + myport + \"/newgenlibctxt/\" + servletName);\n            java.net.URLConnection urlconn = (java.net.URLConnection) url.openConnection();\n            urlconn.setDoOutput(true);\n            java.io.OutputStream os = urlconn.getOutputStream();\n            java.util.zip.CheckedOutputStream cos = new java.util.zip.CheckedOutputStream(os, new java.util.zip.Adler32());\n            java.util.zip.GZIPOutputStream gop = new java.util.zip.GZIPOutputStream(cos);\n            java.io.ObjectOutputStream dos = new java.io.ObjectOutputStream(gop);\n            dos.writeObject(request);\n            dos.flush();\n            dos.close();\n            java.io.InputStream ios = urlconn.getInputStream();\n            java.util.zip.CheckedInputStream cis = new java.util.zip.CheckedInputStream(ios, new java.util.zip.Adler32());\n            java.util.zip.GZIPInputStream gip = new java.util.zip.GZIPInputStream(cis);\n            java.io.ObjectInputStream br = new java.io.ObjectInputStream(gip);\n            reqxml = br.readObject();\n        } catch (Exception exp) {\n            exp.printStackTrace(System.out);\n            System.out.println(\"Exception in Servlet Connector: \" + exp);\n        }\n        return reqxml;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13207437",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic Object sendRequestObjectResponse(java.lang.String servletName, java.lang.String request) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public Object sendRequestObjectResponse(java.lang.String servletName, java.lang.String request) {\n        String osRoot = OSRoot.getRoot();\n        String fname = \"\";\n        Object retobj = null;\n        String myurl = java.util.prefs.Preferences.systemRoot().get(\"serverurl\", \"\");\n        String myport = java.util.prefs.Preferences.systemRoot().get(\"portno\", \"8080\");\n        if (myport == null || myport.trim().equals(\"\")) {\n            myport = \"80\";\n        }\n        if (this.serverURL == null) {\n            try {\n                java.net.URL codebase = newgen.presentation.NewGenMain.getAppletInstance().getCodeBase();\n                if (codebase != null) serverURL = codebase.getHost(); else serverURL = \"localhost\";\n            } catch (Exception exp) {\n                exp.printStackTrace();\n                serverURL = \"localhost\";\n            }\n            newgen.presentation.component.IPAddressPortNoDialog ipdig = new newgen.presentation.component.IPAddressPortNoDialog(myurl, myport);\n            ipdig.show();\n            serverURL = myurl = ipdig.getIPAddress();\n            myport = ipdig.getPortNo();\n            java.util.prefs.Preferences.systemRoot().put(\"serverurl\", serverURL);\n            java.util.prefs.Preferences.systemRoot().put(\"portno\", myport);\n            System.out.println(serverURL);\n        }\n        try {\n            System.out.println(\"http://\" + serverURL + \":\" + myport + \"/newgenlibctxt/\" + servletName);\n            java.net.URL url = new java.net.URL(\"http://\" + serverURL + \":\" + myport + \"/newgenlibctxt/\" + servletName);\n            java.net.URLConnection urlconn = (java.net.URLConnection) url.openConnection();\n            urlconn.setDoOutput(true);\n            urlconn.setRequestProperty(\"Content-type\", \"text/xml; charset=UTF-8\");\n            java.io.OutputStream os = urlconn.getOutputStream();\n            String req1xml = request;\n            java.util.zip.CheckedOutputStream cos = new java.util.zip.CheckedOutputStream(os, new java.util.zip.Adler32());\n            java.util.zip.GZIPOutputStream gop = new java.util.zip.GZIPOutputStream(cos);\n            java.io.OutputStreamWriter dos = new java.io.OutputStreamWriter(gop, \"UTF-8\");\n            System.out.println(req1xml);\n            try {\n                java.io.FileOutputStream pw = new java.io.FileOutputStream(\"log.txt\");\n                pw.write(req1xml.getBytes());\n                pw.flush();\n                pw.close();\n            } catch (Exception exp) {\n                exp.printStackTrace();\n            }\n            dos.write(req1xml);\n            dos.flush();\n            dos.close();\n            System.out.println(\"url conn: \" + urlconn.getContentEncoding() + \"  \" + urlconn.getContentType());\n            java.io.InputStream ios = urlconn.getInputStream();\n            java.io.File f1 = new java.io.File(osRoot + \"/localattachments/Reports\");\n            if (!f1.exists()) f1.mkdirs();\n            java.io.File file = null;\n            if (urlconn.getContentType() != null && urlconn.getContentType().trim().equals(\"application/vnd.oasis.opendocument.text\")) {\n                file = new java.io.File(osRoot + \"/localattachments/Reports/\" + System.currentTimeMillis() + \".odt\");\n            } else if (urlconn.getContentType() != null && urlconn.getContentType().trim().equals(\"text/html\")) {\n                file = new java.io.File(osRoot + \"/localattachments/Reports/\" + System.currentTimeMillis() + \".html\");\n            } else {\n                file = new java.io.File(osRoot + \"/localattachments/Reports/\" + System.currentTimeMillis() + \".xls\");\n            }\n            file = new java.io.File(file.getAbsolutePath());\n            java.io.FileOutputStream fos = new java.io.FileOutputStream(file);\n            int c;\n            while ((c = ios.read()) != -1) fos.write(c);\n            fos.close();\n            ios.close();\n            fname = file.getAbsolutePath();\n            System.out.println(fname);\n            newgen.presentation.component.Utility.getInstance().showBrowser(\"file://\" + fname);\n        } catch (Exception exp) {\n            exp.printStackTrace(System.out);\n            javax.swing.JOptionPane.showMessageDialog(null, \"<html>Could not establish connection with the server, <br>Please verify server name/IP adress, <br>Also check if NewGenLib server is running</html>\", \"Critical error\", javax.swing.JOptionPane.ERROR_MESSAGE);\n        }\n        return fname;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13207438",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic String sendRequestHTTPTunelling(java.lang.String servletName, java.lang.String request) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public String sendRequestHTTPTunelling(java.lang.String servletName, java.lang.String request) {\n        String reqxml = \"\";\n        org.jdom.Document retdoc = null;\n        String myurl = java.util.prefs.Preferences.systemRoot().get(\"serverurl\", \"\");\n        String myport = java.util.prefs.Preferences.systemRoot().get(\"portno\", \"8080\");\n        if (myport == null || myport.trim().equals(\"\")) {\n            myport = \"80\";\n        }\n        if (this.serverURL == null) {\n            try {\n                java.net.URL codebase = newgen.presentation.NewGenMain.getAppletInstance().getCodeBase();\n                if (codebase != null) serverURL = codebase.getHost(); else serverURL = \"localhost\";\n            } catch (Exception exp) {\n                exp.printStackTrace();\n                serverURL = \"localhost\";\n            }\n            newgen.presentation.component.IPAddressPortNoDialog ipdig = new newgen.presentation.component.IPAddressPortNoDialog(myurl, myport);\n            ipdig.show();\n            serverURL = myurl = ipdig.getIPAddress();\n            myport = ipdig.getPortNo();\n            java.util.prefs.Preferences.systemRoot().put(\"serverurl\", serverURL);\n            java.util.prefs.Preferences.systemRoot().put(\"portno\", myport);\n            System.out.println(serverURL);\n        }\n        try {\n            System.out.println(\"http://\" + serverURL + \":\" + myport + \"/newgenlibctxt/\" + servletName);\n            java.net.URL url = new java.net.URL(\"http://\" + serverURL + \":\" + myport + \"/newgenlibctxt/\" + servletName);\n            java.net.URLConnection urlconn = (java.net.URLConnection) url.openConnection();\n            urlconn.setDoOutput(true);\n            urlconn.setRequestProperty(\"Content-type\", \"text/xml; charset=UTF-8\");\n            java.io.OutputStream os = urlconn.getOutputStream();\n            String req1xml = request;\n            java.util.zip.CheckedOutputStream cos = new java.util.zip.CheckedOutputStream(os, new java.util.zip.Adler32());\n            java.util.zip.GZIPOutputStream gop = new java.util.zip.GZIPOutputStream(cos);\n            java.io.OutputStreamWriter dos = new java.io.OutputStreamWriter(gop, \"UTF-8\");\n            System.out.println(req1xml);\n            try {\n                java.io.FileOutputStream pw = new java.io.FileOutputStream(\"log.txt\");\n                pw.write(req1xml.getBytes());\n                pw.flush();\n                pw.close();\n            } catch (Exception exp) {\n                exp.printStackTrace();\n            }\n            dos.write(req1xml);\n            dos.flush();\n            dos.close();\n            System.out.println(\"url conn: \" + urlconn.getContentEncoding() + \"  \" + urlconn.getContentType());\n            java.io.InputStream ios = urlconn.getInputStream();\n            java.util.zip.CheckedInputStream cis = new java.util.zip.CheckedInputStream(ios, new java.util.zip.Adler32());\n            java.util.zip.GZIPInputStream gip = new java.util.zip.GZIPInputStream(cis);\n            java.io.InputStreamReader br = new java.io.InputStreamReader(gip, \"UTF-8\");\n            retdoc = (new org.jdom.input.SAXBuilder()).build(br);\n            try {\n                java.io.FileOutputStream pw = new java.io.FileOutputStream(\"log3.txt\");\n                pw.write(reqxml.getBytes());\n                pw.flush();\n                pw.close();\n            } catch (Exception exp) {\n                exp.printStackTrace();\n            }\n        } catch (Exception exp) {\n            exp.printStackTrace(System.out);\n            javax.swing.JOptionPane.showMessageDialog(null, \"<html>Could not establish connection with the server, <br>Please verify server name/IP adress, <br>Also check if NewGenLib server is running</html>\", \"Critical error\", javax.swing.JOptionPane.ERROR_MESSAGE);\n        }\n        System.out.println(reqxml);\n        return (new org.jdom.output.XMLOutputter()).outputString(retdoc);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13207439",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic String sendRequestAndGetNormalStringOutPut(java.lang.String servletName, java.lang.String request) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public String sendRequestAndGetNormalStringOutPut(java.lang.String servletName, java.lang.String request) {\n        String myurl = java.util.prefs.Preferences.systemRoot().get(\"serverurl\", \"\");\n        String myport = java.util.prefs.Preferences.systemRoot().get(\"portno\", \"8080\");\n        if (myport == null || myport.trim().equals(\"\")) {\n            myport = \"80\";\n        }\n        if (this.serverURL == null) {\n            try {\n                java.net.URL codebase = newgen.presentation.NewGenMain.getAppletInstance().getCodeBase();\n                if (codebase != null) serverURL = codebase.getHost(); else serverURL = \"localhost\";\n            } catch (Exception exp) {\n                exp.printStackTrace();\n                serverURL = \"localhost\";\n            }\n            newgen.presentation.component.IPAddressPortNoDialog ipdig = new newgen.presentation.component.IPAddressPortNoDialog(myurl, myport);\n            ipdig.show();\n            serverURL = myurl = ipdig.getIPAddress();\n            myport = ipdig.getPortNo();\n            java.util.prefs.Preferences.systemRoot().put(\"serverurl\", serverURL);\n            java.util.prefs.Preferences.systemRoot().put(\"portno\", myport);\n            System.out.println(serverURL);\n        }\n        String response = \"\";\n        try {\n            System.out.println(\"http://\" + serverURL + \":\" + myport + \"/newgenlibctxt/\" + servletName);\n            java.net.URL url = new java.net.URL(\"http://\" + serverURL + \":\" + myport + \"/newgenlibctxt/\" + servletName);\n            java.net.URLConnection urlconn = (java.net.URLConnection) url.openConnection();\n            urlconn.setDoOutput(true);\n            urlconn.setRequestProperty(\"Content-type\", \"text/xml; charset=UTF-8\");\n            java.io.OutputStream os = urlconn.getOutputStream();\n            String req1xml = request;\n            java.util.zip.CheckedOutputStream cos = new java.util.zip.CheckedOutputStream(os, new java.util.zip.Adler32());\n            java.util.zip.GZIPOutputStream gop = new java.util.zip.GZIPOutputStream(cos);\n            java.io.OutputStreamWriter dos = new java.io.OutputStreamWriter(gop, \"UTF-8\");\n            System.out.println(req1xml);\n            dos.write(req1xml);\n            dos.flush();\n            dos.close();\n            System.out.println(\"url conn: \" + urlconn.getContentEncoding() + \"  \" + urlconn.getContentType());\n            java.io.InputStream ios = urlconn.getInputStream();\n            java.util.zip.CheckedInputStream cis = new java.util.zip.CheckedInputStream(ios, new java.util.zip.Adler32());\n            java.util.zip.GZIPInputStream gip = new java.util.zip.GZIPInputStream(cis);\n            java.io.InputStreamReader br = new java.io.InputStreamReader(gip, \"UTF-8\");\n            int n = -1;\n            while ((n = br.read()) != -1) response += (char) n;\n        } catch (java.net.ConnectException conexp) {\n            javax.swing.JOptionPane.showMessageDialog(null, \"<html>Could not establish connection with the NewGenLib server, \" + \"<br>These might be the possible reasons.\" + \"<br><li>Check the network connectivity between this machine and the server.\" + \"<br><li>Check whether NewGenLib server is running on the server machine.\" + \"<br><li>NewGenLib server might not have initialized properly. In this case\" + \"<br>go to server machine, open NewGenLibDesktop Application,\" + \"<br> utility ->Send log to NewGenLib Customer Support</html>\", \"Critical error\", javax.swing.JOptionPane.ERROR_MESSAGE);\n        } catch (Exception exp) {\n            exp.printStackTrace(System.out);\n            TroubleShootConnectivity troubleShoot = new TroubleShootConnectivity();\n        }\n        return response;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13209824",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic Object createObject(Attributes attrs) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void loadConfig(ServletContext ctx, String configFileName) {\n        Digester digester = new Digester();\n        digester.push(this);\n        digester.addFactoryCreate(\"pagespy/server\", new AbstractObjectCreationFactory() {\n\n            public Object createObject(Attributes attrs) {\n                String className = attrs.getValue(\"className\");\n                try {\n                    return Class.forName(className).newInstance();\n                } catch (Exception e) {\n                    throw new ClassCastException(\"Error al instanciar \" + className);\n                }\n            }\n        });\n        digester.addSetProperty(\"pagespy/server/param\", \"name\", \"value\");\n        digester.addSetNext(\"pagespy/server\", \"setServer\", PageSpyServer.class.getName());\n        digester.addCallMethod(\"pagespy/ignored-patterns\", \"setIgnorePattern\", 1);\n        digester.addCallParam(\"pagespy/ignored-patterns\", 0);\n        digester.addFactoryCreate(\"pagespy/property-setters/setter\", new AbstractObjectCreationFactory() {\n\n            public Object createObject(Attributes attrs) {\n                String className = attrs.getValue(\"className\");\n                try {\n                    return Class.forName(className).newInstance();\n                } catch (Exception e) {\n                    throw new ClassCastException(\"Error al instanciar \" + className);\n                }\n            }\n        });\n        digester.addSetNext(\"pagespy/property-setters/setter\", \"addPropertySetter\", PagePropertySetter.class.getName());\n        digester.addFactoryCreate(\"pagespy/page-replacers/replacer\", new AbstractObjectCreationFactory() {\n\n            public Object createObject(Attributes attrs) {\n                String className = attrs.getValue(\"className\");\n                try {\n                    return Class.forName(className).newInstance();\n                } catch (Exception e) {\n                    throw new ClassCastException(\"Error al instanciar \" + className);\n                }\n            }\n        });\n        digester.addSetNext(\"pagespy/page-replacers/replacer\", \"addPageReplacer\", PageReplacer.class.getName());\n        digester.addFactoryCreate(\"pagespy/properties-panel\", new AbstractObjectCreationFactory() {\n\n            public Object createObject(Attributes attrs) {\n                String className = attrs.getValue(\"className\");\n                try {\n                    return Class.forName(className).newInstance();\n                } catch (Exception e) {\n                    throw new ClassCastException(\"Error al instanciar \" + className);\n                }\n            }\n        });\n        digester.addSetNext(\"pagespy/properties-panel\", \"setPropertiesPanel\", PagePanel.class.getName());\n        try {\n            this.getLogger().info(\"Initializing \" + configFileName);\n            URL url = ctx.getResource(configFileName);\n            if (url == null) {\n                url = this.getClass().getResource(configFileName);\n            }\n            digester.parse(url.openStream());\n        } catch (Exception e) {\n            this.getLogger().error(\"Error parsing configuration file.\", e);\n            throw new RuntimeException(e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13210305",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static final String encryptMD5(String decrypted) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static final String encryptMD5(String decrypted) {\n        try {\n            MessageDigest md5 = MessageDigest.getInstance(\"MD5\");\n            md5.update(decrypted.getBytes());\n            byte hash[] = md5.digest();\n            md5.reset();\n            return hashToHex(hash);\n        } catch (NoSuchAlgorithmException _ex) {\n            return null;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13212350",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copyFile(File source, File dest) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copyFile(File source, File dest) {\n        try {\n            FileChannel in = new FileInputStream(source).getChannel();\n            if (!dest.getParentFile().exists()) dest.getParentFile().mkdirs();\n            FileChannel out = new FileOutputStream(dest).getChannel();\n            in.transferTo(0, in.size(), out);\n            in.close();\n            out.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13213956",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void fileUpload() throws Exception {\n        NULogger.getLogger().info(\"now file upload code\");\n        DefaultHttpClient httpclient = new DefaultHttpClient();\n        HttpPost httppost = new HttpPost(\"https://dl-web.dropbox.com/upload\");\n        httppost.setHeader(\"Referer\", \"https://www.dropbox.com/home/Public\");\n        httppost.setHeader(\"Cookie\", DropBoxAccount.getForumjarcookie() + \";\" + DropBoxAccount.getForumlidcookie() + \";\" + DropBoxAccount.getTouchcookie());\n        MultipartEntity mpEntity = new MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE);\n        mpEntity.addPart(\"t\", new StringBody(token));\n        mpEntity.addPart(\"plain\", new StringBody(\"yes\"));\n        mpEntity.addPart(\"dest\", new StringBody(\"/Public\"));\n        mpEntity.addPart(\"file\", new MonitoredFileBody(file, uploadProgress));\n        httppost.setEntity(mpEntity);\n        NULogger.getLogger().log(Level.INFO, \"executing request {0}\", httppost.getRequestLine());\n        NULogger.getLogger().info(\"Now uploading your file into dropbox.com\");\n        status = UploadStatus.UPLOADING;\n        HttpResponse response = httpclient.execute(httppost);\n        status = UploadStatus.GETTINGLINK;\n        HttpEntity resEntity = response.getEntity();\n        NULogger.getLogger().info(response.getStatusLine().toString());\n        if (resEntity != null) {\n            uploadresponse = EntityUtils.toString(resEntity);\n        }\n        NULogger.getLogger().log(Level.INFO, \"Upload response : {0}\", uploadresponse);\n        if (uploadresponse.contains(\"The resource was found at https://www.dropbox.com/home/Public\")) {\n            downloadlink = \"http://dl.dropbox.com/u/\" + uid + \"/\" + (URLEncoder.encode(file.getName(), \"UTF-8\").replace(\"+\", \"%20\"));\n            NULogger.getLogger().log(Level.INFO, \"Downloadlink : {0}\", downloadlink);\n            downURL = downloadlink;\n        } else {\n            throw new Exception(\"Dropbox server problem or network problem.. Couldn't get proper response.\");\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13216961",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void actionPerformed(ActionEvent ev) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void actionPerformed(ActionEvent ev) {\n            if (fileChooser == null) {\n                fileChooser = new JFileChooser();\n                ExtensionFileFilter fileFilter = new ExtensionFileFilter(\"Device profile (*.jar, *.zip)\");\n                fileFilter.addExtension(\"jar\");\n                fileFilter.addExtension(\"zip\");\n                fileChooser.setFileFilter(fileFilter);\n            }\n            if (fileChooser.showOpenDialog(SwingSelectDevicePanel.this) == JFileChooser.APPROVE_OPTION) {\n                String manifestDeviceName = null;\n                URL[] urls = new URL[1];\n                ArrayList descriptorEntries = new ArrayList();\n                JarFile jar = null;\n                try {\n                    jar = new JarFile(fileChooser.getSelectedFile());\n                    Manifest manifest = jar.getManifest();\n                    if (manifest != null) {\n                        Attributes attrs = manifest.getMainAttributes();\n                        manifestDeviceName = attrs.getValue(\"Device-Name\");\n                    }\n                    for (Enumeration en = jar.entries(); en.hasMoreElements(); ) {\n                        String entry = ((JarEntry) en.nextElement()).getName();\n                        if ((entry.toLowerCase().endsWith(\".xml\") || entry.toLowerCase().endsWith(\"device.txt\")) && !entry.toLowerCase().startsWith(\"meta-inf\")) {\n                            descriptorEntries.add(entry);\n                        }\n                    }\n                    urls[0] = fileChooser.getSelectedFile().toURL();\n                } catch (IOException e) {\n                    Message.error(\"Error reading file: \" + fileChooser.getSelectedFile().getName() + \", \" + Message.getCauseMessage(e), e);\n                    return;\n                } finally {\n                    if (jar != null) {\n                        try {\n                            jar.close();\n                        } catch (IOException ignore) {\n                        }\n                    }\n                }\n                if (descriptorEntries.size() == 0) {\n                    Message.error(\"Cannot find any device profile in file: \" + fileChooser.getSelectedFile().getName());\n                    return;\n                }\n                if (descriptorEntries.size() > 1) {\n                    manifestDeviceName = null;\n                }\n                ClassLoader classLoader = Common.createExtensionsClassLoader(urls);\n                HashMap devices = new HashMap();\n                for (Iterator it = descriptorEntries.iterator(); it.hasNext(); ) {\n                    String entryName = (String) it.next();\n                    try {\n                        devices.put(entryName, DeviceImpl.create(emulatorContext, classLoader, entryName, J2SEDevice.class));\n                    } catch (IOException e) {\n                        Message.error(\"Error parsing device profile, \" + Message.getCauseMessage(e), e);\n                        return;\n                    }\n                }\n                for (Enumeration en = lsDevicesModel.elements(); en.hasMoreElements(); ) {\n                    DeviceEntry entry = (DeviceEntry) en.nextElement();\n                    if (devices.containsKey(entry.getDescriptorLocation())) {\n                        devices.remove(entry.getDescriptorLocation());\n                    }\n                }\n                if (devices.size() == 0) {\n                    Message.info(\"Device profile already added\");\n                    return;\n                }\n                try {\n                    File deviceFile = new File(Config.getConfigPath(), fileChooser.getSelectedFile().getName());\n                    if (deviceFile.exists()) {\n                        deviceFile = File.createTempFile(\"device\", \".jar\", Config.getConfigPath());\n                    }\n                    IOUtils.copyFile(fileChooser.getSelectedFile(), deviceFile);\n                    DeviceEntry entry = null;\n                    for (Iterator it = devices.keySet().iterator(); it.hasNext(); ) {\n                        String descriptorLocation = (String) it.next();\n                        Device device = (Device) devices.get(descriptorLocation);\n                        if (manifestDeviceName != null) {\n                            entry = new DeviceEntry(manifestDeviceName, deviceFile.getName(), descriptorLocation, false);\n                        } else {\n                            entry = new DeviceEntry(device.getName(), deviceFile.getName(), descriptorLocation, false);\n                        }\n                        lsDevicesModel.addElement(entry);\n                        Config.addDeviceEntry(entry);\n                    }\n                    lsDevices.setSelectedValue(entry, true);\n                } catch (IOException e) {\n                    Message.error(\"Error adding device profile, \" + Message.getCauseMessage(e), e);\n                    return;\n                }\n            }\n        }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13221212",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void generate(final InputStream input, String format, Point dimension, IPath outputLocation) throws CoreException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void generate(final InputStream input, String format, Point dimension, IPath outputLocation) throws CoreException {\n        MultiStatus status = new MultiStatus(GraphVizActivator.ID, 0, \"Errors occurred while running Graphviz\", null);\n        File dotInput = null, dotOutput = outputLocation.toFile();\n        ByteArrayOutputStream dotContents = new ByteArrayOutputStream();\n        try {\n            dotInput = File.createTempFile(TMP_FILE_PREFIX, DOT_EXTENSION);\n            FileOutputStream tmpDotOutputStream = null;\n            try {\n                IOUtils.copy(input, dotContents);\n                tmpDotOutputStream = new FileOutputStream(dotInput);\n                IOUtils.copy(new ByteArrayInputStream(dotContents.toByteArray()), tmpDotOutputStream);\n            } finally {\n                IOUtils.closeQuietly(tmpDotOutputStream);\n            }\n            IStatus result = runDot(format, dimension, dotInput, dotOutput);\n            if (dotOutput.isFile()) {\n                if (!result.isOK() && Platform.inDebugMode()) LogUtils.log(status);\n                return;\n            }\n        } catch (IOException e) {\n            status.add(new Status(IStatus.ERROR, GraphVizActivator.ID, \"\", e));\n        } finally {\n            dotInput.delete();\n            IOUtils.closeQuietly(input);\n        }\n        throw new CoreException(status);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13221213",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static Image load(final InputStream input, String format, Point dimension) throws CoreException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static Image load(final InputStream input, String format, Point dimension) throws CoreException {\n        MultiStatus status = new MultiStatus(GraphVizActivator.ID, 0, \"Errors occurred while running Graphviz\", null);\n        File dotInput = null, dotOutput = null;\n        ByteArrayOutputStream dotContents = new ByteArrayOutputStream();\n        try {\n            dotInput = File.createTempFile(TMP_FILE_PREFIX, DOT_EXTENSION);\n            dotOutput = File.createTempFile(TMP_FILE_PREFIX, \".\" + format);\n            dotOutput.delete();\n            FileOutputStream tmpDotOutputStream = null;\n            try {\n                IOUtils.copy(input, dotContents);\n                tmpDotOutputStream = new FileOutputStream(dotInput);\n                IOUtils.copy(new ByteArrayInputStream(dotContents.toByteArray()), tmpDotOutputStream);\n            } finally {\n                IOUtils.closeQuietly(tmpDotOutputStream);\n            }\n            IStatus result = runDot(format, dimension, dotInput, dotOutput);\n            status.add(result);\n            status.add(logInput(dotContents));\n            if (dotOutput.isFile()) {\n                if (!result.isOK() && Platform.inDebugMode()) LogUtils.log(status);\n                ImageLoader loader = new ImageLoader();\n                ImageData[] imageData = loader.load(dotOutput.getAbsolutePath());\n                return new Image(Display.getDefault(), imageData[0]);\n            }\n        } catch (SWTException e) {\n            status.add(new Status(IStatus.ERROR, GraphVizActivator.ID, \"\", e));\n        } catch (IOException e) {\n            status.add(new Status(IStatus.ERROR, GraphVizActivator.ID, \"\", e));\n        } finally {\n            dotInput.delete();\n            dotOutput.delete();\n            IOUtils.closeQuietly(input);\n        }\n        throw new CoreException(status);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13222049",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void testAutoCommit() throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void testAutoCommit() throws Exception {\n        Connection con = getConnectionOverrideProperties(new Properties());\n        try {\n            Statement stmt = con.createStatement();\n            assertEquals(0, stmt.executeUpdate(\"create table #testAutoCommit (i int)\"));\n            con.setAutoCommit(false);\n            assertEquals(1, stmt.executeUpdate(\"insert into #testAutoCommit (i) values (0)\"));\n            con.setAutoCommit(false);\n            con.rollback();\n            assertEquals(1, stmt.executeUpdate(\"insert into #testAutoCommit (i) values (1)\"));\n            con.setAutoCommit(true);\n            con.setAutoCommit(false);\n            con.rollback();\n            con.setAutoCommit(true);\n            ResultSet rs = stmt.executeQuery(\"select i from #testAutoCommit\");\n            assertTrue(rs.next());\n            assertEquals(1, rs.getInt(1));\n            assertFalse(rs.next());\n            rs.close();\n            stmt.close();\n        } finally {\n            con.close();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01322369",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void close() throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void unpackBundle() throws IOException {\n        File useJarPath = null;\n        if (DownloadManager.isWindowsVista()) {\n            useJarPath = lowJarPath;\n            File jarDir = useJarPath.getParentFile();\n            if (jarDir != null) {\n                jarDir.mkdirs();\n            }\n        } else {\n            useJarPath = jarPath;\n        }\n        DownloadManager.log(\"Unpacking \" + this + \" to \" + useJarPath);\n        InputStream rawStream = new FileInputStream(localPath);\n        JarInputStream in = new JarInputStream(rawStream) {\n\n            public void close() throws IOException {\n            }\n        };\n        try {\n            File jarTmp = null;\n            JarEntry entry;\n            while ((entry = in.getNextJarEntry()) != null) {\n                String entryName = entry.getName();\n                if (entryName.equals(\"classes.pack\")) {\n                    File packTmp = new File(useJarPath + \".pack\");\n                    packTmp.getParentFile().mkdirs();\n                    DownloadManager.log(\"Writing temporary .pack file \" + packTmp);\n                    OutputStream tmpOut = new FileOutputStream(packTmp);\n                    try {\n                        DownloadManager.send(in, tmpOut);\n                    } finally {\n                        tmpOut.close();\n                    }\n                    jarTmp = new File(useJarPath + \".tmp\");\n                    DownloadManager.log(\"Writing temporary .jar file \" + jarTmp);\n                    unpack(packTmp, jarTmp);\n                    packTmp.delete();\n                } else if (!entryName.startsWith(\"META-INF\")) {\n                    File dest;\n                    if (DownloadManager.isWindowsVista()) {\n                        dest = new File(lowJavaPath, entryName.replace('/', File.separatorChar));\n                    } else {\n                        dest = new File(DownloadManager.JAVA_HOME, entryName.replace('/', File.separatorChar));\n                    }\n                    if (entryName.equals(BUNDLE_JAR_ENTRY_NAME)) dest = useJarPath;\n                    File destTmp = new File(dest + \".tmp\");\n                    boolean exists = dest.exists();\n                    if (!exists) {\n                        DownloadManager.log(dest + \".mkdirs()\");\n                        dest.getParentFile().mkdirs();\n                    }\n                    try {\n                        DownloadManager.log(\"Using temporary file \" + destTmp);\n                        FileOutputStream out = new FileOutputStream(destTmp);\n                        try {\n                            byte[] buffer = new byte[2048];\n                            int c;\n                            while ((c = in.read(buffer)) > 0) out.write(buffer, 0, c);\n                        } finally {\n                            out.close();\n                        }\n                        if (exists) dest.delete();\n                        DownloadManager.log(\"Renaming from \" + destTmp + \" to \" + dest);\n                        if (!destTmp.renameTo(dest)) {\n                            throw new IOException(\"unable to rename \" + destTmp + \" to \" + dest);\n                        }\n                    } catch (IOException e) {\n                        if (!exists) throw e;\n                    }\n                }\n            }\n            if (jarTmp != null) {\n                if (useJarPath.exists()) jarTmp.delete(); else if (!jarTmp.renameTo(useJarPath)) {\n                    throw new IOException(\"unable to rename \" + jarTmp + \" to \" + useJarPath);\n                }\n            }\n            if (DownloadManager.isWindowsVista()) {\n                DownloadManager.log(\"Using broker to move \" + name);\n                if (!DownloadManager.moveDirWithBroker(DownloadManager.getKernelJREDir() + name)) {\n                    throw new IOException(\"unable to create \" + name);\n                }\n                DownloadManager.log(\"Broker finished \" + name);\n            }\n            DownloadManager.log(\"Finished unpacking \" + this);\n        } finally {\n            rawStream.close();\n        }\n        if (deleteOnInstall) {\n            localPath.delete();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13227684",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void main(String[] args) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void main(String[] args) {\n        for (int i = 0; i < args.length - 2; i++) {\n            if (!CommonArguments.parseArguments(args, i, u)) {\n                u.usage();\n                System.exit(1);\n            }\n            if (CommonParameters.startArg > (i + 1)) i = CommonParameters.startArg - 1;\n        }\n        if (args.length < CommonParameters.startArg + 2) {\n            u.usage();\n            System.exit(1);\n        }\n        try {\n            int readsize = 1024;\n            ContentName argName = ContentName.fromURI(args[CommonParameters.startArg]);\n            CCNHandle handle = CCNHandle.open();\n            File theFile = new File(args[CommonParameters.startArg + 1]);\n            if (theFile.exists()) {\n                System.out.println(\"Overwriting file: \" + args[CommonParameters.startArg + 1]);\n            }\n            FileOutputStream output = new FileOutputStream(theFile);\n            long starttime = System.currentTimeMillis();\n            CCNInputStream input;\n            if (CommonParameters.unversioned) input = new CCNInputStream(argName, handle); else input = new CCNFileInputStream(argName, handle);\n            if (CommonParameters.timeout != null) {\n                input.setTimeout(CommonParameters.timeout);\n            }\n            byte[] buffer = new byte[readsize];\n            int readcount = 0;\n            long readtotal = 0;\n            while ((readcount = input.read(buffer)) != -1) {\n                readtotal += readcount;\n                output.write(buffer, 0, readcount);\n                output.flush();\n            }\n            if (CommonParameters.verbose) System.out.println(\"ccngetfile took: \" + (System.currentTimeMillis() - starttime) + \"ms\");\n            System.out.println(\"Retrieved content \" + args[CommonParameters.startArg + 1] + \" got \" + readtotal + \" bytes.\");\n            System.exit(0);\n        } catch (ConfigurationException e) {\n            System.out.println(\"Configuration exception in ccngetfile: \" + e.getMessage());\n            e.printStackTrace();\n        } catch (MalformedContentNameStringException e) {\n            System.out.println(\"Malformed name: \" + args[CommonParameters.startArg] + \" \" + e.getMessage());\n            e.printStackTrace();\n        } catch (IOException e) {\n            System.out.println(\"Cannot write file or read content. \" + e.getMessage());\n            e.printStackTrace();\n        }\n        System.exit(1);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13233448",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static String GetSHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        MessageDigest md;\n        md = MessageDigest.getInstance(\"SHA-1\");\n        byte[] sha1hash = new byte[40];\n        md.update(text.getBytes(\"iso-8859-1\"), 0, text.length());\n        sha1hash = md.digest();\n        return LoginHttpPostProcessor.ConvertToHex(sha1hash);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13233761",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void executeUpdateTransaction(List queries) throws SQLException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void executeUpdateTransaction(List queries) throws SQLException {\n        assert connection != null;\n        boolean autoCommit = connection.getAutoCommit();\n        connection.setAutoCommit(false);\n        try {\n            Iterator iterator = queries.iterator();\n            while (iterator.hasNext()) {\n                String query = (String) iterator.next();\n                Statement statement = connection.createStatement();\n                statement.executeUpdate(query);\n            }\n            connection.commit();\n            connection.setAutoCommit(autoCommit);\n        } catch (SQLException e) {\n            connection.rollback();\n            throw new SQLException(e.getMessage());\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13234956",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "protected String readFileUsingFileUrl(String fileUrlName) {\n        String response = \"\";\n        try {\n            URL url = new URL(fileUrlName);\n            URLConnection connection = url.openConnection();\n            InputStreamReader isr = new InputStreamReader(connection.getInputStream());\n            BufferedReader in = new BufferedReader(isr);\n            String inputLine = \"\";\n            while ((inputLine = in.readLine()) != null) {\n                response += inputLine + \"\\n\";\n            }\n            if (response.endsWith(\"\\n\")) {\n                response = response.substring(0, response.length() - 1);\n            }\n            in.close();\n        } catch (Exception x) {\n            x.printStackTrace();\n        }\n        return response;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13234957",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "protected String readFileUsingHttp(String fileUrlName) {\n        String response = \"\";\n        try {\n            URL url = new URL(fileUrlName);\n            URLConnection connection = url.openConnection();\n            HttpURLConnection httpConn = (HttpURLConnection) connection;\n            httpConn.setRequestProperty(\"Content-Type\", \"text/html\");\n            httpConn.setRequestProperty(\"Content-Length\", \"0\");\n            httpConn.setRequestMethod(\"GET\");\n            httpConn.setDoOutput(true);\n            httpConn.setDoInput(true);\n            httpConn.setAllowUserInteraction(false);\n            InputStreamReader isr = new InputStreamReader(httpConn.getInputStream());\n            BufferedReader in = new BufferedReader(isr);\n            String inputLine = \"\";\n            while ((inputLine = in.readLine()) != null) {\n                response += inputLine + \"\\n\";\n            }\n            if (response.endsWith(\"\\n\")) {\n                response = response.substring(0, response.length() - 1);\n            }\n            in.close();\n        } catch (Exception x) {\n            x.printStackTrace();\n        }\n        return response;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13237415",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static List<ServerInfo> getStartedServers() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static List<ServerInfo> getStartedServers() {\n        List<ServerInfo> infos = new ArrayList<ServerInfo>();\n        try {\n            StringBuilder request = new StringBuilder();\n            request.append(url).append(\"/\").append(displayServlet);\n            request.append(\"?ingame=1\");\n            URL objUrl = new URL(request.toString());\n            URLConnection urlConnect = objUrl.openConnection();\n            InputStream in = urlConnect.getInputStream();\n            BufferedReader reader = new BufferedReader(new InputStreamReader(in));\n            while (reader.ready()) {\n                String name = reader.readLine();\n                String ip = reader.readLine();\n                int port = Integer.valueOf(reader.readLine());\n                ServerInfo server = new ServerInfo(name, ip, port);\n                server.nbPlayers = Integer.valueOf(reader.readLine());\n                infos.add(server);\n            }\n            in.close();\n            return infos;\n        } catch (Exception e) {\n            return infos;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13241363",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic boolean keyPressed(final KeyEvent event) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private ScrollingGraphicalViewer createGraphicalViewer(final Composite parent) {\n        final ScrollingGraphicalViewer viewer = new ScrollingGraphicalViewer();\n        viewer.createControl(parent);\n        _root = new EditRootEditPart();\n        viewer.setRootEditPart(_root);\n        getEditDomain().addViewer(viewer);\n        getSite().setSelectionProvider(viewer);\n        viewer.setEditPartFactory(getEditPartFactory());\n        final KeyHandler keyHandler = new GraphicalViewerKeyHandler(viewer) {\n\n            @SuppressWarnings(\"unchecked\")\n            @Override\n            public boolean keyPressed(final KeyEvent event) {\n                if (event.stateMask == SWT.MOD1 && event.keyCode == SWT.DEL) {\n                    final List<? extends EditorPart> objects = viewer.getSelectedEditParts();\n                    if (objects == null || objects.isEmpty()) return true;\n                    final GroupRequest deleteReq = new GroupRequest(RequestConstants.REQ_DELETE);\n                    final CompoundCommand compoundCmd = new CompoundCommand(\"Delete\");\n                    for (int i = 0; i < objects.size(); i++) {\n                        final EditPart object = (EditPart) objects.get(i);\n                        deleteReq.setEditParts(object);\n                        final Command cmd = object.getCommand(deleteReq);\n                        if (cmd != null) compoundCmd.add(cmd);\n                    }\n                    getCommandStack().execute(compoundCmd);\n                    return true;\n                }\n                if (event.stateMask == SWT.MOD3 && (event.keyCode == SWT.ARROW_DOWN || event.keyCode == SWT.ARROW_LEFT || event.keyCode == SWT.ARROW_RIGHT || event.keyCode == SWT.ARROW_UP)) {\n                    final List<? extends EditorPart> objects = viewer.getSelectedEditParts();\n                    if (objects == null || objects.isEmpty()) return true;\n                    final GroupRequest moveReq = new ChangeBoundsRequest(RequestConstants.REQ_MOVE);\n                    final CompoundCommand compoundCmd = new CompoundCommand(\"Move\");\n                    for (int i = 0; i < objects.size(); i++) {\n                        final EditPart object = (EditPart) objects.get(i);\n                        moveReq.setEditParts(object);\n                        final LocationCommand cmd = (LocationCommand) object.getCommand(moveReq);\n                        if (cmd != null) {\n                            cmd.setLocation(new Point(event.keyCode == SWT.ARROW_LEFT ? -1 : event.keyCode == SWT.ARROW_RIGHT ? 1 : 0, event.keyCode == SWT.ARROW_DOWN ? 1 : event.keyCode == SWT.ARROW_UP ? -1 : 0));\n                            cmd.setRelative(true);\n                            compoundCmd.add(cmd);\n                        }\n                    }\n                    getCommandStack().execute(compoundCmd);\n                    return true;\n                }\n                return super.keyPressed(event);\n            }\n        };\n        keyHandler.put(KeyStroke.getPressed(SWT.F2, 0), getActionRegistry().getAction(GEFActionConstants.DIRECT_EDIT));\n        viewer.setKeyHandler(keyHandler);\n        viewer.setContents(getEditorInput().getAdapter(NamedUuidEntity.class));\n        viewer.addDropTargetListener(createTransferDropTargetListener(viewer));\n        return viewer;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13243880",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic int[] bubbleSort(int[] data) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public int[] bubbleSort(int[] data) {\n        for (int i = 0; i < data.length; i++) {\n            for (int j = 0; j < data.length - i - 1; j++) {\n                if (data[j] > data[j + 1]) {\n                    int temp = data[j];\n                    data[j] = data[j + 1];\n                    data[j + 1] = temp;\n                }\n            }\n        }\n        return data;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13247161",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void findFile() throws SchedulerException {\n        java.io.InputStream f = null;\n        String furl = null;\n        File file = new File(getFileName());\n        if (!file.exists()) {\n            URL url = classLoadHelper.getResource(getFileName());\n            if (url != null) {\n                try {\n                    furl = URLDecoder.decode(url.getPath(), \"UTF-8\");\n                    file = new File(furl);\n                    f = url.openStream();\n                } catch (java.io.UnsupportedEncodingException uee) {\n                } catch (IOException ignor) {\n                }\n            }\n        } else {\n            try {\n                f = new java.io.FileInputStream(file);\n            } catch (FileNotFoundException e) {\n            }\n        }\n        if (f == null && isFailOnFileNotFound()) {\n            throw new SchedulerException(\"File named '\" + getFileName() + \"' does not exist. f == null && isFailOnFileNotFound()\");\n        } else if (f == null) {\n            getLog().warn(\"File named '\" + getFileName() + \"' does not exist. f == null\");\n        } else {\n            fileFound = true;\n            try {\n                if (furl != null) this.filePath = furl; else this.filePath = file.getAbsolutePath();\n                f.close();\n            } catch (IOException ioe) {\n                getLog().warn(\"Error closing jobs file \" + getFileName(), ioe);\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13247325",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic String getPath() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n    public String getPath() {\n        InputStream in = null;\n        OutputStream out = null;\n        File file = null;\n        try {\n            file = File.createTempFile(\"java-storage_\" + RandomStringUtils.randomAlphanumeric(32), \".tmp\");\n            file.deleteOnExit();\n            out = new FileOutputStream(file);\n            in = openStream();\n            IOUtils.copy(in, out);\n        } catch (IOException e) {\n            throw new RuntimeException();\n        } finally {\n            IOUtils.closeQuietly(in);\n            IOUtils.closeQuietly(out);\n        }\n        if (file != null && file.exists()) {\n            return file.getPath();\n        }\n        return null;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13254235",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copy(File file, File dir, boolean overwrite) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copy(File file, File dir, boolean overwrite) throws IOException {\n        BufferedInputStream bis = new BufferedInputStream(new FileInputStream(file));\n        File out = new File(dir, file.getName());\n        if (out.exists() && !overwrite) {\n            throw new IOException(\"File: \" + out + \" already exists.\");\n        }\n        FileOutputStream fos = new FileOutputStream(out, false);\n        byte[] block = new byte[4096];\n        int read = bis.read(block);\n        while (read != -1) {\n            fos.write(block, 0, read);\n            read = bis.read(block);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_00132551",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void createBankSignature() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void createBankSignature() {\n        byte b;\n        try {\n            _bankMessageDigest = MessageDigest.getInstance(\"MD5\");\n            _bankSig = Signature.getInstance(\"MD5/RSA/PKCS#1\");\n            _bankSig.initSign((PrivateKey) _bankPrivateKey);\n            _bankMessageDigest.update(getBankString().getBytes());\n            _bankMessageDigestBytes = _bankMessageDigest.digest();\n            _bankSig.update(_bankMessageDigestBytes);\n            _bankSignatureBytes = _bankSig.sign();\n        } catch (Exception e) {\n        }\n        ;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_00132552",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void createVendorSignature() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void createVendorSignature() {\n        byte b;\n        try {\n            _vendorMessageDigest = MessageDigest.getInstance(\"MD5\");\n            _vendorSig = Signature.getInstance(\"MD5/RSA/PKCS#1\");\n            _vendorSig.initSign((PrivateKey) _vendorPrivateKey);\n            _vendorMessageDigest.update(getBankString().getBytes());\n            _vendorMessageDigestBytes = _vendorMessageDigest.digest();\n            _vendorSig.update(_vendorMessageDigestBytes);\n            _vendorSignatureBytes = _vendorSig.sign();\n        } catch (Exception e) {\n        }\n        ;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13255487",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private synchronized boolean createOrganization(String organizationName, HttpServletRequest req) {\n        if ((organizationName == null) || (organizationName.equals(\"\"))) {\n            message = \"invalid new_organization_name.\";\n            return false;\n        }\n        String tmpxml = TextUtil.xmlEscape(organizationName);\n        String tmpdb = DBAccess.SQLEscape(organizationName);\n        if ((!organizationName.equals(tmpxml)) || (!organizationName.equals(tmpdb)) || (!TextUtil.isValidFilename(organizationName))) {\n            message = \"invalid new_organization_name.\";\n            return false;\n        }\n        if ((organizationName.indexOf('-') > -1) || (organizationName.indexOf(' ') > -1)) {\n            message = \"invalid new_organization_name.\";\n            return false;\n        }\n        String[] orgnames = ServerConsoleServlet.getOrganizationNames();\n        for (int i = 0; i < orgnames.length; i++) {\n            if (orgnames.equals(organizationName)) {\n                message = \"already exists.\";\n                return false;\n            }\n        }\n        message = \"create new organization: \" + organizationName;\n        File newOrganizationDirectory = new File(ServerConsoleServlet.RepositoryLocalDirectory.getAbsolutePath() + File.separator + organizationName);\n        if (!newOrganizationDirectory.mkdir()) {\n            message = \"cannot create directory.\";\n            return false;\n        }\n        File cacheDir = new File(newOrganizationDirectory.getAbsolutePath() + File.separator + ServerConsoleServlet.getConfigByTagName(\"CacheDirName\"));\n        cacheDir.mkdir();\n        File confDir = new File(newOrganizationDirectory.getAbsolutePath() + File.separator + ServerConsoleServlet.getConfigByTagName(\"ConfDirName\"));\n        confDir.mkdir();\n        File rdfDir = new File(newOrganizationDirectory.getAbsolutePath() + File.separator + ServerConsoleServlet.getConfigByTagName(\"RDFDirName\"));\n        rdfDir.mkdir();\n        File resourceDir = new File(newOrganizationDirectory.getAbsolutePath() + File.separator + ServerConsoleServlet.getConfigByTagName(\"ResourceDirName\"));\n        resourceDir.mkdir();\n        File obsoleteDir = new File(resourceDir.getAbsolutePath() + File.separator + \"obsolete\");\n        obsoleteDir.mkdir();\n        File schemaDir = new File(newOrganizationDirectory.getAbsolutePath() + File.separator + ServerConsoleServlet.getConfigByTagName(\"SchemaDirName\"));\n        schemaDir.mkdir();\n        String organization_temp_dir = ServerConsoleServlet.convertToAbsolutePath(ServerConsoleServlet.getConfigByTagName(\"OrganizationTemplate\"));\n        File templ = new File(organization_temp_dir);\n        File[] confFiles = templ.listFiles();\n        for (int i = 0; i < confFiles.length; i++) {\n            try {\n                FileReader fr = new FileReader(confFiles[i]);\n                FileWriter fw = new FileWriter(confDir.getAbsolutePath() + File.separator + confFiles[i].getName());\n                int c = -1;\n                while ((c = fr.read()) != -1) fw.write(c);\n                fw.flush();\n                fw.close();\n                fr.close();\n            } catch (IOException e) {\n            }\n        }\n        SchemaModelHolder.reloadSchemaModel(organizationName);\n        ResourceModelHolder.reloadResourceModel(organizationName);\n        UserLogServlet.initializeUserLogDB(organizationName);\n        MetaEditServlet.createNewProject(organizationName, \"standard\", MetaEditServlet.convertProjectIdToProjectUri(organizationName, \"standard\", req), this.username);\n        ResourceModelHolder.reloadResourceModel(organizationName);\n        message = organizationName + \" is created. Restart Tomcat to activate this organization.\";\n        return true;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13260090",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static URL getComponentXmlFileWith(String name) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static URL getComponentXmlFileWith(String name) throws Exception {\n        List<URL> all = getComponentXmlFiles();\n        for (URL url : all) {\n            InputStream stream = null;\n            try {\n                stream = url.openStream();\n                Element root = XML.getRootElement(stream);\n                for (Element elem : (List<Element>) root.elements()) {\n                    String ns = elem.getNamespace().getURI();\n                    if (name.equals(elem.attributeValue(\"name\"))) {\n                        return url;\n                    }\n                }\n            } finally {\n                Resources.closeStream(stream);\n            }\n        }\n        return null;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13262955",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        String servletPath = req.getServletPath();\n        String requestURI = req.getRequestURI();\n        String resource = requestURI.substring(requestURI.indexOf(servletPath) + servletPath.length());\n        URL url = ClassResource.get(resourceDirectory + resource);\n        try {\n            File file = null;\n            JarEntry jarEntry = null;\n            JarFile jarFile = null;\n            if (!url.toExternalForm().startsWith(\"jar:\")) {\n                file = new File(url.toURI());\n            } else {\n                jarFile = ((JarURLConnection) url.openConnection()).getJarFile();\n                String[] jarURL = url.toExternalForm().split(\"!\");\n                jarEntry = jarFile.getJarEntry(jarURL[1].substring(1));\n            }\n            if (file != null && file.isDirectory()) {\n                PrintWriter writer = resp.getWriter();\n                resp.setContentType(\"text/html\");\n                DevelUtils.writePageBegin(writer);\n                DevelUtils.writeTitleAndHeaderEnd(writer, \"Makumba resources\");\n                if (SourceViewServlet.redirected(req, resp, servletPath)) {\n                    return;\n                }\n                String relativeDirectory = file.getName();\n                if (file.getAbsolutePath().indexOf(resourceDirectory) != -1) {\n                    relativeDirectory = file.getAbsolutePath().substring(file.getAbsolutePath().indexOf(resourceDirectory));\n                }\n                SourceViewServlet.printDirlistingHeader(writer, file.getCanonicalPath(), relativeDirectory);\n                if (!(relativeDirectory.equals(resourceDirectory))) {\n                    writer.println(\"<b><a href=\\\"../\\\">../</a></b> (up one level)\");\n                }\n                SourceViewServlet.processDirectory(writer, file, null);\n                String[] list = file.list();\n                Arrays.sort(list);\n                for (int i = 0; i < list.length; i++) {\n                    String s = list[i];\n                    File f = new File(file.getAbsolutePath() + File.separator + s);\n                    if (f.isFile()) {\n                        writer.println(\"<b><a href=\\\"\" + s + \"\\\">\" + s + \"</a></b>\");\n                    }\n                }\n                writer.println(\"</pre>\");\n                DevelUtils.writePageEnd(writer);\n                resp.setHeader(\"Last-Modified\", dfLastModified.format(new Date()));\n                return;\n            } else if (jarEntry != null && jarEntry.isDirectory()) {\n                Enumeration<JarEntry> entries = jarFile.entries();\n                ArrayList<String> files = new ArrayList<String>();\n                ArrayList<String> directories = new ArrayList<String>();\n                PrintWriter writer = resp.getWriter();\n                resp.setContentType(\"text/html\");\n                DevelUtils.writePageBegin(writer);\n                DevelUtils.writeTitleAndHeaderEnd(writer, \"Makumba resources\");\n                if (SourceViewServlet.redirected(req, resp, servletPath)) {\n                    return;\n                }\n                String relativeDirectory = jarEntry.getName();\n                SourceViewServlet.printDirlistingHeader(writer, url.toExternalForm(), relativeDirectory);\n                if (!relativeDirectory.equals(resourceDirectory) && !relativeDirectory.equals(resourceDirectory + \"/\")) {\n                    writer.println(\"<b><a href=\\\"../\\\">../</a></b> (up one level)\");\n                }\n                while (entries.hasMoreElements()) {\n                    JarEntry entry = (JarEntry) entries.nextElement();\n                    if (entry.getName().startsWith(relativeDirectory)) {\n                        String s = entry.getName().substring(relativeDirectory.length());\n                        while (s.length() > 0 && s.startsWith(\"/\")) {\n                            s = s.substring(1);\n                        }\n                        if (s.indexOf(\"/\") == -1) {\n                            if (s.length() > 0) {\n                                files.add(s);\n                            }\n                        } else if (s.indexOf(\"/\") == s.lastIndexOf(\"/\") && s.endsWith(\"/\")) {\n                            if (s.endsWith(\"/\")) {\n                                s = s.substring(0, s.length() - 1);\n                            }\n                            if (s.length() > 0) {\n                                directories.add(s);\n                            }\n                        }\n                    }\n                }\n                for (String string : directories) {\n                    writer.println(\"<b><a href=\\\"\" + string + \"/\\\">\" + string + \"/</a></b>\");\n                }\n                for (String string : files) {\n                    writer.println(\"<b><a href=\\\"\" + string + \"\\\">\" + string + \"</a></b>\");\n                }\n                writer.println(\"</pre>\");\n                DevelUtils.writePageEnd(writer);\n                resp.setHeader(\"Last-Modified\", dfLastModified.format(new Date()));\n                return;\n            } else {\n                final Date lastModified;\n                if (url.toExternalForm().startsWith(\"jar:\")) {\n                    JarFile jf = ((JarURLConnection) url.openConnection()).getJarFile();\n                    String[] jarURL = url.toExternalForm().split(\"!\");\n                    lastModified = new Date(jf.getJarEntry(jarURL[1].substring(1)).getTime());\n                } else {\n                    lastModified = new Date(new File(url.toURI()).lastModified());\n                }\n                resp.setHeader(\"Last-Modified\", dfLastModified.format(lastModified));\n                resp.setContentType(getContentType(url));\n                Object cachedResource = NamedResources.getStaticCache(makumbaResources).getResource(resource);\n                ServletOutputStream outputStream = resp.getOutputStream();\n                if (isBinary(url)) {\n                    for (int i = 0; i < ((byte[]) cachedResource).length; i++) {\n                        outputStream.write(((byte[]) cachedResource)[i]);\n                    }\n                } else {\n                    outputStream.print(cachedResource.toString());\n                }\n            }\n        } catch (URISyntaxException e) {\n            e.printStackTrace();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13266451",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic String loadURLString(java.net.URL url) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public String loadURLString(java.net.URL url) {\n        try {\n            BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));\n            StringBuffer buf = new StringBuffer();\n            String s = \"\";\n            while (br.ready() && s != null) {\n                s = br.readLine();\n                if (s != null) {\n                    buf.append(s);\n                    buf.append(\"\\n\");\n                }\n            }\n            return buf.toString();\n        } catch (IOException ex) {\n            return \"\";\n        } catch (NullPointerException npe) {\n            return \"\";\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13270730",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void removeResource(String resourceID, String sql, String[] keys) throws XregistryException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void removeResource(String resourceID, String sql, String[] keys) throws XregistryException {\n        try {\n            Connection connection = globalContext.createConnection();\n            connection.setAutoCommit(false);\n            PreparedStatement statement = null;\n            try {\n                statement = connection.prepareStatement(sql);\n                for (int i = 0; i < keys.length; i++) {\n                    statement.setString(i + 1, keys[i]);\n                }\n                statement.executeUpdate();\n                statement = connection.prepareStatement(DELETE_RESOURCE_SQL);\n                statement.setString(1, resourceID);\n                statement.executeUpdate();\n                log.info(\"Execuate SQL \" + statement);\n                connection.commit();\n            } catch (SQLException e) {\n                connection.rollback();\n                throw new XregistryException(e);\n            } finally {\n                try {\n                    statement.close();\n                    connection.setAutoCommit(true);\n                    globalContext.closeConnection(connection);\n                } catch (SQLException e) {\n                    throw new XregistryException(e);\n                }\n            }\n        } catch (SQLException e) {\n            throw new XregistryException(e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01327097",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic String generateMappackMD5(File mapPackFile) throws IOException, NoSuchAlgorithmException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public String generateMappackMD5(File mapPackFile) throws IOException, NoSuchAlgorithmException {\n        ZipFile zip = new ZipFile(mapPackFile);\n        try {\n            Enumeration<? extends ZipEntry> entries = zip.entries();\n            MessageDigest md5Total = MessageDigest.getInstance(\"MD5\");\n            MessageDigest md5 = MessageDigest.getInstance(\"MD5\");\n            while (entries.hasMoreElements()) {\n                ZipEntry entry = entries.nextElement();\n                if (entry.isDirectory()) continue;\n                String name = entry.getName();\n                if (name.toUpperCase().startsWith(\"META-INF\")) continue;\n                md5.reset();\n                InputStream in = zip.getInputStream(entry);\n                byte[] data = Utilities.getInputBytes(in);\n                in.close();\n                byte[] digest = md5.digest(data);\n                log.trace(\"Hashsum \" + Hex.encodeHexString(digest) + \" includes \\\"\" + name + \"\\\"\");\n                md5Total.update(digest);\n                md5Total.update(name.getBytes());\n            }\n            String md5sum = Hex.encodeHexString(md5Total.digest());\n            log.trace(\"md5sum of \" + mapPackFile.getName() + \": \" + md5sum);\n            return md5sum;\n        } finally {\n            zip.close();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13275192",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void main(String[] args) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void main(String[] args) throws Exception {\n        BufferedImage image = ImageIO.read(BitmapFont.class.getResource(\"Candara-38-Bold.png\"));\n        URL url = BitmapFontData.class.getResource(\"Candara-38-Bold.fnt\");\n        BitmapFontData bitmapFontData = new BitmapFontData(url.openStream(), true);\n        BitmapFont font = new BitmapFont(bitmapFontData, true);\n        font.drawMultiLine(\"Hello world\\nthis is a\\ntest!!!\", 100, 100);\n        VertexData vertexData = font.createVertexData();\n        Display.setDisplayMode(new DisplayMode(640, 480));\n        Display.create();\n        RenderPass renderPass = new RenderPass();\n        renderPass.setClearMask(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);\n        renderPass.setClearColor(new Color4f(0.3f, 0.4f, 0.5f, 1f));\n        renderPass.setView(View.createOrtho(0, 640, 0, 480, -1000, 1000));\n        ByteBuffer[][] pixels = { { TextureLoader.getImageData(image) } };\n        Texture texture = new Texture(TextureType.TEXTURE_2D, 4, image.getWidth(), image.getHeight(), 0, Format.BGRA, pixels, false, false);\n        Shape shape = new Shape(vertexData);\n        shape.getState().setUnit(0, new Unit(texture));\n        shape.getState().setBlendEnabled(true);\n        shape.getState().setBlendSrcFunc(BlendSrcFunc.SRC_ALPHA);\n        shape.getState().setBlendDstFunc(BlendDstFunc.ONE_MINUS_SRC_ALPHA);\n        renderPass.getRootNode().addShape(shape);\n        Renderer renderer = new Renderer(new SceneGraph(renderPass));\n        while (!Display.isCloseRequested()) {\n            renderer.render();\n            Display.update();\n        }\n        Display.destroy();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13279965",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void fileUpload() throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void fileUpload() throws IOException {\n        HttpClient httpclient = new DefaultHttpClient();\n        httpclient.getParams().setParameter(CoreProtocolPNames.PROTOCOL_VERSION, HttpVersion.HTTP_1_1);\n        file = new File(\"H:\\\\FileServeUploader.java\");\n        HttpPost httppost = new HttpPost(postURL);\n        httppost.setHeader(\"Cookie\", uprandcookie + \";\" + autologincookie);\n        MultipartEntity mpEntity = new MultipartEntity();\n        ContentBody cbFile = new FileBody(file);\n        mpEntity.addPart(\"MAX_FILE_SIZE\", new StringBody(\"2097152000\"));\n        mpEntity.addPart(\"UPLOAD_IDENTIFIER\", new StringBody(uid));\n        mpEntity.addPart(\"go\", new StringBody(\"1\"));\n        mpEntity.addPart(\"files\", cbFile);\n        httppost.setEntity(mpEntity);\n        System.out.println(\"Now uploading your file into depositfiles...........................\");\n        HttpResponse response = httpclient.execute(httppost);\n        HttpEntity resEntity = response.getEntity();\n        System.out.println(response.getStatusLine());\n        if (resEntity != null) {\n            uploadresponse = EntityUtils.toString(resEntity);\n            downloadlink = parseResponse(uploadresponse, \"ud_download_url = '\", \"'\");\n            deletelink = parseResponse(uploadresponse, \"ud_delete_url = '\", \"'\");\n            System.out.println(\"download link : \" + downloadlink);\n            System.out.println(\"delete link : \" + deletelink);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13279978",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void sendContent(OutputStream out, Range range, Map<String, String> params, String contentType) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n    public void sendContent(OutputStream out, Range range, Map<String, String> params, String contentType) throws IOException {\n        LOGGER.debug(\"DOWNLOAD - Send content: \" + realFile.getAbsolutePath());\n        LOGGER.debug(\"Output stream: \" + out.toString());\n        if (ServerConfiguration.isDynamicSEL()) {\n            LOGGER.error(\"IS DINAMIC SEL????\");\n        } else {\n        }\n        if (\".tokens\".equals(realFile.getName()) || \".response\".equals(realFile.getName()) || \".request\".equals(realFile.getName()) || isAllowedClient) {\n            FileInputStream in = null;\n            try {\n                in = new FileInputStream(realFile);\n                int bytes = IOUtils.copy(in, out);\n                LOGGER.debug(\"System resource or Allowed Client wrote bytes:  \" + bytes);\n                out.flush();\n            } catch (Exception e) {\n                LOGGER.error(\"Error while uploading over encryption system \" + realFile.getName() + \" file\", e);\n            } finally {\n                IOUtils.closeQuietly(in);\n            }\n        } else {\n            FileInputStream in = null;\n            try {\n                in = new FileInputStream(realFile);\n                int bytes = IOUtils.copy(in, out);\n                LOGGER.debug(\"System resource or Allowed Client wrote bytes:  \" + bytes);\n                out.flush();\n            } catch (Exception e) {\n                LOGGER.error(\"Error while uploading over encryption system \" + realFile.getName() + \" file\", e);\n            } finally {\n                IOUtils.closeQuietly(in);\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13281981",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void bokActionPerformed(java.awt.event.ActionEvent evt) {\n        Vector vret = this.uniformtitlepanel.getEnteredValuesKeys();\n        String[] patlib = newgen.presentation.NewGenMain.getAppletInstance().getPatronLibraryIds();\n        String xmlreq = newgen.presentation.administration.AdministrationXMLGenerator.getInstance().saveUniformTitleSH(\"2\", vret, patlib);\n        System.out.println(xmlreq);\n        try {\n            java.net.URL url = new java.net.URL(ResourceBundle.getBundle(\"Administration\").getString(\"ServerURL\") + ResourceBundle.getBundle(\"Administration\").getString(\"ServletSubPath\") + \"UniformTitleSubjectHeadingServlet\");\n            java.net.URLConnection urlconn = (java.net.URLConnection) url.openConnection();\n            urlconn.setDoOutput(true);\n            java.io.OutputStream dos = urlconn.getOutputStream();\n            dos.write(xmlreq.getBytes());\n            java.io.InputStream ios = urlconn.getInputStream();\n            SAXBuilder saxb = new SAXBuilder();\n            Document retdoc = saxb.build(ios);\n            Element rootelement = retdoc.getRootElement();\n            if (rootelement.getChild(\"Error\") == null) {\n                this.showInformationMessage(ResourceBundle.getBundle(\"Administration\").getString(\"DataSavedInDatabase\"));\n            } else {\n                this.showErrorMessage(ResourceBundle.getBundle(\"Administration\").getString(\"ErrorPleaseContactTheVendor\"));\n            }\n        } catch (Exception e) {\n            System.out.println(e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13283373",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic synchronized void readModels(Project p, URL url) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public synchronized void readModels(Project p, URL url) throws IOException {\n        _proj = p;\n        Argo.log.info(\"=======================================\");\n        Argo.log.info(\"== READING MODEL \" + url);\n        try {\n            XMIReader reader = new XMIReader();\n            InputSource source = new InputSource(url.openStream());\n            source.setSystemId(url.toString());\n            _curModel = reader.parse(source);\n            if (reader.getErrors()) {\n                throw new IOException(\"XMI file \" + url.toString() + \" could not be parsed.\");\n            }\n            _UUIDRefs = new HashMap(reader.getXMIUUIDToObjectMap());\n        } catch (SAXException saxEx) {\n            Exception ex = saxEx.getException();\n            if (ex == null) {\n                saxEx.printStackTrace();\n            } else {\n                ex.printStackTrace();\n            }\n        } catch (Exception ex) {\n            ex.printStackTrace();\n        }\n        Argo.log.info(\"=======================================\");\n        try {\n            _proj.addModel((ru.novosoft.uml.foundation.core.MNamespace) _curModel);\n        } catch (PropertyVetoException ex) {\n            System.err.println(\"An error occurred adding the model to the project!\");\n            ex.printStackTrace();\n        }\n        Collection ownedElements = _curModel.getOwnedElements();\n        Iterator oeIterator = ownedElements.iterator();\n        while (oeIterator.hasNext()) {\n            MModelElement me = (MModelElement) oeIterator.next();\n            if (me instanceof MClass) {\n                _proj.defineType((MClass) me);\n            } else if (me instanceof MDataType) {\n                _proj.defineType((MDataType) me);\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13284020",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String getMD5Hash(String in) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String getMD5Hash(String in) {\n        StringBuffer result = new StringBuffer(32);\n        try {\n            MessageDigest md5 = MessageDigest.getInstance(\"MD5\");\n            md5.update(in.getBytes());\n            Formatter f = new Formatter(result);\n            for (byte b : md5.digest()) {\n                f.format(\"%02x\", b);\n            }\n        } catch (NoSuchAlgorithmException ex) {\n            ex.printStackTrace();\n        }\n        return result.toString();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13287093",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private boolean load(URL url) {\n        try {\n            URLConnection connection = url.openConnection();\n            parser = new PDFParser(connection.getInputStream());\n        } catch (IOException e) {\n            e.printStackTrace();\n            return false;\n        }\n        return true;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13289545",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void forcedCopy(File sourceFile, File destFile) throws IOException {\n        if (!destFile.exists()) {\n            destFile.createNewFile();\n        }\n        FileChannel source = null;\n        FileChannel destination = null;\n        try {\n            source = new FileInputStream(sourceFile).getChannel();\n            destination = new FileOutputStream(destFile).getChannel();\n            destination.transferFrom(source, 0, source.size());\n        } finally {\n            if (source != null) {\n                source.close();\n            }\n            if (destination != null) {\n                destination.close();\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13290531",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copyFile(File source, File destination) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copyFile(File source, File destination) throws IOException {\n        FileInputStream fis = new FileInputStream(source);\n        FileOutputStream fos = new FileOutputStream(destination);\n        FileChannel inCh = fis.getChannel();\n        FileChannel outCh = fos.getChannel();\n        inCh.transferTo(0, inCh.size(), outCh);\n        inCh.close();\n        fis.close();\n        outCh.close();\n        fos.flush();\n        fos.close();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13292215",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void main(String[] args) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void main(String[] args) {\n        try {\n            {\n                byte[] bytes1 = { (byte) 2, (byte) 2, (byte) 3, (byte) 0, (byte) 9 };\n                byte[] bytes2 = { (byte) 99, (byte) 2, (byte) 2, (byte) 3, (byte) 0, (byte) 9 };\n                System.out.println(\"Bytes 2,2,3,0,9 as Base64: \" + encodeBytes(bytes1));\n                System.out.println(\"Bytes 2,2,3,0,9 w/ offset: \" + encodeBytes(bytes2, 1, bytes2.length - 1));\n                byte[] dbytes = decode(encodeBytes(bytes1));\n                System.out.print(encodeBytes(bytes1) + \" decoded: \");\n                for (int i = 0; i < dbytes.length; i++) System.out.print(dbytes[i] + (i < dbytes.length - 1 ? \",\" : \"\\n\"));\n            }\n            {\n                java.io.FileInputStream fis = new java.io.FileInputStream(\"test.gif.b64\");\n                Base64.InputStream b64is = new Base64.InputStream(fis, DECODE);\n                byte[] bytes = new byte[0];\n                int b = -1;\n                while ((b = b64is.read()) >= 0) {\n                    byte[] temp = new byte[bytes.length + 1];\n                    System.arraycopy(bytes, 0, temp, 0, bytes.length);\n                    temp[bytes.length] = (byte) b;\n                    bytes = temp;\n                }\n                b64is.close();\n                javax.swing.ImageIcon iicon = new javax.swing.ImageIcon(bytes);\n                javax.swing.JLabel jlabel = new javax.swing.JLabel(\"Read from test.gif.b64\", iicon, 0);\n                javax.swing.JFrame jframe = new javax.swing.JFrame();\n                jframe.getContentPane().add(jlabel);\n                jframe.pack();\n                jframe.show();\n                java.io.FileOutputStream fos = new java.io.FileOutputStream(\"test.gif_out\");\n                fos.write(bytes);\n                fos.close();\n                fis = new java.io.FileInputStream(\"test.gif_out\");\n                b64is = new Base64.InputStream(fis, ENCODE);\n                byte[] ebytes = new byte[0];\n                b = -1;\n                while ((b = b64is.read()) >= 0) {\n                    byte[] temp = new byte[ebytes.length + 1];\n                    System.arraycopy(ebytes, 0, temp, 0, ebytes.length);\n                    temp[ebytes.length] = (byte) b;\n                    ebytes = temp;\n                }\n                b64is.close();\n                String s = new String(ebytes);\n                javax.swing.JTextArea jta = new javax.swing.JTextArea(s);\n                javax.swing.JScrollPane jsp = new javax.swing.JScrollPane(jta);\n                jframe = new javax.swing.JFrame();\n                jframe.setTitle(\"Read from test.gif_out\");\n                jframe.getContentPane().add(jsp);\n                jframe.pack();\n                jframe.show();\n                fos = new java.io.FileOutputStream(\"test.gif.b64_out\");\n                fos.write(ebytes);\n                fis = new java.io.FileInputStream(\"test.gif.b64_out\");\n                b64is = new Base64.InputStream(fis, DECODE);\n                byte[] edbytes = new byte[0];\n                b = -1;\n                while ((b = b64is.read()) >= 0) {\n                    byte[] temp = new byte[edbytes.length + 1];\n                    System.arraycopy(edbytes, 0, temp, 0, edbytes.length);\n                    temp[edbytes.length] = (byte) b;\n                    edbytes = temp;\n                }\n                b64is.close();\n                iicon = new javax.swing.ImageIcon(edbytes);\n                jlabel = new javax.swing.JLabel(\"Read from test.gif.b64_out\", iicon, 0);\n                jframe = new javax.swing.JFrame();\n                jframe.getContentPane().add(jlabel);\n                jframe.pack();\n                jframe.show();\n            }\n            {\n                java.io.FileInputStream fis = new java.io.FileInputStream(\"test.gif_out\");\n                byte[] rbytes = new byte[0];\n                int b = -1;\n                while ((b = fis.read()) >= 0) {\n                    byte[] temp = new byte[rbytes.length + 1];\n                    System.arraycopy(rbytes, 0, temp, 0, rbytes.length);\n                    temp[rbytes.length] = (byte) b;\n                    rbytes = temp;\n                }\n                fis.close();\n                java.io.FileOutputStream fos = new java.io.FileOutputStream(\"test.gif.b64_out2\");\n                Base64.OutputStream b64os = new Base64.OutputStream(fos, ENCODE);\n                b64os.write(rbytes);\n                b64os.close();\n                fis = new java.io.FileInputStream(\"test.gif.b64_out2\");\n                byte[] rebytes = new byte[0];\n                b = -1;\n                while ((b = fis.read()) >= 0) {\n                    byte[] temp = new byte[rebytes.length + 1];\n                    System.arraycopy(rebytes, 0, temp, 0, rebytes.length);\n                    temp[rebytes.length] = (byte) b;\n                    rebytes = temp;\n                }\n                fis.close();\n                String s = new String(rebytes);\n                javax.swing.JTextArea jta = new javax.swing.JTextArea(s);\n                javax.swing.JScrollPane jsp = new javax.swing.JScrollPane(jta);\n                javax.swing.JFrame jframe = new javax.swing.JFrame();\n                jframe.setTitle(\"Read from test.gif.b64_out2\");\n                jframe.getContentPane().add(jsp);\n                jframe.pack();\n                jframe.show();\n                fos = new java.io.FileOutputStream(\"test.gif_out2\");\n                b64os = new Base64.OutputStream(fos, DECODE);\n                b64os.write(rebytes);\n                b64os.close();\n                javax.swing.ImageIcon iicon = new javax.swing.ImageIcon(\"test.gif_out2\");\n                javax.swing.JLabel jlabel = new javax.swing.JLabel(\"Read from test.gif_out2\", iicon, 0);\n                jframe = new javax.swing.JFrame();\n                jframe.getContentPane().add(jlabel);\n                jframe.pack();\n                jframe.show();\n            }\n            {\n                java.io.FileInputStream fis = new java.io.FileInputStream(\"D:\\\\temp\\\\testencoding.txt\");\n                Base64.InputStream b64is = new Base64.InputStream(fis, DECODE);\n                java.io.FileOutputStream fos = new java.io.FileOutputStream(\"D:\\\\temp\\\\file.zip\");\n                int b;\n                while ((b = b64is.read()) >= 0) fos.write(b);\n                fos.close();\n                b64is.close();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13292288",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException {\n        if (destFile.exists() && destFile.isDirectory()) {\n            throw new IOException(\"Destination '\" + destFile + \"' exists but is a directory\");\n        }\n        FileInputStream input = new FileInputStream(srcFile);\n        try {\n            FileOutputStream output = new FileOutputStream(destFile);\n            try {\n                IOUtils.copy(input, output);\n            } finally {\n                IOUtils.closeQuietly(output);\n            }\n        } finally {\n            IOUtils.closeQuietly(input);\n        }\n        if (srcFile.length() != destFile.length()) {\n            throw new IOException(\"Failed to copy full contents from '\" + srcFile + \"' to '\" + destFile + \"'\");\n        }\n        if (preserveFileDate) {\n            destFile.setLastModified(srcFile.lastModified());\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13292295",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copyURLToFile(URL source, File destination) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copyURLToFile(URL source, File destination) throws IOException {\n        InputStream input = source.openStream();\n        try {\n            FileOutputStream output = openOutputStream(destination);\n            try {\n                IOUtils.copy(input, output);\n            } finally {\n                IOUtils.closeQuietly(output);\n            }\n        } finally {\n            IOUtils.closeQuietly(input);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13292327",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static Checksum checksum(File file, Checksum checksum) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static Checksum checksum(File file, Checksum checksum) throws IOException {\n        if (file.isDirectory()) {\n            throw new IllegalArgumentException(\"Checksums can't be computed on directories\");\n        }\n        InputStream in = null;\n        try {\n            in = new CheckedInputStream(new FileInputStream(file), checksum);\n            IOUtils.copy(in, new OutputStream() {\n\n                @Override\n                public void write(byte[] b, int off, int len) {\n                }\n\n                @Override\n                public void write(int b) {\n                }\n\n                @Override\n                public void write(byte[] b) throws IOException {\n                }\n            });\n        } finally {\n            IOUtils.closeQuietly(in);\n        }\n        return checksum;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13292580",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic Node external_open_url(Node startAt) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public Node external_open_url(Node startAt) throws Exception {\n        if (inUse) {\n            throw new InterpreterException(StdErrors.extend(StdErrors.Already_used, \"File already open\"));\n        }\n        inUse = true;\n        startAt.isGoodArgsLength(false, 2);\n        ExtURL url = new ExtURL(startAt.getSubNode(1, Node.TYPE_STRING).getString());\n        String protocol = url.getProtocol();\n        String mode = null;\n        Node props = null;\n        Node datas = null;\n        byte[] buffer = null;\n        String old_c = null;\n        String old_r = null;\n        int max_i = startAt.size() - 1;\n        if (startAt.elementAt(max_i).getSymbolicValue_undestructive().isVList()) {\n            props = startAt.getSubNode(max_i--, Node.TYPE_LIST);\n        }\n        int i_ = 2;\n        if (i_ <= max_i) {\n            mode = startAt.getSubNode(i_++, Node.TYPE_STRING).getString().toUpperCase().trim();\n            if (protocol.equalsIgnoreCase(\"http\") || protocol.equalsIgnoreCase(\"https\")) {\n                if (!(mode.equals(\"GET\") || mode.equals(\"POST\") || mode.equals(\"PUT\"))) {\n                    throw new InterpreterException(128010, \"Unsupported request methode\");\n                }\n            } else if (protocol.equalsIgnoreCase(\"ftp\") || protocol.equalsIgnoreCase(\"file\")) {\n                if (!(mode.equalsIgnoreCase(\"r\") || mode.equalsIgnoreCase(\"w\"))) {\n                    throw new InterpreterException(128015, \"Unsupported access methode\");\n                }\n            } else if (protocol.equalsIgnoreCase(\"jar\") || protocol.equalsIgnoreCase(\"stdin\")) {\n                if (!(mode.equalsIgnoreCase(\"r\"))) {\n                    throw new InterpreterException(128015, \"Unsupported access methode\");\n                }\n            } else if (protocol.equalsIgnoreCase(\"tcp\") || protocol.equalsIgnoreCase(\"ssl+tcp\")) {\n                if (!(mode.equalsIgnoreCase(\"rw\"))) {\n                    throw new InterpreterException(128015, \"Unsupported access methode\");\n                }\n            } else if (protocol.equalsIgnoreCase(\"stdout\") || protocol.equalsIgnoreCase(\"stderr\")) {\n                if (!(mode.equalsIgnoreCase(\"w\"))) {\n                    throw new InterpreterException(128015, \"Unsupported access methode\");\n                }\n            } else {\n                throw new InterpreterException(128011, \"Unsupported protocol\");\n            }\n        }\n        if (i_ <= max_i) {\n            if (!protocol.equalsIgnoreCase(\"http\") && !protocol.equalsIgnoreCase(\"https\")) {\n                throw new InterpreterException(128016, \"Unsupported request datas\");\n            }\n            datas = startAt.getSubNode(i_++, Node.TYPE_STRING | Node.TYPE_OBJECT);\n            if (datas.isVObject()) {\n                Object obj = datas.getVObjectExternalInstance();\n                if (External_Buffer.class.isInstance(obj)) {\n                    Buffer bbuffer = ((External_Buffer) obj).getBuffer();\n                    buffer = bbuffer.read_bytes();\n                } else {\n                    throw new InterpreterException(StdErrors.extend(StdErrors.Invalid_parameter, \"Object (\" + obj.getClass().getName() + \") required \" + External_Buffer.class.getName()));\n                }\n            } else {\n                buffer = datas.getString().getBytes();\n            }\n        }\n        if (datas != null && mode != null && mode.equals(\"GET\")) {\n            throw new InterpreterException(128012, \"GET request with data body\");\n        }\n        if (props != null && (!protocol.equalsIgnoreCase(\"http\") && !protocol.equalsIgnoreCase(\"https\"))) {\n            throw new InterpreterException(128013, \"Cannot handle header properties in request\");\n        }\n        try {\n            if (protocol.equalsIgnoreCase(\"file\") && mode != null && mode.equalsIgnoreCase(\"w\")) {\n                File f = new File(url.toURI());\n                outputStream = new FileOutputStream(f);\n                outputBuffer = new BufferedOutputStream(outputStream);\n                output = new DataOutputStream(outputBuffer);\n            } else if (protocol.equalsIgnoreCase(\"tcp\")) {\n                tcpHost = url.getHost();\n                tcpPort = url.getPort();\n                if (tcpPort < 0 || tcpPort > 65535) {\n                    throw new InterpreterException(StdErrors.extend(StdErrors.Out_of_range, \"\" + tcpPort));\n                }\n                socket = new Socket(tcpHost, tcpPort);\n                if (readTimeOut > 0) {\n                    socket.setSoTimeout(readTimeOut);\n                }\n                inputStream = socket.getInputStream();\n                inputBuffer = new BufferedInputStream(inputStream);\n                input = new DataInputStream(inputBuffer);\n                outputStream = socket.getOutputStream();\n                outputBuffer = new BufferedOutputStream(outputStream);\n                output = new DataOutputStream(outputBuffer);\n            } else if (protocol.equalsIgnoreCase(\"ssl+tcp\")) {\n                tcpHost = url.getHost();\n                tcpPort = url.getPort();\n                if (tcpPort < 0 || tcpPort > 65535) {\n                    throw new InterpreterException(StdErrors.extend(StdErrors.Out_of_range, \"\" + tcpPort));\n                }\n                SocketFactory socketFactory = SSLSocketFactory.getDefault();\n                socket = socketFactory.createSocket(tcpHost, tcpPort);\n                if (readTimeOut > 0) {\n                    socket.setSoTimeout(readTimeOut);\n                }\n                inputStream = socket.getInputStream();\n                inputBuffer = new BufferedInputStream(inputStream);\n                input = new DataInputStream(inputBuffer);\n                outputStream = socket.getOutputStream();\n                outputBuffer = new BufferedOutputStream(outputStream);\n                output = new DataOutputStream(outputBuffer);\n            } else if (protocol.equalsIgnoreCase(\"stdout\")) {\n                setBufOut(System.out);\n            } else if (protocol.equalsIgnoreCase(\"stderr\")) {\n                setBufOut(System.err);\n            } else if (protocol.equalsIgnoreCase(\"stdin\")) {\n                setBufIn(System.in);\n            } else {\n                urlConnection = url.openConnection();\n                if (connectTimeOut > 0) {\n                    urlConnection.setConnectTimeout(connectTimeOut);\n                }\n                if (readTimeOut > 0) {\n                    urlConnection.setReadTimeout(readTimeOut);\n                }\n                urlConnection.setUseCaches(false);\n                urlConnection.setDoInput(true);\n                if (urlConnection instanceof HttpURLConnection) {\n                    HttpURLConnection httpCon = (HttpURLConnection) urlConnection;\n                    if (props != null) {\n                        for (int i = 0; i < props.size(); i++) {\n                            Node pnode = props.getSubNode(i, Node.TYPE_DICO);\n                            String header_s = Node.getPairKey(pnode);\n                            String value_s = Node.node2VString(Node.getPairValue(pnode)).getString();\n                            Interpreter.Log(\"   HTTP-Header: \" + header_s + \" : \" + value_s);\n                            httpCon.setRequestProperty(header_s, value_s);\n                        }\n                    }\n                    if (mode != null && (mode.equals(\"POST\") || mode.equals(\"PUT\"))) {\n                        if (mode.equals(\"PUT\")) {\n                            Interpreter.Log(\"   HTTP PUT: \" + url.toString());\n                        } else {\n                            Interpreter.Log(\"   HTTP POST: \" + url.toString());\n                        }\n                        urlConnection.setDoOutput(true);\n                        httpCon.setRequestMethod(mode);\n                        outputStream = urlConnection.getOutputStream();\n                        outputBuffer = new BufferedOutputStream(outputStream);\n                        output = new DataOutputStream(outputBuffer);\n                        output.write(buffer);\n                        output.flush();\n                    }\n                    inputStream = urlConnection.getInputStream();\n                    inputBuffer = new BufferedInputStream(inputStream);\n                    input = new DataInputStream(inputBuffer);\n                } else {\n                    if (mode == null || (mode != null && mode.equalsIgnoreCase(\"r\"))) {\n                        Interpreter.Log(\"   \" + protocol + \" read : \" + url.toString());\n                        inputStream = urlConnection.getInputStream();\n                        inputBuffer = new BufferedInputStream(inputStream);\n                        input = new DataInputStream(inputBuffer);\n                    } else {\n                        Interpreter.Log(\"   \" + protocol + \" write : \" + url.toString());\n                        outputStream = urlConnection.getOutputStream();\n                        outputBuffer = new BufferedOutputStream(outputStream);\n                        output = new DataOutputStream(outputBuffer);\n                    }\n                }\n            }\n        } catch (Exception e) {\n            throw e;\n        }\n        bytePos = 0;\n        putHook();\n        return null;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13295656",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static int[] BubbleSortDEC(int[] values) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static int[] BubbleSortDEC(int[] values) {\n        boolean change = true;\n        int aux;\n        int[] indexes = new int[values.length];\n        for (int i = 0; i < values.length; i++) {\n            indexes[i] = i;\n        }\n        while (change) {\n            change = false;\n            for (int i = 0; i < values.length - 1; i++) {\n                if (values[i] < values[i + 1]) {\n                    aux = values[i];\n                    values[i] = values[i + 1];\n                    values[i + 1] = aux;\n                    aux = indexes[i];\n                    indexes[i] = indexes[i + 1];\n                    indexes[i + 1] = aux;\n                    change = true;\n                }\n            }\n        }\n        return (indexes);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13299924",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void run() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void foundNewVersion() {\n        updater = new UpdaterView();\n        updater.setLabelText(\"Initiating Updater...\");\n        updater.setProgress(0);\n        updater.setLocationRelativeTo(null);\n        updater.setVisible(true);\n        URL pathUrl = ClassLoader.getSystemResource(\"img/icon.png\");\n        String path = pathUrl.toString();\n        path = path.substring(4, path.length() - 14);\n        try {\n            file = new File(new URI(path));\n            updaterFile = new File(new URI(path.substring(0, path.length() - 4) + \"Updater.jar\"));\n            if (updaterFile.exists()) {\n                updaterFile.delete();\n            }\n            updater.setProgress(25);\n            SwingUtilities.invokeLater(new Runnable() {\n\n                public void run() {\n                    try {\n                        FileChannel in = (new FileInputStream(file)).getChannel();\n                        FileChannel out = (new FileOutputStream(updaterFile)).getChannel();\n                        in.transferTo(0, file.length(), out);\n                        updater.setProgress(50);\n                        in.close();\n                        out.close();\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                    startUpdater();\n                }\n            });\n        } catch (URISyntaxException e) {\n            e.printStackTrace();\n            JOptionPane.showMessageDialog(null, \"Update error! Could not create Updater. Check folder permission.\", \"Error\", JOptionPane.ERROR_MESSAGE);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13299925",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void run() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void run() {\n                    try {\n                        FileChannel in = (new FileInputStream(file)).getChannel();\n                        FileChannel out = (new FileOutputStream(updaterFile)).getChannel();\n                        in.transferTo(0, file.length(), out);\n                        updater.setProgress(50);\n                        in.close();\n                        out.close();\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                    startUpdater();\n                }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13307307",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static void doCopyFile(FileInputStream in, FileOutputStream out) {\n        FileChannel inChannel = null, outChannel = null;\n        try {\n            inChannel = in.getChannel();\n            outChannel = out.getChannel();\n            inChannel.transferTo(0, inChannel.size(), outChannel);\n        } catch (IOException e) {\n            throw ManagedIOException.manage(e);\n        } finally {\n            if (inChannel != null) {\n                close(inChannel);\n            }\n            if (outChannel != null) {\n                close(outChannel);\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13309014",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic String[] getElements() throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public String[] getElements() throws IOException {\n        Vector v = new Vector();\n        PushbackInputStream in = null;\n        try {\n            URLConnection urlConn = dtdURL.openConnection();\n            in = new PushbackInputStream(new BufferedInputStream(urlConn.getInputStream()));\n            while (scanForLTBang(in)) {\n                String elementType = getString(in);\n                if (elementType.equals(\"ELEMENT\")) {\n                    skipWhiteSpace(in);\n                    String elementName = getString(in);\n                    v.addElement(elementName);\n                }\n            }\n            in.close();\n            String[] elements = new String[v.size()];\n            v.copyInto(elements);\n            return elements;\n        } catch (Exception exc) {\n            if (in != null) {\n                try {\n                    in.close();\n                } catch (Exception ignore) {\n                }\n            }\n            throw new IOException(\"Error reading DTD: \" + exc.toString());\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13312539",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void executeScript(SQLiteDatabase sqlDatabase, InputStream input) {\n        StringWriter writer = new StringWriter();\n        try {\n            IOUtils.copy(input, writer);\n        } catch (IOException e) {\n            throw new ComixException(\"Could not read the database script\", e);\n        }\n        String multipleSql = writer.toString();\n        String[] split = multipleSql.split(\"-- SCRIPT_SPLIT --\");\n        for (String sql : split) {\n            if (!sql.trim().equals(\"\")) {\n                sqlDatabase.execSQL(sql);\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13319521",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "protected void loadXmlFromUri(URI uri) {\n        URLConnection urlc;\n        try {\n            urlc = uri.toURL().openConnection();\n            InputStream is = urlc.getInputStream();\n            Reader rd = new InputStreamReader(is);\n            xmlSource = new StreamSource(rd);\n        } catch (IOException ioe) {\n            ioe.printStackTrace();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13319522",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "protected void loadXslFromUri(URI uri) {\n        URLConnection urlc;\n        try {\n            urlc = uri.toURL().openConnection();\n            InputStream is = urlc.getInputStream();\n            Reader rd = new InputStreamReader(is);\n            Source xslSource = new StreamSource(rd);\n            try {\n                xslTemplate = factory.newTemplates(xslSource);\n            } catch (TransformerConfigurationException tce) {\n                tce.printStackTrace();\n            }\n        } catch (IOException ioe) {\n            ioe.printStackTrace();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13320273",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic IMedium createMedium(String urlString, IMetadata optionalMetadata) throws MM4UCannotCreateMediumElementsException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n    public IMedium createMedium(String urlString, IMetadata optionalMetadata) throws MM4UCannotCreateMediumElementsException {\n        Debug.println(\"createMedium(): URL: \" + urlString);\n        IAudio tempAudio = null;\n        try {\n            String cachedFileUri = null;\n            try {\n                URL url = new URL(urlString);\n                InputStream is = url.openStream();\n                ByteArrayOutputStream out = new ByteArrayOutputStream();\n                byte[] buf = new byte[1024];\n                int len;\n                while ((len = is.read(buf)) > 0) out.write(buf, 0, len);\n                MediaCache cache = new MediaCache();\n                cachedFileUri = cache.addAudio(urlString, out).getURI().substring(5);\n            } catch (MalformedURLException e) {\n                cachedFileUri = urlString;\n            }\n            TAudioFileFormat fFormat = null;\n            try {\n                fFormat = (TAudioFileFormat) new MpegAudioFileReader().getAudioFileFormat(new File(cachedFileUri));\n            } catch (Exception e) {\n                System.err.println(\"getAudioFileFormat() failed: \" + e);\n            }\n            int length = Constants.UNDEFINED_INTEGER;\n            if (fFormat != null) {\n                length = Math.round(Integer.valueOf(fFormat.properties().get(\"duration\").toString()).intValue() / 1000);\n            }\n            String mimeType = Utilities.getMimetype(Utilities.getURISuffix(urlString));\n            optionalMetadata.addIfNotNull(IMedium.MEDIUM_METADATA_MIMETYPE, mimeType);\n            if (length != Constants.UNDEFINED_INTEGER) {\n                tempAudio = new Audio(this, length, urlString, optionalMetadata);\n            }\n        } catch (Exception exc) {\n            exc.printStackTrace();\n            return null;\n        }\n        return tempAudio;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01332258",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void writeTo(OutputStream out) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void writeTo(OutputStream out) throws IOException {\n        if (!closed) {\n            throw new IOException(\"Stream not closed\");\n        }\n        if (isInMemory()) {\n            memoryOutputStream.writeTo(out);\n        } else {\n            FileInputStream fis = new FileInputStream(outputFile);\n            try {\n                IOUtils.copy(fis, out);\n            } finally {\n                IOUtils.close(fis);\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13325917",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copy(File fromFile, File toFile) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copy(File fromFile, File toFile) throws IOException {\n        if (!fromFile.exists()) throw new IOException(\"FileCopy: \" + \"no such source file: \" + fromFile.getCanonicalPath());\n        if (!fromFile.isFile()) throw new IOException(\"FileCopy: \" + \"can't copy directory: \" + fromFile.getCanonicalPath());\n        if (!fromFile.canRead()) throw new IOException(\"FileCopy: \" + \"source file is unreadable: \" + fromFile.getCanonicalPath());\n        if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());\n        if (toFile.exists()) {\n            if (!toFile.canWrite()) throw new IOException(\"FileCopy: \" + \"destination file is unwriteable: \" + toFile.getCanonicalPath());\n            throw new IOException(\"FileCopy: \" + \"existing file was not overwritten.\");\n        } else {\n            String parent = toFile.getParent();\n            if (parent == null) parent = System.getProperty(\"user.dir\");\n            File dir = new File(parent);\n            if (!dir.exists()) throw new IOException(\"FileCopy: \" + \"destination directory doesn't exist: \" + parent);\n            if (dir.isFile()) throw new IOException(\"FileCopy: \" + \"destination is not a directory: \" + parent);\n            if (!dir.canWrite()) throw new IOException(\"FileCopy: \" + \"destination directory is unwriteable: \" + parent);\n        }\n        FileInputStream from = null;\n        FileOutputStream to = null;\n        try {\n            from = new FileInputStream(fromFile);\n            to = new FileOutputStream(toFile);\n            byte[] buffer = new byte[1024 * 1024];\n            int bytesRead;\n            while ((bytesRead = from.read(buffer)) != -1) to.write(buffer, 0, bytesRead);\n            if (fromFile.isHidden()) {\n            }\n            toFile.setLastModified(fromFile.lastModified());\n            toFile.setExecutable(fromFile.canExecute());\n            toFile.setReadable(fromFile.canRead());\n            toFile.setWritable(toFile.canWrite());\n        } finally {\n            if (from != null) try {\n                from.close();\n            } catch (IOException e) {\n                ;\n            }\n            if (to != null) try {\n                to.close();\n            } catch (IOException e) {\n                ;\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13329811",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void test() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Deprecated\n    public void test() {\n        try {\n            String query = \"* <http://xmlns.com/foaf/0.1/workplaceHomepage> <http://www.deri.ie/>\" + \"* <http://xmlns.com/foaf/0.1/knows> *\";\n            String url = \"http://sindice.com/api/v2/search?qt=advanced&q=\" + URLEncoder.encode(query, \"utf-8\") + \"&qt=advanced\";\n            URL urlObj = new URL(url);\n            URLConnection con = urlObj.openConnection();\n            if (con != null) {\n                Model model = ModelFactory.createDefaultModel();\n                model.read(con.getInputStream(), null);\n            }\n            System.out.println(url);\n        } catch (MalformedURLException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13333160",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void run(Reader xmlIn, OutputStream out) throws IOException, SAXException {\n        Document dom = null;\n        try {\n            DocumentBuilderFactory f = DocumentBuilderFactory.newInstance();\n            f.setNamespaceAware(false);\n            f.setCoalescing(true);\n            f.setIgnoringComments(true);\n            f.setValidating(false);\n            DocumentBuilder b = f.newDocumentBuilder();\n            dom = b.parse(new InputSource(xmlIn));\n        } catch (ParserConfigurationException err) {\n            throw new IOException(err);\n        }\n        Element root = dom.getDocumentElement();\n        if (root == null) throw new SAXException(\"Not root in document\");\n        Attr att = root.getAttributeNode(\"label\");\n        if (att == null) root.setAttribute(\"label\", \"Wikipedia\");\n        Menu menu = parseMenu(root);\n        menu.id = \"menuWikipedia\";\n        ZipOutputStream zout = new ZipOutputStream(out);\n        String content = ResourceUtils.getContent(XUL4Wikipedia.class, \"chrome.manifest\");\n        addEntry(zout, \"chrome.manifest\", content);\n        content = ResourceUtils.getContent(XUL4Wikipedia.class, \"install.rdf\");\n        addEntry(zout, \"install.rdf\", content);\n        content = ResourceUtils.getContent(XUL4Wikipedia.class, \"library.js\");\n        addDir(zout, \"chrome/\");\n        addDir(zout, \"chrome/content/\");\n        addDir(zout, \"chrome/skin/\");\n        String signal = \"/*INSERT_CMD_HERE*/\";\n        int n = content.indexOf(signal);\n        if (n == -1) throw new RuntimeException(\"where is \" + signal + \" ??\");\n        ZipEntry entry = new ZipEntry(\"chrome/content/library.js\");\n        zout.putNextEntry(entry);\n        PrintWriter pout = new PrintWriter(zout);\n        pout.write(content.substring(0, n));\n        menu.toJS(pout);\n        pout.write(content.substring(n + signal.length()));\n        pout.flush();\n        zout.closeEntry();\n        entry = new ZipEntry(\"chrome/content/menu.xul\");\n        zout.putNextEntry(entry);\n        pout = new PrintWriter(zout);\n        pout.println(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\");\n        pout.println(\"<overlay id=\\\"xul4wikipedia\\\" xmlns=\\\"\" + XUL.NS + \"\\\">\");\n        pout.println(\"<script src=\\\"library.js\\\"/>\");\n        pout.println(\"<popup id=\\\"contentAreaContextMenu\\\">\");\n        pout.println(\"<menuseparator/>\");\n        menu.toXUL(pout);\n        pout.println(\"</popup>\");\n        pout.println(\"</overlay>\");\n        pout.flush();\n        zout.closeEntry();\n        InputStream png = XUL4Wikipedia.class.getResourceAsStream(\"32px-Wikipedia-logo.png\");\n        if (png == null) throw new IOException(\"Cannot get icon\");\n        entry = new ZipEntry(\"chrome/skin/wikipedia.png\");\n        zout.putNextEntry(entry);\n        IOUtils.copyTo(png, zout);\n        zout.closeEntry();\n        zout.finish();\n        zout.flush();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13335071",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static boolean copy(File source, File dest) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static boolean copy(File source, File dest) {\n        FileChannel in = null, out = null;\n        try {\n            in = new FileInputStream(source).getChannel();\n            out = new FileOutputStream(dest).getChannel();\n            long size = in.size();\n            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);\n            out.write(buf);\n            if (in != null) in.close();\n            if (out != null) out.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n            return false;\n        }\n        return true;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13336051",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "protected static String getFileContentAsString(URL url, String encoding) throws IOException {\n        InputStream input = null;\n        StringWriter sw = new StringWriter();\n        try {\n            System.out.println(\"Free mem :\" + Runtime.getRuntime().freeMemory());\n            input = url.openStream();\n            IOUtils.copy(input, sw, encoding);\n            System.out.println(\"Free mem :\" + Runtime.getRuntime().freeMemory());\n        } finally {\n            if (input != null) {\n                input.close();\n                System.gc();\n                input = null;\n                System.out.println(\"Free mem :\" + Runtime.getRuntime().freeMemory());\n            }\n        }\n        return sw.toString();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13336601",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private final void lookup() throws Exception {\n        try {\n            URL url;\n            URLConnection urlConn;\n            DataOutputStream printout;\n            BufferedReader input;\n            url = new URL(\"http://www.amazon.com/exec/obidos/search-handle-form\");\n            urlConn = url.openConnection();\n            urlConn.setDoInput(true);\n            urlConn.setDoOutput(true);\n            urlConn.setUseCaches(false);\n            urlConn.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n            printout = new DataOutputStream(urlConn.getOutputStream());\n            String content = \"page=\" + URLEncoder.encode(\"1\") + \"&index=\" + URLEncoder.encode(\"music\") + \"&field-artist=\" + URLEncoder.encode(artist) + \"&field-title=\" + URLEncoder.encode(title) + \"&field-binding=\" + URLEncoder.encode(\"\");\n            printout.writeBytes(content);\n            printout.flush();\n            printout.close();\n            input = new BufferedReader(new InputStreamReader(urlConn.getInputStream()));\n            String str;\n            String keyword = \"handle-buy-box=\";\n            int matches = 0;\n            while (null != ((str = input.readLine()))) {\n                int idStart = str.indexOf(keyword);\n                if (idStart > 0) {\n                    idStart = idStart + keyword.length();\n                    String id = str.substring(idStart, idStart + 10);\n                    status.append(\"Match: \");\n                    status.append(id);\n                    status.append(\". \");\n                    if (verifyMatch(id, title)) {\n                        discID = id;\n                        imageURL = \"http://images.amazon.com/images/P/\" + id + \".01.LZZZZZZZ.jpg\";\n                        matchType = EXACT_MATCH;\n                    }\n                }\n            }\n            input.close();\n        } catch (Exception e) {\n            throw e;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13336602",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private final boolean verifyMatch(String disc_id, String title) {\n        try {\n            URL url;\n            URLConnection urlConn;\n            DataOutputStream printout;\n            BufferedReader input;\n            url = new URL(\"http://www.amazon.com/exec/obidos/ASIN/\" + disc_id);\n            urlConn = url.openConnection();\n            urlConn.setDoInput(true);\n            urlConn.setDoOutput(true);\n            urlConn.setUseCaches(false);\n            urlConn.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n            input = new BufferedReader(new InputStreamReader(urlConn.getInputStream()));\n            String str;\n            boolean goodMatch = false;\n            boolean match = false;\n            while (null != ((str = input.readLine()))) {\n                String keyword = title.toUpperCase();\n                int idStart = str.toUpperCase().indexOf((keyword));\n                if (idStart > 0) {\n                    if (str.toUpperCase().endsWith(title.toUpperCase())) {\n                        goodMatch = true;\n                    } else {\n                        match = true;\n                    }\n                }\n            }\n            input.close();\n            if (goodMatch) {\n                status.append(\"Exact Match. \");\n                return true;\n            } else if (match) {\n                status.append(\"Inexact Match. \");\n                return true;\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return true;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13337915",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static String calculateMD5(String s) {\n        try {\n            MessageDigest m = MessageDigest.getInstance(\"MD5\");\n            m.reset();\n            m.update(s.getBytes());\n            return new BigInteger(1, m.digest()).toString(16);\n        } catch (NoSuchAlgorithmException e) {\n            throw new UndeclaredThrowableException(e);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13339653",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void write(String resource, String destinationPath) throws IOException, CoreException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void write(String resource, String destinationPath) throws IOException, CoreException {\n        OutputStream output = null;\n        InputStream contentStream = null;\n        try {\n            contentStream = new BufferedInputStream(new FileInputStream(resource));\n            output = new BufferedOutputStream(new FileOutputStream(destinationPath));\n            int available = contentStream.available();\n            available = available <= 0 ? DEFAULT_BUFFER_SIZE : available;\n            int chunkSize = Math.min(DEFAULT_BUFFER_SIZE, available);\n            byte[] readBuffer = new byte[chunkSize];\n            int n = contentStream.read(readBuffer);\n            while (n > 0) {\n                output.write(readBuffer, 0, n);\n                n = contentStream.read(readBuffer);\n            }\n        } finally {\n            if (contentStream != null) {\n                try {\n                    contentStream.close();\n                } catch (IOException e) {\n                    IDEWorkbenchPlugin.log(\"Error closing input stream for file: \" + resource, e);\n                }\n            }\n            if (output != null) {\n                output.close();\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13344290",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static int best(int r, int n, int s) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static int best(int r, int n, int s) {\n        if ((n <= 0) || (r < 0) || (r > n) || (s < 0)) return 0;\n        int[] rolls = new int[n];\n        for (int i = 0; i < n; i++) rolls[i] = d(s);\n        boolean found;\n        do {\n            found = false;\n            for (int x = 0; x < n - 1; x++) {\n                if (rolls[x] < rolls[x + 1]) {\n                    int t = rolls[x];\n                    rolls[x] = rolls[x + 1];\n                    rolls[x + 1] = t;\n                    found = true;\n                }\n            }\n        } while (found);\n        int sum = 0;\n        for (int i = 0; i < r; i++) sum += rolls[i];\n        return sum;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13344859",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static File copyFile(File fileToCopy, File copiedFile) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static File copyFile(File fileToCopy, File copiedFile) {\n        BufferedInputStream in = null;\n        BufferedOutputStream outWriter = null;\n        if (!copiedFile.exists()) {\n            try {\n                copiedFile.createNewFile();\n            } catch (IOException e1) {\n                ExceptionHandlingService.INSTANCE.handleException(e1);\n                return null;\n            }\n        }\n        try {\n            in = new BufferedInputStream(new FileInputStream(fileToCopy), 4096);\n            outWriter = new BufferedOutputStream(new FileOutputStream(copiedFile), 4096);\n            int c;\n            while ((c = in.read()) != -1) outWriter.write(c);\n            in.close();\n            outWriter.close();\n        } catch (FileNotFoundException e) {\n            ExceptionHandlingService.INSTANCE.handleException(e);\n            return null;\n        } catch (IOException e) {\n            ExceptionHandlingService.INSTANCE.handleException(e);\n            return null;\n        }\n        return copiedFile;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13348537",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private List<String> readLines(String filename) {\n        List<String> lines = new ArrayList<String>();\n        URL url = Util.getResource(filename);\n        try {\n            BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));\n            while (true) {\n                String line = br.readLine();\n                if (line == null) {\n                    break;\n                }\n                lines.add(line);\n            }\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n        return lines;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13351146",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copy(final File src, File dst, final boolean overwrite) throws IOException, IllegalArgumentException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copy(final File src, File dst, final boolean overwrite) throws IOException, IllegalArgumentException {\n        if (!src.isFile() || !src.exists()) {\n            throw new IllegalArgumentException(\"Source file '\" + src.getAbsolutePath() + \"' not found!\");\n        }\n        if (dst.exists()) {\n            if (dst.isDirectory()) {\n                dst = new File(dst, src.getName());\n            } else if (dst.isFile()) {\n                if (!overwrite) {\n                    throw new IllegalArgumentException(\"Destination file '\" + dst.getAbsolutePath() + \"' already exists!\");\n                }\n            } else {\n                throw new IllegalArgumentException(\"Invalid destination object '\" + dst.getAbsolutePath() + \"'!\");\n            }\n        }\n        final File dstParent = dst.getParentFile();\n        if (!dstParent.exists()) {\n            if (!dstParent.mkdirs()) {\n                throw new IOException(\"Failed to create directory \" + dstParent.getAbsolutePath());\n            }\n        }\n        long fileSize = src.length();\n        if (fileSize > 20971520l) {\n            final FileInputStream in = new FileInputStream(src);\n            final FileOutputStream out = new FileOutputStream(dst);\n            try {\n                int doneCnt = -1;\n                final int bufSize = 32768;\n                final byte buf[] = new byte[bufSize];\n                while ((doneCnt = in.read(buf, 0, bufSize)) >= 0) {\n                    if (doneCnt == 0) {\n                        Thread.yield();\n                    } else {\n                        out.write(buf, 0, doneCnt);\n                    }\n                }\n                out.flush();\n            } finally {\n                try {\n                    in.close();\n                } catch (final IOException e) {\n                }\n                try {\n                    out.close();\n                } catch (final IOException e) {\n                }\n            }\n        } else {\n            final FileInputStream fis = new FileInputStream(src);\n            final FileOutputStream fos = new FileOutputStream(dst);\n            final FileChannel in = fis.getChannel(), out = fos.getChannel();\n            try {\n                long offs = 0, doneCnt = 0;\n                final long copyCnt = Math.min(65536, fileSize);\n                do {\n                    doneCnt = in.transferTo(offs, copyCnt, out);\n                    offs += doneCnt;\n                    fileSize -= doneCnt;\n                } while (fileSize > 0);\n            } finally {\n                try {\n                    in.close();\n                } catch (final IOException e) {\n                }\n                try {\n                    out.close();\n                } catch (final IOException e) {\n                }\n                try {\n                    fis.close();\n                } catch (final IOException e) {\n                }\n                try {\n                    fos.close();\n                } catch (final IOException e) {\n                }\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13351233",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static boolean copyFile(File src, File target) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static boolean copyFile(File src, File target) throws IOException {\n        if (src == null || target == null || !src.exists()) return false;\n        if (!target.exists()) if (!createNewFile(target)) return false;\n        InputStream ins = new BufferedInputStream(new FileInputStream(src));\n        OutputStream ops = new BufferedOutputStream(new FileOutputStream(target));\n        int b;\n        while (-1 != (b = ins.read())) ops.write(b);\n        Streams.safeClose(ins);\n        Streams.safeFlush(ops);\n        Streams.safeClose(ops);\n        return target.setLastModified(src.lastModified());\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13351384",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void copieFichier(String fileIn, String fileOut) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void copieFichier(String fileIn, String fileOut) {\n        FileChannel in = null;\n        FileChannel out = null;\n        try {\n            in = new FileInputStream(fileIn).getChannel();\n            out = new FileOutputStream(fileOut).getChannel();\n            in.transferTo(0, in.size(), out);\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            if (in != null) {\n                try {\n                    in.close();\n                } catch (IOException e) {\n                }\n            }\n            if (out != null) {\n                try {\n                    out.close();\n                } catch (IOException e) {\n                }\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13352120",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic File createFileFromClasspathResource(String resourceUrl) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public File createFileFromClasspathResource(String resourceUrl) throws IOException {\n        File fichierTest = File.createTempFile(\"xmlFieldTestFile\", \"\");\n        FileOutputStream fos = new FileOutputStream(fichierTest);\n        InputStream is = DefaultXmlFieldSelectorTest.class.getResourceAsStream(resourceUrl);\n        IOUtils.copy(is, fos);\n        is.close();\n        fos.close();\n        return fichierTest;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13354574",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static HttpURLConnection getConnection(URL url) throws IOException {\n        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n        conn.setRequestMethod(\"GET\");\n        conn.setDoInput(true);\n        conn.setDoOutput(true);\n        conn.setRequestProperty(\"Accept\", \"application/zip;text/html\");\n        return conn;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13354644",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void addUrl(URL url) throws IOException, SAXException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void addUrl(URL url) throws IOException, SAXException {\n        InputStream inStream = url.openStream();\n        String path = url.getPath();\n        int slashInx = path.lastIndexOf('/');\n        String name = path.substring(slashInx + 1);\n        Document doc = docBuild.parse(inStream);\n        Element root = doc.getDocumentElement();\n        String rootTag = root.getTagName();\n        if (rootTag.equals(\"graphml\")) {\n            NodeList graphNodes = root.getElementsByTagName(\"graph\");\n            for (int i = 0; i < graphNodes.getLength(); i++) {\n                Element elem = (Element) graphNodes.item(i);\n                String graphName = elem.getAttribute(\"id\");\n                if (graphName == null) {\n                    graphName = name;\n                }\n                addStructure(new GraphSpec(graphName));\n                urlRefs.put(graphName, url);\n            }\n        } else if (rootTag.equals(\"tree\")) {\n            addStructure(new TreeSpec(name));\n            urlRefs.put(name, url);\n        } else {\n            throw new IllegalArgumentException(\"Format of \" + url + \" not understood.\");\n        }\n        inStream.close();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13356869",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void createZip(File zipFileName, Vector<File> selected) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void createZip(File zipFileName, Vector<File> selected) {\n        try {\n            byte[] buffer = new byte[4096];\n            ZipOutputStream out = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(zipFileName), 8096));\n            out.setLevel(Deflater.BEST_COMPRESSION);\n            out.setMethod(ZipOutputStream.DEFLATED);\n            for (int i = 0; i < selected.size(); i++) {\n                FileInputStream in = new FileInputStream(selected.get(i));\n                String file = selected.get(i).getPath();\n                if (file.indexOf(\"\\\\\") != -1) file = file.substring(file.lastIndexOf(Options.fs) + 1, file.length());\n                ZipEntry ze = new ZipEntry(file);\n                out.putNextEntry(ze);\n                int len;\n                while ((len = in.read(buffer)) > 0) out.write(buffer, 0, len);\n                out.closeEntry();\n                in.close();\n                selected.get(i).delete();\n            }\n            out.close();\n        } catch (IllegalArgumentException iae) {\n            iae.printStackTrace();\n        } catch (FileNotFoundException fnfe) {\n            fnfe.printStackTrace();\n        } catch (IOException ioe) {\n            ioe.printStackTrace();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13361852",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static File copyFile(File from, File to) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static File copyFile(File from, File to) throws IOException {\n        FileOutputStream fos = new FileOutputStream(to);\n        FileInputStream fis = new FileInputStream(from);\n        FileChannel foc = fos.getChannel();\n        FileChannel fic = fis.getChannel();\n        foc.transferFrom(fic, 0, fic.size());\n        foc.close();\n        fic.close();\n        return to;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13362846",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void setContenu(ContenuFichierElectronique contenuFichier, FichierElectronique fichierElectronique, UtilisateurIFGD utilisateurCourant) throws IOException, DocumentVideException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void setContenu(ContenuFichierElectronique contenuFichier, FichierElectronique fichierElectronique, UtilisateurIFGD utilisateurCourant) throws IOException, DocumentVideException {\n        if (contenuFichier != null) {\n            SupportDocument support = fichierElectronique.getSupport();\n            support.setFichierElectronique(fichierElectronique);\n            FicheDocument ficheDocument = support.getFicheDocument();\n            String nomFichier = contenuFichier.getNomFichier();\n            String extension = FilenameUtils.getExtension(nomFichier);\n            if (ficheDocument.getFichierElectronique(nomFichier) != null) {\n                FichierElectronique fichierElectroniqueExistant = ficheDocument.getFichierElectronique(nomFichier);\n                if (fichierElectroniqueExistant.getId() != null && !fichierElectroniqueExistant.getId().equals(fichierElectronique.getId())) {\n                    throw new FichierElectroniqueExistantException(nomFichier, ficheDocument);\n                }\n            }\n            if (fichierElectronique.getId() == null) {\n                if (OfficeDocumentPropertiesUtil.canWriteIdIGID(extension)) {\n                    Long idIgid = OfficeDocumentPropertiesUtil.getIdIGID(contenuFichier);\n                    if (idIgid != null) {\n                        throw new FichierElectroniqueExistantException(nomFichier, idIgid, ficheDocument);\n                    }\n                }\n            }\n            InputStream inputStream = contenuFichier.getInputStream();\n            OutputStream outputStream = fichierElectronique.getOutputStream();\n            try {\n                IOUtils.copy(inputStream, outputStream);\n            } finally {\n                try {\n                    inputStream.close();\n                } finally {\n                    outputStream.close();\n                }\n            }\n            String typeMime = contenuFichier.getContentType();\n            long tailleFichier = contenuFichier.getTailleFichier();\n            Date dateDerniereModification = new Date();\n            fichierElectronique.setNom(nomFichier);\n            fichierElectronique.setTypeMime(extension);\n            creerFormatSiNecessaire(typeMime, extension);\n            fichierElectronique.setTaille(tailleFichier);\n            fichierElectronique.setDateDerniereModification(dateDerniereModification);\n            fichierElectronique.setSoumetteur(utilisateurCourant);\n            if (extension.endsWith(\"msg\")) {\n                CourrielUtils.peuplerMetadonneesCourriel(fichierElectronique.getNom(), ficheDocument, contenuFichier.getInputStream(), utilisateurCourant);\n            } else if (extension.endsWith(\"eml\")) {\n                Map<String, Object> properties = new GestionnaireProprietesMimeMessageParser().parseMsg(contenuFichier.getInputStream());\n                CourrielUtils.peuplerMetadonneesCourriel(fichierElectronique.getNom(), ficheDocument, properties, utilisateurCourant);\n            } else {\n                FGDProprietesDocumentUtils.copierMetadonneesProprietes(fichierElectronique, ficheDocument);\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13365065",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic Object downloadFile(File destinationFile, URL[] urls, DownloadListener listener, Object checksum, long length, PRIORITY priority) throws DownloadException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public Object downloadFile(File destinationFile, URL[] urls, DownloadListener listener, Object checksum, long length, PRIORITY priority) throws DownloadException {\n        URL url = urls[0];\n        if (!url.getProtocol().equalsIgnoreCase(\"http\")) {\n            throw new DownloadException(\" Only HTTP is supported in this version \");\n        }\n        if (!destinationFile.exists()) {\n            try {\n                destinationFile.createNewFile();\n            } catch (IOException e) {\n                e.printStackTrace();\n                throw new DownloadException(\"Unable to download from URL : \" + url.toString());\n            }\n        }\n        HeadMethod head = new HeadMethod(url.toString());\n        HttpClient httpClient = new HttpClient();\n        try {\n            httpClient.executeMethod(head);\n            Header[] headers = head.getResponseHeaders();\n            for (Header header : headers) {\n                System.out.println(header);\n            }\n            Header header = head.getResponseHeader(\"Content-Length\");\n            Object contentLength = header.getValue();\n            Long fileLength = Long.parseLong(contentLength.toString());\n            System.out.println(length + \" : \" + fileLength);\n            GetMethod get = new GetMethod(url.toString());\n            httpClient.executeMethod(get);\n            InputStream ins = get.getResponseBodyAsStream();\n            FileOutputStream fos = new FileOutputStream(destinationFile);\n            IOUtils.copy(ins, fos);\n            System.out.println(\" DOWNLOADED FILE\");\n        } catch (HttpException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13368519",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void sendTemplate(String filename, TemplateValues values) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void sendTemplate(String filename, TemplateValues values) throws IOException {\n        Checker.checkEmpty(filename, \"filename\");\n        Checker.checkNull(values, \"values\");\n        URL url = _getFile(filename);\n        boolean writeSpaces = Context.getRootContext().getRunMode() == RUN_MODE.DEV ? true : false;\n        Template t = new Template(url.openStream(), writeSpaces);\n        try {\n            t.write(getWriter(), values);\n        } catch (ErrorListException ele) {\n            Context.getRootContext().getLogger().error(ele);\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13368520",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void sendTextFile(String filename) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void sendTextFile(String filename) throws IOException {\n        Checker.checkEmpty(filename, \"filename\");\n        URL url = _getFile(filename);\n        PrintWriter out = getWriter();\n        Streams.copy(new InputStreamReader(url.openStream()), out);\n        out.close();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13368521",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void sendBinaryFile(String filename) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void sendBinaryFile(String filename) throws IOException {\n        Checker.checkEmpty(filename, \"filename\");\n        URL url = _getFile(filename);\n        OutputStream out = getOutputStream();\n        Streams.copy(url.openStream(), out);\n        out.close();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13376846",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private String hashPassword(String password) {\n        if (password != null && password.trim().length() > 0) {\n            try {\n                MessageDigest md5 = MessageDigest.getInstance(\"MD5\");\n                md5.update(password.trim().getBytes());\n                BigInteger hash = new BigInteger(1, md5.digest());\n                return hash.toString(16);\n            } catch (NoSuchAlgorithmException nsae) {\n            }\n        }\n        return null;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13383602",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private String getClassname(Bundle bundle) {\n        URL urlEntry = bundle.getEntry(\"jdbcBundleInfo.xml\");\n        InputStream in = null;\n        try {\n            in = urlEntry.openStream();\n            try {\n                StringBuilder sb = new StringBuilder();\n                BufferedReader reader = new BufferedReader(new InputStreamReader(in));\n                String line;\n                while ((line = reader.readLine()) != null) {\n                    if (!line.startsWith(\"<!DOCTYPE\")) {\n                        sb.append(line);\n                    }\n                }\n                SAXBuilder builder = new SAXBuilder(false);\n                Document doc = builder.build(new StringReader(sb.toString()));\n                Element eRoot = doc.getRootElement();\n                if (\"jdbcBundleInfo\".equals(eRoot.getName())) {\n                    Attribute atri = eRoot.getAttribute(\"className\");\n                    if (atri != null) {\n                        return atri.getValue();\n                    }\n                }\n            } catch (JDOMException e) {\n            }\n        } catch (IOException e) {\n        } finally {\n            if (in != null) {\n                try {\n                    in.close();\n                } catch (IOException e) {\n                }\n            }\n        }\n        return null;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13387011",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void updateViewerContent(ScrollingGraphicalViewer viewer) {\n        BioPAXGraph graph = (BioPAXGraph) viewer.getContents().getModel();\n        if (!graph.isMechanistic()) return;\n        Map<String, Color> highlightMap = new HashMap<String, Color>();\n        for (Object o : graph.getNodes()) {\n            IBioPAXNode node = (IBioPAXNode) o;\n            if (node.isHighlighted()) {\n                highlightMap.put(node.getIDHash(), node.getHighlightColor());\n            }\n        }\n        for (Object o : graph.getEdges()) {\n            IBioPAXEdge edge = (IBioPAXEdge) o;\n            if (edge.isHighlighted()) {\n                highlightMap.put(edge.getIDHash(), edge.getHighlightColor());\n            }\n        }\n        HighlightLayer hLayer = (HighlightLayer) ((ChsScalableRootEditPart) viewer.getRootEditPart()).getLayer(HighlightLayer.HIGHLIGHT_LAYER);\n        hLayer.removeAll();\n        hLayer.highlighted.clear();\n        viewer.deselectAll();\n        graph.recordLayout();\n        PathwayHolder p = graph.getPathway();\n        if (withContent != null) {\n            p.updateContentWith(withContent);\n        }\n        BioPAXGraph newGraph = main.getRootGraph().excise(p);\n        newGraph.setAsRoot();\n        viewer.setContents(newGraph);\n        boolean layedout = newGraph.fetchLayout();\n        if (!layedout) {\n            new CoSELayoutAction(main).run();\n        }\n        viewer.deselectAll();\n        GraphAnimation.run(viewer);\n        for (Object o : newGraph.getNodes()) {\n            IBioPAXNode node = (IBioPAXNode) o;\n            if (highlightMap.containsKey(node.getIDHash())) {\n                node.setHighlightColor(highlightMap.get(node.getIDHash()));\n                node.setHighlight(true);\n            }\n        }\n        for (Object o : newGraph.getEdges()) {\n            IBioPAXEdge edge = (IBioPAXEdge) o;\n            if (highlightMap.containsKey(edge.getIDHash())) {\n                edge.setHighlightColor(highlightMap.get(edge.getIDHash()));\n                edge.setHighlight(true);\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13395222",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        MessageDigest md;\n        md = MessageDigest.getInstance(\"SHA-1\");\n        byte[] sha1hash = new byte[40];\n        md.update(text.getBytes(\"iso-8859-1\"), 0, text.length());\n        sha1hash = md.digest();\n        return convertToHex(sha1hash);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13395834",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "TreeMap<Integer, Integer> initProperties(URL propurl) {\n        String zoneFileName = null;\n        String costFileName = null;\n        String homesFileName = null;\n        String jobsFileName = null;\n        Properties props = new Properties();\n        try {\n            props.loadFromXML(propurl.openStream());\n            zoneFileName = props.getProperty(\"zoneFileName\");\n            costFileName = props.getProperty(\"costFileName\");\n            homesFileName = props.getProperty(\"homesFileName\");\n            jobsFileName = props.getProperty(\"jobsFileName\");\n            maxiter = Integer.parseInt(props.getProperty(\"maxiter\"));\n            mu = Double.parseDouble(props.getProperty(\"mu\"));\n            theta = Double.parseDouble(props.getProperty(\"theta\"));\n            threshold1 = Double.parseDouble(props.getProperty(\"threshold1\"));\n            threshold2 = Double.parseDouble(props.getProperty(\"threshold2\"));\n            verbose = Boolean.parseBoolean(props.getProperty(\"verbose\"));\n        } catch (Exception xc) {\n            xc.printStackTrace();\n            System.exit(-1);\n        }\n        HashSet<Integer> zoneids = SomeIO.readZoneIDs(zoneFileName);\n        numZ = zoneids.size();\n        if (verbose) {\n            System.out.println(\"Data:\");\n            System.out.println(\" . #zones:\" + numZ);\n        }\n        int idx = 0;\n        TreeMap<Integer, Integer> zonemap = new TreeMap<Integer, Integer>();\n        for (Integer id : zoneids) zonemap.put(id, idx++);\n        cij = SomeIO.readMatrix(costFileName, numZ, numZ);\n        for (int i = 0; i < numZ; i++) {\n            double mincij = Double.POSITIVE_INFINITY;\n            for (int j = 0; j < numZ; j++) {\n                double v = cij.get(i, j);\n                if ((v < mincij) && (v > 0.0)) mincij = v;\n            }\n            if (cij.get(i, i) == 0.0) cij.set(i, i, mincij);\n        }\n        setupECij();\n        double meanCost = 0.0;\n        double stdCost = 0.0;\n        for (int i = 0; i < numZ; i++) {\n            for (int j = 0; j < numZ; j++) {\n                double v = cij.get(i, j);\n                meanCost += v;\n                stdCost += v * v;\n            }\n        }\n        meanCost = meanCost / (numZ * numZ);\n        stdCost = stdCost / (numZ * numZ) - meanCost * meanCost;\n        if (verbose) System.out.println(\" . Travel costs  mean=\" + meanCost + \" std.dev.= \" + Math.sqrt(stdCost));\n        P = SomeIO.readZoneAttribute(numZ, homesFileName, zonemap);\n        J = SomeIO.readZoneAttribute(numZ, jobsFileName, zonemap);\n        double maxpj = 0.0;\n        double sp = 0.0;\n        double sj = 0.0;\n        for (int i = 0; i < numZ; i++) {\n            sp += P[i];\n            sj += J[i];\n            if (P[i] > maxpj) maxpj = P[i];\n            if (J[i] > maxpj) maxpj = J[i];\n        }\n        if (Math.abs(sp - sj) > 1.0) {\n            System.err.println(\"Error: #jobs(\" + sj + \")!= #homes(\" + sp + \")\");\n            System.exit(-1);\n        }\n        N = sp;\n        if (verbose) System.out.println(\" . Trip tables: #jobs=#homes= \" + N);\n        return zonemap;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13396233",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void copyFile(File in, File out) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void copyFile(File in, File out) throws IOException {\n        FileChannel inChannel = new FileInputStream(in).getChannel();\n        FileChannel outChannel = new FileOutputStream(out).getChannel();\n        try {\n            inChannel.transferTo(0, inChannel.size(), outChannel);\n        } catch (IOException e) {\n            throw e;\n        } finally {\n            if (inChannel != null) inChannel.close();\n            if (outChannel != null) outChannel.close();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13405484",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic boolean send(String number, String message) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public boolean send(String number, String message) throws IOException {\n        init();\n        message = message.substring(0, Math.min(MAX_PAYLOAD, message.length()));\n        message = message.replace('\\r', ' ');\n        message = message.replace('\\n', ' ');\n        ActualFormParameters params = new ActualFormParameters();\n        String strippedNumber = strip(number);\n        ActualFormParameter number1Param;\n        ActualFormParameter number2Param;\n        if (strippedNumber.startsWith(\"00\")) strippedNumber = \"+\" + strippedNumber.substring(2); else if (strippedNumber.startsWith(\"0\")) strippedNumber = \"+49\" + strippedNumber.substring(1);\n        number1Param = new ActualFormParameter(number1InputElement.getName(), strippedNumber.substring(0, 6));\n        number2Param = new ActualFormParameter(number2InputElement.getName(), strippedNumber.substring(6));\n        params.add(number1Param);\n        params.add(number2Param);\n        ActualFormParameter messageParam = new ActualFormParameter(messageInputElement.getName(), message);\n        params.add(messageParam);\n        ActualFormParameter letterCountParam = new ActualFormParameter(letterCountInputElement.getName(), \"\" + (MAX_PAYLOAD - message.length()));\n        params.add(letterCountParam);\n        form.addDefaultParametersTo(params);\n        Reader r = form.submitForm(params, form.getNetscapeRequestProperties());\n        String result = getStringFromReader(r);\n        String pattern = \"<meta http-equiv = \\\"refresh\\\" content=\\\"1; url=\";\n        int patternIndex = result.indexOf(pattern);\n        if (patternIndex < 0) return false;\n        int end = result.lastIndexOf(\"\\\">\");\n        if (end < 0) return false;\n        String url = result.substring(patternIndex + pattern.length(), end);\n        result = getStringFromReader(new InputStreamReader(new URL(url).openStream()));\n        return result.indexOf(\"wurde erfolgreich verschickt\") >= 0;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13414771",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String encriptPassword(String passwd) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Digester(forField = \"password\")\n    public static String encriptPassword(String passwd) {\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            md.update(passwd.getBytes());\n            BigInteger hash = new BigInteger(1, md.digest());\n            return hash.toString(16);\n        } catch (Exception e) {\n            return null;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13420786",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static void unzip(File zipInFile, File outputDir) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static void unzip(File zipInFile, File outputDir) throws Exception {\n        Enumeration<? extends ZipEntry> entries;\n        ZipFile zipFile = new ZipFile(zipInFile);\n        ZipInputStream zipInputStream = new ZipInputStream(new FileInputStream(zipInFile));\n        ZipEntry entry = (ZipEntry) zipInputStream.getNextEntry();\n        File curOutDir = outputDir;\n        while (entry != null) {\n            if (entry.isDirectory()) {\n                curOutDir = new File(curOutDir, entry.getName());\n                curOutDir.mkdirs();\n                continue;\n            }\n            File outFile = new File(curOutDir, entry.getName());\n            File tempDir = outFile.getParentFile();\n            if (!tempDir.exists()) tempDir.mkdirs();\n            outFile.createNewFile();\n            BufferedOutputStream outstream = new BufferedOutputStream(new FileOutputStream(outFile));\n            int n;\n            byte[] buf = new byte[1024];\n            while ((n = zipInputStream.read(buf, 0, 1024)) > -1) outstream.write(buf, 0, n);\n            outstream.flush();\n            outstream.close();\n            zipInputStream.closeEntry();\n            entry = zipInputStream.getNextEntry();\n        }\n        zipInputStream.close();\n        zipFile.close();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13421720",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String download(String address, String outputFolder) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String download(String address, String outputFolder) {\n        URL url = null;\n        String fileName = \"\";\n        try {\n            url = new URL(address);\n            System.err.println(\"Indirizzo valido!\");\n        } catch (MalformedURLException ex) {\n            System.err.println(\"Indirizzo non valido!\");\n        }\n        try {\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n            connection.setRequestProperty(\"Range\", \"bytes=0-\");\n            connection.connect();\n            int contentLength = connection.getContentLength();\n            if (contentLength < 1) {\n                System.err.println(\"Errore, c'e' qualcosa che non va!\");\n                return \"\";\n            }\n            fileName = url.getFile();\n            fileName = fileName.substring(url.getFile().lastIndexOf('/') + 1);\n            RandomAccessFile file = new RandomAccessFile(outputFolder + fileName, \"rw\");\n            file.seek(0);\n            InputStream stream = connection.getInputStream();\n            byte[] buffer = new byte[1024];\n            while (true) {\n                int read = stream.read(buffer);\n                if (read == -1) {\n                    break;\n                }\n                file.write(buffer, 0, read);\n            }\n            file.close();\n        } catch (IOException ioe) {\n            System.err.println(\"I/O error!\");\n        }\n        return outputFolder + fileName;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13421722",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static long getFileSize(String address) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static long getFileSize(String address) {\n        URL url = null;\n        try {\n            url = new URL(address);\n            System.err.println(\"Indirizzo valido - \" + url.toString().substring(0, 10) + \"...\");\n        } catch (MalformedURLException ex) {\n            System.err.println(\"Indirizzo non valido!\");\n        }\n        try {\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n            connection.setRequestProperty(\"Range\", \"bytes=0-\");\n            connection.connect();\n            return connection.getContentLength();\n        } catch (IOException ioe) {\n            System.err.println(\"I/O error!\");\n            return 0;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13422842",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic EVECalcControllerImpl(EVECalcView gui) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public EVECalcControllerImpl(EVECalcView gui) {\n        this.view = gui;\n        properties = new Properties();\n        try {\n            InputStream resStream;\n            resStream = getClass().getResourceAsStream(REGION_PROPERTIES);\n            if (resStream == null) {\n                System.out.println(\"Loading for needed Properties files failed.\");\n                URL url = new URL(REGIONS_URL);\n                try {\n                    resStream = url.openStream();\n                    properties.load(resStream);\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            } else {\n                properties.load(resStream);\n            }\n        } catch (IOException e) {\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13422847",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void createTree(DefaultMutableTreeNode top) throws MalformedURLException, ParserConfigurationException, SAXException, IOException {\n        InputStream stream;\n        URL url = new URL(SHIPS_URL + view.getBaseurl());\n        try {\n            stream = url.openStream();\n        } catch (Exception e) {\n            stream = getClass().getResourceAsStream(\"ships.xml\");\n        }\n        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n        DocumentBuilder parser = factory.newDocumentBuilder();\n        Document doc = parser.parse(stream);\n        NodeList races = doc.getElementsByTagName(\"race\");\n        for (int i = 0; i < races.getLength(); i++) {\n            Element race = (Element) races.item(i);\n            top.add(buildRaceTree(race));\n        }\n        top.setUserObject(\"Ships\");\n        view.getShipTree().repaint();\n        view.getShipTree().expandRow(0);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_01342927",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static InputStream getResourceAsStream(String resourceName) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static InputStream getResourceAsStream(String resourceName) {\n        try {\n            URL url = getEmbeddedFileUrl(WS_SEP + resourceName);\n            if (url != null) {\n                return url.openStream();\n            }\n        } catch (MalformedURLException e) {\n            GdtAndroidPlugin.getLogger().logError(e, \"Failed to read stream '%s'\", resourceName);\n        } catch (IOException e) {\n            GdtAndroidPlugin.getLogger().logError(e, \"Failed to read stream '%s'\", resourceName);\n        }\n        return null;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13431536",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic int updateStatus(UserInfo userInfo, String status) throws Exception {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n    public int updateStatus(UserInfo userInfo, String status) throws Exception {\n        OAuthConsumer consumer = SnsConstant.getOAuthConsumer(SnsConstant.SOHU);\n        consumer.setTokenWithSecret(userInfo.getAccessToken(), userInfo.getAccessSecret());\n        try {\n            URL url = new URL(SnsConstant.SOHU_UPDATE_STATUS_URL);\n            HttpURLConnection request = (HttpURLConnection) url.openConnection();\n            request.setDoOutput(true);\n            request.setRequestMethod(\"POST\");\n            HttpParameters para = new HttpParameters();\n            para.put(\"status\", StringUtils.utf8Encode(status).replaceAll(\"\\\\+\", \"%20\"));\n            consumer.setAdditionalParameters(para);\n            consumer.sign(request);\n            OutputStream ot = request.getOutputStream();\n            ot.write((\"status=\" + URLEncoder.encode(status, \"utf-8\")).replaceAll(\"\\\\+\", \"%20\").getBytes());\n            ot.flush();\n            ot.close();\n            System.out.println(\"Sending request...\");\n            request.connect();\n            System.out.println(\"Response: \" + request.getResponseCode() + \" \" + request.getResponseMessage());\n            BufferedReader reader = new BufferedReader(new InputStreamReader(request.getInputStream()));\n            String b = null;\n            while ((b = reader.readLine()) != null) {\n                System.out.println(b);\n            }\n            return SnsConstant.SOHU_UPDATE_STATUS_SUCC_WHAT;\n        } catch (Exception e) {\n            SnsConstant.SOHU_OPERATOR_FAIL_REASON = processException(e.getMessage());\n            return SnsConstant.SOHU_UPDATE_STATUS_FAIL_WHAT;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13431537",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic int updateStatus(UserInfo userInfo, String status, String picturePath) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "@Override\n    public int updateStatus(UserInfo userInfo, String status, String picturePath) {\n        HttpClient client = new DefaultHttpClient();\n        HttpPost post = new HttpPost(SnsConstant.SOHU_UPDATE_STATUS_URL);\n        List<NameValuePair> parameters = new ArrayList<NameValuePair>();\n        parameters.add(new BasicNameValuePair(\"parameter1\", \"parameterValue1\"));\n        parameters.add(new BasicNameValuePair(\"parameter2\", \"parameterValue2\"));\n        try {\n            post.setEntity(new UrlEncodedFormEntity(parameters));\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n        try {\n            HttpResponse response = client.execute(post);\n        } catch (ClientProtocolException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return 0;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13433127",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void save(File selectedFile) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void save(File selectedFile) throws IOException {\n        if (storeEntriesInFiles) {\n            boolean moved = false;\n            for (int i = 0; i < tempFiles.size(); i++) {\n                File newFile = new File(selectedFile.getAbsolutePath() + \"_\" + Integer.toString(i) + \".zettmp\");\n                moved = tempFiles.get(i).renameTo(newFile);\n                if (!moved) {\n                    BufferedReader read = new BufferedReader(new FileReader(tempFiles.get(i)));\n                    PrintWriter write = new PrintWriter(newFile);\n                    String s;\n                    while ((s = read.readLine()) != null) write.print(s);\n                    read.close();\n                    write.flush();\n                    write.close();\n                    tempFiles.get(i).delete();\n                }\n                tempFiles.set(i, newFile);\n            }\n        }\n        GZIPOutputStream output = new GZIPOutputStream(new BufferedOutputStream(new FileOutputStream(selectedFile)));\n        XStream xml_convert = new XStream();\n        xml_convert.setMode(XStream.ID_REFERENCES);\n        xml_convert.toXML(this, output);\n        output.flush();\n        output.close();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13433285",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static String md5(final String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static String md5(final String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        byte[] md5hash = new byte[FOUR_BYTES];\n        md.update(text.getBytes(\"iso-8859-1\"), 0, text.length());\n        md5hash = md.digest();\n        return convertToHex(md5hash);\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13435154",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic Object run() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "static byte[] getSystemEntropy() {\n        byte[] ba;\n        final MessageDigest md;\n        try {\n            md = MessageDigest.getInstance(\"SHA\");\n        } catch (NoSuchAlgorithmException nsae) {\n            throw new InternalError(\"internal error: SHA-1 not available.\");\n        }\n        byte b = (byte) System.currentTimeMillis();\n        md.update(b);\n        java.security.AccessController.doPrivileged(new java.security.PrivilegedAction() {\n\n            public Object run() {\n                try {\n                    String s;\n                    Properties p = System.getProperties();\n                    Enumeration e = p.propertyNames();\n                    while (e.hasMoreElements()) {\n                        s = (String) e.nextElement();\n                        md.update(s.getBytes());\n                        md.update(p.getProperty(s).getBytes());\n                    }\n                    md.update(InetAddress.getLocalHost().toString().getBytes());\n                    File f = new File(p.getProperty(\"java.io.tmpdir\"));\n                    String[] sa = f.list();\n                    for (int i = 0; i < sa.length; i++) md.update(sa[i].getBytes());\n                } catch (Exception ex) {\n                    md.update((byte) ex.hashCode());\n                }\n                Runtime rt = Runtime.getRuntime();\n                byte[] memBytes = longToByteArray(rt.totalMemory());\n                md.update(memBytes, 0, memBytes.length);\n                memBytes = longToByteArray(rt.freeMemory());\n                md.update(memBytes, 0, memBytes.length);\n                return null;\n            }\n        });\n        return md.digest();\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13438575",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void onMessage(Message message) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private static void serveHTML() throws Exception {\n        Bus bus = BusFactory.getDefaultBus();\n        DestinationFactoryManager dfm = bus.getExtension(DestinationFactoryManager.class);\n        DestinationFactory df = dfm.getDestinationFactory(\"http://cxf.apache.org/transports/http/configuration\");\n        EndpointInfo ei = new EndpointInfo();\n        ei.setAddress(\"http://localhost:8080/test.html\");\n        Destination d = df.getDestination(ei);\n        d.setMessageObserver(new MessageObserver() {\n\n            public void onMessage(Message message) {\n                try {\n                    ExchangeImpl ex = new ExchangeImpl();\n                    ex.setInMessage(message);\n                    Conduit backChannel = message.getDestination().getBackChannel(message, null, null);\n                    MessageImpl res = new MessageImpl();\n                    res.put(Message.CONTENT_TYPE, \"text/html\");\n                    backChannel.prepare(res);\n                    OutputStream out = res.getContent(OutputStream.class);\n                    FileInputStream is = new FileInputStream(\"test.html\");\n                    IOUtils.copy(is, out, 2048);\n                    out.flush();\n                    out.close();\n                    is.close();\n                    backChannel.close(res);\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13438576",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void onMessage(Message message) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void onMessage(Message message) {\n                try {\n                    ExchangeImpl ex = new ExchangeImpl();\n                    ex.setInMessage(message);\n                    Conduit backChannel = message.getDestination().getBackChannel(message, null, null);\n                    MessageImpl res = new MessageImpl();\n                    res.put(Message.CONTENT_TYPE, \"text/html\");\n                    backChannel.prepare(res);\n                    OutputStream out = res.getContent(OutputStream.class);\n                    FileInputStream is = new FileInputStream(\"test.html\");\n                    IOUtils.copy(is, out, 2048);\n                    out.flush();\n                    out.close();\n                    is.close();\n                    backChannel.close(res);\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13439950",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic String readRemoteFile() throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public String readRemoteFile() throws IOException {\n        String response = \"\";\n        boolean eof = false;\n        URL url = new URL(StaticData.remoteFile);\n        InputStream is = url.openStream();\n        BufferedReader br = new BufferedReader(new InputStreamReader(is));\n        String s;\n        s = br.readLine();\n        response = s;\n        while (!eof) {\n            try {\n                s = br.readLine();\n                if (s == null) {\n                    eof = true;\n                    br.close();\n                } else response += s;\n            } catch (EOFException eo) {\n                eof = true;\n            } catch (IOException e) {\n                System.out.println(\"IO Error : \" + e.getMessage());\n            }\n        }\n        return response;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13447231",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void copy(String pathFileIn, String pathFileOut) {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void copy(String pathFileIn, String pathFileOut) {\n        try {\n            File inputFile = new File(pathFileIn);\n            File outputFile = new File(pathFileOut);\n            FileReader in = new FileReader(inputFile);\n            File outDir = new File(DirOut);\n            if (!outDir.exists()) outDir.mkdirs();\n            FileWriter out = new FileWriter(outputFile);\n            int c;\n            while ((c = in.read()) != -1) out.write(c);\n            in.close();\n            out.close();\n            this.printColumn(inputFile.getName(), outputFile.getPath());\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13450574",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private void getRandomGUID(boolean secure) {\n        MessageDigest md5 = null;\n        StringBuffer sbValueBeforeMD5 = new StringBuffer(128);\n        try {\n            md5 = MessageDigest.getInstance(\"MD5\");\n        } catch (NoSuchAlgorithmException e) {\n        }\n        try {\n            long time = System.currentTimeMillis();\n            long rand = 0;\n            if (secure) {\n                rand = mySecureRand.nextLong();\n            } else {\n                rand = myRand.nextLong();\n            }\n            sbValueBeforeMD5.append(s_id);\n            sbValueBeforeMD5.append(\":\");\n            sbValueBeforeMD5.append(Long.toString(time));\n            sbValueBeforeMD5.append(\":\");\n            sbValueBeforeMD5.append(Long.toString(rand));\n            valueBeforeMD5 = sbValueBeforeMD5.toString();\n            md5.update(valueBeforeMD5.getBytes());\n            byte[] array = md5.digest();\n            StringBuffer sb = new StringBuffer(32);\n            for (int j = 0; j < array.length; ++j) {\n                int b = array[j] & TWO_BYTES;\n                if (b < PAD_BELOW) sb.append('0');\n                sb.append(Integer.toHexString(b));\n            }\n            valueAfterMD5 = sb.toString();\n        } catch (Exception e) {\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13450633",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void setUp() {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void setUp() {\n        try {\n            String excelFile = \"result\" + java.io.File.separator + \"input\" + java.io.File.separator + \"conextech.xls\";\n            java.io.File f1 = new java.io.File(excelFile);\n            URL url = new URL(\"file:test/result/input/checksun.xls\");\n            InputStream is = url.openStream();\n            workbook = Workbook.getWorkbook(is);\n        } catch (MalformedURLException urlEx) {\n            urlEx.printStackTrace();\n            fail();\n        } catch (IOException ioEx) {\n            ioEx.printStackTrace();\n            fail();\n        } catch (BiffException biffEx) {\n            biffEx.printStackTrace();\n            fail();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13456570",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void removeJarFiles() throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void removeJarFiles() throws IOException {\n        HashSet<GridNode> nodes = (HashSet) batchTask.returnNodeCollection();\n        Iterator<GridNode> ic = nodes.iterator();\n        InetAddress addLocal = InetAddress.getLocalHost();\n        String hostnameLocal = addLocal.getHostName();\n        while (ic.hasNext()) {\n            GridNode node = ic.next();\n            String address = node.getPhysicalAddress();\n            InetAddress addr = InetAddress.getByName(address);\n            byte[] rawAddr = addr.getAddress();\n            Map<String, String> attributes = node.getAttributes();\n            InetAddress hostname = InetAddress.getByAddress(rawAddr);\n            if (hostname.getHostName().equals(hostnameLocal)) continue;\n            String gridPath = attributes.get(\"GRIDGAIN_HOME\");\n            FTPClient ftp = new FTPClient();\n            try {\n                String[] usernamePass = inputNodes.get(hostname.getHostName());\n                ftp.connect(hostname);\n                ftp.login(usernamePass[0], usernamePass[1]);\n                int reply = ftp.getReplyCode();\n                if (!FTPReply.isPositiveCompletion(reply)) {\n                    ftp.disconnect();\n                    System.err.println(\"FTP server refused connection.\");\n                    continue;\n                }\n                ftp.login(usernamePass[0], usernamePass[1]);\n                String directory = gridPath + \"/libs/ext/\";\n                ftp.changeWorkingDirectory(directory);\n                FTPFile[] fs = ftp.listFiles();\n                for (FTPFile f : fs) {\n                    if (f.isDirectory()) continue;\n                    System.out.println(f.getName());\n                    ftp.deleteFile(f.getName());\n                }\n                ftp.sendCommand(\"rm *\");\n                ftp.logout();\n                ftp.disconnect();\n            } catch (Exception e) {\n                MessageCenter.getMessageCenter(BatchMainSetup.class).error(\"Problems with the FTP connection.\" + \"A file has not been succesfully transfered\", e);\n                e.printStackTrace();\n            }\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13456572",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic void transferOutputFiles() throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public void transferOutputFiles() throws IOException {\n        HashSet<GridNode> nodes = (HashSet) batchTask.returnNodeCollection();\n        Iterator<GridNode> ic = nodes.iterator();\n        InetAddress addLocal = InetAddress.getLocalHost();\n        String hostnameLocal = addLocal.getHostName();\n        while (ic.hasNext()) {\n            GridNode node = ic.next();\n            String address = node.getPhysicalAddress();\n            InetAddress addr = InetAddress.getByName(address);\n            byte[] rawAddr = addr.getAddress();\n            Map<String, String> attributes = node.getAttributes();\n            InetAddress hostname = InetAddress.getByAddress(rawAddr);\n            if (hostname.getHostName().equals(hostnameLocal)) continue;\n            String[] usernamePass = inputNodes.get(hostname.getHostName());\n            String gridPath = attributes.get(\"GRIDGAIN_HOME\");\n            FTPClient ftp = new FTPClient();\n            ftp.connect(hostname);\n            ftp.login(usernamePass[0], usernamePass[1]);\n            int reply = ftp.getReplyCode();\n            if (!FTPReply.isPositiveCompletion(reply)) {\n                ftp.disconnect();\n                System.err.println(\"FTP server refused connection.\");\n                continue;\n            }\n            ftp.changeWorkingDirectory(gridPath + \"/bin\");\n            ftp.setFileType(FTPClient.COMPRESSED_TRANSFER_MODE);\n            ftp.setRemoteVerificationEnabled(false);\n            ftp.setFileType(FTPClient.ASCII_FILE_TYPE);\n            FTPFile[] fs = ftp.listFiles();\n            for (FTPFile f : fs) {\n                if (f.isDirectory()) continue;\n                String fileName = f.getName();\n                if (!fileName.endsWith(\".txt\")) continue;\n                System.out.println(f.getName());\n                FileOutputStream out = new FileOutputStream(\"../repast.simphony.distributedBatch/\" + \"remoteOutput/\" + f.getName());\n                try {\n                    ftp.retrieveFile(fileName, out);\n                } catch (Exception e) {\n                    continue;\n                } finally {\n                    if (out != null) out.close();\n                }\n            }\n            ftp.logout();\n            ftp.disconnect();\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13456795",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private boolean processar(int iCodProd) {\n        String sSQL = null;\n        String sSQLCompra = null;\n        String sSQLInventario = null;\n        String sSQLVenda = null;\n        String sSQLRMA = null;\n        String sSQLOP = null;\n        String sSQLOP_SP = null;\n        String sWhere = null;\n        String sProd = null;\n        String sWhereCompra = null;\n        String sWhereInventario = null;\n        String sWhereVenda = null;\n        String sWhereRMA = null;\n        String sWhereOP = null;\n        String sWhereOP_SP = null;\n        PreparedStatement ps = null;\n        ResultSet rs = null;\n        boolean bOK = false;\n        try {\n            try {\n                sWhere = \"\";\n                sProd = \"\";\n                if (cbTudo.getVlrString().equals(\"S\")) sProd = \"[\" + iCodProd + \"] \";\n                if (!(txtDataini.getVlrString().equals(\"\"))) {\n                    sWhere = \" AND DTMOVPROD >= '\" + Funcoes.dateToStrDB(txtDataini.getVlrDate()) + \"'\";\n                }\n                sSQL = \"DELETE FROM EQMOVPROD WHERE \" + \"CODEMP=? AND CODPROD=?\" + sWhere;\n                state(sProd + \"Limpando movimenta\ufffd\ufffdes desatualizadas...\");\n                ps = con.prepareStatement(sSQL);\n                ps.setInt(1, Aplicativo.iCodEmp);\n                ps.setInt(2, iCodProd);\n                ps.executeUpdate();\n                ps.close();\n                if ((txtDataini.getVlrString().equals(\"\"))) {\n                    sSQL = \"UPDATE EQPRODUTO SET SLDPROD=0 WHERE \" + \"CODEMP=? AND CODPROD=?\";\n                    ps = con.prepareStatement(sSQL);\n                    ps.setInt(1, Aplicativo.iCodEmp);\n                    ps.setInt(2, iCodProd);\n                    ps.executeUpdate();\n                    ps.close();\n                    state(sProd + \"Limpando saldos...\");\n                    sSQL = \"UPDATE EQSALDOPROD SET SLDPROD=0 WHERE CODEMP=? AND CODPROD=?\";\n                    ps = con.prepareStatement(sSQL);\n                    ps.setInt(1, Aplicativo.iCodEmp);\n                    ps.setInt(2, iCodProd);\n                    ps.executeUpdate();\n                    ps.close();\n                    state(sProd + \"Limpando saldos...\");\n                }\n                bOK = true;\n            } catch (SQLException err) {\n                Funcoes.mensagemErro(null, \"Erro ao limpar estoques!\\n\" + err.getMessage(), true, con, err);\n            }\n            if (bOK) {\n                bOK = false;\n                if (!txtDataini.getVlrString().equals(\"\")) {\n                    sWhereCompra = \" AND C.DTENTCOMPRA >= '\" + Funcoes.dateToStrDB(txtDataini.getVlrDate()) + \"'\";\n                    sWhereInventario = \" AND I.DATAINVP >= '\" + Funcoes.dateToStrDB(txtDataini.getVlrDate()) + \"'\";\n                    sWhereVenda = \" AND V.DTEMITVENDA >= '\" + Funcoes.dateToStrDB(txtDataini.getVlrDate()) + \"'\";\n                    sWhereRMA = \" AND RMA.DTAEXPRMA >= '\" + Funcoes.dateToStrDB(txtDataini.getVlrDate()) + \"'\";\n                    sWhereOP = \" AND O.DTFABROP >= '\" + Funcoes.dateToStrDB(txtDataini.getVlrDate()) + \"'\";\n                    sWhereOP_SP = \" AND O.DTSUBPROD >= '\" + Funcoes.dateToStrDB(txtDataini.getVlrDate()) + \"'\";\n                } else {\n                    sWhereCompra = \"\";\n                    sWhereInventario = \"\";\n                    sWhereVenda = \"\";\n                    sWhereRMA = \"\";\n                    sWhereOP = \"\";\n                    sWhereOP_SP = \"\";\n                }\n                sSQLInventario = \"SELECT 'A' TIPOPROC, I.CODEMPPD, I.CODFILIALPD, I.CODPROD,\" + \"I.CODEMPLE, I.CODFILIALLE, I.CODLOTE,\" + \"I.CODEMPTM, I.CODFILIALTM, I.CODTIPOMOV,\" + \"I.CODEMP, I.CODFILIAL, CAST(NULL AS CHAR(1)) TIPOVENDA, \" + \"I.CODINVPROD CODMASTER, I.CODINVPROD CODITEM, \" + \"CAST(NULL AS INTEGER) CODEMPNT, CAST(NULL AS SMALLINT) CODFILIALNT ,CAST(NULL AS CHAR(4)) CODNAT,\" + \"I.DATAINVP DTPROC, I.CODINVPROD DOCPROC,'N' FLAG,\" + \"I.QTDINVP QTDPROC, I.PRECOINVP CUSTOPROC, \" + \"I.CODEMPAX, I.CODFILIALAX, I.CODALMOX, CAST(NULL AS SMALLINT) as seqent, CAST(NULL AS SMALLINT) as seqsubprod  \" + \"FROM EQINVPROD I \" + \"WHERE I.CODEMP=? AND I.CODPROD = ?\" + sWhereInventario;\n                sSQLCompra = \"SELECT 'C' TIPOPROC, IC.CODEMPPD, IC.CODFILIALPD, IC.CODPROD,\" + \"IC.CODEMPLE, IC.CODFILIALLE, IC.CODLOTE,\" + \"C.CODEMPTM, C.CODFILIALTM, C.CODTIPOMOV,\" + \"C.CODEMP, C.CODFILIAL, CAST(NULL AS CHAR(1)) TIPOVENDA, \" + \"C.CODCOMPRA CODMASTER, IC.CODITCOMPRA CODITEM,\" + \"IC.CODEMPNT, IC.CODFILIALNT, IC.CODNAT, \" + \"C.DTENTCOMPRA DTPROC, C.DOCCOMPRA DOCPROC, C.FLAG,\" + \"IC.QTDITCOMPRA QTDPROC, IC.CUSTOITCOMPRA CUSTOPROC, \" + \"IC.CODEMPAX, IC.CODFILIALAX, IC.CODALMOX, CAST(NULL AS SMALLINT) as seqent, CAST(NULL AS SMALLINT) as seqsubprod \" + \"FROM CPCOMPRA C,CPITCOMPRA IC \" + \"WHERE IC.CODCOMPRA=C.CODCOMPRA AND \" + \"IC.CODEMP=C.CODEMP AND IC.CODFILIAL=C.CODFILIAL AND IC.QTDITCOMPRA > 0 AND \" + \"C.CODEMP=? AND IC.CODPROD = ?\" + sWhereCompra;\n                sSQLOP = \"SELECT 'O' TIPOPROC, O.CODEMPPD, O.CODFILIALPD, O.CODPROD,\" + \"O.CODEMPLE, O.CODFILIALLE, O.CODLOTE,\" + \"O.CODEMPTM, O.CODFILIALTM, O.CODTIPOMOV,\" + \"O.CODEMP, O.CODFILIAL, CAST(NULL AS CHAR(1)) TIPOVENDA ,\" + \"O.CODOP CODMASTER, CAST(O.SEQOP AS INTEGER) CODITEM,\" + \"CAST(NULL AS INTEGER) CODEMPNT, CAST(NULL AS SMALLINT) CODFILIALNT, \" + \"CAST(NULL AS CHAR(4)) CODNAT, \" + \"coalesce(oe.dtent,O.DTFABROP) DTPROC, \" + \"O.CODOP DOCPROC, 'N' FLAG, \" + \"coalesce(oe.qtdent,O.QTDFINALPRODOP) QTDPROC, \" + \"( SELECT SUM(PD.CUSTOMPMPROD) FROM PPITOP IT, EQPRODUTO PD \" + \"WHERE IT.CODEMP=O.CODEMP AND IT.CODFILIAL=O.CODFILIAL AND \" + \"IT.CODOP=O.CODOP AND IT.SEQOP=O.SEQOP AND \" + \"PD.CODEMP=IT.CODEMPPD AND PD.CODFILIAL=IT.CODFILIALPD AND \" + \"PD.CODPROD=IT.CODPROD) CUSTOPROC, \" + \"O.CODEMPAX, O.CODFILIALAX, O.CODALMOX, oe.seqent, CAST(NULL AS SMALLINT) as seqsubprod \" + \"FROM PPOP O \" + \" left outer join ppopentrada oe on oe.codemp=o.codemp and oe.codfilial=o.codfilial and oe.codop=o.codop and oe.seqop=o.seqop \" + \"WHERE O.QTDFINALPRODOP > 0 AND \" + \"O.CODEMP=? AND O.CODPROD = ? \" + sWhereOP;\n                sSQLOP_SP = \"SELECT 'S' TIPOPROC, O.CODEMPPD, O.CODFILIALPD, O.CODPROD,\" + \"O.CODEMPLE, O.CODFILIALLE, O.CODLOTE,\" + \"O.CODEMPTM, O.CODFILIALTM, O.CODTIPOMOV,\" + \"O.CODEMP, O.CODFILIAL, CAST(NULL AS CHAR(1)) TIPOVENDA ,\" + \"O.CODOP CODMASTER, CAST(O.SEQOP AS INTEGER) CODITEM,\" + \"CAST(NULL AS INTEGER) CODEMPNT, CAST(NULL AS SMALLINT) CODFILIALNT, \" + \"CAST(NULL AS CHAR(4)) CODNAT, \" + \"coalesce(o.dtsubprod,Op.DTFABROP) DTPROC, \" + \"O.CODOP DOCPROC, 'N' FLAG, \" + \"O.QTDITSP QTDPROC, \" + \"( SELECT PD.CUSTOMPMPROD FROM EQPRODUTO PD \" + \"WHERE PD.CODEMP=O.CODEMPPD AND PD.CODFILIAL=O.CODFILIALPD AND \" + \"PD.CODPROD=O.CODPROD) CUSTOPROC, \" + \"OP.CODEMPAX, OP.CODFILIALAX, OP.CODALMOX, CAST(NULL AS SMALLINT) as seqent, O.SEQSUBPROD \" + \"FROM PPOPSUBPROD O, PPOP OP \" + \"WHERE O.QTDITSP > 0 AND \" + \"O.CODEMP=OP.CODEMP and O.CODFILIAL=OP.CODFILIAL and O.CODOP=OP.CODOP and O.SEQOP=OP.SEQOP AND \" + \"O.CODEMP=? AND O.CODPROD = ?\" + sWhereOP_SP;\n                sSQLRMA = \"SELECT 'R' TIPOPROC, IT.CODEMPPD, IT.CODFILIALPD, IT.CODPROD, \" + \"IT.CODEMPLE, IT.CODFILIALLE, IT.CODLOTE, \" + \"RMA.CODEMPTM, RMA.CODFILIALTM, RMA.CODTIPOMOV, \" + \"RMA.CODEMP, RMA.CODFILIAL, CAST(NULL AS CHAR(1)) TIPOVENDA, \" + \"IT.CODRMA CODMASTER, CAST(IT.CODITRMA AS INTEGER) CODITEM, \" + \"CAST(NULL AS INTEGER) CODEMPNT, CAST(NULL AS SMALLINT) CODFILIALNT, \" + \"CAST(NULL AS CHAR(4)) CODNAT, \" + \"COALESCE(IT.DTAEXPITRMA,RMA.DTAREQRMA) DTPROC, \" + \"RMA.CODRMA DOCPROC, 'N' FLAG, \" + \"IT.QTDEXPITRMA QTDPROC, IT.PRECOITRMA CUSTOPROC,\" + \"IT.CODEMPAX, IT.CODFILIALAX, IT.CODALMOX, CAST(NULL AS SMALLINT) as seqent, CAST(NULL AS SMALLINT) as seqsubprod   \" + \"FROM EQRMA RMA ,EQITRMA IT \" + \"WHERE IT.CODRMA=RMA.CODRMA AND \" + \"IT.CODEMP=RMA.CODEMP AND IT.CODFILIAL=RMA.CODFILIAL AND \" + \"IT.QTDITRMA > 0 AND \" + \"RMA.CODEMP=? AND IT.CODPROD = ?\" + sWhereRMA;\n                sSQLVenda = \"SELECT 'V' TIPOPROC, IV.CODEMPPD, IV.CODFILIALPD, IV.CODPROD,\" + \"IV.CODEMPLE, IV.CODFILIALLE, IV.CODLOTE,\" + \"V.CODEMPTM, V.CODFILIALTM, V.CODTIPOMOV,\" + \"V.CODEMP, V.CODFILIAL, V.TIPOVENDA, \" + \"V.CODVENDA CODMASTER, IV.CODITVENDA CODITEM, \" + \"IV.CODEMPNT, IV.CODFILIALNT, IV.CODNAT, \" + \"V.DTEMITVENDA DTPROC, V.DOCVENDA DOCPROC, V.FLAG, \" + \"IV.QTDITVENDA QTDPROC, IV.VLRLIQITVENDA CUSTOPROC, \" + \"IV.CODEMPAX, IV.CODFILIALAX, IV.CODALMOX, CAST(NULL AS SMALLINT) as seqent, CAST(NULL AS SMALLINT) as seqsubprod   \" + \"FROM VDVENDA V ,VDITVENDA IV \" + \"WHERE IV.CODVENDA=V.CODVENDA AND IV.TIPOVENDA = V.TIPOVENDA AND \" + \"IV.CODEMP=V.CODEMP AND IV.CODFILIAL=V.CODFILIAL AND \" + \"IV.QTDITVENDA > 0 AND \" + \"V.CODEMP=? AND IV.CODPROD = ?\" + sWhereVenda;\n                try {\n                    state(sProd + \"Iniciando reconstru\ufffd\ufffdo...\");\n                    sSQL = sSQLInventario + \" UNION ALL \" + sSQLCompra + \" UNION ALL \" + sSQLOP + \" UNION ALL \" + sSQLOP_SP + \" UNION ALL \" + sSQLRMA + \" UNION ALL \" + sSQLVenda + \" ORDER BY 19,1,20\";\n                    System.out.println(sSQL);\n                    ps = con.prepareStatement(sSQL);\n                    ps.setInt(paramCons.CODEMPIV.ordinal(), Aplicativo.iCodEmp);\n                    ps.setInt(paramCons.CODPRODIV.ordinal(), iCodProd);\n                    ps.setInt(paramCons.CODEMPCP.ordinal(), Aplicativo.iCodEmp);\n                    ps.setInt(paramCons.CODPRODCP.ordinal(), iCodProd);\n                    ps.setInt(paramCons.CODEMPOP.ordinal(), Aplicativo.iCodEmp);\n                    ps.setInt(paramCons.CODPRODOP.ordinal(), iCodProd);\n                    ps.setInt(paramCons.CODEMPOPSP.ordinal(), Aplicativo.iCodEmp);\n                    ps.setInt(paramCons.CODPRODOPSP.ordinal(), iCodProd);\n                    ps.setInt(paramCons.CODEMPRM.ordinal(), Aplicativo.iCodEmp);\n                    ps.setInt(paramCons.CODPRODRM.ordinal(), iCodProd);\n                    ps.setInt(paramCons.CODEMPVD.ordinal(), Aplicativo.iCodEmp);\n                    ps.setInt(paramCons.CODPRODVD.ordinal(), iCodProd);\n                    rs = ps.executeQuery();\n                    bOK = true;\n                    while (rs.next() && bOK) {\n                        bOK = insereMov(rs, sProd);\n                    }\n                    rs.close();\n                    ps.close();\n                    state(sProd + \"Aguardando grava\ufffd\ufffdo final...\");\n                } catch (SQLException err) {\n                    bOK = false;\n                    err.printStackTrace();\n                    Funcoes.mensagemErro(null, \"Erro ao reconstruir base!\\n\" + err.getMessage(), true, con, err);\n                }\n            }\n            try {\n                if (bOK) {\n                    con.commit();\n                    state(sProd + \"Registros processados com sucesso!\");\n                } else {\n                    state(sProd + \"Registros antigos restaurados!\");\n                    con.rollback();\n                }\n            } catch (SQLException err) {\n                err.printStackTrace();\n                Funcoes.mensagemErro(null, \"Erro ao relizar procedimento!\\n\" + err.getMessage(), true, con, err);\n            }\n        } finally {\n            sSQL = null;\n            sSQLCompra = null;\n            sSQLInventario = null;\n            sSQLVenda = null;\n            sSQLRMA = null;\n            sWhere = null;\n            sProd = null;\n            sWhereCompra = null;\n            sWhereInventario = null;\n            sWhereVenda = null;\n            sWhereRMA = null;\n            rs = null;\n            ps = null;\n            bRunProcesso = false;\n            btProcessar.setEnabled(true);\n        }\n        return bOK;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13460183",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\n\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "private LoadReturnCode loadChild(Map<Key, ValueItem> map, String fileOrUrl, LoadReturnCode defaultResult) throws IOException {\n        try {\n            URL childurl = getAsUrl(fileOrUrl);\n            if (childurl == null) return defaultResult;\n            InputStream childStream = childurl.openStream();\n            fileOrUrl = childurl.toString();\n            LinkedProperties child = new LinkedProperties();\n            child.initFromParent(this);\n            child.setFilename(fileOrUrl);\n            int p = fileOrUrl.lastIndexOf('/');\n            setLoadPath((p < 0) ? null : fileOrUrl.substring(0, p));\n            Map<Key, ValueItem> childMap = new HashMap<Key, ValueItem>(map);\n            removeLocalKeys(childMap);\n            @SuppressWarnings(\"unused\") LoadReturnCode childresult = child.onLoad(childMap, childStream);\n            try {\n                if (childStream != null) childStream.close();\n            } catch (IOException ioex) {\n            }\n            childStream = null;\n            map.putAll(childMap);\n            return resolveMap(map);\n        } catch (IOException ioe) {\n            System.out.println(getFilename() + \": error loading childfile \" + fileOrUrl);\n            throw ioe;\n        }\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    },
    {
        "task_id": "CODE_13462484",
        "domain": "Computer Science",
        "task_type": "Java Function Implementation",
        "prompt": "Write a Java function that follows the function name and signature provided below.\n\n```java\npublic static GoogleResponse getElevation(String lat, String lon) throws IOException {\n    \"\"\" Implement the functionality as per the provided code. No specific description is available. \"\"\"\n```\n\nTest Cases:\n// No test cases provided in the input.\n// Please ensure the function adheres to the expected behavior as shown in the implementation.",
        "expected_answer": "public static GoogleResponse getElevation(String lat, String lon) throws IOException {\n        String url = \"http://maps.google.com/maps/api/elevation/xml?locations=\";\n        url = url + String.valueOf(lat);\n        url = url + \",\";\n        url = url + String.valueOf(lon);\n        url = url + \"&sensor=false\";\n        BufferedReader in = new BufferedReader(new InputStreamReader(new URL(url).openStream()));\n        String line;\n        GoogleResponse googleResponse = new GoogleResponse();\n        googleResponse.lat = Double.valueOf(lat);\n        googleResponse.lon = Double.valueOf(lon);\n        while ((line = in.readLine()) != null) {\n            line = line.trim();\n            if (line.startsWith(\"<status>\")) {\n                line = line.replace(\"<status>\", \"\");\n                line = line.replace(\"</status>\", \"\");\n                googleResponse.status = line;\n                if (!line.toLowerCase().equals(\"ok\")) return googleResponse;\n            } else if (line.startsWith(\"<elevation>\")) {\n                line = line.replace(\"<elevation>\", \"\");\n                line = line.replace(\"</elevation>\", \"\");\n                googleResponse.elevation = Double.valueOf(line);\n                return googleResponse;\n            }\n        }\n        return googleResponse;\n    }",
        "difficulty": "medium",
        "evaluation_metric": "code_review"
    }
]