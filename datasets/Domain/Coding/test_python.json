[
    {
        "task_id": "HumanEval/0",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False",
        "expected_answer": "for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/1",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [\n        '(()())', '((()))', '()', '((())()())'\n    ]\n    assert candidate('() (()) ((())) (((())))') == [\n        '()', '(())', '((()))', '(((())))'\n    ]\n    assert candidate('(()(())((())))') == [\n        '(()(())((())))'\n    ]\n    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']",
        "expected_answer": "result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/2",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert abs(candidate(1.33) - 0.33) < 1e-6\n    assert abs(candidate(123.456) - 0.456) < 1e-6",
        "expected_answer": "return number % 1.0",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/3",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True",
        "expected_answer": "balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/4",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6",
        "expected_answer": "mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/5",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([], 7) == []\n    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]",
        "expected_answer": "if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/6",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]",
        "expected_answer": "def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/7",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']",
        "expected_answer": "return [x for x in strings if substring in x]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/8",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)\n    assert candidate([10]) == (10, 10)",
        "expected_answer": "sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/9",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]",
        "expected_answer": "running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/10",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('x') == 'x'\n    assert candidate('xyz') == 'xyzyx'\n    assert candidate('xyx') == 'xyx'\n    assert candidate('jerry') == 'jerryrrej'",
        "expected_answer": "if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/11",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('111000', '101010') == '010010'\n    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') == '0101'",
        "expected_answer": "def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/12",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'",
        "expected_answer": "if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/13",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3, 7) == 1\n    assert candidate(10, 15) == 5\n    assert candidate(49, 14) == 7\n    assert candidate(144, 60) == 12",
        "expected_answer": "while b:\n        a, b = b, a % b\n    return a",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/14",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW', 'WWW']",
        "expected_answer": "result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/15",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'",
        "expected_answer": "return ' '.join([str(x) for x in range(n + 1)])",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/16",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcde' + 'cade' + 'CADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5",
        "expected_answer": "return len(set(string.lower()))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/17",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]",
        "expected_answer": "note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/18",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john') == 1",
        "expected_answer": "times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/19",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('three') == 'three'\n    assert candidate('three five nine') == 'three five nine'\n    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'\n    assert candidate('six five four three two one zero') == 'zero one two three four five six'",
        "expected_answer": "value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/20",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)",
        "expected_answer": "closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/21",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]",
        "expected_answer": "min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/22",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]",
        "expected_answer": "return [x for x in values if isinstance(x, int)]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/23",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('x') == 1\n    assert candidate('asdasnakj') == 9",
        "expected_answer": "return len(string)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/24",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3) == 1\n    assert candidate(7) == 1\n    assert candidate(10) == 5\n    assert candidate(100) == 50\n    assert candidate(49) == 7",
        "expected_answer": "for i in reversed(range(n)):\n        if n % i == 0:\n            return i",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/25",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(3 * 19) == [3, 19]\n    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]\n    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]\n    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]\n    assert candidate(3 * 2 * 3) == [2, 3, 3]",
        "expected_answer": "import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/26",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]",
        "expected_answer": "import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/27",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('Hello!') == 'hELLO!'\n    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'",
        "expected_answer": "return string.swapcase()",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/28",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == ''\n    assert candidate(['x', 'y', 'z']) == 'xyz'\n    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'",
        "expected_answer": "return ''.join(strings)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/29",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']",
        "expected_answer": "return [x for x in strings if x.startswith(prefix)]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/30",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n\nTest Cases:\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert candidate([]) == []",
        "expected_answer": "return [e for e in l if e > 0]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/31",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n\nTest Cases:\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(6) == False\n    assert candidate(101) == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11) == True\n    assert candidate(17) == True\n    assert candidate(5 * 17) == False\n    assert candidate(11 * 7) == False\n    assert candidate(13441 * 19) == False",
        "expected_answer": "if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/32",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n\nTest Cases:\nMETADATA = {}\n\n\ndef check(candidate):\n    import math\n    import random\n    rng = random.Random(42)\n    import copy\n    for _ in range(100):\n        ncoeff = 2 * rng.randint(1, 4)\n        coeffs = []\n        for _ in range(ncoeff):\n            coeff = rng.randint(-10, 10)\n            if coeff == 0:\n                coeff = 1\n            coeffs.append(coeff)\n        solution = candidate(copy.deepcopy(coeffs))\n        assert math.fabs(poly(coeffs, solution)) < 1e-4",
        "expected_answer": "begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/33",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n\nTest Cases:\nMETADATA = {}\n\n\ndef check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])\n    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])\n    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])",
        "expected_answer": "l = list(l)\n    l[::3] = sorted(l[::3])\n    return l",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/34",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n\nTest Cases:\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]",
        "expected_answer": "return sorted(list(set(l)))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/35",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n\nTest Cases:\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3]) == 3\n    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124",
        "expected_answer": "m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/36",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n\nTest Cases:\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) == 8026",
        "expected_answer": "ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/37",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n\nTest Cases:\nMETADATA = {}\n\n\ndef check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])",
        "expected_answer": "evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/38",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n\nTest Cases:\nMETADATA = {}\n\n\ndef check(candidate):\n    from random import randint, choice\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_cyclic(str)\n        assert candidate(encoded_str) == str",
        "expected_answer": "return encode_cyclic(encode_cyclic(s))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/39",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n\nTest Cases:\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(1) == 2\n    assert candidate(2) == 3\n    assert candidate(3) == 5\n    assert candidate(4) == 13\n    assert candidate(5) == 89\n    assert candidate(6) == 233\n    assert candidate(7) == 1597\n    assert candidate(8) == 28657\n    assert candidate(9) == 514229\n    assert candidate(10) == 433494437",
        "expected_answer": "import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/40",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n\nTest Cases:\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, 5, -1]) == False\n    assert candidate([1, 3, -2, 1]) == True\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([1, 2, 5, 7]) == False\n    assert candidate([2, 4, -5, 3, 9, 7]) == True\n    assert candidate([1]) == False\n    assert candidate([1, 3, 5, -100]) == False\n    assert candidate([100, 3, 5, -100]) == False",
        "expected_answer": "for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/41",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n\nTest Cases:\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert candidate(10) == 100",
        "expected_answer": "return n**2",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/42",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n\nTest Cases:\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]",
        "expected_answer": "return [(e + 1) for e in l]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/43",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n\nTest Cases:\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, -2, 1]) == False\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([2, 4, -5, 3, 5, 7]) == True\n    assert candidate([1]) == False\n\n    assert candidate([-3, 9, -1, 3, 2, 30]) == True\n    assert candidate([-3, 9, -1, 3, 2, 31]) == True\n    assert candidate([-3, 9, -1, 4, 2, 30]) == False\n    assert candidate([-3, 9, -1, 4, 2, 31]) == False",
        "expected_answer": "for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/44",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n\nTest Cases:\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(8, 3) == \"22\"\n    assert candidate(9, 3) == \"100\"\n    assert candidate(234, 2) == \"11101010\"\n    assert candidate(16, 2) == \"10000\"\n    assert candidate(8, 2) == \"1000\"\n    assert candidate(7, 2) == \"111\"\n    for x in range(2, 8):\n        assert candidate(x, x + 1) == str(x)",
        "expected_answer": "ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/45",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n\nTest Cases:\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(5, 3) == 7.5\n    assert candidate(2, 2) == 2.0\n    assert candidate(10, 8) == 40.0",
        "expected_answer": "return a * h / 2.0",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/46",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n\nTest Cases:\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386",
        "expected_answer": "results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/47",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n\nTest Cases:\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7",
        "expected_answer": "l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/48",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n\nTest Cases:\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx') == False",
        "expected_answer": "for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/49",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n\nTest Cases:\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3",
        "expected_answer": "ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/50",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n\nTest Cases:\nMETADATA = {}\n\n\ndef check(candidate):\n    from random import randint, choice\n    import copy\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_shift(str)\n        assert candidate(copy.deepcopy(encoded_str)) == str",
        "expected_answer": "return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/51",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n\nTest Cases:\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\n    assert candidate('fedcba') == 'fdcb'\n    assert candidate('eeeee') == ''\n    assert candidate('acBAA') == 'cB'\n    assert candidate('EcBOO') == 'cB'\n    assert candidate('ybcd') == 'ybcd'",
        "expected_answer": "return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/52",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n\nTest Cases:\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10], 100)\n    assert not candidate([1, 20, 4, 10], 5)\n    assert candidate([1, 20, 4, 10], 21)\n    assert candidate([1, 20, 4, 10], 22)\n    assert candidate([1, 8, 4, 10], 11)\n    assert not candidate([1, 8, 4, 10], 10)",
        "expected_answer": "for e in l:\n        if e >= t:\n            return False\n    return True",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/53",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n\nTest Cases:\nMETADATA = {}\n\n\ndef check(candidate):\n    import random\n\n    assert candidate(0, 1) == 1\n    assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n    assert candidate(7, 5) == 12\n\n    for i in range(100):\n        x, y = random.randint(0, 1000), random.randint(0, 1000)\n        assert candidate(x, y) == x + y",
        "expected_answer": "return x + y",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/54",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\nTest Cases:\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True\n    assert candidate('abcd', 'dddddddabc') == True\n    assert candidate('dddddddabc', 'abcd') == True\n    assert candidate('eabcd', 'dddddddabc') == False\n    assert candidate('abcd', 'dddddddabcf') == False\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False\n    assert candidate('aabb', 'aaccc') == False",
        "expected_answer": "return set(s0) == set(s1)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/55",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n\nTest Cases:\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(10) == 55\n    assert candidate(1) == 1\n    assert candidate(8) == 21\n    assert candidate(11) == 89\n    assert candidate(12) == 144",
        "expected_answer": "if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/56",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n\nTest Cases:\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"<>\")\n    assert candidate(\"<<><>>\")\n    assert candidate(\"<><><<><>><>\")\n    assert candidate(\"<><><<<><><>><>><<><><<>>>\")\n    assert not candidate(\"<<<><>>>>\")\n    assert not candidate(\"><<>\")\n    assert not candidate(\"<\")\n    assert not candidate(\"<<<<\")\n    assert not candidate(\">\")\n    assert not candidate(\"<<>\")\n    assert not candidate(\"<><><<><>><>><<>\")\n    assert not candidate(\"<><><<><>><>>><>\")",
        "expected_answer": "depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/57",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n\nTest Cases:\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True",
        "expected_answer": "if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/58",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n\nTest Cases:\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []",
        "expected_answer": "ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/59",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\nTest Cases:\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29",
        "expected_answer": "def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/60",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n\nTest Cases:\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(1) == 1\n    assert candidate(6) == 21\n    assert candidate(11) == 66\n    assert candidate(30) == 465\n    assert candidate(100) == 5050",
        "expected_answer": "return sum(range(n + 1))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/61",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n\nTest Cases:\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"()\")\n    assert candidate(\"(()())\")\n    assert candidate(\"()()(()())()\")\n    assert candidate(\"()()((()()())())(()()(()))\")\n    assert not candidate(\"((()())))\")\n    assert not candidate(\")(()\")\n    assert not candidate(\"(\")\n    assert not candidate(\"((((\")\n    assert not candidate(\")\")\n    assert not candidate(\"(()\")\n    assert not candidate(\"()()(()())())(()\")\n    assert not candidate(\"()()(()())()))()\")",
        "expected_answer": "depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/62",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\nTest Cases:\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\n    assert candidate([1, 2, 3]) == [2, 6]\n    assert candidate([3, 2, 1]) == [2, 2]\n    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n    assert candidate([1]) == []",
        "expected_answer": "return [(i * x) for i, x in enumerate(xs)][1:]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/63",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n\nTest Cases:\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927",
        "expected_answer": "if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/64",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"abcde\") == 2, \"Test 1\"\n    assert candidate(\"Alone\") == 3, \"Test 2\"\n    assert candidate(\"key\") == 2, \"Test 3\"\n    assert candidate(\"bye\") == 1, \"Test 4\"\n    assert candidate(\"keY\") == 2, \"Test 5\"\n    assert candidate(\"bYe\") == 1, \"Test 6\"\n    assert candidate(\"ACEDY\") == 3, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"",
        "expected_answer": "vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/65",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(100, 2) == \"001\"\n    assert candidate(12, 2) == \"12\"\n    assert candidate(97, 8) == \"79\"\n    assert candidate(12, 1) == \"21\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(11, 101) == \"11\", \"This prints if this assert fails 2 (also good for debugging!)\"",
        "expected_answer": "s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/66",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"\") == 0, \"Error\"\n    assert candidate(\"abAB\") == 131, \"Error\"\n    assert candidate(\"abcCd\") == 67, \"Error\"\n    assert candidate(\"helloE\") == 69, \"Error\"\n    assert candidate(\"woArBld\") == 131, \"Error\"\n    assert candidate(\"aAaaaXa\") == 153, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\" How are yOu?\") == 151, \"Error\"\n    assert candidate(\"You arE Very Smart\") == 327, \"Error\"",
        "expected_answer": "if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/67",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"5 apples and 6 oranges\",19) == 8\n    assert candidate(\"5 apples and 6 oranges\",21) == 10\n    assert candidate(\"0 apples and 1 oranges\",3) == 2\n    assert candidate(\"1 apples and 0 oranges\",3) == 2\n    assert candidate(\"2 apples and 3 oranges\",100) == 95\n    assert candidate(\"2 apples and 3 oranges\",5) == 0\n    assert candidate(\"1 apples and 100 oranges\",120) == 19",
        "expected_answer": "lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/68",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([4,2,3]) == [2, 1], \"Error\"\n    assert candidate([1,2,3]) == [2, 1], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], \"Error\"\n    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], \"Error\"\n    assert candidate([7, 6, 7, 1]) == [6, 1], \"Error\"\n    assert candidate([7, 9, 7, 1]) == [], \"Error\"",
        "expected_answer": "if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/69",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n\nTest Cases:\ndef check(candidate):\n\n    # manually generated tests\n    assert candidate([5, 5, 5, 5, 1]) == 1\n    assert candidate([4, 1, 4, 1, 4, 4]) == 4\n    assert candidate([3, 3]) == -1\n    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8\n    assert candidate([2, 3, 3, 2, 2]) == 2\n\n    # automatically generated tests\n    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1\n    assert candidate([3, 2, 8, 2]) == 2\n    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1\n    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1\n    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1\n    assert candidate([1, 9, 10, 1, 3]) == 1\n    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5\n    assert candidate([1]) == 1\n    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4\n    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2\n    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1\n    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4\n    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4\n    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2\n    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1\n    assert candidate([10]) == -1\n    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2\n    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1\n    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1\n    assert candidate([3, 10, 10, 9, 2]) == -1",
        "expected_answer": "frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/70",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True",
        "expected_answer": "res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/71",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == 6.00, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == 0.43, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == -1",
        "expected_answer": "if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/72",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 2, 3], 9) is True\n    assert candidate([1, 2], 5) is False\n    assert candidate([3], 5) is True\n    assert candidate([3, 2, 3], 1) is False\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3], 6) is False\n    assert candidate([5], 5) is True",
        "expected_answer": "if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/73",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,5,4,7,9,6]) == 4\n    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1\n    assert candidate([1, 4, 2]) == 1\n    assert candidate([1, 4, 4, 2]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, 2, 1]) == 0\n    assert candidate([3, 1, 1, 3]) == 0\n    assert candidate([1]) == 0\n    assert candidate([0, 1]) == 1",
        "expected_answer": "ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/74",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([], []) == []\n    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\n    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']\n    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([], ['this']) == []\n    assert candidate(['this'], []) == []",
        "expected_answer": "l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/75",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    assert candidate(5) == False\n    assert candidate(30) == True\n    assert candidate(8) == True\n    assert candidate(10) == False\n    assert candidate(125) == True\n    assert candidate(3 * 5 * 7) == True\n    assert candidate(3 * 6 * 7) == False\n    assert candidate(9 * 9 * 9) == False\n    assert candidate(11 * 9 * 9) == False\n    assert candidate(11 * 13 * 7) == True",
        "expected_answer": "def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/76",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(16, 2)== True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(143214, 16)== False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(4, 2)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(9, 3)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(16, 4)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(24, 2)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(128, 4)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(12, 6)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(1, 12)==True, \"This prints if this assert fails 2 (also good for debugging!)\"",
        "expected_answer": "if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/77",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(1) == True, \"First test error: \" + str(candidate(1))\n    assert candidate(2) == False, \"Second test error: \" + str(candidate(2))\n    assert candidate(-1) == True, \"Third test error: \" + str(candidate(-1))\n    assert candidate(64) == True, \"Fourth test error: \" + str(candidate(64))\n    assert candidate(180) == False, \"Fifth test error: \" + str(candidate(180))\n    assert candidate(1000) == True, \"Sixth test error: \" + str(candidate(1000))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == True, \"1st edge test error: \" + str(candidate(0))\n    assert candidate(1729) == False, \"2nd edge test error: \" + str(candidate(1728))",
        "expected_answer": "a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/78",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AB\") == 1, \"First test error: \" + str(candidate(\"AB\"))      \n    assert candidate(\"1077E\") == 2, \"Second test error: \" + str(candidate(\"1077E\"))  \n    assert candidate(\"ABED1A33\") == 4, \"Third test error: \" + str(candidate(\"ABED1A33\"))      \n    assert candidate(\"2020\") == 2, \"Fourth test error: \" + str(candidate(\"2020\"))  \n    assert candidate(\"123456789ABCDEF0\") == 6, \"Fifth test error: \" + str(candidate(\"123456789ABCDEF0\"))      \n    assert candidate(\"112233445566778899AABBCCDDEEFF00\") == 12, \"Sixth test error: \" + str(candidate(\"112233445566778899AABBCCDDEEFF00\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([]) == 0",
        "expected_answer": "primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/79",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(0) == \"db0db\"\n    assert candidate(32) == \"db100000db\"\n    assert candidate(103) == \"db1100111db\"\n    assert candidate(15) == \"db1111db\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"",
        "expected_answer": "return \"db\" + bin(decimal)[2:] + \"db\"",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/80",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"a\") == False , \"a\"\n    assert candidate(\"aa\") == False , \"aa\"\n    assert candidate(\"abcd\") == True , \"abcd\"\n    assert candidate(\"aabb\") == False , \"aabb\"\n    assert candidate(\"adb\") == True , \"adb\"\n    assert candidate(\"xyy\") == False , \"xyy\"\n    assert candidate(\"iopaxpoi\") == True , \"iopaxpoi\"\n    assert candidate(\"iopaxioi\") == False , \"iopaxioi\"",
        "expected_answer": "if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/81",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n    assert candidate([0.5]) == ['D-']\n    assert candidate([0.0]) == ['E']\n    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert candidate([0, 0.7]) == ['E', 'D-']\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True",
        "expected_answer": "letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/82",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello') == True\n    assert candidate('abcdcba') == True\n    assert candidate('kittens') == True\n    assert candidate('orange') == False\n    assert candidate('wow') == True\n    assert candidate('world') == True\n    assert candidate('MadaM') == True\n    assert candidate('Wow') == True\n    assert candidate('') == False\n    assert candidate('HI') == True\n    assert candidate('go') == True\n    assert candidate('gogo') == False\n    assert candidate('aaaaaaaaaaaaaaa') == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('Madam') == True\n    assert candidate('M') == False\n    assert candidate('0') == False",
        "expected_answer": "l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/83",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1) == 1\n    assert candidate(2) == 18\n    assert candidate(3) == 180\n    assert candidate(4) == 1800\n    assert candidate(5) == 18000\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"",
        "expected_answer": "if n == 1: return 1\n    return 18 * (10 ** (n - 2))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/84",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1000) == \"1\", \"Error\"\n    assert candidate(150) == \"110\", \"Error\"\n    assert candidate(147) == \"1100\", \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(333) == \"1001\", \"Error\"\n    assert candidate(963) == \"10010\", \"Error\"",
        "expected_answer": "return bin(sum(int(i) for i in str(N)))[2:]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/85",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\n    # Check some edge cases that are easy to work out by hand.",
        "expected_answer": "return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/86",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hi') == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number') == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n    # Check some edge cases that are easy to work out by hand.\n    assert True",
        "expected_answer": "return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/87",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6]\n    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,1,3,4,5,6],\n        [1,2,1,4,5,6],\n        [1,2,3,1,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\n    assert candidate([], 1) == []\n    assert candidate([[1]], 2) == []\n    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True",
        "expected_answer": "coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/88",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5]) == [5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([2, 1]) == [1, 2], \"Error\"\n    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], \"Error\"\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], \"Error\"",
        "expected_answer": "return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/89",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate('hi') == 'lm', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('asdfghjkl') == 'ewhjklnop', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('gf') == 'kj', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('et') == 'ix', \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate('faewfawefaewg')=='jeiajeaijeiak', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('hellomyfriend')=='lippsqcjvmirh', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', \"This prints if this assert fails 3 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('a')=='e', \"This prints if this assert fails 2 (also good for debugging!)\"",
        "expected_answer": "d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/90",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4, 5]) == 2\n    assert candidate([5, 1, 4, 3, 2]) == 2\n    assert candidate([]) == None\n    assert candidate([1, 1]) == None\n    assert candidate([1,1,1,1,0]) == 1\n    assert candidate([1, 0**0]) == None\n    assert candidate([-35, 34, 12, -45]) == -35\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True",
        "expected_answer": "lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/91",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Hello world\") == 0, \"Test 1\"\n    assert candidate(\"Is the sky blue?\") == 0, \"Test 2\"\n    assert candidate(\"I love It !\") == 1, \"Test 3\"\n    assert candidate(\"bIt\") == 0, \"Test 4\"\n    assert candidate(\"I feel good today. I will be productive. will kill It\") == 2, \"Test 5\"\n    assert candidate(\"You and I are going for a walk\") == 0, \"Test 6\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"",
        "expected_answer": "import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/92",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 3, 1)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(2.5, 2, 3)==False, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(1.5, 5, 3.5)==False, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate(2, 6, 2)==False, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(4, 2, 2)==True, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate(2.2, 2.2, 2.2)==False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate(-4, 6, 2)==True, \"This prints if this assert fails 7 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2,1,1)==True, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate(3,4,7)==True, \"This prints if this assert fails 9 (also good for debugging!)\"\n    assert candidate(3.0,4,7)==False, \"This prints if this assert fails 10 (also good for debugging!)\"",
        "expected_answer": "if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/93",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate('TEST') == 'tgst', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('Mudasir') == 'mWDCSKR', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('YES') == 'ygs', \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"I DoNt KnOw WhAt tO WrItE\") == 'k dQnT kNqW wHcT Tq wRkTg', \"This prints if this assert fails 2 (also good for debugging!)\"",
        "expected_answer": "vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/94",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, \"This prints if this assert fails 3 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, \"This prints if this assert fails 4 (also good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,81,12,3,1,21]) == 3, \"This prints if this assert fails 5 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,8,1,2,1,7]) == 7, \"This prints if this assert fails 6 (also good for debugging!)\"\n\n    assert candidate([8191]) == 19, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate([8191, 123456, 127, 7]) == 19, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate([127, 97, 8192]) == 10, \"This prints if this assert fails 9 (also good for debugging!)\"",
        "expected_answer": "def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/95",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate({\"p\":\"pineapple\", \"b\":\"banana\"}) == True, \"First test error: \" + str(candidate({\"p\":\"pineapple\", \"b\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}) == False, \"Second test error: \" + str(candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}) == False, \"Third test error: \" + str(candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}))\n    assert candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False, \"Fourth test error: \" + str(candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n    assert candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True, \"Fifth test error: \" + str(candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))      \n    assert candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }) == True, \"Fourth test error: \" + str(candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate({}) == False, \"1st edge test error: \" + str(candidate({}))",
        "expected_answer": "if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\"",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/96",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    assert candidate(5) == [2,3]\n    assert candidate(6) == [2,3,5]\n    assert candidate(7) == [2,3,5]\n    assert candidate(10) == [2,3,5,7]\n    assert candidate(0) == []\n    assert candidate(22) == [2,3,5,7,11,13,17,19]\n    assert candidate(1) == []\n    assert candidate(18) == [2,3,5,7,11,13,17]\n    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]",
        "expected_answer": "primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/97",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(148, 412) == 16, \"First test error: \" + str(candidate(148, 412))                    \n    assert candidate(19, 28) == 72, \"Second test error: \" + str(candidate(19, 28))           \n    assert candidate(2020, 1851) == 0, \"Third test error: \" + str(candidate(2020, 1851))\n    assert candidate(14,-15) == 20, \"Fourth test error: \" + str(candidate(14,-15))      \n    assert candidate(76, 67) == 42, \"Fifth test error: \" + str(candidate(76, 67))      \n    assert candidate(17, 27) == 49, \"Sixth test error: \" + str(candidate(17, 27))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0, 1) == 0, \"1st edge test error: \" + str(candidate(0, 1))\n    assert candidate(0, 0) == 0, \"2nd edge test error: \" + str(candidate(0, 0))",
        "expected_answer": "return abs(a % 10) * abs(b % 10)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/98",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate('aBCdEf')  == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')  == 0\n    assert candidate('U')  == 1\n    assert candidate('') == 0\n    assert candidate('EEEE') == 2\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True",
        "expected_answer": "count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/99",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"10\") == 10, \"Test 1\"\n    assert candidate(\"14.5\") == 15, \"Test 2\"\n    assert candidate(\"-15.5\") == -16, \"Test 3\"\n    assert candidate(\"15.3\") == 15, \"Test 3\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"0\") == 0, \"Test 0\"",
        "expected_answer": "from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/100",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(3) == [3, 5, 7], \"Test 3\"\n    assert candidate(4) == [4,6,8,10], \"Test 4\"\n    assert candidate(5) == [5, 7, 9, 11, 13]\n    assert candidate(6) == [6, 8, 10, 12, 14, 16]\n    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"",
        "expected_answer": "return [n + 2*i for i in range(n)]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/101",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    assert candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    assert candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n    assert candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"\") == []\n    assert candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]",
        "expected_answer": "if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/102",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546",
        "expected_answer": "if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/103",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 5) == \"0b11\"\n    assert candidate(7, 13) == \"0b1010\"\n    assert candidate(964,977) == \"0b1111001010\"\n    assert candidate(996,997) == \"0b1111100100\"\n    assert candidate(560,851) == \"0b1011000010\"\n    assert candidate(185,546) == \"0b101101110\"\n    assert candidate(362,496) == \"0b110101101\"\n    assert candidate(350,902) == \"0b1001110010\"\n    assert candidate(197,233) == \"0b11010111\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == \"0b101\"",
        "expected_answer": "if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/104",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True",
        "expected_answer": "odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/105",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([1, -1 , 55]) == ['One'], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n    assert candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]",
        "expected_answer": "dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/106",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    assert candidate(5) == [1, 2, 6, 24, 15]\n    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n    assert candidate(1) == [1]\n    assert candidate(3) == [1, 2, 6]",
        "expected_answer": "ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/107",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(123) == (8, 13)\n    assert candidate(12) == (4, 6)\n    assert candidate(3) == (1, 2)\n    assert candidate(63) == (6, 8)\n    assert candidate(25) == (5, 6)\n    assert candidate(19) == (4, 6)\n    assert candidate(9) == (4, 5), \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == (0, 1), \"This prints if this assert fails 2 (also good for debugging!)\"",
        "expected_answer": "def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/108",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0\n    assert candidate([-1, -2, 0]) == 0\n    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5\n    assert candidate([1, 100, 98, -7, 1, -1]) == 4\n    assert candidate([12, 23, 34, -45, -56, 0]) == 5\n    assert candidate([-0, 1**0]) == 1\n    assert candidate([1]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"",
        "expected_answer": "def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/109",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 4, 5, 1, 2])==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([3, 5, 10, 1, 2])==True\n    assert candidate([4, 3, 1, 2])==False\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([3, 5, 4, 1, 2])==False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([])==True",
        "expected_answer": "if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/110",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\" \n    assert candidate([5, 7, 3], [2, 6, 4]) == \"YES\"\n    assert candidate([5, 7, 3], [2, 6, 3]) == \"NO\" \n    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([100, 200], [200, 200]) == \"YES\"",
        "expected_answer": "odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/111",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate('a b b a') == {'a':2,'b': 2}, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('a b c a b') == {'a': 2, 'b': 2}, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate('b b b b a') == {'b': 4}, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 6 (good for debugging!)\"\n    \n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == {}, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate('a') == {'a': 1}, \"This prints if this assert fails 8 (also good for debugging!)\"",
        "expected_answer": "dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/112",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    assert candidate(\"abcde\",\"ae\") == ('bcd',False)\n    assert candidate(\"abcdef\", \"b\") == ('acdef',False)\n    assert candidate(\"abcdedcba\",\"ab\") == ('cdedc',True)\n    assert candidate(\"dwik\",\"w\") == ('dik',False)\n    assert candidate(\"a\",\"a\") == ('',True)\n    assert candidate(\"abcdedcba\",\"\") == ('abcdedcba',True)\n    assert candidate(\"abcdedcba\",\"v\") == ('abcdedcba',True)\n    assert candidate(\"vabba\",\"v\") == ('abba',True)\n    assert candidate(\"mamma\", \"mia\") == (\"\", True)",
        "expected_answer": "s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/113",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"], \"Test 1\"\n    assert candidate(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"], \"Test 2\"\n    assert candidate(['271', '137', '314']) == [\n        'the number of odd elements 2n the str2ng 2 of the 2nput.',\n        'the number of odd elements 3n the str3ng 3 of the 3nput.',\n        'the number of odd elements 2n the str2ng 2 of the 2nput.'\n    ]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"",
        "expected_answer": "res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/114",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1, 0, -2]) == -33\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-10]) == -10, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1",
        "expected_answer": "max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/115",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, \"Error\"\n    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, \"Error\"\n    assert candidate([[0,0,0], [0,0,0]], 5) == 0, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, \"Error\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, \"Error\"",
        "expected_answer": "return sum([math.ceil(sum(arr)/capacity) for arr in grid])",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/116",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"",
        "expected_answer": "return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/117",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(candidate(\"Mary had a little lamb\", 4))      \n    assert candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(candidate(\"Mary had a little lamb\", 3))  \n    assert candidate(\"simple white space\", 2) == [], \"Third test error: \" + str(candidate(\"simple white space\", 2))      \n    assert candidate(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(candidate(\"Hello world\", 4))  \n    assert candidate(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(candidate(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"\", 4) == [], \"1st edge test error: \" + str(candidate(\"\", 4))\n    assert candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(candidate(\"a b c d e f\", 1))",
        "expected_answer": "result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/118",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"yogurt\") == \"u\"\n    assert candidate(\"full\") == \"u\"\n    assert candidate(\"easy\") == \"\"\n    assert candidate(\"eAsy\") == \"\"\n    assert candidate(\"ali\") == \"\"\n    assert candidate(\"bad\") == \"a\"\n    assert candidate(\"most\") == \"o\"\n    assert candidate(\"ab\") == \"\"\n    assert candidate(\"ba\") == \"\"\n    assert candidate(\"quick\") == \"\"\n    assert candidate(\"anime\") == \"i\"\n    assert candidate(\"Asia\") == \"\"\n    assert candidate(\"Above\") == \"o\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True",
        "expected_answer": "if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/119",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(['()(', ')']) == 'Yes'\n    assert candidate([')', ')']) == 'No'\n    assert candidate(['(()(())', '())())']) == 'No'\n    assert candidate([')())', '(()()(']) == 'Yes'\n    assert candidate(['(())))', '(()())((']) == 'Yes'\n    assert candidate(['()', '())']) == 'No'\n    assert candidate(['(()(', '()))()']) == 'Yes'\n    assert candidate(['((((', '((())']) == 'No'\n    assert candidate([')(()', '(()(']) == 'No'\n    assert candidate([')(', ')(']) == 'No'\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(['(', ')']) == 'Yes'\n    assert candidate([')', '(']) == 'Yes'",
        "expected_answer": "def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/120",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []",
        "expected_answer": "if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/121",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, 8, 7, 1])    == 12\n    assert candidate([3, 3, 3, 3, 3]) == 9\n    assert candidate([30, 13, 24, 321]) == 0\n    assert candidate([5, 9]) == 5\n    assert candidate([2, 4, 8]) == 0\n    assert candidate([30, 13, 23, 32]) == 23\n    assert candidate([3, 13, 2, 9]) == 3\n\n    # Check some edge cases that are easy to work out by hand.",
        "expected_answer": "return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/122",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4\n    assert candidate([111,121,3,4000,5,6], 2) == 0\n    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125\n    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1], 1) == 1, \"This prints if this assert fails 2 (also good for debugging!)\"",
        "expected_answer": "return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/123",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(14) == [1, 5, 7, 11, 13, 17]\n    assert candidate(5) == [1, 5]\n    assert candidate(12) == [1, 3, 5], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == [1], \"This prints if this assert fails 2 (also good for debugging!)\"",
        "expected_answer": "if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/124",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate('03-11-2000') == True\n\n    assert candidate('15-01-2012') == False\n\n    assert candidate('04-0-2040') == False\n\n    assert candidate('06-04-2020') == True\n\n    assert candidate('01-01-2007') == True\n\n    assert candidate('03-32-2011') == False\n\n    assert candidate('') == False\n\n    assert candidate('04-31-3000') == False\n\n    assert candidate('06-06-2005') == True\n\n    assert candidate('21-31-2000') == False\n\n    assert candidate('04-12-2003') == True\n\n    assert candidate('04122003') == False\n\n    assert candidate('20030412') == False\n\n    assert candidate('2003-04') == False\n\n    assert candidate('2003-04-12') == False\n\n    assert candidate('04-2003') == False",
        "expected_answer": "try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/125",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n\nTest Cases:\ndef check(candidate):\n\n    assert candidate(\"Hello world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello,world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello world,!\") == [\"Hello\",\"world,!\"]\n    assert candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\",\"!\"]\n    assert candidate(\"abcdef\") == 3\n    assert candidate(\"aaabb\") == 2\n    assert candidate(\"aaaBb\") == 1\n    assert candidate(\"\") == 0",
        "expected_answer": "if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/126",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate([5]) == True\n    assert candidate([1, 2, 3, 4, 5]) == True\n    assert candidate([1, 3, 2, 4, 5]) == False\n    assert candidate([1, 2, 3, 4, 5, 6]) == True\n    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True\n    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == True, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([1]) == True, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([3, 2, 1]) == False, \"This prints if this assert fails 4 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 2, 2, 3, 4]) == False, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate([1, 2, 3, 3, 3, 4]) == False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate([1, 2, 2, 3, 3, 4]) == True, \"This prints if this assert fails 7 (good for debugging!)\"\n    assert candidate([1, 2, 3, 4]) == True, \"This prints if this assert fails 8 (good for debugging!)\"",
        "expected_answer": "count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/127",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate((1, 2), (2, 3)) == \"NO\"\n    assert candidate((-1, 1), (0, 4)) == \"NO\"\n    assert candidate((-3, -1), (-5, 5)) == \"YES\"\n    assert candidate((-2, 2), (-4, 0)) == \"YES\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate((-11, 2), (-1, -1)) == \"NO\"\n    assert candidate((1, 2), (3, 5)) == \"NO\"\n    assert candidate((1, 2), (1, 2)) == \"NO\"\n    assert candidate((-2, -2), (-3, -2)) == \"NO\"",
        "expected_answer": "def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/128",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"",
        "expected_answer": "if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/129",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    print\n    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]\n    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]\n    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]\n    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]\n    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]\n    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]\n    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]\n    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]\n    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\n    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]",
        "expected_answer": "n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/130",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate(3) == [1, 3, 2.0, 8.0]\n    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]\n    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]\n    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]\n    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]\n    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]\n    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]\n    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]",
        "expected_answer": "if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/131",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(5) == 5\n    assert candidate(54) == 5\n    assert candidate(120) ==1\n    assert candidate(5014) == 5\n    assert candidate(98765) == 315\n    assert candidate(5576543) == 2625\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2468) == 0",
        "expected_answer": "product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/132",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate('[[]]') == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('[]]]]]]][[[[[]') == False\n    assert candidate('[][]') == False\n    assert candidate(('[]')) == False\n    assert candidate('[[[[]]]]') == True\n    assert candidate('[]]]]]]]]]]') == False\n    assert candidate('[][][[]]') == True\n    assert candidate('[[]') == False\n    assert candidate('[]]') == False\n    assert candidate('[[]][[') == True\n    assert candidate('[[][]]') == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate('[[[[[[[[') == False\n    assert candidate(']]]]]]]]') == False",
        "expected_answer": "opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/133",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.0,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,3,5,7])==84, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.4,4.2,0])==29, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-2.4,1,1])==6, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate([100,1,15,2])==10230, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([10000,10000])==200000000, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,4.6,6.3])==75, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,17.9,18.9,19.9])==1086, \"This prints if this assert fails 1 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0])==0, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1])==1, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1,1,0])==2, \"This prints if this assert fails 2 (also good for debugging!)\"",
        "expected_answer": "import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/134",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"apple\") == False\n    assert candidate(\"apple pi e\") == True\n    assert candidate(\"eeeee\") == False\n    assert candidate(\"A\") == True\n    assert candidate(\"Pumpkin pie \") == False\n    assert candidate(\"Pumpkin pie 1\") == False\n    assert candidate(\"\") == False\n    assert candidate(\"eeeee e \") == False\n    assert candidate(\"apple pie\") == False\n    assert candidate(\"apple pi e \") == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True",
        "expected_answer": "check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/135",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,4,3,5])==3\n    assert candidate([1,2,4,5])==-1\n    assert candidate([1,4,2,5,6,7,8,9,10])==2\n    assert candidate([4,8,5,7,3])==4\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([])==-1",
        "expected_answer": "ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/136",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)\n    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)\n    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n    assert candidate([]) == (None, None)\n    assert candidate([0]) == (None, None)\n    assert candidate([-1, -3, -5, -6]) == (-1, None)\n    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)\n    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True",
        "expected_answer": "smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/137",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 2) == 2\n    assert candidate(1, 2.5) == 2.5\n    assert candidate(2, 3) == 3\n    assert candidate(5, 6) == 6\n    assert candidate(1, \"2,3\") == \"2,3\"\n    assert candidate(\"5,1\", \"6\") == \"6\"\n    assert candidate(\"1\", \"2\") == \"2\"\n    assert candidate(\"1\", 1) == None\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True",
        "expected_answer": "temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/138",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n    assert candidate(4) == False\n    assert candidate(6) == False\n    assert candidate(8) == True\n    assert candidate(10) == True\n    assert candidate(11) == False\n    assert candidate(12) == True\n    assert candidate(13) == False\n    assert candidate(16) == True",
        "expected_answer": "return n%2 == 0 and n >= 8",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/139",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(4) == 288, \"Test 4\"\n    assert candidate(5) == 34560, \"Test 5\"\n    assert candidate(7) == 125411328000, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == 1, \"Test 1\"",
        "expected_answer": "fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/140",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Example\") == \"Example\", \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\", \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\", \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Exa   mple\") == \"Exa-mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\", \"This prints if this assert fails 4 (good for debugging!)\"",
        "expected_answer": "new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/141",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"example.txt\") == 'Yes'\n    assert candidate(\"1example.dll\") == 'No'\n    assert candidate('s1sdf3.asd') == 'No'\n    assert candidate('K.dll') == 'Yes'\n    assert candidate('MY16FILE3.exe') == 'Yes'\n    assert candidate('His12FILE94.exe') == 'No'\n    assert candidate('_Y.txt') == 'No'\n    assert candidate('?aREYA.exe') == 'No'\n    assert candidate('/this_is_valid.dll') == 'No'\n    assert candidate('this_is_valid.wow') == 'No'\n    assert candidate('this_is_valid.txt') == 'Yes'\n    assert candidate('this_is_valid.txtexe') == 'No'\n    assert candidate('#this2_i4s_5valid.ten') == 'No'\n    assert candidate('@this1_is6_valid.exe') == 'No'\n    assert candidate('this_is_12valid.6exe4.txt') == 'No'\n    assert candidate('all.exe.txt') == 'No'\n    assert candidate('I563_No.exe') == 'Yes'\n    assert candidate('Is3youfault.txt') == 'Yes'\n    assert candidate('no_one#knows.dll') == 'Yes'\n    assert candidate('1I563_Yes3.exe') == 'No'\n    assert candidate('I563_Yes3.txtt') == 'No'\n    assert candidate('final..txt') == 'No'\n    assert candidate('final132') == 'No'\n    assert candidate('_f4indsartal132.') == 'No'\n    \n        \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('.txt') == 'No'\n    assert candidate('s.') == 'No'",
        "expected_answer": "suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/142",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate([1,2,3]) == 6\n    assert candidate([1,4,9]) == 14\n    assert candidate([]) == 0\n    assert candidate([1,1,1,1,1,1,1,1,1]) == 9\n    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3\n    assert candidate([0]) == 0\n    assert candidate([-1,-5,2,-1,-5]) == -126\n    assert candidate([-56,-99,1,0,-2]) == 3030\n    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0\n    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448\n    \n    \n    # Don't remove this line:",
        "expected_answer": "result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/143",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"This is a test\") == \"is\"\n    assert candidate(\"lets go for swimming\") == \"go for\"\n    assert candidate(\"there is no place available here\") == \"there is no place\"\n    assert candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n    assert candidate(\"go for it\") == \"go for it\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"here\") == \"\"\n    assert candidate(\"here is\") == \"is\"",
        "expected_answer": "new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/144",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"1/5\", \"5/1\") == True, 'test1'\n    assert candidate(\"1/6\", \"2/1\") == False, 'test2'\n    assert candidate(\"5/1\", \"3/1\") == True, 'test3'\n    assert candidate(\"7/10\", \"10/2\") == False, 'test4'\n    assert candidate(\"2/10\", \"50/10\") == True, 'test5'\n    assert candidate(\"7/2\", \"4/2\") == True, 'test6'\n    assert candidate(\"11/6\", \"6/1\") == True, 'test7'\n    assert candidate(\"2/3\", \"5/2\") == False, 'test8'\n    assert candidate(\"5/2\", \"3/5\") == False, 'test9'\n    assert candidate(\"2/4\", \"8/4\") == True, 'test10'\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"2/4\", \"4/2\") == True, 'test11'\n    assert candidate(\"1/5\", \"5/1\") == True, 'test12'\n    assert candidate(\"1/5\", \"1/5\") == False, 'test13'",
        "expected_answer": "a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/145",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"",
        "expected_answer": "def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/146",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, -2, 1, -5]) == 0  \n    assert candidate([15, -73, 14, -15]) == 1\n    assert candidate([33, -2, -3, 45, 21, 109]) == 2\n    assert candidate([43, -12, 93, 125, 121, 109]) == 4\n    assert candidate([71, -2, -33, 75, 21, 19]) == 3\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1]) == 0              \n    assert candidate([]) == 0",
        "expected_answer": "count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/147",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361",
        "expected_answer": "A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/148",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\"), \"First test error: \" + str(len(candidate(\"Jupiter\", \"Neptune\")))      \n    assert candidate(\"Earth\", \"Mercury\") == (\"Venus\",), \"Second test error: \" + str(candidate(\"Earth\", \"Mercury\"))  \n    assert candidate(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), \"Third test error: \" + str(candidate(\"Mercury\", \"Uranus\"))      \n    assert candidate(\"Neptune\", \"Venus\") == (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"), \"Fourth test error: \" + str(candidate(\"Neptune\", \"Venus\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Earth\", \"Earth\") == ()\n    assert candidate(\"Mars\", \"Earth\") == ()\n    assert candidate(\"Jupiter\", \"Makemake\") == ()",
        "expected_answer": "planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/149",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n    assert candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n    assert candidate([\"d\", \"b\", \"c\", \"a\"]) == []\n    assert candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"]\n    assert candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == []\n    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]",
        "expected_answer": "lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/150",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(7, 34, 12) == 34\n    assert candidate(15, 8, 5) == 5\n    assert candidate(3, 33, 5212) == 33\n    assert candidate(1259, 3, 52) == 3\n    assert candidate(7919, -1, 12) == -1\n    assert candidate(3609, 1245, 583) == 583\n    assert candidate(91, 56, 129) == 129\n    assert candidate(6, 34, 1234) == 1234\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 2, 0) == 0\n    assert candidate(2, 2, 0) == 2",
        "expected_answer": "if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/151",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0 , \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([5, 4]) == 25 , \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([0.1, 0.2, 0.3]) == 0 , \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([-10, -20, -30]) == 0 , \"This prints if this assert fails 4 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-1, -2, 8]) == 0, \"This prints if this assert fails 5 (also good for debugging!)\"\n    assert candidate([0.2, 3, 5]) == 34, \"This prints if this assert fails 6 (also good for debugging!)\"\n    lst = list(range(-99, 100, 2))\n    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])\n    assert candidate(lst) == odd_sum , \"This prints if this assert fails 7 (good for debugging!)\"",
        "expected_answer": "return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/152",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"",
        "expected_answer": "return [abs(x-y) for x,y in zip(game,guess)]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/153",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'",
        "expected_answer": "strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/154",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    #assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    #assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert  candidate(\"xyzw\",\"xyw\") == False , \"test #0\"\n    assert  candidate(\"yello\",\"ell\") == True , \"test #1\"\n    assert  candidate(\"whattup\",\"ptut\") == False , \"test #2\"\n    assert  candidate(\"efef\",\"fee\") == True , \"test #3\"\n    assert  candidate(\"abab\",\"aabb\") == False , \"test #4\"\n    assert  candidate(\"winemtt\",\"tinem\") == True , \"test #5\"",
        "expected_answer": "l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/155",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True",
        "expected_answer": "even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/156",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(19) == 'xix'\n    assert candidate(152) == 'clii'\n    assert candidate(251) == 'ccli'\n    assert candidate(426) == 'cdxxvi'\n    assert candidate(500) == 'd'\n    assert candidate(1) == 'i'\n    assert candidate(4) == 'iv'\n    assert candidate(43) == 'xliii'\n    assert candidate(90) == 'xc'\n    assert candidate(94) == 'xciv'\n    assert candidate(532) == 'dxxxii'\n    assert candidate(900) == 'cm'\n    assert candidate(994) == 'cmxciv'\n    assert candidate(1000) == 'm'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True",
        "expected_answer": "num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/157",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == False",
        "expected_answer": "return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/158",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert (candidate([\"name\", \"of\", \"string\"]) == \"string\"), \"t1\"\n    assert (candidate([\"name\", \"enam\", \"game\"]) == \"enam\"), 't2'\n    assert (candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"), 't3'\n    assert (candidate([\"abc\", \"cba\"]) == \"abc\"), 't4'\n    assert (candidate([\"play\", \"this\", \"game\", \"of\",\"footbott\"]) == \"footbott\"), 't5'\n    assert (candidate([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\"), 't6'\n    assert (candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\"), 't7'\n    assert (candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"this\"), 't8'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert (candidate([\"b\"]) == \"b\"), 't9'\n    assert (candidate([\"play\", \"play\", \"play\"]) == \"play\"), 't10'",
        "expected_answer": "return sorted(words, key = lambda x: (-len(set(x)), x))[0]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/159",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(5, 6, 10) == [11, 4], \"Error\"\n    assert candidate(4, 8, 9) == [12, 1], \"Error\"\n    assert candidate(1, 10, 10) == [11, 0], \"Error\"\n    assert candidate(2, 11, 5) == [7, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(4, 5, 7) == [9, 2], \"Error\"\n    assert candidate(4, 5, 1) == [5, 0], \"Error\"",
        "expected_answer": "if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/160",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4]) == 8, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"",
        "expected_answer": "expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/161",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AsDf\") == \"aSdF\"\n    assert candidate(\"1234\") == \"4321\"\n    assert candidate(\"ab\") == \"AB\"\n    assert candidate(\"#a@C\") == \"#A@c\"\n    assert candidate(\"#AsdfW^45\") == \"#aSDFw^45\"\n    assert candidate(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"#$a^D\") == \"#$A^d\"\n    assert candidate(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:",
        "expected_answer": "flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/162",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    assert candidate('') == None\n    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'\n    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True",
        "expected_answer": "import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "HumanEval/163",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n\nTest Cases:\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 10) == [2, 4, 6, 8], \"Test 1\"\n    assert candidate(10, 2) == [2, 4, 6, 8], \"Test 2\"\n    assert candidate(132, 2) == [2, 4, 6, 8], \"Test 3\"\n    assert candidate(17,89) == [], \"Test 4\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"",
        "expected_answer": "lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_001",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef min_cost(cost, m, n):\n    \"\"\" Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][]. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert min_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2) == 8\n    assert min_cost([[2, 3, 4], [5, 9, 3], [2, 6, 4]], 2, 2) == 12\n    assert min_cost([[3, 4, 5], [6, 10, 4], [3, 7, 5]], 2, 2) == 16",
        "expected_answer": "R = 3\nC = 3\ndef min_cost(cost, m, n): \n\ttc = [[0 for x in range(C)] for x in range(R)] \n\ttc[0][0] = cost[0][0] \n\tfor i in range(1, m+1): \n\t\ttc[i][0] = tc[i-1][0] + cost[i][0] \n\tfor j in range(1, n+1): \n\t\ttc[0][j] = tc[0][j-1] + cost[0][j] \n\tfor i in range(1, m+1): \n\t\tfor j in range(1, n+1): \n\t\t\ttc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] \n\treturn tc[m][n]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_002",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef similar_elements(test_tup1, test_tup2):\n    \"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n    assert similar_elements((1, 2, 3, 4),(5, 4, 3, 7)) == (3, 4)\n    assert similar_elements((11, 12, 14, 13),(17, 15, 14, 13)) == (13, 14)",
        "expected_answer": "def similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_003",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef is_not_prime(n):\n    \"\"\" Write a python function to identify non-prime numbers. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert is_not_prime(2) == False\n    assert is_not_prime(10) == True\n    assert is_not_prime(35) == True",
        "expected_answer": "import math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_004",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef heap_queue_largest(nums,n):\n    \"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n    assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75] \n    assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]",
        "expected_answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_005",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef count_ways(n):\n    \"\"\" Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert count_ways(2) == 3\n    assert count_ways(8) == 153\n    assert count_ways(12) == 2131",
        "expected_answer": "def count_ways(n): \n\tA = [0] * (n + 1) \n\tB = [0] * (n + 1) \n\tA[0] = 1\n\tA[1] = 0\n\tB[0] = 0\n\tB[1] = 1\n\tfor i in range(2, n+1): \n\t\tA[i] = A[i - 2] + 2 * B[i - 1] \n\t\tB[i] = A[i - 1] + B[i - 2] \n\treturn A[n]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_006",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef is_Power_Of_Two (x):\n    \"\"\" Write a python function to check whether the two numbers differ at one bit position only or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert differ_At_One_Bit_Pos(13,9) == True\n    assert differ_At_One_Bit_Pos(15,8) == False\n    assert differ_At_One_Bit_Pos(2,4) == False",
        "expected_answer": "def is_Power_Of_Two (x): \n    return x and (not(x & (x - 1))) \ndef differ_At_One_Bit_Pos(a,b): \n    return is_Power_Of_Two(a ^ b)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_007",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef find_char_long(text):\n    \"\"\" Write a function to find all words which are at least 4 characters long in a string by using regex. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find_char_long('Please move back to stream') == ['Please', 'move', 'back', 'stream']\n    assert find_char_long('Jing Eco and Tech') == ['Jing', 'Tech']\n    assert find_char_long('Jhingai wulu road Zone 3') == ['Jhingai', 'wulu', 'road', 'Zone']",
        "expected_answer": "import re\ndef find_char_long(text):\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_008",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef square_nums(nums):\n    \"\"\" Write a function to find squares of individual elements in a list using lambda function. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n    assert square_nums([10,20,30])==([100,400,900])\n    assert square_nums([12,15])==([144,225])",
        "expected_answer": "def square_nums(nums):\n square_nums = list(map(lambda x: x ** 2, nums))\n return square_nums",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_009",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef find_Rotations(str):\n    \"\"\" Write a python function to find the minimum number of rotations required to get the same string. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find_Rotations(\"aaaa\") == 1\n    assert find_Rotations(\"ab\") == 2\n    assert find_Rotations(\"abc\") == 3",
        "expected_answer": "def find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_010",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef small_nnum(list1,n):\n    \"\"\" Write a function to get the n smallest items from a dataset. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[10,20]\n    assert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[10,20,20,40,50]\n    assert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[10,20,20]",
        "expected_answer": "import heapq\ndef small_nnum(list1,n):\n  smallest=heapq.nsmallest(n,list1)\n  return smallest",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_011",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef remove_Occ(s,ch):\n    \"\"\" Write a python function to remove first and last occurrence of a given character from the string. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert remove_Occ(\"hello\",\"l\") == \"heo\"\n    assert remove_Occ(\"abcda\",\"a\") == \"bcd\"\n    assert remove_Occ(\"PHP\",\"P\") == \"H\"",
        "expected_answer": "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_012",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef sort_matrix(M):\n    \"\"\" Write a function to sort a given matrix in ascending order according to the sum of its rows. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n    assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\n    assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]",
        "expected_answer": "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_013",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef count_common(words):\n    \"\"\" Write a function to count the most common words in a dictionary. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n    assert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]\n    assert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]",
        "expected_answer": "from collections import Counter\ndef count_common(words):\n  word_counts = Counter(words)\n  top_four = word_counts.most_common(4)\n  return (top_four)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_014",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef find_Volume(l,b,h) :\n    \"\"\" Write a python function to find the volume of a triangular prism. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find_Volume(10,8,6) == 240\n    assert find_Volume(3,2,2) == 6\n    assert find_Volume(1,2,1) == 1",
        "expected_answer": "def find_Volume(l,b,h) : \n    return ((l * b * h) / 2)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_015",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef split_lowerstring(text):\n    \"\"\" Write a function to split a string at lowercase letters. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert split_lowerstring(\"AbCd\")==['bC','d']\n    assert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']\n    assert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']",
        "expected_answer": "import re\ndef split_lowerstring(text):\n return (re.findall('[a-z][^a-z]*', text))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_016",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef text_lowercase_underscore(text):\n    \"\"\" Write a function to find sequences of lowercase letters joined with an underscore. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n    assert text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')\n    assert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')",
        "expected_answer": "import re\ndef text_lowercase_underscore(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_017",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef square_perimeter(a):\n    \"\"\" Write a function to find the perimeter of a square. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert square_perimeter(10)==40\n    assert square_perimeter(5)==20\n    assert square_perimeter(4)==16",
        "expected_answer": "def square_perimeter(a):\n  perimeter=4*a\n  return perimeter",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_018",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef str_to_list(string):\n    \"\"\" Write a function to remove characters from the first string which are present in the second string. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n    assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'\n    assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' ",
        "expected_answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind != len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind])",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_019",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef test_duplicate(arraynums):\n    \"\"\" Write a function to find whether a given array of integers contains any duplicate element. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert test_duplicate(([1,2,3,4,5]))==False\n    assert test_duplicate(([1,2,3,4, 4]))==True\n    assert test_duplicate([1,1,2,2,3,3,4,4,5])==True",
        "expected_answer": "def test_duplicate(arraynums):\n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_020",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef is_woodall(x):\n    \"\"\" Write a function to check if the given number is woodball or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert is_woodall(383) == True\n    assert is_woodall(254) == False\n    assert is_woodall(200) == False",
        "expected_answer": "def is_woodall(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_021",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef multiples_of_num(m,n):\n    \"\"\" Write a function to find m number of multiples of n. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert multiples_of_num(4,3)== [3,6,9,12]\n    assert multiples_of_num(2,5)== [5,10]\n    assert multiples_of_num(9,2)== [2,4,6,8,10,12,14,16,18]",
        "expected_answer": "def multiples_of_num(m,n): \n    multiples_of_num= list(range(n,(m+1)*n, n)) \n    return list(multiples_of_num)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_022",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef find_first_duplicate(nums):\n    \"\"\" Write a function to find the first duplicate element in a given array of integers. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n    assert find_first_duplicate([1, 2, 3, 4])==-1\n    assert find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1",
        "expected_answer": "def find_first_duplicate(nums):\n    num_set = set()\n    no_duplicate = -1\n\n    for i in range(len(nums)):\n\n        if nums[i] in num_set:\n            return nums[i]\n        else:\n            num_set.add(nums[i])\n\n    return no_duplicate",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_023",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef maximum_Sum(list1):\n    \"\"\" Write a python function to find the maximum sum of elements of list in a list of lists. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n    assert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6\n    assert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19",
        "expected_answer": "def maximum_Sum(list1): \n    maxi = -100000\n    for x in list1: \n        sum = 0 \n        for y in x: \n            sum+= y      \n        maxi = max(sum,maxi)     \n    return maxi",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_024",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef binary_to_decimal(binary):\n    \"\"\" Write a function to convert the given binary number to its decimal equivalent. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert binary_to_decimal(100) == 4\n    assert binary_to_decimal(1011) == 11\n    assert binary_to_decimal(1101101) == 109",
        "expected_answer": "def binary_to_decimal(binary): \n    binary1 = binary \n    decimal, i, n = 0, 0, 0\n    while(binary != 0): \n        dec = binary % 10\n        decimal = decimal + dec * pow(2, i) \n        binary = binary//10\n        i += 1\n    return (decimal)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_025",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef find_Product(arr,n):\n    \"\"\" Write a python function to find the product of non-repeated elements in a given array. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find_Product([1,1,2,3],4) == 6\n    assert find_Product([1,2,3,1,1],5) == 6\n    assert find_Product([1,1,4,5,6],5) == 120",
        "expected_answer": "def find_Product(arr,n): \n    arr.sort() \n    prod = 1\n    for i in range(0,n,1): \n        if (arr[i - 1] != arr[i]): \n            prod = prod * arr[i] \n    return prod;",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_026",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef check_k_elements(test_list, K):\n    \"\"\" Write a function to check if the given tuple list has all k elements. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n    assert check_k_elements([(7, 7, 7), (7, 7)], 7) == True\n    assert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False",
        "expected_answer": "def check_k_elements(test_list, K):\n  res = True\n  for tup in test_list:\n    for ele in tup:\n      if ele != K:\n        res = False\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_027",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef remove(list):\n    \"\"\" Write a python function to remove all digits from a list of strings. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n    assert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']\n    assert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']",
        "expected_answer": "import re  \ndef remove(list): \n    pattern = '[0-9]'\n    list = [re.sub(pattern, '', i) for i in list] \n    return list",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_028",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef binomial_Coeff(n,k):\n    \"\"\" Write a python function to find binomial co-efficient. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert binomial_Coeff(5,2) == 10\n    assert binomial_Coeff(4,3) == 4\n    assert binomial_Coeff(3,2) == 3",
        "expected_answer": "def binomial_Coeff(n,k): \n    if k > n : \n       return 0\n    if k==0 or k ==n : \n        return 1 \n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_029",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef get_Odd_Occurrence(arr,arr_size):\n    \"\"\" Write a python function to find the element occurring odd number of times. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n    assert get_Odd_Occurrence([1,2,3,2,3,1,3],7) == 3\n    assert get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13) == 5",
        "expected_answer": "def get_Odd_Occurrence(arr,arr_size):   \n    for i in range(0,arr_size): \n        count = 0\n        for j in range(0,arr_size): \n            if arr[i] == arr[j]: \n                count+=1     \n        if (count % 2 != 0): \n            return arr[i]     \n    return -1",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_030",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef check_Equality(s):\n    \"\"\" Write a python function to count all the substrings starting and ending with same characters. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert count_Substring_With_Equal_Ends(\"abc\") == 3\n    assert count_Substring_With_Equal_Ends(\"abcda\") == 6\n    assert count_Substring_With_Equal_Ends(\"ab\") == 2",
        "expected_answer": "def check_Equality(s): \n    return (ord(s[0]) == ord(s[len(s) - 1])); \ndef count_Substring_With_Equal_Ends(s): \n    result = 0; \n    n = len(s); \n    for i in range(n): \n        for j in range(1,n-i+1):  \n            if (check_Equality(s[i:i+j])): \n                result+=1; \n    return result;",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_031",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef func(nums, k):\n    \"\"\" Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]",
        "expected_answer": "def func(nums, k):\n    import collections\n    d = collections.defaultdict(int)\n    for row in nums:\n        for i in row:\n            d[i] += 1\n    temp = []\n    import heapq\n    for key, v in d.items():\n        if len(temp) < k:\n            temp.append((v, key))\n            if len(temp) == k:\n                heapq.heapify(temp)\n        else:\n            if v > temp[0][0]:\n                heapq.heappop(temp)\n                heapq.heappush(temp, (v, key))\n    result = []\n    while temp:\n        v, key = heapq.heappop(temp)\n        result.append(key)\n    return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_032",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef max_Prime_Factors (n):\n    \"\"\" Write a python function to find the largest prime factor of a given number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert max_Prime_Factors(15) == 5\n    assert max_Prime_Factors(6) == 3\n    assert max_Prime_Factors(2) == 2",
        "expected_answer": "import math \ndef max_Prime_Factors (n): \n    maxPrime = -1 \n    while n%2 == 0: \n        maxPrime = 2\n        n >>= 1    \n    for i in range(3,int(math.sqrt(n))+1,2): \n        while n % i == 0: \n            maxPrime = i \n            n = n / i \n    if n > 2: \n        maxPrime = n  \n    return int(maxPrime)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_033",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef decimal_To_Binary(N):\n    \"\"\" Write a python function to convert a decimal number to binary number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert decimal_To_Binary(10) == 1010\n    assert decimal_To_Binary(1) == 1\n    assert decimal_To_Binary(20) == 10100",
        "expected_answer": "def decimal_To_Binary(N): \n    B_Number = 0\n    cnt = 0\n    while (N != 0): \n        rem = N % 2\n        c = pow(10,cnt)  \n        B_Number += rem*c  \n        N //= 2 \n        cnt += 1\n    return B_Number",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_034",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef find_missing(ar,N):\n    \"\"\" Write a python function to find the missing number in a sorted array. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find_missing([1,2,3,5],4) == 4\n    assert find_missing([1,3,4,5],4) == 2\n    assert find_missing([1,2,3,5,6,7],5) == 4",
        "expected_answer": "def find_missing(ar,N): \n    l = 0\n    r = N - 1\n    while (l <= r):  \n        mid = (l + r) / 2\n        mid= int (mid) \n        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): \n            return (mid + 1)  \n        elif (ar[mid] != mid + 1): \n            r = mid - 1 \n        else: \n            l = mid + 1\n    return (-1)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_035",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef find_rect_num(n):\n    \"\"\" Write a function to find the n-th rectangular number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find_rect_num(4) == 20\n    assert find_rect_num(5) == 30\n    assert find_rect_num(6) == 42",
        "expected_answer": "def find_rect_num(n):\n  return n*(n + 1)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_036",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef find_Nth_Digit(p,q,N) :\n    \"\"\" Write a python function to find the nth digit in the proper fraction of two given numbers. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find_Nth_Digit(1,2,1) == 5\n    assert find_Nth_Digit(3,5,1) == 6\n    assert find_Nth_Digit(5,6,5) == 3",
        "expected_answer": "def find_Nth_Digit(p,q,N) :  \n    while (N > 0) : \n        N -= 1;  \n        p *= 10;  \n        res = p // q;  \n        p %= q;  \n    return res;",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_037",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef sort_mixed_list(mixed_list):\n    \"\"\" Write a function to sort a given mixed list of integers and strings. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n    assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n    assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
        "expected_answer": "def sort_mixed_list(mixed_list):\n    int_part = sorted([i for i in mixed_list if type(i) is int])\n    str_part = sorted([i for i in mixed_list if type(i) is str])\n    return int_part + str_part",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_038",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef div_even_odd(list1):\n    \"\"\" Write a function to find the division of first even and odd number of a given list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert div_even_odd([1,3,5,7,4,1,6,8])==4\n    assert div_even_odd([1,2,3,4,5,6,7,8,9,10])==2\n    assert div_even_odd([1,5,7,9,10])==10",
        "expected_answer": "def div_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even/first_odd)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_039",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef rearange_string(S):\n    \"\"\" Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert rearange_string(\"aab\")==('aba')\n    assert rearange_string(\"aabb\")==('abab')\n    assert rearange_string(\"abccdd\")==('cdabcd')",
        "expected_answer": "import heapq\nfrom collections import Counter\ndef rearange_string(S):\n    ctr = Counter(S)\n    heap = [(-value, key) for key, value in ctr.items()]\n    heapq.heapify(heap)\n    if (-heap[0][0]) * 2 > len(S) + 1: \n        return \"\"\n    ans = []\n    while len(heap) >= 2:\n        nct1, char1 = heapq.heappop(heap)\n        nct2, char2 = heapq.heappop(heap)\n        ans.extend([char1, char2])\n        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))\n        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))\n    return \"\".join(ans) + (heap[0][1] if heap else \"\")",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_040",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef freq_element(nums):\n    \"\"\" Write a function to find frequency of the elements in a given list of lists using collections module. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n    assert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})\n    assert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})",
        "expected_answer": "from collections import Counter\nfrom itertools import chain\ndef freq_element(nums):\n  result = Counter(chain.from_iterable(nums))\n  return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_041",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef filter_evennumbers(nums):\n    \"\"\" Write a function to filter even numbers using lambda function. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n    assert filter_evennumbers([10,20,45,67,84,93])==[10,20,84]\n    assert filter_evennumbers([5,7,9,8,6,4,3])==[8,6,4]",
        "expected_answer": "def filter_evennumbers(nums):\n even_nums = list(filter(lambda x: x%2 == 0, nums))\n return even_nums",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_042",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef find_Sum(arr,n):\n    \"\"\" Write a python function to find the sum of repeated elements in a given array. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n    assert find_Sum([1,2,3,1,1],5) == 3\n    assert find_Sum([1,1,2],3) == 2",
        "expected_answer": "def find_Sum(arr,n): \n    return sum([x for x in arr if arr.count(x) > 1])",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_043",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef text_match(text):\n    \"\"\" Write a function to find sequences of lowercase letters joined with an underscore using regex. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\n    assert text_match(\"aab_Abbbc\") == 'Not matched!'\n    assert text_match(\"Aaab_abbbc\") == 'Not matched!'",
        "expected_answer": "import re\ndef text_match(text):\n  patterns = '^[a-z]+_[a-z]+$'\n  if re.search(patterns,  text):\n    return ('Found a match!')\n  else:\n    return ('Not matched!')",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_044",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef text_match_string(text):\n    \"\"\" Write a function that matches a word at the beginning of a string. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert text_match_string(\" python\")==('Not matched!')\n    assert text_match_string(\"python\")==('Found a match!')\n    assert text_match_string(\"  lang\")==('Not matched!')",
        "expected_answer": "import re\ndef text_match_string(text):\n        patterns = '^\\w+'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return 'Not matched!'",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_045",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef find_gcd(x, y):\n    \"\"\" Write a function to find the gcd of the given array elements. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert get_gcd([2, 4, 6, 8, 16]) == 2\n    assert get_gcd([1, 2, 3]) == 1\n    assert get_gcd([2, 4, 6, 8]) == 2 ",
        "expected_answer": "def find_gcd(x, y): \n\twhile(y): \n\t\tx, y = y, x % y \n\treturn x \ndef get_gcd(l):\n  num1 = l[0]\n  num2 = l[1]\n  gcd = find_gcd(num1, num2)\n  for i in range(2, len(l)):\n    gcd = find_gcd(gcd, l[i])\n  return gcd",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_046",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef test_distinct(data):\n    \"\"\" Write a python function to determine whether all the numbers are different from each other are not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert test_distinct([1,5,7,9]) == True\n    assert test_distinct([2,4,5,5,7,9]) == False\n    assert test_distinct([1,2,3]) == True",
        "expected_answer": "def test_distinct(data):\n  if len(data) == len(set(data)):\n    return True\n  else:\n    return False;",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_047",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef compute_Last_Digit(A,B):\n    \"\"\" Write a python function to find the last digit when factorial of a divides factorial of b. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert compute_Last_Digit(2,4) == 2\n    assert compute_Last_Digit(6,8) == 6\n    assert compute_Last_Digit(1,2) == 2",
        "expected_answer": "def compute_Last_Digit(A,B): \n    variable = 1\n    if (A == B): \n        return 1\n    elif ((B - A) >= 5):  \n        return 0\n    else:   \n        for i in range(A + 1,B + 1): \n            variable = (variable * (i % 10)) % 10\n        return variable % 10",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_048",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef odd_bit_set_number(n):\n    \"\"\" Write a python function to set all odd bits of a given number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert odd_bit_set_number(10) == 15\n    assert odd_bit_set_number(20) == 21\n    assert odd_bit_set_number(30) == 31",
        "expected_answer": "def odd_bit_set_number(n):\n    count = 0;res = 0;temp = n\n    while temp > 0:\n        if count % 2 == 0:\n            res |= (1 << count)\n        count += 1\n        temp >>= 1\n    return (n | res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_049",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef specified_element(nums, N):\n    \"\"\" Write a function to extract every first or specified element from a given two-dimensional list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]\n    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]",
        "expected_answer": "def specified_element(nums, N):\n    result = [i[N] for i in nums]\n    return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_050",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef min_length_list(input_list):\n    \"\"\" Write a function to find the list with minimum length using lambda function. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n    assert min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])\n    assert min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])",
        "expected_answer": "def min_length_list(input_list):\n    min_length = min(len(x) for x in input_list )  \n    min_list = min(input_list, key = lambda i: len(i))\n    return(min_length, min_list)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_051",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef check_equilateral(x,y,z):\n    \"\"\" Write a function to print check if the triangle is equilateral or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert check_equilateral(6,8,12)==False \n    assert check_equilateral(6,6,12)==False\n    assert check_equilateral(6,6,6)==True",
        "expected_answer": "def check_equilateral(x,y,z):\n  if x == y == z:\n\t   return True\n  else:\n     return False",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_052",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef parallelogram_area(b,h):\n    \"\"\" Write a function to caluclate area of a parallelogram. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert parallelogram_area(10,20)==200\n    assert parallelogram_area(15,20)==300\n    assert parallelogram_area(8,9)==72",
        "expected_answer": "def parallelogram_area(b,h):\n  area=b*h\n  return area",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_053",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef check_Equality(str):\n    \"\"\" Write a python function to check whether the first and last characters of a given string are equal or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert check_Equality(\"abcda\") == \"Equal\"\n    assert check_Equality(\"ab\") == \"Not Equal\"\n    assert check_Equality(\"mad\") == \"Not Equal\"",
        "expected_answer": "def check_Equality(str):\n  if (str[0] == str[-1]):  \n    return (\"Equal\") \n  else:  \n    return (\"Not Equal\")",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_054",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef counting_sort(my_list):\n    \"\"\" Write a function to sort the given array by using counting sort. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n    assert counting_sort([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]\n    assert counting_sort([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]",
        "expected_answer": "def counting_sort(my_list):\n    max_value = 0\n    for i in range(len(my_list)):\n        if my_list[i] > max_value:\n            max_value = my_list[i]\n    buckets = [0] * (max_value + 1)\n    for i in my_list:\n        buckets[i] += 1\n    i = 0\n    for j in range(max_value + 1):\n         for a in range(buckets[j]):\n             my_list[i] = j\n             i += 1\n    return my_list",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_055",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef tn_gp(a,n,r):\n    \"\"\" Write a function to find t-nth term of geometric series. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert tn_gp(1,5,2)==16\n    assert tn_gp(1,5,4)==256\n    assert tn_gp(2,6,3)==486",
        "expected_answer": "import math\ndef tn_gp(a,n,r):\n  tn = a * (math.pow(r, n - 1))\n  return tn",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_056",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef rev(num):\n    \"\"\" Write a python function to check if a given number is one less than twice its reverse. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert check(70) == False\n    assert check(23) == False\n    assert check(73) == True",
        "expected_answer": "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_057",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef find_Max_Num(arr,n) :\n    \"\"\" Write a python function to find the largest number that can be formed with the given digits. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find_Max_Num([1,2,3],3) == 321\n    assert find_Max_Num([4,5,6,1],4) == 6541\n    assert find_Max_Num([1,2,3,9],4) == 9321",
        "expected_answer": "def find_Max_Num(arr,n) : \n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_058",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef opposite_Signs(x,y):\n    \"\"\" Write a python function to check whether the given two integers have opposite sign or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert opposite_Signs(1,-2) == True\n    assert opposite_Signs(3,2) == False\n    assert opposite_Signs(-10,-10) == False",
        "expected_answer": "def opposite_Signs(x,y): \n    return ((x ^ y) < 0);",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_059",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef is_octagonal(n):\n    \"\"\" Write a function to find the nth octagonal number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert is_octagonal(5) == 65\n    assert is_octagonal(10) == 280\n    assert is_octagonal(15) == 645",
        "expected_answer": "def is_octagonal(n): \n\treturn 3 * n * n - 2 * n",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_060",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef max_len_sub( arr, n):\n    \"\"\" Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n    assert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4\n    assert max_len_sub([9, 11, 13, 15, 18], 5) == 1",
        "expected_answer": "def max_len_sub( arr, n): \n\tmls=[] \n\tmax = 0\n\tfor i in range(n): \n\t\tmls.append(1) \n\tfor i in range(n): \n\t\tfor j in range(i): \n\t\t\tif (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1): \n\t\t\t\tmls[i] = mls[j] + 1\n\tfor i in range(n): \n\t\tif (max < mls[i]): \n\t\t\tmax = mls[i] \n\treturn max",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_061",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef count_Substrings(s,n):\n    \"\"\" Write a python function to count number of substrings with the sum of digits equal to their length. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert count_Substrings('112112',6) == 6\n    assert count_Substrings('111',3) == 6\n    assert count_Substrings('1101112',7) == 12",
        "expected_answer": "from collections import defaultdict\ndef count_Substrings(s,n):\n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_062",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef smallest_num(xs):\n    \"\"\" Write a python function to find smallest number in a list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert smallest_num([10, 20, 1, 45, 99]) == 1\n    assert smallest_num([1, 2, 3]) == 1\n    assert smallest_num([45, 46, 50, 60]) == 45",
        "expected_answer": "def smallest_num(xs):\n  return min(xs)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_063",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef max_difference(test_list):\n    \"\"\" Write a function to find the maximum difference between available pairs in the given tuple list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n    assert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15\n    assert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23",
        "expected_answer": "def max_difference(test_list):\n  temp = [abs(b - a) for a, b in test_list]\n  res = max(temp)\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_064",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef subject_marks(subjectmarks):\n    \"\"\" Write a function to sort a list of tuples using lambda. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n    assert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])\n    assert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])",
        "expected_answer": "def subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_065",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef recursive_list_sum(data_list):\n    \"\"\" Write a function of recursion list sum. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n    assert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106\n    assert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210",
        "expected_answer": "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_066",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef pos_count(list):\n    \"\"\" Write a python function to count positive numbers in a list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert pos_count([1,-2,3,-4]) == 2\n    assert pos_count([3,4,5,-1]) == 3\n    assert pos_count([1,2,3,4]) == 4",
        "expected_answer": "def pos_count(list):\n  pos_count= 0\n  for num in list: \n    if num >= 0: \n      pos_count += 1\n  return pos_count",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_067",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef bell_number(n):\n    \"\"\" Write a function to find the number of ways to partition a set of bell numbers. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert bell_number(2)==2\n    assert bell_number(10)==115975\n    assert bell_number(56)==6775685320645824322581483068371419745979053216268760300",
        "expected_answer": "def bell_number(n):   \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1]  \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \n    return bell[n][0]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_068",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef is_Monotonic(A):\n    \"\"\" Write a python function to check whether the given array is monotonic or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert is_Monotonic([6, 5, 4, 4]) == True\n    assert is_Monotonic([1, 2, 2, 3]) == True\n    assert is_Monotonic([1, 3, 2]) == False",
        "expected_answer": "def is_Monotonic(A): \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1)))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_069",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef is_sublist(l, s):\n    \"\"\" Write a function to check whether a list contains the given sublist or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert is_sublist([2,4,3,5,7],[3,7])==False\n    assert is_sublist([2,4,3,5,7],[4,3])==True\n    assert is_sublist([2,4,3,5,7],[1,6])==False",
        "expected_answer": "def is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_070",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef find_equal_tuple(Input, k):\n    \"\"\" Write a function to find whether all the given tuples have equal length or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n    assert get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) == 'All tuples do not have same length'\n    assert get_equal([(1, 2), (3, 4)], 2) == 'All tuples have same length'",
        "expected_answer": "def find_equal_tuple(Input, k):\n  flag = 1\n  for tuple in Input:\n    if len(tuple) != k:\n      flag = 0\n      break\n  return flag\ndef get_equal(Input, k):\n  if find_equal_tuple(Input, k) == 1:\n    return (\"All tuples have same length\")\n  else:\n    return (\"All tuples do not have same length\")",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_071",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef comb_sort(nums):\n    \"\"\" Write a function to sort a list of elements using comb sort. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n    assert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]\n    assert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]",
        "expected_answer": "def comb_sort(nums):\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i+gaps]:\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_072",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef dif_Square(n):\n    \"\"\" Write a python function to check whether the given number can be represented as difference of two squares or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert dif_Square(5) == True\n    assert dif_Square(10) == False\n    assert dif_Square(15) == True",
        "expected_answer": "def dif_Square(n): \n    if (n % 4 != 2): \n        return True\n    return False",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_073",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef multiple_split(text):\n    \"\"\" Write a function to split the given string with multiple delimiters by using regex. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n    assert multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']\n    assert multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']",
        "expected_answer": "import re\ndef multiple_split(text):\n  return (re.split('; |, |\\*|\\n',text))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_074",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef is_samepatterns(colors, patterns):\n    \"\"\" Write a function to check whether it follows the sequence given in the patterns array. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n    assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False \n    assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False ",
        "expected_answer": "def is_samepatterns(colors, patterns):    \n    if len(colors) != len(patterns):\n        return False    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n\n    if len(pset) != len(sset):\n        return False   \n\n    for values in sdict.values():\n\n        for i in range(len(values) - 1):\n            if values[i] != values[i+1]:\n                return False\n\n    return True",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_075",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef find_tuples(test_list, K):\n    \"\"\" Write a function to find tuples which have all elements divisible by k from the given list of tuples. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n    assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'\n    assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'",
        "expected_answer": "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return (str(res))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_076",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef count_Squares(m,n):\n    \"\"\" Write a python function to count the number of squares in a rectangle. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert count_Squares(4,3) == 20\n    assert count_Squares(2,2) == 5\n    assert count_Squares(1,1) == 1",
        "expected_answer": "def count_Squares(m,n):\n    if(n < m):\n        temp = m\n        m = n\n        n = temp\n    return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_077",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef is_Diff(n):\n    \"\"\" Write a python function to find the difference between sum of even and odd digits. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert is_Diff (12345) == False\n    assert is_Diff(1212112) == True\n    assert is_Diff(1212) == False",
        "expected_answer": "def is_Diff(n): \n    return (n % 11 == 0)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_078",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef count_With_Odd_SetBits(n):\n    \"\"\" Write a python function to find number of integers with odd number of set bits. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert count_With_Odd_SetBits(5) == 3\n    assert count_With_Odd_SetBits(10) == 5\n    assert count_With_Odd_SetBits(15) == 8",
        "expected_answer": "def count_With_Odd_SetBits(n): \n    if (n % 2 != 0): \n        return (n + 1) / 2\n    count = bin(n).count('1') \n    ans = n / 2\n    if (count % 2 != 0): \n        ans += 1\n    return ans",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_079",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef word_len(s):\n    \"\"\" Write a python function to check whether the length of the word is odd or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert word_len(\"Hadoop\") == False\n    assert word_len(\"great\") == True\n    assert word_len(\"structure\") == True",
        "expected_answer": "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_080",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef tetrahedral_number(n):\n    \"\"\" Write a function to find the nth tetrahedral number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert tetrahedral_number(5) == 35.0\n    assert tetrahedral_number(6) == 56.0\n    assert tetrahedral_number(7) == 84.0",
        "expected_answer": "def tetrahedral_number(n): \n\treturn (n * (n + 1) * (n + 2)) / 6",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_081",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef zip_tuples(test_tup1, test_tup2):\n    \"\"\" Write a function to zip the two given tuples. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n    assert zip_tuples((8, 9, 5, 6, 10, 11),(2, 6, 7) ) == [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]\n    assert zip_tuples((9, 10, 6, 7, 11, 12),(3, 7, 8) ) == [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]",
        "expected_answer": "def zip_tuples(test_tup1, test_tup2):\n  res = []\n  for i, j in enumerate(test_tup1):\n    res.append((j, test_tup2[i % len(test_tup2)])) \n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_082",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef volume_sphere(r):\n    \"\"\" Write a function to find the volume of a sphere. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert volume_sphere(10)==4188.790204786391\n    assert volume_sphere(25)==65449.84694978735\n    assert volume_sphere(20)==33510.32163829113",
        "expected_answer": "import math\ndef volume_sphere(r):\n  volume=(4/3)*math.pi*r*r*r\n  return volume",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_083",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef get_Char(strr):\n    \"\"\" Write a python function to find the character made by adding all the characters of the given string. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert get_Char(\"abc\") == \"f\"\n    assert get_Char(\"gfg\") == \"t\"\n    assert get_Char(\"ab\") == \"c\"",
        "expected_answer": "def get_Char(strr):  \n    summ = 0\n    for i in range(len(strr)): \n        summ += (ord(strr[i]) - ord('a') + 1)  \n    if (summ % 26 == 0): \n        return ord('z') \n    else: \n        summ = summ % 26\n        return chr(ord('a') + summ - 1)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_084",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef sequence(n):\n    \"\"\" Write a function to find the n-th number in newman conway sequence. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert sequence(10) == 6\n    assert sequence(2) == 1\n    assert sequence(3) == 2",
        "expected_answer": "def sequence(n): \n\tif n == 1 or n == 2: \n\t\treturn 1\n\telse: \n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_085",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef surfacearea_sphere(r):\n    \"\"\" Write a function to find the surface area of a sphere. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert surfacearea_sphere(10)==1256.6370614359173\n    assert surfacearea_sphere(15)==2827.4333882308138\n    assert surfacearea_sphere(20)==5026.548245743669",
        "expected_answer": "import math\ndef surfacearea_sphere(r):\n  surfacearea=4*math.pi*r*r\n  return surfacearea",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_086",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef centered_hexagonal_number(n):\n    \"\"\" Write a function to find nth centered hexagonal number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert centered_hexagonal_number(10) == 271\n    assert centered_hexagonal_number(2) == 7\n    assert centered_hexagonal_number(9) == 217",
        "expected_answer": "def centered_hexagonal_number(n):\n  return 3 * n * (n - 1) + 1",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_087",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    \"\"\" Write a function to merge three dictionaries into a single expression. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n    assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}\n    assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}",
        "expected_answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    return merged_dict",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_088",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef freq_count(list1):\n    \"\"\" Write a function to get the frequency of the elements in a list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n    assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) \n    assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) ",
        "expected_answer": "import collections\ndef freq_count(list1):\n  freq_count= collections.Counter(list1)\n  return freq_count",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_089",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef closest_num(N):\n    \"\"\" Write a function to find the closest smaller number than n. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert closest_num(11) == 10\n    assert closest_num(7) == 6\n    assert closest_num(12) == 11",
        "expected_answer": "def closest_num(N):\n  return (N - 1)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_090",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef len_log(list1):\n    \"\"\" Write a python function to find the length of the longest word. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n    assert len_log([\"a\",\"ab\",\"abc\"]) == 3\n    assert len_log([\"small\",\"big\",\"tall\"]) == 5",
        "expected_answer": "def len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_091",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef find_substring(str1, sub_str):\n    \"\"\" Write a function to check if a substring is present in a given list of string values. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n    assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False\n    assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True",
        "expected_answer": "def find_substring(str1, sub_str):\n   if any(sub_str in s for s in str1):\n       return True\n   return False",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_092",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef is_undulating(n):\n    \"\"\" Write a function to check whether the given number is undulating or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert is_undulating(\"1212121\") == True\n    assert is_undulating(\"1991\") == False\n    assert is_undulating(\"121\") == True",
        "expected_answer": "def is_undulating(n): \n\tif (len(n) <= 2): \n\t\treturn False\n\tfor i in range(2, len(n)): \n\t\tif (n[i - 2] != n[i]): \n\t\t\treturn False\n\treturn True",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_093",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef power(a,b):\n    \"\"\" Write a function to calculate the value of 'a' to the power 'b'. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert power(3,4) == 81\n    assert power(2,3) == 8\n    assert power(5,5) == 3125",
        "expected_answer": "def power(a,b):\n\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\telif b==1:\n\t\treturn a\n\telse:\n\t\treturn a*power(a,b-1)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_094",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef index_minimum(test_list):\n    \"\"\" Write a function to extract the index minimum value record from the given tuples. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n    assert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'\n    assert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'",
        "expected_answer": "from operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_095",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef Find_Min_Length(lst):\n    \"\"\" Write a python function to find the minimum length of sublist. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert Find_Min_Length([[1],[1,2]]) == 1\n    assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2\n    assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3",
        "expected_answer": "def Find_Min_Length(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_096",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef divisor(n):\n    \"\"\" Write a python function to find the number of divisors of a given integer. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert divisor(15) == 4 \n    assert divisor(12) == 6\n    assert divisor(9) == 3",
        "expected_answer": "def divisor(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_097",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef frequency_lists(list1):\n    \"\"\" Write a function to find frequency count of list of lists. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n    assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}\n    assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}",
        "expected_answer": "def frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_098",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef multiply_num(numbers):\n    \"\"\" Write a function to multiply all the numbers in a list and divide with the length of the list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert multiply_num((8, 2, 3, -1, 7))==-67.2\n    assert multiply_num((-10,-20,-30))==-2000.0\n    assert multiply_num((19,15,18))==1710.0",
        "expected_answer": "def multiply_num(numbers):  \n    total = 1\n    for x in numbers:\n        total *= x  \n    return total/len(numbers)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_099",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef decimal_to_binary(n):\n    \"\"\" Write a function to convert the given decimal number to its binary equivalent. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert decimal_to_binary(8) == '1000'\n    assert decimal_to_binary(18) == '10010'\n    assert decimal_to_binary(7) == '111' ",
        "expected_answer": "def decimal_to_binary(n): \n    return bin(n).replace(\"0b\",\"\")",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_100",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef next_smallest_palindrome(num):\n    \"\"\" Write a function to find the next smallest palindrome of a specified number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert next_smallest_palindrome(99)==101\n    assert next_smallest_palindrome(1221)==1331\n    assert next_smallest_palindrome(120)==121",
        "expected_answer": "import sys\ndef next_smallest_palindrome(num):\n    numstr = str(num)\n    for i in range(num+1,sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_101",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef kth_element(arr, n, k):\n    \"\"\" Write a function to find the kth element in the given array. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert kth_element([12,3,5,7,19], 5, 2) == 3\n    assert kth_element([17,24,8,23], 4, 3) == 8\n    assert kth_element([16,21,25,36,4], 5, 4) == 36",
        "expected_answer": "def kth_element(arr, n, k):\n  for i in range(n):\n    for j in range(0, n-i-1):\n      if arr[j] > arr[j+1]:\n        arr[j], arr[j+1] == arr[j+1], arr[j]\n  return arr[k-1]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_102",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef snake_to_camel(word):\n    \"\"\" Write a function to convert snake case string to camel case string. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert snake_to_camel('python_program')=='PythonProgram'\n    assert snake_to_camel('python_language')==('PythonLanguage')\n    assert snake_to_camel('programming_language')==('ProgrammingLanguage')",
        "expected_answer": "def snake_to_camel(word):\n        import re\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_103",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef eulerian_num(n, m):\n    \"\"\" Write a function to find eulerian number a(n, m). \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert eulerian_num(3, 1) == 4\n    assert eulerian_num(4, 1) == 11\n    assert eulerian_num(5, 3) == 26",
        "expected_answer": "def eulerian_num(n, m): \n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_104",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef sort_sublists(input_list):\n    \"\"\" Write a function to sort each sublist of strings in a given list of lists using lambda function. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]",
        "expected_answer": "def sort_sublists(input_list):\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \n    return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_105",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef count(lst):\n    \"\"\" Write a python function to count true booleans in the given list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert count([True,False,True]) == 2\n    assert count([False,False]) == 0\n    assert count([True,True,True]) == 3",
        "expected_answer": "def count(lst):   \n    return sum(lst)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_106",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef add_lists(test_list, test_tup):\n    \"\"\" Write a function to add the given list to the given tuples. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n    assert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)\n    assert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)",
        "expected_answer": "def add_lists(test_list, test_tup):\n  res = tuple(list(test_tup) + test_list)\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_107",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef count_Hexadecimal(L,R) :\n    \"\"\" Write a python function to count hexadecimal numbers for a given range. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert count_Hexadecimal(10,15) == 6\n    assert count_Hexadecimal(2,4) == 0\n    assert count_Hexadecimal(15,16) == 1",
        "expected_answer": "def count_Hexadecimal(L,R) :  \n    count = 0;  \n    for i in range(L,R + 1) : \n        if (i >= 10 and i <= 15) : \n            count += 1;  \n        elif (i > 15) : \n            k = i;  \n            while (k != 0) :  \n                if (k % 16 >= 10) : \n                    count += 1;  \n                k = k // 16;  \n    return count;",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_108",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef merge_sorted_list(num1,num2,num3):\n    \"\"\" Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n    assert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]\n    assert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]",
        "expected_answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n  num1=sorted(num1)\n  num2=sorted(num2)\n  num3=sorted(num3)\n  result = heapq.merge(num1,num2,num3)\n  return list(result)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_109",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef odd_Equivalent(s,n):\n    \"\"\" Write a python function to find the count of rotations of a binary string with odd value. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert odd_Equivalent(\"011001\",6) == 3\n    assert odd_Equivalent(\"11011\",5) == 4\n    assert odd_Equivalent(\"1010\",4) == 2",
        "expected_answer": "def odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_110",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef extract_missing(test_list, strt_val, stop_val):\n    \"\"\" Write a function to extract the ranges that are missing from the given list with the given start range and end range values. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n    assert extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60) == [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]\n    assert extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52) == [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]",
        "expected_answer": "def extract_missing(test_list, strt_val, stop_val):\n  res = []\n  for sub in test_list:\n    if sub[0] > strt_val:\n      res.append((strt_val, sub[0]))\n      strt_val = sub[1]\n    if strt_val < stop_val:\n      res.append((strt_val, stop_val))\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_111",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef common_in_nested_lists(nestedlist):\n    \"\"\" Write a function to find common elements in given nested lists. * list item * list item * list item * list item \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n    assert common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])==[5,23]\n    assert common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])==[4]",
        "expected_answer": "def common_in_nested_lists(nestedlist):\n    result = list(set.intersection(*map(set, nestedlist)))\n    return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_112",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef perimeter(diameter,height) :\n    \"\"\" Write a python function to find the perimeter of a cylinder. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert perimeter(2,4) == 12\n    assert perimeter(1,2) == 6\n    assert perimeter(3,1) == 8",
        "expected_answer": "def perimeter(diameter,height) : \n    return 2*(diameter+height)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_113",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef check_integer(text):\n    \"\"\" Write a function to check if a string represents an integer or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert check_integer(\"python\")==False\n    assert check_integer(\"1\")==True\n    assert check_integer(\"12345\")==True",
        "expected_answer": "def check_integer(text):\n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\n          return True\n     elif (text[0] in \"+-\") and \\\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\n         return True\n     else:\n        return False",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_114",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef assign_freq(test_list):\n    \"\"\" Write a function to assign frequency to each tuple in the given tuple list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n    assert assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'\n    assert assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'",
        "expected_answer": "from collections import Counter \ndef assign_freq(test_list):\n  res = [(*key, val) for key, val in Counter(test_list).items()]\n  return (str(res))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_115",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef empty_dit(list1):\n    \"\"\" Write a function to check whether all dictionaries in a list are empty or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert empty_dit([{},{},{}])==True\n    assert empty_dit([{1,2},{},{}])==False\n    assert empty_dit({})==True",
        "expected_answer": "def empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_116",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef tuple_to_int(nums):\n    \"\"\" Write a function to convert a given tuple of positive integers into an integer. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert tuple_to_int((1,2,3))==123\n    assert tuple_to_int((4,5,6))==456\n    assert tuple_to_int((5,6,7))==567",
        "expected_answer": "def tuple_to_int(nums):\n    result = int(''.join(map(str,nums)))\n    return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_117",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef list_to_float(test_list):\n    \"\"\" Write a function to convert all possible convertible elements in the list to float. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n    assert list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == '[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]'\n    assert list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == '[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]'",
        "expected_answer": "def list_to_float(test_list):\n  res = []\n  for tup in test_list:\n    temp = []\n    for ele in tup:\n      if ele.isalpha():\n        temp.append(ele)\n      else:\n        temp.append(float(ele))\n    res.append((temp[0],temp[1])) \n  return (str(res))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_118",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef string_to_list(string):\n    \"\"\" [link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert string_to_list(\"python programming\")==['python','programming']\n    assert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']\n    assert string_to_list(\"write a program\")==['write','a','program']",
        "expected_answer": "def string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_119",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef search(arr,n) :\n    \"\"\" Write a python function to find the element that appears only once in a sorted array. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert search([1,1,2,2,3],5) == 3\n    assert search([1,1,3,3,4,4,5,5,7,7,8],11) == 8\n    assert search([1,2,2,3,3,4,4],7) == 1",
        "expected_answer": "def search(arr,n) :\n    XOR = 0\n    for i in range(n) :\n        XOR = XOR ^ arr[i]\n    return (XOR)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_120",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef max_product_tuple(list1):\n    \"\"\" Write a function to find the maximum product from the pairs of tuples within a given list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n    assert max_product_tuple([(10,20), (15,2), (5,10)] )==200\n    assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484",
        "expected_answer": "def max_product_tuple(list1):\n    result_max = max([abs(x * y) for x, y in list1] )\n    return result_max",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_121",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef check_triplet(A, n, sum, count):\n    \"\"\" Write a function to find the triplet with sum of the given array \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n    assert check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0) == False\n    assert check_triplet([10, 4, 2, 3, 5], 5, 15, 0) == True",
        "expected_answer": "def check_triplet(A, n, sum, count):\n    if count == 3 and sum == 0:\n        return True\n    if count == 3 or n == 0 or sum < 0:\n        return False\n    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or\\\n           check_triplet(A, n - 1, sum, count)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_122",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef smartNumber(n):\n    \"\"\" Write a function to find n\u2019th smart number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert smartNumber(1) == 30\n    assert smartNumber(50) == 273\n    assert smartNumber(1000) == 2664",
        "expected_answer": "MAX = 3000 \ndef smartNumber(n): \n\tprimes = [0] * MAX \n\tresult = [] \n\tfor i in range(2, MAX): \n\t\tif (primes[i] == 0): \n\t\t\tprimes[i] = 1 \n\t\t\tj = i * 2 \n\t\t\twhile (j < MAX): \n\t\t\t\tprimes[j] -= 1 \n\t\t\t\tif ( (primes[j] + 3) == 0): \n\t\t\t\t\tresult.append(j) \n\t\t\t\tj = j + i \n\tresult.sort() \n\treturn result[n - 1]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_123",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef amicable_numbers_sum(limit):\n    \"\"\" Write a function to sum all amicable numbers from 1 to a specified number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert amicable_numbers_sum(999)==504\n    assert amicable_numbers_sum(9999)==31626\n    assert amicable_numbers_sum(99)==0",
        "expected_answer": "def amicable_numbers_sum(limit):\n    if not isinstance(limit, int):\n        return \"Input is not an integer!\"\n    if limit < 1:\n        return \"Input must be bigger than 0!\"\n    amicables = set()\n    for num in range(2, limit+1):\n        if num in amicables:\n            continue\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact2)\n    return sum(amicables)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_124",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef angle_complex(a,b):\n    \"\"\" Write a function to get the angle of a complex number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert angle_complex(0,1j)==1.5707963267948966 \n    assert angle_complex(2,1j)==0.4636476090008061\n    assert angle_complex(0,2j)==1.5707963267948966",
        "expected_answer": "import cmath\ndef angle_complex(a,b):\n  cn=complex(a,b)\n  angle=cmath.phase(a+b)\n  return angle",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_125",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef find_length(string, n):\n    \"\"\" Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find_length(\"11000010001\", 11) == 6\n    assert find_length(\"10111\", 5) == 1\n    assert find_length(\"11011101100101\", 14) == 2 ",
        "expected_answer": "def find_length(string, n): \n\tcurrent_sum = 0\n\tmax_sum = 0\n\tfor i in range(n): \n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \n\t\tif current_sum < 0: \n\t\t\tcurrent_sum = 0\n\t\tmax_sum = max(current_sum, max_sum) \n\treturn max_sum if max_sum else 0",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_126",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef sum(a,b):\n    \"\"\" Write a python function to find the sum of common divisors of two given numbers. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert sum(10,15) == 6\n    assert sum(100,150) == 93\n    assert sum(4,6) == 3",
        "expected_answer": "def sum(a,b): \n    sum = 0\n    for i in range (1,min(a,b)): \n        if (a % i == 0 and b % i == 0): \n            sum += i \n    return sum",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_127",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef multiply_int(x, y):\n    \"\"\" Write a function to multiply two integers without using the * operator in python. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert multiply_int(10,20)==200\n    assert multiply_int(5,10)==50\n    assert multiply_int(4,8)==32",
        "expected_answer": "def multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_128",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef long_words(n, str):\n    \"\"\" Write a function to shortlist words that are longer than n from a given list of words. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert long_words(3,\"python is a programming language\")==['python','programming','language']\n    assert long_words(2,\"writing a program\")==['writing','program']\n    assert long_words(5,\"sorting list\")==['sorting']",
        "expected_answer": "def long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_129",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef magic_square_test(my_matrix):\n    \"\"\" Write a function to calculate magic square. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n    assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True\n    assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False",
        "expected_answer": "def magic_square_test(my_matrix):\n    iSize = len(my_matrix[0])\n    sum_list = []\n    sum_list.extend([sum (lines) for lines in my_matrix])   \n    for col in range(iSize):\n        sum_list.append(sum(row[col] for row in my_matrix))\n    result1 = 0\n    for i in range(0,iSize):\n        result1 +=my_matrix[i][i]\n    sum_list.append(result1)      \n    result2 = 0\n    for i in range(iSize-1,-1,-1):\n        result2 +=my_matrix[i][i]\n    sum_list.append(result2)\n    if len(set(sum_list))>1:\n        return False\n    return True",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_130",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef max_occurrences(nums):\n    \"\"\" Write a function to find the item with maximum frequency in a given list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n    assert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])==(8, 2)\n    assert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==(20, 3)",
        "expected_answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1]) \n    return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_131",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef reverse_vowels(str1):\n    \"\"\" Write a python function to reverse only the vowels of a given string. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert reverse_vowels(\"Python\") == \"Python\"\n    assert reverse_vowels(\"USA\") == \"ASU\"\n    assert reverse_vowels(\"ab\") == \"ab\"",
        "expected_answer": "def reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_132",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef tup_string(tup1):\n    \"\"\" Write a function to convert tuple to a string. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n    assert tup_string(('p','y','t','h','o','n'))==(\"python\")\n    assert tup_string(('p','r','o','g','r','a','m'))==(\"program\")",
        "expected_answer": "def tup_string(tup1):\n  str =  ''.join(tup1)\n  return str",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_133",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef sum_negativenum(nums):\n    \"\"\" Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n    assert sum_negativenum([10,15,-14,13,-18,12,-20])==-52\n    assert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894",
        "expected_answer": "def sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_134",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef check_last (arr,n,p):\n    \"\"\" Write a python function to check whether the last element of given array is even or odd after performing an operation p times. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert check_last([5,7,10],3,1) == \"ODD\"\n    assert check_last([2,3],2,3) == \"EVEN\"\n    assert check_last([1,2,3],3,1) == \"ODD\"",
        "expected_answer": "def check_last (arr,n,p): \n    _sum = 0\n    for i in range(n): \n        _sum = _sum + arr[i] \n    if p == 1: \n        if _sum % 2 == 0: \n            return \"ODD\"\n        else: \n            return \"EVEN\"\n    return \"EVEN\"",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_135",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef hexagonal_num(n):\n    \"\"\" Write a function to find the nth hexagonal number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert hexagonal_num(10) == 190\n    assert hexagonal_num(5) == 45\n    assert hexagonal_num(7) == 91",
        "expected_answer": "def hexagonal_num(n): \n\treturn n*(2*n - 1)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_136",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef cal_electbill(units):\n    \"\"\" Write a function to calculate electricity bill. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert cal_electbill(75)==246.25\n    assert cal_electbill(265)==1442.75\n    assert cal_electbill(100)==327.5",
        "expected_answer": "def cal_electbill(units):\n if(units < 50):\n    amount = units * 2.60\n    surcharge = 25\n elif(units <= 100):\n    amount = 130 + ((units - 50) * 3.25)\n    surcharge = 35\n elif(units <= 200):\n    amount = 130 + 162.50 + ((units - 100) * 5.26)\n    surcharge = 45\n else:\n    amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)\n    surcharge = 75\n total = amount + surcharge\n return total",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_137",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef zero_count(nums):\n    \"\"\" Write a function to find the ration of zeroes in an array of integers. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n    assert zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.00\n    assert zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.00",
        "expected_answer": "from array import array\ndef zero_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x == 0:\n            n1 += 1\n        else:\n          None\n    return round(n1/n,2)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_138",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef is_Sum_Of_Powers_Of_Two(n):\n    \"\"\" Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert is_Sum_Of_Powers_Of_Two(10) == True\n    assert is_Sum_Of_Powers_Of_Two(7) == False\n    assert is_Sum_Of_Powers_Of_Two(14) == True",
        "expected_answer": "def is_Sum_Of_Powers_Of_Two(n): \n    if (n % 2 == 1): \n        return False\n    else: \n        return True",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_139",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef circle_circumference(r):\n    \"\"\" Write a function to find the circumference of a circle. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert circle_circumference(10)==62.830000000000005\n    assert circle_circumference(5)==31.415000000000003\n    assert circle_circumference(4)==25.132",
        "expected_answer": "def circle_circumference(r):\n  perimeter=2*3.1415*r\n  return perimeter",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_140",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef extract_singly(test_list):\n    \"\"\" Write a function to extract elements that occur singly in the given tuple list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n    assert extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == [1, 2, 3, 4, 7, 8]\n    assert extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == [7, 8, 9, 10, 11, 12]",
        "expected_answer": "def extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_141",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef pancake_sort(nums):\n    \"\"\" Write a function to sort a list of elements using pancake sort. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n    assert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]\n    assert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]",
        "expected_answer": "def pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_142",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef count_samepair(list1,list2,list3):\n    \"\"\" Write a function to count the same pair in three given lists. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n    assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4\n    assert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5",
        "expected_answer": "def count_samepair(list1,list2,list3):\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n    return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_143",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef find_lists(Input):\n    \"\"\" Write a function to find number of lists present in the given tuple. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n    assert find_lists(([1, 2], [3, 4], [5, 6]))  == 3\n    assert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1",
        "expected_answer": "def find_lists(Input): \n\tif isinstance(Input, list): \n\t\treturn 1\n\telse: \n\t\treturn len(Input)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_144",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef sum_Pairs(arr,n):\n    \"\"\" Write a python function to find the sum of absolute differences in all pairs of the given array. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert sum_Pairs([1,8,9,15,16],5) == 74\n    assert sum_Pairs([1,2,3,4],4) == 10\n    assert sum_Pairs([1,2,3,4,5,7,9,11,14],9) == 188",
        "expected_answer": "def sum_Pairs(arr,n): \n    sum = 0\n    for i in range(n - 1,-1,-1): \n        sum += i*arr[i] - (n-1-i) * arr[i] \n    return sum",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_145",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef max_Abs_Diff(arr,n):\n    \"\"\" Write a python function to find the maximum difference between any two elements in a given array. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert max_Abs_Diff((2,1,5,3),4) == 4\n    assert max_Abs_Diff((9,3,2,5,1),5) == 8\n    assert max_Abs_Diff((3,2,1),3) == 2",
        "expected_answer": "def max_Abs_Diff(arr,n): \n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_146",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef ascii_value_string(str1):\n    \"\"\" Write a function to find the ascii value of total characters in a string. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert ascii_value_string(\"python\")==112\n    assert ascii_value_string(\"Program\")==80\n    assert ascii_value_string(\"Language\")==76",
        "expected_answer": "def ascii_value_string(str1):\n  for i in range(len(str1)):\n   return ord(str1[i])",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_147",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef max_path_sum(tri, m, n):\n    \"\"\" Write a function to find the maximum total path sum in the given triangle. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n    assert max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2) == 24 \n    assert max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2) == 53",
        "expected_answer": "def max_path_sum(tri, m, n): \n\tfor i in range(m-1, -1, -1): \n\t\tfor j in range(i+1): \n\t\t\tif (tri[i+1][j] > tri[i+1][j+1]): \n\t\t\t\ttri[i][j] += tri[i+1][j] \n\t\t\telse: \n\t\t\t\ttri[i][j] += tri[i+1][j+1] \n\treturn tri[0][0]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_148",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef sum_digits_single(x) :\n    \"\"\" Write a function to divide a number into two parts such that the sum of digits is maximum. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert sum_digits_twoparts(35)==17\n    assert sum_digits_twoparts(7)==7\n    assert sum_digits_twoparts(100)==19",
        "expected_answer": "def sum_digits_single(x) : \n    ans = 0\n    while x : \n        ans += x % 10\n        x //= 10  \n    return ans \ndef closest(x) : \n    ans = 0\n    while (ans * 10 + 9 <= x) : \n        ans = ans * 10 + 9  \n    return ans   \ndef sum_digits_twoparts(N) : \n    A = closest(N)  \n    return sum_digits_single(A) + sum_digits_single(N - A)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_149",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef longest_subseq_with_diff_one(arr, n):\n    \"\"\" Write a function to find the longest subsequence such that the difference between adjacents is one for the given array. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n    assert longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7) == 3\n    assert longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8) == 7",
        "expected_answer": "def longest_subseq_with_diff_one(arr, n): \n\tdp = [1 for i in range(n)] \n\tfor i in range(n): \n\t\tfor j in range(i): \n\t\t\tif ((arr[i] == arr[j]+1) or (arr[i] == arr[j]-1)): \n\t\t\t\tdp[i] = max(dp[i], dp[j]+1) \n\tresult = 1\n\tfor i in range(n): \n\t\tif (result < dp[i]): \n\t\t\tresult = dp[i] \n\treturn result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_150",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef does_Contain_B(a,b,c):\n    \"\"\" Write a python function to find whether the given number is present in the infinite sequence or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert does_Contain_B(1,7,3) == True\n    assert does_Contain_B(1,-3,5) == False\n    assert does_Contain_B(3,2,5) == False",
        "expected_answer": "def does_Contain_B(a,b,c): \n    if (a == b): \n        return True\n    if ((b - a) * c > 0 and (b - a) % c == 0): \n        return True\n    return False",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_151",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef gcd(p,q):\n    \"\"\" Write a python function to check whether the given number is co-prime or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert is_coprime(17,13) == True\n    assert is_coprime(15,21) == False\n    assert is_coprime(25,45) == False",
        "expected_answer": "def gcd(p,q):\n    while q != 0:\n        p, q = q,p%q\n    return p\ndef is_coprime(x,y):\n    return gcd(x,y) == 1",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_152",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef merge(a,b):\n    \"\"\" Write a function to sort the given array by using merge sort. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n    assert merge_sort([7, 25, 45, 78, 11, 33, 19]) == [7, 11, 19, 25, 33, 45, 78]\n    assert merge_sort([3, 1, 4, 9, 8]) == [1, 3, 4, 8, 9]",
        "expected_answer": "def merge(a,b):\n    c = []\n    while len(a) != 0 and len(b) != 0:\n        if a[0] < b[0]:\n            c.append(a[0])\n            a.remove(a[0])\n        else:\n            c.append(b[0])\n            b.remove(b[0])\n    if len(a) == 0:\n        c += b\n    else:\n        c += a\n    return c\ndef merge_sort(x):\n    if len(x) == 0 or len(x) == 1:\n        return x\n    else:\n        middle = len(x)//2\n        a = merge_sort(x[:middle])\n        b = merge_sort(x[middle:])\n        return merge(a,b)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_153",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef parabola_vertex(a, b, c):\n    \"\"\" Write a function to find the vertex of a parabola. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert parabola_vertex(5,3,2)==(-0.3, 1.55)\n    assert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)\n    assert parabola_vertex(2,4,6)==(-1.0, 4.0)",
        "expected_answer": "def parabola_vertex(a, b, c): \n  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))\n  return vertex",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_154",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef specified_element(nums, N):\n    \"\"\" Write a function to extract every specified element from a given two dimensional list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]\n    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)==[2,2,5]",
        "expected_answer": "def specified_element(nums, N):\n    result = [i[N] for i in nums]\n    return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_155",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef even_bit_toggle_number(n) :\n    \"\"\" Write a python function to toggle all even bits of a given number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert even_bit_toggle_number(10) == 0\n    assert even_bit_toggle_number(20) == 30\n    assert even_bit_toggle_number(30) == 20",
        "expected_answer": "def even_bit_toggle_number(n) : \n    res = 0; count = 0; temp = n \n    while (temp > 0) :     \n        if (count % 2 == 1) : \n            res = res | (1 << count)      \n        count = count + 1\n        temp >>= 1 \n    return n ^ res",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_156",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef tuple_int_str(tuple_str):\n    \"\"\" Write a function to convert a tuple of string values to a tuple of integer values. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n    assert tuple_int_str((('999', '99'), ('1000', '500')))==((999, 99), (1000, 500))\n    assert tuple_int_str((('666', '66'), ('1500', '555')))==((666, 66), (1500, 555))",
        "expected_answer": "def tuple_int_str(tuple_str):\n    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)\n    return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_157",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef encode_list(list1):\n    \"\"\" Write a function to reflect the run-length encoding from a list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n    assert encode_list('automatically')==[[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']]\n    assert encode_list('python')==[[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']]",
        "expected_answer": "from itertools import groupby\ndef encode_list(list1):\n    return [[len(list(group)), key] for key, group in groupby(list1)]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_158",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef min_Ops(arr,n,k):\n    \"\"\" Write a python function to find k number of operations required to make all elements equal. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert min_Ops([2,2,2,2],4,3) == 0\n    assert min_Ops([4,2,6,8],4,3) == -1\n    assert min_Ops([21,33,9,45,63],5,6) == 24",
        "expected_answer": "def min_Ops(arr,n,k): \n    max1 = max(arr) \n    res = 0\n    for i in range(0,n):  \n        if ((max1 - arr[i]) % k != 0): \n            return -1 \n        else: \n            res += (max1 - arr[i]) / k \n    return int(res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_159",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef month_season(month,days):\n    \"\"\" Write a function to print the season for the given month and day. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert month_season('January',4)==('winter')\n    assert month_season('October',28)==('autumn')\n    assert month_season('June',6)==('spring')",
        "expected_answer": "def month_season(month,days):\n if month in ('January', 'February', 'March'):\n\t season = 'winter'\n elif month in ('April', 'May', 'June'):\n\t season = 'spring'\n elif month in ('July', 'August', 'September'):\n\t season = 'summer'\n else:\n\t season = 'autumn'\n if (month == 'March') and (days > 19):\n\t season = 'spring'\n elif (month == 'June') and (days > 20):\n\t season = 'summer'\n elif (month == 'September') and (days > 21):\n\t season = 'autumn'\n elif (month == 'October') and (days > 21):\n\t season = 'autumn'\n elif (month == 'November') and (days > 21):\n\t season = 'autumn'\n elif (month == 'December') and (days > 20):\n\t season = 'winter'\n return season",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_160",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef solution (a, b, n):\n    \"\"\" Write a function to find x and y that satisfies ax + by = n. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n    assert solution(4, 2, 7) == 'No solution'\n    assert solution(1, 13, 17) == ('x = ', 4, ', y = ', 1)",
        "expected_answer": "def solution (a, b, n): \n\ti = 0\n\twhile i * a <= n: \n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (\"x = \",i ,\", y = \", \n\t\t\tint((n - (i * a)) / b)) \n\t\t\treturn 0\n\t\ti = i + 1\n\treturn (\"No solution\")",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_161",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef remove_elements(list1, list2):\n    \"\"\" Write a function to remove all elements from a given list present in another list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n    assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])==[2, 4, 6, 8, 9, 10]\n    assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])==[1, 2, 3, 4, 6, 8, 9, 10]",
        "expected_answer": "def remove_elements(list1, list2):\n    result = [x for x in list1 if x not in list2]\n    return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_162",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef sum_series(n):\n    \"\"\" Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0). \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert sum_series(6)==12\n    assert sum_series(10)==30\n    assert sum_series(9)==25",
        "expected_answer": "def sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_163",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef area_polygon(s,l):\n    \"\"\" Write a function to calculate the area of a regular polygon. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert area_polygon(4,20)==400.00000000000006\n    assert area_polygon(10,15)==1731.1969896610804\n    assert area_polygon(9,7)==302.90938549487214",
        "expected_answer": "from math import tan, pi\ndef area_polygon(s,l):\n  area = s * (l ** 2) / (4 * tan(pi / s))\n  return area",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_164",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef divSum(n):\n    \"\"\" Write a python function to check whether the sum of divisors are same or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert areEquivalent(36,57) == False\n    assert areEquivalent(2,4) == False\n    assert areEquivalent(23,47) == True",
        "expected_answer": "import math \ndef divSum(n): \n    sum = 1; \n    i = 2; \n    while(i * i <= n): \n        if (n % i == 0): \n            sum = (sum + i +math.floor(n / i)); \n        i += 1; \n    return sum; \ndef areEquivalent(num1,num2): \n    return divSum(num1) == divSum(num2);",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_165",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef count_char_position(str1):\n    \"\"\" Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert count_char_position(\"xbcefg\") == 2\n    assert count_char_position(\"ABcED\") == 3\n    assert count_char_position(\"AbgdeF\") == 5",
        "expected_answer": "def count_char_position(str1): \n    count_chars = 0\n    for i in range(len(str1)):\n        if ((i == ord(str1[i]) - ord('A')) or \n            (i == ord(str1[i]) - ord('a'))): \n            count_chars += 1\n    return count_chars",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_166",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef find_even_Pair(A,N):\n    \"\"\" Write a python function to count the pairs with xor as an even number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find_even_Pair([5,4,7,2,1],5) == 4\n    assert find_even_Pair([7,2,8,1,0,5,11],7) == 9\n    assert find_even_Pair([1,2,3],3) == 1",
        "expected_answer": "def find_even_Pair(A,N): \n    evenPair = 0\n    for i in range(0,N): \n        for j in range(i+1,N): \n            if ((A[i] ^ A[j]) % 2 == 0): \n                evenPair+=1\n    return evenPair;",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_167",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef next_Power_Of_2(n):\n    \"\"\" Write a python function to find smallest power of 2 greater than or equal to n. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert next_Power_Of_2(0) == 1\n    assert next_Power_Of_2(5) == 8\n    assert next_Power_Of_2(17) == 32",
        "expected_answer": "def next_Power_Of_2(n): \n    count = 0; \n    if (n and not(n & (n - 1))): \n        return n   \n    while( n != 0): \n        n >>= 1\n        count += 1\n    return 1 << count;",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_168",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef frequency(a,x):\n    \"\"\" Write a python function to find the frequency of a number in a given array. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert frequency([1,2,3],4) == 0\n    assert frequency([1,2,2,3,3,3,4],3) == 3\n    assert frequency([0,1,2,3,1,2],1) == 2",
        "expected_answer": "def frequency(a,x): \n    count = 0  \n    for i in a: \n        if i == x: count += 1\n    return count",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_169",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef get_pell(n):\n    \"\"\" Write a function to calculate the nth pell number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert get_pell(4) == 12\n    assert get_pell(7) == 169\n    assert get_pell(8) == 408",
        "expected_answer": "def get_pell(n): \n\tif (n <= 2): \n\t\treturn n \n\ta = 1\n\tb = 2\n\tfor i in range(3, n+1): \n\t\tc = 2 * b + a \n\t\ta = b \n\t\tb = c \n\treturn b",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_170",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef sum_range_list(list1, m, n):\n    \"\"\" Write a function to find sum of the numbers in a list between the indices of a specified range. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n    assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],5,7)==16\n    assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],7,10)==38",
        "expected_answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += list1[i]                                                                                                                                                                                                  \n    return sum_range",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_171",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef perimeter_pentagon(a):\n    \"\"\" Write a function to find the perimeter of a pentagon. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert perimeter_pentagon(5)==25\n    assert perimeter_pentagon(10)==50\n    assert perimeter_pentagon(15)==75",
        "expected_answer": "import math\ndef perimeter_pentagon(a):\n  perimeter=(5*a)\n  return perimeter",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_172",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef count_occurance(s):\n    \"\"\" Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert count_occurance(\"letstdlenstdporstd\") == 3\n    assert count_occurance(\"truststdsolensporsd\") == 1\n    assert count_occurance(\"makestdsostdworthit\") == 2",
        "expected_answer": "def count_occurance(s):\n  count=0\n  for i in range(len(s)):\n    if (s[i]== 's' and s[i+1]=='t' and s[i+2]== 'd'):\n      count = count + 1\n  return count",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_173",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef remove_splchar(text):\n    \"\"\" Write a function to remove everything except alphanumeric characters from a string. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n    assert remove_splchar('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')\n    assert remove_splchar('python   ^%&^()(+_)(_^&67)                  program')==('python67program')",
        "expected_answer": "import re\ndef remove_splchar(text): \n pattern = re.compile('[\\W_]+')\n return (pattern.sub('', text))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_174",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef group_keyvalue(l):\n    \"\"\" Write a function to group a sequence of key-value pairs into a dictionary of lists. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n    assert group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}\n    assert group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}",
        "expected_answer": "def group_keyvalue(l):\n    result = {}\n    for k, v in l:\n         result.setdefault(k, []).append(v)\n    return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_175",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef is_valid_parenthese( str1):\n    \"\"\" Write a function to verify validity of a string of parentheses. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert is_valid_parenthese(\"(){}[]\")==True\n    assert is_valid_parenthese(\"()[{)}\")==False\n    assert is_valid_parenthese(\"()\")==True",
        "expected_answer": "def is_valid_parenthese( str1):\n        stack, pchar = [], {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\n        for parenthese in str1:\n            if parenthese in pchar:\n                stack.append(parenthese)\n            elif len(stack) == 0 or pchar[stack.pop()] != parenthese:\n                return False\n        return len(stack) == 0",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_176",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef perimeter_triangle(a,b,c):\n    \"\"\" Write a function to find the perimeter of a triangle. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert perimeter_triangle(10,20,30)==60\n    assert perimeter_triangle(3,4,5)==12\n    assert perimeter_triangle(25,35,45)==105",
        "expected_answer": "def perimeter_triangle(a,b,c):\n  perimeter=a+b+c\n  return perimeter",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_177",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef answer(L,R):\n    \"\"\" Write a python function to find two distinct numbers such that their lcm lies within the given range. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert answer(3,8) == (3,6)\n    assert answer(2,6) == (2,4)\n    assert answer(1,3) == (1,2)",
        "expected_answer": "def answer(L,R): \n    if (2 * L <= R): \n        return (L ,2*L)\n    else: \n        return (-1)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_178",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef string_literals(patterns,text):\n    \"\"\" Write a function to search some literals strings in a string. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert string_literals(['language'],'python language')==('Matched!')\n    assert string_literals(['program'],'python language')==('Not Matched!')\n    assert string_literals(['python'],'programming language')==('Not Matched!')",
        "expected_answer": "import re\ndef string_literals(patterns,text):\n  for pattern in patterns:\n     if re.search(pattern,  text):\n       return ('Matched!')\n     else:\n       return ('Not Matched!')",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_179",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef is_num_keith(x):\n    \"\"\" Write a function to find if the given number is a keith number or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert is_num_keith(14) == True\n    assert is_num_keith(12) == False\n    assert is_num_keith(197) == True",
        "expected_answer": "def is_num_keith(x): \n\tterms = [] \n\ttemp = x \n\tn = 0 \n\twhile (temp > 0): \n\t\tterms.append(temp % 10) \n\t\ttemp = int(temp / 10) \n\t\tn+=1 \n\tterms.reverse() \n\tnext_term = 0 \n\ti = n \n\twhile (next_term < x): \n\t\tnext_term = 0 \n\t\tfor j in range(1,n+1): \n\t\t\tnext_term += terms[i - j] \n\t\tterms.append(next_term) \n\t\ti+=1 \n\treturn (next_term == x)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_180",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef distance_lat_long(slat,slon,elat,elon):\n    \"\"\" Write a function to calculate distance between two points using latitude and longitude. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n    assert distance_lat_long(10.5,20.5,30.5,40.5)==6069.397933300514\n    assert distance_lat_long(10,20,30,40)==6783.751974994595",
        "expected_answer": "from math import radians, sin, cos, acos\ndef distance_lat_long(slat,slon,elat,elon):\n dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))\n return dist",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_181",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef common_prefix_util(str1, str2):\n    \"\"\" Write a function to find the longest common prefix in the given set of strings. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n    assert common_prefix([\"apples\", \"ape\", \"april\"], 3) == 'ap'\n    assert common_prefix([\"teens\", \"teenager\", \"teenmar\"], 3) == 'teen'",
        "expected_answer": "def common_prefix_util(str1, str2): \n\tresult = \"\"; \n\tn1 = len(str1) \n\tn2 = len(str2) \n\ti = 0\n\tj = 0\n\twhile i <= n1 - 1 and j <= n2 - 1: \n\t\tif (str1[i] != str2[j]): \n\t\t\tbreak\n\t\tresult += str1[i] \n\t\ti += 1\n\t\tj += 1\n\treturn (result) \ndef common_prefix (arr, n): \n\tprefix = arr[0] \n\tfor i in range (1, n): \n\t\tprefix = common_prefix_util(prefix, arr[i]) \n\treturn (prefix)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_182",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef find_character(string):\n    \"\"\" Write a function to find uppercase, lowercase, special character and numeric values using regex. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n    assert find_character(\"Hithere2\") == (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])\n    assert find_character(\"HeyFolks32\") == (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])",
        "expected_answer": "import re\ndef find_character(string):\n  uppercase_characters = re.findall(r\"[A-Z]\", string) \n  lowercase_characters = re.findall(r\"[a-z]\", string) \n  numerical_characters = re.findall(r\"[0-9]\", string) \n  special_characters = re.findall(r\"[, .!?]\", string) \n  return uppercase_characters, lowercase_characters, numerical_characters, special_characters",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_183",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef count_pairs(arr, n, k):\n    \"\"\" Write a function to count all the distinct pairs having a difference of k in any array. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n    assert count_pairs([8, 12, 16, 4, 0, 20], 6, 4) == 5\n    assert count_pairs([2, 4, 1, 3, 4], 5, 2) == 3",
        "expected_answer": "def count_pairs(arr, n, k):\n  count=0;\n  for i in range(0,n):\n    for j in range(i+1, n):\n      if arr[i] - arr[j] == k or arr[j] - arr[i] == k:\n        count += 1\n  return count",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_184",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef greater_specificnum(list,num):\n    \"\"\" Write a function to find all the values in a list that are greater than a specified number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert greater_specificnum([220, 330, 500],200)==True\n    assert greater_specificnum([12, 17, 21],20)==False\n    assert greater_specificnum([1,2,3,4],10)==False",
        "expected_answer": "def greater_specificnum(list,num):\n greater_specificnum=all(x >= num for x in list)\n return greater_specificnum",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_185",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef parabola_focus(a, b, c):\n    \"\"\" Write a function to find the focus of a parabola. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert parabola_focus(5,3,2)==(-0.3, 1.6)\n    assert parabola_focus(9,8,4)==(-0.4444444444444444, 2.25)\n    assert parabola_focus(2,4,6)==(-1.0, 4.125)",
        "expected_answer": "def parabola_focus(a, b, c): \n  focus= (((-b / (2 * a)),(((4 * a * c) - (b * b) + 1) / (4 * a))))\n  return focus",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_186",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef check_literals(text, patterns):\n    \"\"\" Write a function to search some literals strings in a string by using regex. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n    assert check_literals('The quick brown fox jumps over the lazy dog.',['horse']) == 'Not Matched!'\n    assert check_literals('The quick brown fox jumps over the lazy dog.',['lazy']) == 'Matched!'",
        "expected_answer": "import re\ndef check_literals(text, patterns):\n  for pattern in patterns:\n    if re.search(pattern,  text):\n        return ('Matched!')\n    else:\n        return ('Not Matched!')",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_187",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef longest_common_subsequence(X, Y, m, n):\n    \"\"\" Write a function to find the longest common subsequence for the given two sequences. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n    assert longest_common_subsequence(\"ABCDGH\" , \"AEDFHR\", 6, 6) == 3\n    assert longest_common_subsequence(\"AXYT\" , \"AYZX\", 4, 4) == 2",
        "expected_answer": "def longest_common_subsequence(X, Y, m, n): \n    if m == 0 or n == 0: \n       return 0 \n    elif X[m-1] == Y[n-1]: \n       return 1 + longest_common_subsequence(X, Y, m-1, n-1) \n    else: \n       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_188",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef prod_Square(n):\n    \"\"\" Write a python function to check whether the given number can be represented by product of two squares or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert prod_Square(25) == False\n    assert prod_Square(30) == False\n    assert prod_Square(16) == True",
        "expected_answer": "def prod_Square(n):\n    for i in range(2,(n) + 1):\n        if (i*i < (n+1)):\n            for j in range(2,n + 1):\n                if ((i*i*j*j) == n):\n                    return True;\n    return False;",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_189",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef first_Missing_Positive(arr,n):\n    \"\"\" Write a python function to find the first missing positive number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert first_Missing_Positive([1,2,3,-1,5],5) == 4\n    assert first_Missing_Positive([0,-1,-2,1,5,8],6) == 2\n    assert first_Missing_Positive([0,1,2,5,-8],5) == 3",
        "expected_answer": "def first_Missing_Positive(arr,n): \n    ptr = 0\n    for i in range(n):\n        if arr[i] == 1:\n            ptr = 1\n            break\n    if ptr == 0:\n        return(1)\n    for i in range(n):\n        if arr[i] <= 0 or arr[i] > n:\n            arr[i] = 1\n    for i in range(n):\n        arr[(arr[i] - 1) % n] += n\n    for i in range(n):\n        if arr[i] <= n:\n            return(i + 1)\n    return(n + 1)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_190",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef count_Intgral_Points(x1,y1,x2,y2):\n    \"\"\" Write a python function to count the number of integral co-ordinates that lie inside a square. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert count_Intgral_Points(1,1,4,4) == 4\n    assert count_Intgral_Points(1,2,1,2) == 1\n    assert count_Intgral_Points(4,2,6,4) == 1",
        "expected_answer": "def count_Intgral_Points(x1,y1,x2,y2): \n    return ((y2 - y1 - 1) * (x2 - x1 - 1))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_191",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef check_monthnumber(monthname3):\n    \"\"\" Write a function to check whether the given month name contains 30 days or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert check_monthnumber(\"February\")==False\n    assert check_monthnumber(\"June\")==True\n    assert check_monthnumber(\"April\")==True",
        "expected_answer": "def check_monthnumber(monthname3):\n  if monthname3 ==\"April\" or monthname3== \"June\" or monthname3== \"September\" or monthname3== \"November\":\n    return True\n  else:\n    return False",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_192",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef check_String(str):\n    \"\"\" Write a python function to check whether a string has atleast one letter and one number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert check_String('thishasboth29') == True\n    assert check_String('python') == False\n    assert check_String ('string') == False",
        "expected_answer": "def check_String(str): \n    flag_l = False\n    flag_n = False\n    for i in str: \n        if i.isalpha(): \n            flag_l = True  \n        if i.isdigit(): \n            flag_n = True\n    return flag_l and flag_n",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_193",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef remove_tuple(test_tup):\n    \"\"\" Write a function to remove the duplicates from the given tuple. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n    assert remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8)) == (2, 3, 4, 5, 6, 7, 8)\n    assert remove_tuple((11, 12, 13, 11, 11, 12, 14, 13)) == (11, 12, 13, 14)",
        "expected_answer": "def remove_tuple(test_tup):\n  res = tuple(set(test_tup))\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_194",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef octal_To_Decimal(n):\n    \"\"\" Write a python function to convert octal number to decimal number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert octal_To_Decimal(25) == 21\n    assert octal_To_Decimal(30) == 24\n    assert octal_To_Decimal(40) == 32",
        "expected_answer": "def octal_To_Decimal(n):  \n    num = n; \n    dec_value = 0; \n    base = 1; \n    temp = num; \n    while (temp): \n        last_digit = temp % 10; \n        temp = int(temp / 10); \n        dec_value += last_digit*base; \n        base = base * 8; \n    return dec_value;",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_195",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef first(arr,x,n):\n    \"\"\" Write a python function to find the first position of an element in a sorted array. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert first([1,2,3,4,5,6,6],6,6) == 5\n    assert first([1,2,2,2,3,2,2,4,2],2,9) == 1\n    assert first([1,2,3],1,3) == 0",
        "expected_answer": "def first(arr,x,n): \n    low = 0\n    high = n - 1\n    res = -1  \n    while (low <= high):\n        mid = (low + high) // 2 \n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            res = mid\n            high = mid - 1\n    return res",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_196",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef remove_tuples(test_list, K):\n    \"\"\" Write a function to remove all the tuples with length k. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n    assert remove_tuples([(4, 5), (4,5), (6, 7), (1, 2, 3), (3, 4, 6, 7)] ,2) == [(1, 2, 3), (3, 4, 6, 7)]\n    assert remove_tuples([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)] , 3) == [(4, 3), (1,)]",
        "expected_answer": "def remove_tuples(test_list, K):\n  res = [ele for ele in test_list if len(ele) != K]\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_197",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef find_exponentio(test_tup1, test_tup2):\n    \"\"\" Write a function to perform the exponentiation of the given two tuples. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n    assert find_exponentio((11, 5, 6, 7), (6, 7, 8, 6)) == (1771561, 78125, 1679616, 117649)\n    assert find_exponentio((12, 6, 7, 8), (7, 8, 9, 7)) == (35831808, 1679616, 40353607, 2097152)",
        "expected_answer": "def find_exponentio(test_tup1, test_tup2):\n  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_198",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef largest_triangle(a,b):\n    \"\"\" Write a function to find the largest triangle that can be inscribed in an ellipse. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert largest_triangle(4,2)==10.392304845413264\n    assert largest_triangle(5,7)==4.639421805988064\n    assert largest_triangle(9,1)==105.2220865598093",
        "expected_answer": "import math\ndef largest_triangle(a,b): \n    if (a < 0 or b < 0): \n        return -1 \n    area = (3 * math.sqrt(3) * pow(a, 2)) / (4 * b);  \n    return area",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_199",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef highest_Power_of_2(n):\n    \"\"\" Write a python function to find highest power of 2 less than or equal to given number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert highest_Power_of_2(10) == 8\n    assert highest_Power_of_2(19) == 16\n    assert highest_Power_of_2(32) == 32",
        "expected_answer": "def highest_Power_of_2(n): \n    res = 0; \n    for i in range(n, 0, -1):  \n        if ((i & (i - 1)) == 0): \n            res = i; \n            break;      \n    return res;",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_200",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef position_max(list1):\n    \"\"\" Write a function to find all index positions of the maximum values in a given list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n    assert position_max([1,2,2,2,4,4,4,5,5,5,5])==[7,8,9,10]\n    assert position_max([2,1,5,6,8,3,4,9,10,11,8,12])==[11]",
        "expected_answer": "def position_max(list1):\n    max_val = max(list1)\n    max_result = [i for i, j in enumerate(list1) if j == max_val]\n    return max_result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_201",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef chkList(lst):\n    \"\"\" Write a python function to check whether the elements in a list are same or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert chkList(['one','one','one']) == True\n    assert chkList(['one','Two','Three']) == False\n    assert chkList(['bigdata','python','Django']) == False",
        "expected_answer": "def chkList(lst): \n    return len(set(lst)) == 1",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_202",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef remove_even(str1):\n    \"\"\" Write a function to remove even characters in a string. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert remove_even(\"python\")==(\"pto\")\n    assert remove_even(\"program\")==(\"porm\")\n    assert remove_even(\"language\")==(\"lnug\")",
        "expected_answer": "def remove_even(str1):\n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 != 0):\n        str2 = str2 + str1[i - 1]\n return str2",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_203",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef hamming_Distance(n1,n2) :\n    \"\"\" Write a python function to find the hamming distance between given two integers. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert hamming_Distance(4,8) == 2\n    assert hamming_Distance(2,4) == 2\n    assert hamming_Distance(1,2) == 2",
        "expected_answer": "def hamming_Distance(n1,n2) : \n    x = n1 ^ n2  \n    setBits = 0\n    while (x > 0) : \n        setBits += x & 1\n        x >>= 1\n    return setBits",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_204",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef count(s,c) :\n    \"\"\" Write a python function to count the occurrence of a given character in a string. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert count(\"abcc\",\"c\") == 2\n    assert count(\"ababca\",\"a\") == 3\n    assert count(\"mnmm0pm\",\"m\") == 4",
        "expected_answer": "def count(s,c) : \n    res = 0 \n    for i in range(len(s)) : \n        if (s[i] == c): \n            res = res + 1\n    return res",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_205",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef inversion_elements(test_tup):\n    \"\"\" Write a function to find the inversions of tuple elements in the given tuple list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n    assert inversion_elements((2, 4, 5, 6, 1, 7)) == (-3, -5, -6, -7, -2, -8)\n    assert inversion_elements((8, 9, 11, 14, 12, 13)) == (-9, -10, -12, -15, -13, -14)",
        "expected_answer": "def inversion_elements(test_tup):\n  res = tuple(list(map(lambda x: ~x, list(test_tup))))\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_206",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef concatenate_elements(test_tup):\n    \"\"\" Write a function to perform the adjacent element concatenation in the given tuples. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n    assert concatenate_elements((\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\")) == ('RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QESR')\n    assert concatenate_elements((\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\")) == ('MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL SKD')",
        "expected_answer": "def concatenate_elements(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_207",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef find_longest_repeating_subseq(str):\n    \"\"\" Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n    assert find_longest_repeating_subseq(\"aabb\") == 2\n    assert find_longest_repeating_subseq(\"aab\") == 1",
        "expected_answer": "def find_longest_repeating_subseq(str): \n\tn = len(str) \n\tdp = [[0 for k in range(n+1)] for l in range(n+1)] \n\tfor i in range(1, n+1): \n\t\tfor j in range(1, n+1): \n\t\t\tif (str[i-1] == str[j-1] and i != j): \n\t\t\t\tdp[i][j] = 1 + dp[i-1][j-1] \n\t\t\telse: \n\t\t\t\tdp[i][j] = max(dp[i][j-1], dp[i-1][j]) \n\treturn dp[n][n]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_208",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef is_decimal(num):\n    \"\"\" Write a function to check the given decimal with a precision of 2 by using regex. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert is_decimal('123.11') == True\n    assert is_decimal('0.21') == True\n    assert is_decimal('123.1214') == False",
        "expected_answer": "import re\ndef is_decimal(num):\n  num_fetch = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n  result = num_fetch.search(num)\n  return bool(result)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_209",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef heap_replace(heap,a):\n    \"\"\" Write a function to delete the smallest element from the given heap and then insert a new item. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n    assert heap_replace([25, 44, 68, 21, 39, 23, 89],110)== [23, 25, 68, 44, 39, 110, 89]\n    assert heap_replace([25, 44, 68, 21, 39, 23, 89],500)==[23, 25, 68, 44, 39, 500, 89]",
        "expected_answer": "import heapq as hq\ndef heap_replace(heap,a):\n  hq.heapify(heap)\n  hq.heapreplace(heap, a)\n  return heap",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_210",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef is_allowed_specific_char(string):\n    \"\"\" Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n    assert is_allowed_specific_char(\"*&%@#!}{\") == False\n    assert is_allowed_specific_char(\"HELLOhowareyou98765\") == True",
        "expected_answer": "import re\ndef is_allowed_specific_char(string):\n    get_char = re.compile(r'[^a-zA-Z0-9.]')\n    string = get_char.search(string)\n    return not bool(string)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_211",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef count_Num(n):\n    \"\"\" Write a python function to count numbers whose oth and nth bits are set. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert count_Num(2) == 1\n    assert count_Num(3) == 2\n    assert count_Num(1) == 1",
        "expected_answer": "def count_Num(n): \n    if (n == 1): \n        return 1\n    count = pow(2,n - 2) \n    return count",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_212",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef fourth_Power_Sum(n):\n    \"\"\" Write a python function to find the sum of fourth power of n natural numbers. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert fourth_Power_Sum(2) == 17\n    assert fourth_Power_Sum(4) == 354\n    assert fourth_Power_Sum(6) == 2275",
        "expected_answer": "import math  \ndef fourth_Power_Sum(n): \n    sum = 0\n    for i in range(1,n+1) : \n        sum = sum + (i*i*i*i) \n    return sum",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_213",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef concatenate_strings(test_tup1, test_tup2):\n    \"\"\" Write a function to perform the concatenation of two string tuples. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n    assert concatenate_strings((\"Shaik\", \"Ayesha\", \"Sanya\"), (\" Dawood\", \" Begum\", \" Singh\")) == ('Shaik Dawood', 'Ayesha Begum', 'Sanya Singh')\n    assert concatenate_strings((\"Harpreet\", \"Priyanka\", \"Muskan\"), (\"Kour\", \" Agarwal\", \"Sethi\")) == ('HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi')",
        "expected_answer": "def concatenate_strings(test_tup1, test_tup2):\n  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_214",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef degree_radian(radian):\n    \"\"\" Write a function to convert radians to degrees. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert degree_radian(90)==5156.620156177409\n    assert degree_radian(60)==3437.746770784939\n    assert degree_radian(120)==6875.493541569878",
        "expected_answer": "import math\ndef degree_radian(radian):\n degree = radian*(180/math.pi)\n return degree",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_215",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef decode_list(alist):\n    \"\"\" Write a function to decode a run-length encoded given list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n    assert decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']\n    assert decode_list(['p', 'y', 't', 'h', 'o', 'n'])==['p', 'y', 't', 'h', 'o', 'n']",
        "expected_answer": "def decode_list(alist):\n    def aux(g):\n        if isinstance(g, list):\n            return [(g[1], range(g[0]))]\n        else:\n            return [(g, [0])]\n    return [x for g in alist for x, R in aux(g) for i in R]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_216",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef check_subset_list(list1, list2):\n    \"\"\" Write a function to check if a nested list is a subset of another nested list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n    assert check_subset_list([[2, 3, 1], [4, 5], [6, 8]],[[4, 5], [6, 8]])==True\n    assert check_subset_list([['a', 'b'], ['e'], ['c', 'd']],[['g']])==False",
        "expected_answer": "def check_subset_list(list1, list2): \n    l1, l2 = list1[0], list2[0] \n    exist = True\n    for i in list2: \n        if i not in list1: \n            exist = False\n    return exist",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_217",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef first_Repeated_Char(str):\n    \"\"\" Write a python function to find the first repeated character in a given string. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert first_Repeated_Char(\"Google\") == \"o\"\n    assert first_Repeated_Char(\"data\") == \"a\"\n    assert first_Repeated_Char(\"python\") == '\\0'",
        "expected_answer": "def first_Repeated_Char(str): \n    h = {}\n    for ch in str:\n        if ch in h: \n            return ch;\n        else: \n            h[ch] = 0\n    return '\\0'",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_218",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef min_Operations(A,B):\n    \"\"\" Write a python function to find the minimum operations required to make two numbers equal. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert min_Operations(2,4) == 1\n    assert min_Operations(4,10) == 4\n    assert min_Operations(1,4) == 3",
        "expected_answer": "import math   \ndef min_Operations(A,B):  \n    if (A > B): \n        swap(A,B)  \n    B = B // math.gcd(A,B);  \n    return B - 1",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_219",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef extract_min_max(test_tup, K):\n    \"\"\" Write a function to extract maximum and minimum k elements in the given tuple. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n    assert extract_min_max((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)\n    assert extract_min_max((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)",
        "expected_answer": "def extract_min_max(test_tup, K):\n  res = []\n  test_tup = list(test_tup)\n  temp = sorted(test_tup)\n  for idx, val in enumerate(temp):\n    if idx < K or idx >= len(temp) - K:\n      res.append(val)\n  res = tuple(res)\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_220",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef replace_max_specialchar(text,n):\n    \"\"\" Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n    assert replace_max_specialchar('a b c,d e f',3)==('a:b:c:d e f')\n    assert replace_max_specialchar('ram reshma,ram rahim',1)==('ram:reshma,ram rahim')",
        "expected_answer": "import re\ndef replace_max_specialchar(text,n):\n return (re.sub(\"[ ,.]\", \":\", text, n))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_221",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef first_even(nums):\n    \"\"\" Write a python function to find the first even number in a given list of numbers. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n    assert first_even([2, 3, 4]) == 2\n    assert first_even([5, 6, 7]) == 6",
        "expected_answer": "def first_even(nums):\n    first_even = next((el for el in nums if el%2==0),-1)\n    return first_even",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_222",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef check_type(test_tuple):\n    \"\"\" Write a function to check if all the elements in tuple have same data type or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert check_type((5, 6, 7, 3, 5, 6) ) == True\n    assert check_type((1, 2, \"4\") ) == False\n    assert check_type((3, 2, 1, 4, 5) ) == True",
        "expected_answer": "def check_type(test_tuple):\n  res = True\n  for ele in test_tuple:\n    if not isinstance(ele, type(test_tuple[0])):\n      res = False\n      break\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_223",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef is_majority(arr, n, x):\n    \"\"\" Write a function to check for majority element in the given sorted array. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert is_majority([1, 1, 1, 2, 2], 5, 1) == True",
        "expected_answer": "def is_majority(arr, n, x):\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n\tif high >= low:\n\t\tmid = (low + high)//2 \n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n\t\t\treturn mid\n\t\telif x > arr[mid]:\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\n\t\telse:\n\t\t\treturn binary_search(arr, low, (mid -1), x)\n\treturn -1",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_224",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef count_Set_Bits(n):\n    \"\"\" Write a python function to count set bits of a given number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert count_Set_Bits(2) == 1\n    assert count_Set_Bits(4) == 1\n    assert count_Set_Bits(6) == 2",
        "expected_answer": "def count_Set_Bits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_225",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef find_Min(arr,low,high):\n    \"\"\" Write a python function to find the minimum element in a sorted and rotated array. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find_Min([1,2,3,4,5],0,4) == 1\n    assert find_Min([4,6,8],0,2) == 4\n    assert find_Min([2,3,5,7,9],0,4) == 2",
        "expected_answer": "def find_Min(arr,low,high): \n    while (low < high): \n        mid = low + (high - low) // 2;   \n        if (arr[mid] == arr[high]): \n            high -= 1; \n        elif (arr[mid] > arr[high]): \n            low = mid + 1; \n        else: \n            high = mid; \n    return arr[high];",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_226",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef odd_values_string(str):\n    \"\"\" Write a python function to remove the characters which have odd index values of a given string. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert odd_values_string('abcdef') == 'ace'\n    assert odd_values_string('python') == 'pto'\n    assert odd_values_string('data') == 'dt'",
        "expected_answer": "def odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_227",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef min_of_three(a,b,c):\n    \"\"\" Write a function to find minimum of three numbers. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert min_of_three(10,20,0)==0\n    assert min_of_three(19,15,18)==15\n    assert min_of_three(-10,-20,-30)==-30",
        "expected_answer": "def min_of_three(a,b,c): \n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n        smallest = b \n      else: \n        smallest = c \n      return smallest",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_228",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef all_Bits_Set_In_The_Given_Range(n,l,r):\n    \"\"\" Write a python function to check whether all the bits are unset in the given range or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n    assert all_Bits_Set_In_The_Given_Range(17,2,4) == True\n    assert all_Bits_Set_In_The_Given_Range(39,4,6) == False",
        "expected_answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \n    new_num = n & num\n    if (new_num == 0): \n        return True\n    return False",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_229",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef re_arrange_array(arr, n):\n    \"\"\" Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n    assert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]\n    assert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]",
        "expected_answer": "def re_arrange_array(arr, n):\n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      j = j + 1\n  return arr",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_230",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef replace_blank(str1,char):\n    \"\"\" Write a function to replace blank spaces with any character in a string. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert replace_blank(\"hello people\",'@')==(\"hello@people\")\n    assert replace_blank(\"python program language\",'$')==(\"python$program$language\")\n    assert replace_blank(\"blank space\",\"-\")==(\"blank-space\")",
        "expected_answer": "def replace_blank(str1,char):\n str2 = str1.replace(' ', char)\n return str2",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_231",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef max_sum(tri, n):\n    \"\"\" Write a function to find the maximum sum in the given right triangle of numbers. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n    assert max_sum([[1], [1, 2], [4, 1, 12]], 3) == 15 \n    assert max_sum([[2], [3,2], [13,23,12]], 3) == 28",
        "expected_answer": "def max_sum(tri, n): \n\tif n > 1: \n\t\ttri[1][1] = tri[1][1]+tri[0][0] \n\t\ttri[1][0] = tri[1][0]+tri[0][0] \n\tfor i in range(2, n): \n\t\ttri[i][0] = tri[i][0] + tri[i-1][0] \n\t\ttri[i][i] = tri[i][i] + tri[i-1][i-1] \n\t\tfor j in range(1, i): \n\t\t\tif tri[i][j]+tri[i-1][j-1] >= tri[i][j]+tri[i-1][j]: \n\t\t\t\ttri[i][j] = tri[i][j] + tri[i-1][j-1] \n\t\t\telse: \n\t\t\t\ttri[i][j] = tri[i][j]+tri[i-1][j] \n\treturn (max(tri[n-1]))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_232",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef larg_nnum(list1,n):\n    \"\"\" Write a function to get the n largest items from a dataset. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n    assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[100,90,80,70,60]\n    assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[100,90,80]",
        "expected_answer": "import heapq\ndef larg_nnum(list1,n):\n largest=heapq.nlargest(n,list1)\n return largest",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_233",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef lateralsuface_cylinder(r,h):\n    \"\"\" Write a function to find the lateral surface area of a cylinder. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert lateralsuface_cylinder(10,5)==314.15000000000003\n    assert lateralsuface_cylinder(4,5)==125.66000000000001\n    assert lateralsuface_cylinder(4,10)==251.32000000000002",
        "expected_answer": "def lateralsuface_cylinder(r,h):\n  lateralsurface= 2*3.1415*r*h\n  return lateralsurface",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_234",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef volume_cube(l):\n    \"\"\" Write a function to find the volume of a cube. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert volume_cube(3)==27\n    assert volume_cube(2)==8\n    assert volume_cube(5)==125",
        "expected_answer": "def volume_cube(l):\n  volume = l * l * l\n  return volume",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_235",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef even_bit_set_number(n):\n    \"\"\" Write a python function to set all even bits of a given number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert even_bit_set_number(10) == 10\n    assert even_bit_set_number(20) == 30\n    assert even_bit_set_number(30) == 30",
        "expected_answer": "def even_bit_set_number(n): \n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 1): \n            res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n | res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_236",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef No_of_Triangle(N,K):\n    \"\"\" Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert No_of_Triangle(4,2) == 7\n    assert No_of_Triangle(4,3) == 3\n    assert No_of_Triangle(1,3) == -1",
        "expected_answer": "def No_of_Triangle(N,K):\n    if (N < K):\n        return -1;\n    else:\n        Tri_up = 0;\n        Tri_up = ((N - K + 1) *(N - K + 2)) // 2;\n        Tri_down = 0;\n        Tri_down = ((N - 2 * K + 1) *(N - 2 * K + 2)) // 2;\n        return Tri_up + Tri_down;",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_237",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef check_occurences(test_list):\n    \"\"\" Write a function to check the occurrences of records which occur similar times in the given tuples. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n    assert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}\n    assert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}",
        "expected_answer": "from collections import Counter \ndef check_occurences(test_list):\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_238",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef number_of_substrings(str):\n    \"\"\" Write a python function to count number of non-empty substrings of a given string. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert number_of_substrings(\"abc\") == 6\n    assert number_of_substrings(\"abcd\") == 10\n    assert number_of_substrings(\"abcde\") == 15",
        "expected_answer": "def number_of_substrings(str): \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2);",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_239",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef get_total_number_of_sequences(m,n):\n    \"\"\" Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert get_total_number_of_sequences(10, 4) == 4\n    assert get_total_number_of_sequences(5, 2) == 6\n    assert get_total_number_of_sequences(16, 3) == 84",
        "expected_answer": "def get_total_number_of_sequences(m,n): \n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j]=0\n\t\t\telif i<j: \n\t\t\t\tT[i][j]=0\n\t\t\telif j==1: \n\t\t\t\tT[i][j]=i \n\t\t\telse: \n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \n\treturn T[m][n]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_240",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef replace_list(list1,list2):\n    \"\"\" Write a function to replace the last element of the list with another list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n    assert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]\n    assert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]",
        "expected_answer": "def replace_list(list1,list2):\n list1[-1:] = list2\n replace_list=list1\n return replace_list",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_241",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef array_3d(m,n,o):\n    \"\"\" Write a function to generate a 3d array having each element as '*'. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n    assert array_3d(5,3,4)==[[['*', '*', '*', '*', '*'], ['*', '*', '*', '*','*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'],['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]\n    assert array_3d(1,2,3)==[[['*'],['*']],[['*'],['*']],[['*'],['*']]]",
        "expected_answer": "def array_3d(m,n,o):\n array_3d = [[ ['*' for col in range(m)] for col in range(n)] for row in range(o)]\n return array_3d",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_242",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef count_charac(str1):\n    \"\"\" Write a function to count total characters in a string. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert count_charac(\"python programming\")==18\n    assert count_charac(\"language\")==8\n    assert count_charac(\"words\")==5",
        "expected_answer": "def count_charac(str1):\n total = 0\n for i in str1:\n    total = total + 1\n return total",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_243",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef sort_on_occurence(lst):\n    \"\"\" Write a function to sort the given list based on the occurrence of first element of tuples. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n    assert sort_on_occurence([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')]) == [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]\n    assert sort_on_occurence([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')]) == [(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)]",
        "expected_answer": "def sort_on_occurence(lst): \n\tdct = {} \n\tfor i, j in lst: \n\t\tdct.setdefault(i, []).append(j) \n\treturn ([(i, *dict.fromkeys(j), len(j)) \n\t\t\t\tfor i, j in dct.items()])",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_244",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef next_Perfect_Square(N):\n    \"\"\" Write a python function to find the next perfect square greater than a given number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert next_Perfect_Square(35) == 36\n    assert next_Perfect_Square(6) == 9\n    assert next_Perfect_Square(9) == 16",
        "expected_answer": "import math  \ndef next_Perfect_Square(N): \n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_245",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef max_sum(arr, n):\n    \"\"\" Write a function to find the maximum sum of bi-tonic sub-sequence for the given array. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n    assert max_sum([80, 60, 30, 40, 20, 10], 6) == 210\n    assert max_sum([2, 3 ,14, 16, 21, 23, 29, 30], 8) == 138",
        "expected_answer": "def max_sum(arr, n): \n\tMSIBS = arr[:] \n\tfor i in range(n): \n\t\tfor j in range(0, i): \n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \n\tMSDBS = arr[:] \n\tfor i in range(1, n + 1): \n\t\tfor j in range(1, i): \n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \n\tmax_sum = float(\"-Inf\") \n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \n\t\tmax_sum = max(max_sum, i + j - k) \n\treturn max_sum",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_246",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef babylonian_squareroot(number):\n    \"\"\" Write a function for computing square roots using the babylonian method. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert babylonian_squareroot(10)==3.162277660168379\n    assert babylonian_squareroot(2)==1.414213562373095\n    assert babylonian_squareroot(9)==3.0",
        "expected_answer": "def babylonian_squareroot(number):\n    if(number == 0):\n        return 0;\n    g = number/2.0;\n    g2 = g + 1;\n    while(g != g2):\n        n = number/ g;\n        g2 = g;\n        g = (g + n)/2;\n    return g;",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_247",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef lps(str):\n    \"\"\" Write a function to find the longest palindromic subsequence in the given string. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert lps(\"TENS FOR TENS\") == 5 \n    assert lps(\"CARDIO FOR CARDS\") == 7\n    assert lps(\"PART OF THE JOURNEY IS PART\") == 9 ",
        "expected_answer": "def lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_248",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef harmonic_sum(n):\n    \"\"\" Write a function to calculate the harmonic sum of n-1. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert harmonic_sum(7) == 2.5928571428571425\n    assert harmonic_sum(4) == 2.083333333333333\n    assert harmonic_sum(19) == 3.547739657143682",
        "expected_answer": "def harmonic_sum(n):\n  if n < 2:\n    return 1\n  else:\n    return 1 / n + (harmonic_sum(n - 1))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_249",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef intersection_array(array_nums1,array_nums2):\n    \"\"\" Write a function to find the intersection of two arrays using lambda function. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n    assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]\n    assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]",
        "expected_answer": "def intersection_array(array_nums1,array_nums2):\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \n return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_250",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef count_X(tup, x):\n    \"\"\" Write a python function to count the occcurences of an element in a tuple. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n    assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3\n    assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4",
        "expected_answer": "def count_X(tup, x): \n    count = 0\n    for ele in tup: \n        if (ele == x): \n            count = count + 1\n    return count",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_251",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef insert_element(list,element):\n    \"\"\" Write a function to insert an element before each element of a list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n    assert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java'] \n    assert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad'] ",
        "expected_answer": "def insert_element(list,element):\n list = [v for elt in list for v in (element, elt)]\n return list",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_252",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef convert(numbers):\n    \"\"\" Write a python function to convert complex numbers to polar coordinates. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert convert(1) == (1.0, 0.0)\n    assert convert(4) == (4.0,0.0)\n    assert convert(5) == (5.0,0.0)",
        "expected_answer": "import cmath  \ndef convert(numbers):    \n  num = cmath.polar(numbers)  \n  return (num)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_253",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef count_integer(list1):\n    \"\"\" Write a python function to count integers from a given list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert count_integer([1,2,'abc',1.2]) == 2\n    assert count_integer([1,2,3]) == 3\n    assert count_integer([1,1.2,4,5.1]) == 2",
        "expected_answer": "def count_integer(list1):\n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    return ctr",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_254",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef words_ae(text):\n    \"\"\" Write a function to find all words starting with 'a' or 'e' in a given string. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert words_ae(\"python programe\")==['ame']\n    assert words_ae(\"python programe language\")==['ame','anguage']\n    assert words_ae(\"assert statement\")==['assert', 'atement']",
        "expected_answer": "import re\ndef words_ae(text):\n list = re.findall(\"[ae]\\w+\", text)\n return list",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_255",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef combinations_colors(l, n):\n    \"\"\" Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n    assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]\n    assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]",
        "expected_answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l,n))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_256",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef count_Primes_nums(n):\n    \"\"\" Write a python function to count the number of prime numbers less than a given non-negative number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert count_Primes_nums(5) == 2\n    assert count_Primes_nums(10) == 4\n    assert count_Primes_nums(100) == 25",
        "expected_answer": "def count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_257",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef swap_numbers(a,b):\n    \"\"\" Write a function to swap two numbers. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert swap_numbers(10,20)==(20,10)\n    assert swap_numbers(15,17)==(17,15)\n    assert swap_numbers(100,200)==(200,100)",
        "expected_answer": "def swap_numbers(a,b):\n temp = a\n a = b\n b = temp\n return (a,b)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_258",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef count_odd(array_nums):\n    \"\"\" Write a function to find number of odd elements in the given list using lambda function. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n    assert count_odd([10,15,14,13,-18,12,-20])==2\n    assert count_odd([1, 2, 4, 8, 9])==2",
        "expected_answer": "def count_odd(array_nums):\n   count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))\n   return count_odd",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_259",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef maximize_elements(test_tup1, test_tup2):\n    \"\"\" Write a function to maximize the given two tuples. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n    assert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))\n    assert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))",
        "expected_answer": "def maximize_elements(test_tup1, test_tup2):\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_260",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef newman_prime(n):\n    \"\"\" Write a function to find the nth newman\u2013shanks\u2013williams prime number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert newman_prime(3) == 7 \n    assert newman_prime(4) == 17\n    assert newman_prime(5) == 41",
        "expected_answer": "def newman_prime(n): \n\tif n == 0 or n == 1: \n\t\treturn 1\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_261",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef division_elements(test_tup1, test_tup2):\n    \"\"\" Write a function to perform mathematical division operation across the given tuples. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n    assert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)\n    assert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)",
        "expected_answer": "def division_elements(test_tup1, test_tup2):\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_262",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef split_two_parts(list1, L):\n    \"\"\" Write a function to split a given list into two parts where the length of the first part of the list is given. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n    assert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])\n    assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])",
        "expected_answer": "def split_two_parts(list1, L):\n    return list1[:L], list1[L:]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_263",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef merge_dict(d1,d2):\n    \"\"\" Write a function to merge two dictionaries. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n    assert merge_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})=={'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}\n    assert merge_dict({'a':10,'b':20},{'x':30,'y':40})=={'x':30,'y':40,'a':10,'b':20}",
        "expected_answer": "def merge_dict(d1,d2):\n d = d1.copy()\n d.update(d2)\n return d",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_264",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef dog_age(h_age):\n    \"\"\" Write a function to calculate a dog's age in dog's years. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert dog_age(12)==61\n    assert dog_age(15)==73\n    assert dog_age(24)==109",
        "expected_answer": "def dog_age(h_age):\n if h_age < 0:\n \texit()\n elif h_age <= 2:\n\t d_age = h_age * 10.5\n else:\n\t d_age = 21 + (h_age - 2)*4\n return d_age",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_265",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef list_split(S, step):\n    \"\"\" Write a function to split a list for every nth element. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n    assert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]] \n    assert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']] ",
        "expected_answer": "def list_split(S, step):\n    return [S[i::step] for i in range(step)]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_266",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef lateralsurface_cube(l):\n    \"\"\" Write a function to find the lateral surface area of a cube. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert lateralsurface_cube(5)==100\n    assert lateralsurface_cube(9)==324\n    assert lateralsurface_cube(10)==400",
        "expected_answer": "def lateralsurface_cube(l):\n  LSA = 4 * (l * l)\n  return LSA",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_267",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef square_Sum(n):\n    \"\"\" Write a python function to find the sum of squares of first n odd natural numbers. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert square_Sum(2) == 10\n    assert square_Sum(3) == 35\n    assert square_Sum(4) == 84",
        "expected_answer": "def square_Sum(n):  \n    return int(n*(4*n*n-1)/3)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_268",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef find_star_num(n):\n    \"\"\" Write a function to find the n'th star number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find_star_num(3) == 37\n    assert find_star_num(4) == 73\n    assert find_star_num(5) == 121",
        "expected_answer": "def find_star_num(n): \n\treturn (6 * n * (n - 1) + 1)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_269",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef ascii_value(k):\n    \"\"\" Write a function to find the ascii value of a character. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert ascii_value('A')==65\n    assert ascii_value('R')==82\n    assert ascii_value('S')==83",
        "expected_answer": "def ascii_value(k):\n  ch=k\n  return ord(ch)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_270",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef sum_even_and_even_index(arr,n):\n    \"\"\" Write a python function to find the sum of even numbers at even positions. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n    assert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18],10) == 26\n    assert sum_even_and_even_index([5, 6, 12, 1],4) == 12",
        "expected_answer": "def sum_even_and_even_index(arr,n):  \n    i = 0\n    sum = 0\n    for i in range(0,n,2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_271",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef even_Power_Sum(n):\n    \"\"\" Write a python function to find the sum of fifth power of first n even natural numbers. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert even_Power_Sum(2) == 1056\n    assert even_Power_Sum(3) == 8832\n    assert even_Power_Sum(1) == 32",
        "expected_answer": "def even_Power_Sum(n): \n    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum;",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_272",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef rear_extract(test_list):\n    \"\"\" Write a function to perfom the rear element extraction from list of tuples records. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n    assert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]\n    assert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]",
        "expected_answer": "def rear_extract(test_list):\n  res = [lis[-1] for lis in test_list]\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_273",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef substract_elements(test_tup1, test_tup2):\n    \"\"\" Write a function to substract the contents of one tuple with corresponding index of other tuple. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)\n    assert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)",
        "expected_answer": "def substract_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_274",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef even_binomial_Coeff_Sum( n):\n    \"\"\" Write a python function to find sum of even index binomial coefficients. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert even_binomial_Coeff_Sum(4) == 8\n    assert even_binomial_Coeff_Sum(6) == 32\n    assert even_binomial_Coeff_Sum(2) == 2",
        "expected_answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    return (1 << (n - 1))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_275",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef get_Position(a,n,m):\n    \"\"\" Write a python function to find the position of the last removed element from the given array. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert get_Position([2,5,4],3,2) == 2\n    assert get_Position([4,3],2,2) == 2\n    assert get_Position([1,2,3,4],4,1) == 4",
        "expected_answer": "import math as mt \ndef get_Position(a,n,m): \n    for i in range(n): \n        a[i] = (a[i] // m + (a[i] % m != 0))  \n    result,maxx = -1,-1\n    for i in range(n - 1,-1,-1): \n        if (maxx < a[i]): \n            maxx = a[i] \n            result = i \n    return result + 1",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_276",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef volume_cylinder(r,h):\n    \"\"\" Write a function to find the volume of a cylinder. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert volume_cylinder(10,5)==1570.7500000000002\n    assert volume_cylinder(4,5)==251.32000000000002\n    assert volume_cylinder(4,10)==502.64000000000004",
        "expected_answer": "def volume_cylinder(r,h):\n  volume=3.1415*r*r*h\n  return volume",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_277",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef dict_filter(dict,n):\n    \"\"\" Write a function to filter a dictionary based on values. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n    assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}\n    assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}",
        "expected_answer": "def dict_filter(dict,n):\n result = {key:value for (key, value) in dict.items() if value >=n}\n return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_278",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef count_first_elements(test_tup):\n    \"\"\" Write a function to find the element count that occurs before the record in the given tuple. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n    assert count_first_elements((2, 9, (5, 7), 11) ) == 2\n    assert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4",
        "expected_answer": "def count_first_elements(test_tup):\n  for count, ele in enumerate(test_tup):\n    if isinstance(ele, tuple):\n      break\n  return (count)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_279",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef is_num_decagonal(n):\n    \"\"\" Write a function to find the nth decagonal number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert is_num_decagonal(3) == 27\n    assert is_num_decagonal(7) == 175\n    assert is_num_decagonal(10) == 370",
        "expected_answer": "def is_num_decagonal(n): \n\treturn 4 * n * n - 3 * n",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_280",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef sequential_search(dlist, item):\n    \"\"\" Write a function to search an element in the given array by using sequential search. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n    assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)\n    assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)",
        "expected_answer": "def sequential_search(dlist, item):\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return found, pos",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_281",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef all_unique(test_list):\n    \"\"\" Write a python function to check if the elements of a given list are unique or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert all_unique([1,2,3]) == True\n    assert all_unique([1,2,1,2]) == False\n    assert all_unique([1,2,3,4,5]) == True",
        "expected_answer": "def all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_282",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef sub_list(nums1,nums2):\n    \"\"\" Write a function to substaract two lists using map and lambda function. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n    assert sub_list([1,2],[3,4])==[-2,-2]\n    assert sub_list([90,120],[50,70])==[40,50]",
        "expected_answer": "def sub_list(nums1,nums2):\n  result = map(lambda x, y: x - y, nums1, nums2)\n  return list(result)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_283",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef validate(n):\n    \"\"\" Write a python function to check whether the frequency of each digit is less than or equal to the digit itself. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert validate(1234) == True\n    assert validate(51241) == False\n    assert validate(321) == True",
        "expected_answer": "def validate(n): \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_284",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef check_element(list,element):\n    \"\"\" Write a function to check whether all items of a list are equal to a given string. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n    assert check_element([1,2,3,4],7)==False\n    assert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True",
        "expected_answer": "def check_element(list,element):\n  check_element=all(v== element for v in list)\n  return check_element",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_285",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef text_match_two_three(text):\n    \"\"\" Write a function that matches a string that has an a followed by two to three 'b'. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert text_match_two_three(\"ac\")==('Not matched!')\n    assert text_match_two_three(\"dc\")==('Not matched!')\n    assert text_match_two_three(\"abbbba\")==('Found a match!')",
        "expected_answer": "import re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_286",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef max_sub_array_sum_repeated(a, n, k):\n    \"\"\" Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n    assert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59\n    assert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1",
        "expected_answer": "def max_sub_array_sum_repeated(a, n, k): \n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k): \n\t\tmax_ending_here = max_ending_here + a[i%n] \n\t\tif (max_so_far < max_ending_here): \n\t\t\tmax_so_far = max_ending_here \n\t\tif (max_ending_here < 0): \n\t\t\tmax_ending_here = 0\n\treturn max_so_far",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_287",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef square_Sum(n):\n    \"\"\" Write a python function to find the sum of squares of first n even natural numbers. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert square_Sum(2) == 20\n    assert square_Sum(3) == 56\n    assert square_Sum(4) == 120",
        "expected_answer": "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_288",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef modular_inverse(arr, N, P):\n    \"\"\" Write a function to count array elements having modular inverse under given prime number p equal to itself. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n    assert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3\n    assert modular_inverse([2, 3, 4, 5], 4, 6) == 1",
        "expected_answer": "def modular_inverse(arr, N, P):\n\tcurrent_element = 0\n\tfor i in range(0, N):\n\t\tif ((arr[i] * arr[i]) % P == 1):\n\t\t\tcurrent_element = current_element + 1\n\treturn current_element",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_289",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef odd_Days(N):\n    \"\"\" Write a python function to calculate the number of odd days in a given year. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert odd_Days(100) == 5\n    assert odd_Days(50) ==6\n    assert odd_Days(75) == 2",
        "expected_answer": "def odd_Days(N): \n    hund1 = N // 100\n    hund4 = N // 400\n    leap = N >> 2\n    ordd = N - leap \n    if (hund1): \n        ordd += hund1 \n        leap -= hund1 \n    if (hund4): \n        ordd -= hund4 \n        leap += hund4 \n    days = ordd + leap * 2\n    odd = days % 7\n    return odd",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_290",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef max_length(list1):\n    \"\"\" Write a function to find the list of lists with maximum length. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n    assert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])\n    assert max_length([[5], [15,20,25]])==(3, [15,20,25])",
        "expected_answer": "def max_length(list1):\n    max_length = max(len(x) for x in  list1 )  \n    max_list = max((x) for x in   list1)\n    return(max_length, max_list)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_291",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef count_no_of_ways(n, k):\n    \"\"\" Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert count_no_of_ways(2, 4) == 16\n    assert count_no_of_ways(3, 2) == 6\n    assert count_no_of_ways(4, 4) == 228",
        "expected_answer": "def count_no_of_ways(n, k): \n\tdp = [0] * (n + 1) \n\ttotal = k \n\tmod = 1000000007\n\tdp[1] = k \n\tdp[2] = k * k\t \n\tfor i in range(3,n+1): \n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \n\treturn dp[n]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_292",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef find(n,m):\n    \"\"\" Write a python function to find quotient of two numbers. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find(10,3) == 3\n    assert find(4,2) == 2\n    assert find(20,5) == 4",
        "expected_answer": "def find(n,m):  \n    q = n//m \n    return (q)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_293",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef otherside_rightangle(w,h):\n    \"\"\" Write a function to find the third side of a right angled triangle. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert otherside_rightangle(7,8)==10.63014581273465\n    assert otherside_rightangle(3,4)==5\n    assert otherside_rightangle(7,15)==16.55294535724685",
        "expected_answer": "import math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_294",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef max_val(listval):\n    \"\"\" Write a function to find the maximum value in a given heterogeneous list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n    assert max_val(['Python', 15, 20, 25])==25\n    assert max_val(['Python', 30, 20, 40, 50, 'version'])==50",
        "expected_answer": "def max_val(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return(max_val)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_295",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef sum_div(number):\n    \"\"\" Write a function to return the sum of all divisors of a number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert sum_div(8)==7\n    assert sum_div(12)==16\n    assert sum_div(7)==1",
        "expected_answer": "def sum_div(number):\n    divisors = [1]\n    for i in range(2, number):\n        if (number % i)==0:\n            divisors.append(i)\n    return sum(divisors)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_296",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef get_Inv_Count(arr,n):\n    \"\"\" Write a python function to count inversions in an array. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert get_Inv_Count([1,20,6,4,5],5) == 5\n    assert get_Inv_Count([1,2,1],3) == 1\n    assert get_Inv_Count([1,2,5,6,1],5) == 3",
        "expected_answer": "def get_Inv_Count(arr,n): \n    inv_count = 0\n    for i in range(n): \n        for j in range(i + 1,n): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_297",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef flatten_list(list1):\n    \"\"\" Write a function to flatten a given nested list structure. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n    assert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]\n    assert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]",
        "expected_answer": "def flatten_list(list1):\n    result_list = []\n    if not list1: return result_list\n    stack = [list(list1)]\n    while stack:\n        c_num = stack.pop()\n        next = c_num.pop()\n        if c_num: stack.append(c_num)\n        if isinstance(next, list):\n            if next: stack.append(list(next))\n        else: result_list.append(next)\n    result_list.reverse()\n    return result_list",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_298",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef intersection_nested_lists(l1, l2):\n    \"\"\" Write a function to find the nested list elements which are present in another list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n    assert intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])==[[], []]\n    assert intersection_nested_lists(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])==[['john'], ['john'], ['john'], []]",
        "expected_answer": "def intersection_nested_lists(l1, l2):\n    result = [[n for n in lst if n in l1] for lst in l2]\n    return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_299",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef max_aggregate(stdata):\n    \"\"\" Write a function to calculate the maximum aggregate from the list of tuples. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n    assert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)\n    assert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)",
        "expected_answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_300",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef count_binary_seq(n):\n    \"\"\" Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert count_binary_seq(1) == 2.0\n    assert count_binary_seq(2) == 6.0\n    assert count_binary_seq(3) == 20.0",
        "expected_answer": "def count_binary_seq(n): \n\tnCr = 1\n\tres = 1\n\tfor r in range(1, n + 1): \n\t\tnCr = (nCr * (n + 1 - r)) / r \n\t\tres += nCr * nCr \n\treturn res",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_301",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef dict_depth(d):\n    \"\"\" Write a function to find the depth of a dictionary. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n    assert dict_depth({'a':1, 'b': {'c':'python'}})==2\n    assert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3",
        "expected_answer": "def dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_302",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef set_Bit_Number(n):\n    \"\"\" Write a python function to find the most significant bit number which is also a set bit. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert set_Bit_Number(6) == 4\n    assert set_Bit_Number(10) == 8\n    assert set_Bit_Number(18) == 16",
        "expected_answer": "def set_Bit_Number(n): \n    if (n == 0): \n        return 0; \n    msb = 0; \n    n = int(n / 2); \n    while (n > 0): \n        n = int(n / 2); \n        msb += 1; \n    return (1 << msb)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_303",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef solve(a,n):\n    \"\"\" Write a python function to check whether the count of inversion of two types are same or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert solve([1,0,2],3) == True\n    assert solve([1,2,0],3) == False\n    assert solve([1,2,1],3) == True",
        "expected_answer": "import sys \ndef solve(a,n):   \n    mx = -sys.maxsize - 1\n    for j in range(1,n):  \n        if (mx > a[j]):  \n            return False  \n        mx = max(mx,a[j - 1])    \n    return True",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_304",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef find_Element(arr,ranges,rotations,index) :\n    \"\"\" Write a python function to find element at a given index after number of rotations. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n    assert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3\n    assert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1",
        "expected_answer": "def find_Element(arr,ranges,rotations,index) :  \n    for i in range(rotations - 1,-1,-1 ) : \n        left = ranges[i][0] \n        right = ranges[i][1] \n        if (left <= index and right >= index) : \n            if (index == left) : \n                index = right \n            else : \n                index = index - 1 \n    return arr[index]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_305",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef start_withp(words):\n    \"\"\" Write a function to match two words from a list of words starting with letter 'p'. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n    assert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')\n    assert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')",
        "expected_answer": "import re\ndef start_withp(words):\n for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_306",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef max_sum_increasing_subseq(a, n, index, k):\n    \"\"\" Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i . \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n    assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7\n    assert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71",
        "expected_answer": "def max_sum_increasing_subseq(a, n, index, k):\n\tdp = [[0 for i in range(n)] \n\t\t\tfor i in range(n)]\n\tfor i in range(n):\n\t\tif a[i] > a[0]:\n\t\t\tdp[0][i] = a[i] + a[0]\n\t\telse:\n\t\t\tdp[0][i] = a[i]\n\tfor i in range(1, n):\n\t\tfor j in range(n):\n\t\t\tif a[j] > a[i] and j > i:\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\n\t\t\t\telse:\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\n\t\t\telse:\n\t\t\t\tdp[i][j] = dp[i - 1][j]\n\treturn dp[index][k]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_307",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef colon_tuplex(tuplex,m,n):\n    \"\"\" Write a function to get a colon of a tuple. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n    assert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))\n    assert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)",
        "expected_answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n  tuplex_colon = deepcopy(tuplex)\n  tuplex_colon[m].append(n)\n  return tuplex_colon",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_308",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef large_product(nums1, nums2, N):\n    \"\"\" Write a function to find the specified number of largest products from two given lists. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n    assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]\n    assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]",
        "expected_answer": "def large_product(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_309",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef maximum(a,b):\n    \"\"\" Write a python function to find the maximum of two numbers. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert maximum(5,10) == 10\n    assert maximum(-1,-2) == -1\n    assert maximum(9,7) == 9",
        "expected_answer": "def maximum(a,b):   \n    if a >= b: \n        return a \n    else: \n        return b",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_310",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef string_to_tuple(str1):\n    \"\"\" Write a function to convert a given string to a tuple. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n    assert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')\n    assert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')",
        "expected_answer": "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_311",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef set_left_most_unset_bit(n):\n    \"\"\" Write a python function to set the left most unset bit. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert set_left_most_unset_bit(10) == 14\n    assert set_left_most_unset_bit(12) == 14\n    assert set_left_most_unset_bit(15) == 15",
        "expected_answer": "def set_left_most_unset_bit(n): \n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1; temp>>=1\n    return (n | (1 << (pos)))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_312",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef volume_cone(r,h):\n    \"\"\" Write a function to find the volume of a cone. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert volume_cone(5,12)==314.15926535897927\n    assert volume_cone(10,15)==1570.7963267948965\n    assert volume_cone(19,17)==6426.651371693521",
        "expected_answer": "import math\ndef volume_cone(r,h):\n  volume = (1.0/3) * math.pi * r * r * h\n  return volume",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_313",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef pos_nos(list1):\n    \"\"\" Write a python function to print positive numbers in a list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert pos_nos([-1,-2,1,2]) == 1,2\n    assert pos_nos([3,4,-5]) == 3,4\n    assert pos_nos([-2,-3,1]) == 1",
        "expected_answer": "def pos_nos(list1):\n  for num in list1: \n    if num >= 0: \n       return num",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_314",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef max_sum_rectangular_grid(grid, n) :\n    \"\"\" Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n    assert max_sum_rectangular_grid([ [ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10] ], 5) == 24\n    assert max_sum_rectangular_grid([ [7, 9, 11, 15, 19], [21, 25, 28, 31, 32] ], 5) == 81",
        "expected_answer": "def max_sum_rectangular_grid(grid, n) : \n\tincl = max(grid[0][0], grid[1][0]) \n\texcl = 0\n\tfor i in range(1, n) : \n\t\texcl_new = max(excl, incl) \n\t\tincl = excl + max(grid[0][i], grid[1][i]) \n\t\texcl = excl_new \n\treturn max(excl, incl)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_315",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef find_Max_Len_Even(str):\n    \"\"\" Write a python function to find the first maximum length of even word. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find_Max_Len_Even(\"python language\") == \"language\"\n    assert find_Max_Len_Even(\"maximum even length\") == \"length\"\n    assert find_Max_Len_Even(\"eve\") == \"-1\"",
        "expected_answer": "def find_Max_Len_Even(str): \n    n = len(str) \n    i = 0\n    currlen = 0\n    maxlen = 0\n    st = -1\n    while (i < n): \n        if (str[i] == ' '): \n            if (currlen % 2 == 0): \n                if (maxlen < currlen): \n                    maxlen = currlen \n                    st = i - currlen \n            currlen = 0 \n        else : \n            currlen += 1\n        i += 1\n    if (currlen % 2 == 0): \n        if (maxlen < currlen): \n            maxlen = currlen \n            st = i - currlen \n    if (st == -1): \n        return \"-1\" \n    return str[st: st + maxlen]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_316",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef find_last_occurrence(A, x):\n    \"\"\" Write a function to find the index of the last occurrence of a given number in a sorted array. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n    assert find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9) == 9\n    assert find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6) == 6",
        "expected_answer": "def find_last_occurrence(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            left = mid + 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_317",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef modified_encode(alist):\n    \"\"\" Write a function to reflect the modified run-length encoding from a list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n    assert modified_encode('automatically')==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']\n    assert modified_encode('python')==['p', 'y', 't', 'h', 'o', 'n']",
        "expected_answer": "from itertools import groupby\ndef modified_encode(alist):\n        def ctr_ele(el):\n            if len(el)>1: return [len(el), el[0]]\n            else: return el[0]\n        return [ctr_ele(list(group)) for key, group in groupby(alist)]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_318",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef max_volume (s):\n    \"\"\" Write a python function to find the maximum volume of a cuboid with given sum of sides. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert max_volume(8) == 18\n    assert max_volume(4) == 2\n    assert max_volume(1) == 0",
        "expected_answer": "def max_volume (s): \n    maxvalue = 0\n    i = 1\n    for i in range(s - 1): \n        j = 1\n        for j in range(s): \n            k = s - i - j \n            maxvalue = max(maxvalue, i * j * k)         \n    return maxvalue",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_319",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef find_long_word(text):\n    \"\"\" Write a function to find all five characters long word in the given string by using regex. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find_long_word('Please move back to strem') == ['strem']\n    assert find_long_word('4K Ultra HD streaming player') == ['Ultra']\n    assert find_long_word('Streaming Media Player') == ['Media']",
        "expected_answer": "import re\ndef find_long_word(text):\n  return (re.findall(r\"\\b\\w{5}\\b\", text))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_320",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef sum_difference(n):\n    \"\"\" Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert sum_difference(12)==5434\n    assert sum_difference(20)==41230\n    assert sum_difference(54)==2151270",
        "expected_answer": "def sum_difference(n):\n    sumofsquares = 0\n    squareofsum = 0\n    for num in range(1, n+1):\n        sumofsquares += num * num\n        squareofsum += num\n    squareofsum = squareofsum ** 2\n    return squareofsum - sumofsquares",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_321",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef find_demlo(s):\n    \"\"\" Write a function to find the demlo number for the given number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find_demlo(\"111111\") == '12345654321'\n    assert find_demlo(\"1111\") == '1234321'\n    assert find_demlo(\"13333122222\") == '123456789101110987654321'",
        "expected_answer": "def find_demlo(s): \n\tl = len(s) \n\tres = \"\" \n\tfor i in range(1,l+1): \n\t\tres = res + str(i) \n\tfor i in range(l-1,0,-1): \n\t\tres = res + str(i) \n\treturn res",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_322",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef position_min(list1):\n    \"\"\" Write a function to find all index positions of the minimum values in a given list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n    assert position_min([1,2,2,2,4,4,4,5,5,5,5])==[0]\n    assert position_min([2,1,5,6,8,3,4,9,10,11,8,12])==[1]",
        "expected_answer": "def position_min(list1):\n    min_val = min(list1)\n    min_result = [i for i, j in enumerate(list1) if j == min_val]\n    return min_result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_323",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef right_rotate(arr, n, out_of_place, cur):\n    \"\"\" Write a function to re-arrange the given array in alternating positive and negative items. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n    assert re_arrange([1, 2, 3, -4, -1, 4], 6) == [-4, 1, -1, 2, 3, 4]\n    assert re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8) == [-4, 4, -3, 7, -9, 9, 77, 5]",
        "expected_answer": "def right_rotate(arr, n, out_of_place, cur):\n\ttemp = arr[cur]\n\tfor i in range(cur, out_of_place, -1):\n\t\tarr[i] = arr[i - 1]\n\tarr[out_of_place] = temp\n\treturn arr\ndef re_arrange(arr, n):\n\tout_of_place = -1\n\tfor index in range(n):\n\t\tif (out_of_place >= 0):\n\t\t\tif ((arr[index] >= 0 and arr[out_of_place] < 0) or\n\t\t\t(arr[index] < 0 and arr[out_of_place] >= 0)):\n\t\t\t\tarr = right_rotate(arr, n, out_of_place, index)\n\t\t\t\tif (index-out_of_place > 2):\n\t\t\t\t\tout_of_place += 2\n\t\t\t\telse:\n\t\t\t\t\tout_of_place = - 1\n\t\tif (out_of_place == -1):\n\t\t\tif ((arr[index] >= 0 and index % 2 == 0) or\n\t\t\t (arr[index] < 0 and index % 2 == 1)):\n\t\t\t\tout_of_place = index\n\treturn arr",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_324",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef sum_of_alternates(test_tuple):\n    \"\"\" Write a function to extract the sum of alternate chains of tuples. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n    assert sum_of_alternates((1, 2, 3, 4, 5)) == (6, 9)\n    assert sum_of_alternates((6, 7, 8, 9, 4, 5)) == (21, 18)",
        "expected_answer": "def sum_of_alternates(test_tuple):\n  sum1 = 0\n  sum2 = 0\n  for idx, ele in enumerate(test_tuple):\n    if idx % 2:\n      sum1 += ele\n    else:\n      sum2 += ele\n  return ((sum1),(sum2))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_325",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef get_Min_Squares(n):\n    \"\"\" Write a python function to find the minimum number of squares whose sum is equal to a given number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert get_Min_Squares(6) == 3\n    assert get_Min_Squares(2) == 2\n    assert get_Min_Squares(4) == 1",
        "expected_answer": "def get_Min_Squares(n):\n    if n <= 3:\n        return n;\n    res = n \n    for x in range(1,n + 1):\n        temp = x * x;\n        if temp > n:\n            break\n        else:\n            res = min(res,1 + get_Min_Squares(n  - temp)) \n    return res;",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_326",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef most_occurrences(test_list):\n    \"\"\" Write a function to get the word with most number of occurrences in the given strings list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n    assert most_occurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"] ) == 'year'\n    assert most_occurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"] ) == 'can'",
        "expected_answer": "from collections import defaultdict \n\ndef most_occurrences(test_list):\n  temp = defaultdict(int)\n  for sub in test_list:\n    for wrd in sub.split():\n      temp[wrd] += 1\n  res = max(temp, key=temp.get)\n  return (str(res))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_327",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef check_isosceles(x,y,z):\n    \"\"\" Write a function to print check if the triangle is isosceles or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert check_isosceles(6,8,12)==False \n    assert check_isosceles(6,6,12)==True\n    assert check_isosceles(6,16,20)==False",
        "expected_answer": "def check_isosceles(x,y,z):\n  if x==y or y==z or z==x:\n\t   return True\n  else:\n     return False",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_328",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef rotate_left(list1,m,n):\n    \"\"\" Write a function to rotate a given list by specified number of items to the left direction. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n    assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]\n    assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2]",
        "expected_answer": "def rotate_left(list1,m,n):\n  result =  list1[m:]+list1[:n]\n  return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_329",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef neg_count(list):\n    \"\"\" Write a python function to count negative numbers in a list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert neg_count([-1,-2,3,-4,-5]) == 4\n    assert neg_count([1,2,3]) == 0\n    assert neg_count([1,2,-3,-10,20]) == 2",
        "expected_answer": "def neg_count(list):\n  neg_count= 0\n  for num in list: \n    if num <= 0: \n      neg_count += 1\n  return neg_count",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_330",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef find_char(text):\n    \"\"\" Write a function to find all three, four, five characters long words in the given string by using regex. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n    assert find_char('Certain service are subject to change MSR') == ['are', 'MSR']\n    assert find_char('Third party legal desclaimers') == ['Third', 'party', 'legal']",
        "expected_answer": "import re\ndef find_char(text):\n  return (re.findall(r\"\\b\\w{3,5}\\b\", text))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_331",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef count_unset_bits(n):\n    \"\"\" Write a python function to count unset bits of a given number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert count_unset_bits(2) == 1\n    assert count_unset_bits(4) == 2\n    assert count_unset_bits(6) == 1",
        "expected_answer": "def count_unset_bits(n): \n    count = 0\n    x = 1\n    while(x < n + 1): \n        if ((x & n) == 0): \n            count += 1\n        x = x << 1\n    return count",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_332",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef char_frequency(str1):\n    \"\"\" Write a function to count character frequency of a given string. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n    assert char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}\n    assert char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}",
        "expected_answer": "def char_frequency(str1):\n    dict = {}\n    for n in str1:\n        keys = dict.keys()\n        if n in keys:\n            dict[n] += 1\n        else:\n            dict[n] = 1\n    return dict",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_333",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef Sort(sub_li):\n    \"\"\" Write a python function to sort a list according to the second element in sublist. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n    assert Sort([['452', 10], ['256', 5], ['100', 20], ['135', 15]]) == [['256', 5], ['452', 10], ['135', 15], ['100', 20]]\n    assert Sort([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]]) == [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]",
        "expected_answer": "def Sort(sub_li): \n    sub_li.sort(key = lambda x: x[1]) \n    return sub_li",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_334",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef check_Validity(a,b,c):\n    \"\"\" Write a python function to check whether the triangle is valid or not if sides are given. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert check_Validity(1,2,3) == False\n    assert check_Validity(2,3,5) == False\n    assert check_Validity(7,10,5) == True",
        "expected_answer": "def check_Validity(a,b,c):  \n    if (a + b <= c) or (a + c <= b) or (b + c <= a) : \n        return False\n    else: \n        return True",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_335",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef ap_sum(a,n,d):\n    \"\"\" Write a function to find the sum of arithmetic progression. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert ap_sum(1,5,2)==25\n    assert ap_sum(2,6,4)==72\n    assert ap_sum(1,4,5)==34",
        "expected_answer": "def ap_sum(a,n,d):\n  total = (n * (2 * a + (n - 1) * d)) / 2\n  return total",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_336",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef check_monthnum(monthname1):\n    \"\"\" Write a function to check whether the given month name contains 28 days or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert check_monthnum(\"February\")==True\n    assert check_monthnum(\"January\")==False\n    assert check_monthnum(\"March\")==False",
        "expected_answer": "def check_monthnum(monthname1):\n  if monthname1 == \"February\":\n    return True\n  else:\n    return False",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_337",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef text_match_word(text):\n    \"\"\" Write a function that matches a word at the end of a string, with optional punctuation. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert text_match_word(\"python.\")==('Found a match!')\n    assert text_match_word(\"python.\")==('Found a match!')\n    assert text_match_word(\"  lang  .\")==('Not matched!')",
        "expected_answer": "import re\ndef text_match_word(text):\n        patterns = '\\w+\\S*$'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return 'Not matched!'",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_338",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef check_Equality(s):\n    \"\"\" Write a python function to count the number of substrings with same first and last characters. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert count_Substring_With_Equal_Ends('aba') == 4\n    assert count_Substring_With_Equal_Ends('abcab') == 7\n    assert count_Substring_With_Equal_Ends('abc') == 3",
        "expected_answer": "def check_Equality(s): \n    return (ord(s[0]) == ord(s[len(s) - 1])); \ndef count_Substring_With_Equal_Ends(s): \n    result = 0; \n    n = len(s); \n    for i in range(n):\n        for j in range(1,n-i+1): \n            if (check_Equality(s[i:i+j])): \n                result+=1; \n    return result;",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_339",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef find_Divisor(x,y):\n    \"\"\" Write a python function to find the maximum occuring divisor in an interval. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find_Divisor(2,2) == 2\n    assert find_Divisor(2,5) == 2\n    assert find_Divisor(5,10) == 2",
        "expected_answer": "def find_Divisor(x,y):  \n    if (x==y): \n        return y \n    return 2",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_340",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef sum_three_smallest_nums(lst):\n    \"\"\" Write a python function to find the sum of the three lowest positive numbers from a given list of numbers. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n    assert sum_three_smallest_nums([1,2,3,4,5]) == 6\n    assert sum_three_smallest_nums([0,1,2,3,4,5]) == 6",
        "expected_answer": "def sum_three_smallest_nums(lst):\n\treturn sum(sorted([x for x in lst if x > 0])[:3])",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_341",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef set_to_tuple(s):\n    \"\"\" Write a function to convert the given set into ordered tuples. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n    assert set_to_tuple({6, 7, 8, 9, 10, 11}) == (6, 7, 8, 9, 10, 11)\n    assert set_to_tuple({12, 13, 14, 15, 16}) == (12, 13, 14, 15, 16)",
        "expected_answer": "def set_to_tuple(s):\n  t = tuple(sorted(s))\n  return (t)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_342",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef __init__(self, value, list_num, index):\n    \"\"\" Write a function to find the smallest range that includes at-least one element from each of the given arrays. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n    assert find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]]) == (4, 7)\n    assert find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]) == (5, 7)",
        "expected_answer": "from heapq import heappop, heappush\nclass Node:\n    def __init__(self, value, list_num, index):\n        self.value = value\n        self.list_num = list_num\n        self.index = index\n    def __lt__(self, other):\n        return self.value < other.value\ndef find_minimum_range(list):\n    high = float('-inf')\n    p = (0, float('inf'))\n    pq = []\n    for i in range(len(list)):\n        heappush(pq, Node(list[i][0], i, 0))\n        high = max(high, list[i][0])\n    while True:\n        top = heappop(pq)\n        low = top.value\n        i = top.list_num\n        j = top.index\n        if high - low < p[1] - p[0]:\n            p = (low, high)\n        if j == len(list[i]) - 1:\n            return p\n        heappush(pq, Node(list[i][j + 1], i, j + 1))\n        high = max(high, list[i][j + 1])",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_343",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef dig_let(s):\n    \"\"\" Write a function to calculate the number of digits and letters in a string. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert dig_let(\"python\")==(6,0)\n    assert dig_let(\"program\")==(7,0)\n    assert dig_let(\"python3.0\")==(6,2)",
        "expected_answer": "def dig_let(s):\n d=l=0\n for c in s:\n    if c.isdigit():\n        d=d+1\n    elif c.isalpha():\n        l=l+1\n    else:\n        pass\n return (l,d)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_344",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef count_Odd_Squares(n,m):\n    \"\"\" Write a python function to find number of elements with odd factors in a given range. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert count_Odd_Squares(5,100) == 8\n    assert count_Odd_Squares(8,65) == 6\n    assert count_Odd_Squares(2,5) == 1",
        "expected_answer": "def count_Odd_Squares(n,m): \n    return int(m**0.5) - int((n-1)**0.5)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_345",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef diff_consecutivenums(nums):\n    \"\"\" Write a function to find the difference between two consecutive numbers in a given list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n    assert diff_consecutivenums([4, 5, 8, 9, 6, 10])==[1, 3, 1, -3, 4]\n    assert diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])==[1, 1, 1, 1, 0, 0, 0, 1, 2]",
        "expected_answer": "def diff_consecutivenums(nums):\n    result = [b-a for a, b in zip(nums[:-1], nums[1:])]\n    return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_346",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef zigzag(n, k):\n    \"\"\" Write a function to find entringer number e(n, k). \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert zigzag(4, 3) == 5\n    assert zigzag(4, 2) == 4\n    assert zigzag(3, 1) == 1",
        "expected_answer": "def zigzag(n, k): \n\tif (n == 0 and k == 0): \n\t\treturn 1\n\tif (k == 0): \n\t\treturn 0\n\treturn zigzag(n, k - 1) + zigzag(n - 1, n - k)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_347",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef count_Squares(m,n):\n    \"\"\" Write a python function to count the number of squares in a rectangle. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert count_Squares(4,3) == 20\n    assert count_Squares(1,2) == 2\n    assert count_Squares(2,2) == 5",
        "expected_answer": "def count_Squares(m,n): \n    if (n < m): \n        temp = m \n        m = n \n        n = temp \n    return n * (n + 1) * (3 * m - n + 1) // 6",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_348",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef bin_coff(n, r):\n    \"\"\" Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find_ways(4) == 2\n    assert find_ways(6) == 5\n    assert find_ways(8) == 14",
        "expected_answer": "def bin_coff(n, r): \n\tval = 1\n\tif (r > (n - r)): \n\t\tr = (n - r) \n\tfor i in range(0, r): \n\t\tval *= (n - i) \n\t\tval //= (i + 1) \n\treturn val \ndef find_ways(M): \n\tn = M // 2\n\ta = bin_coff(2 * n, n) \n\tb = a // (n + 1) \n\treturn (b)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_349",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef check(string) :\n    \"\"\" Write a python function to check whether the given string is a binary string or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert check(\"01010101010\") == \"Yes\"\n    assert check(\"name0\") == \"No\"\n    assert check(\"101\") == \"Yes\"",
        "expected_answer": "def check(string) :\n    p = set(string) \n    s = {'0', '1'} \n    if s == p or p == {'0'} or p == {'1'}: \n        return (\"Yes\") \n    else : \n        return (\"No\")",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_350",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef minimum_Length(s) :\n    \"\"\" Write a python function to minimize the length of the string by removing occurrence of only one character. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert minimum_Length(\"mnm\") == 1\n    assert minimum_Length(\"abcda\") == 3\n    assert minimum_Length(\"abcb\") == 2",
        "expected_answer": "def minimum_Length(s) : \n    maxOcc = 0\n    n = len(s) \n    arr = [0]*26\n    for i in range(n) : \n        arr[ord(s[i]) -ord('a')] += 1\n    for i in range(26) : \n        if arr[i] > maxOcc : \n            maxOcc = arr[i] \n    return n - maxOcc",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_351",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef first_Element(arr,n,k):\n    \"\"\" Write a python function to find the first element occurring k times in a given array. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert first_Element([0,1,2,3,4,5],6,1) == 0\n    assert first_Element([1,2,1,3,4],5,2) == 1\n    assert first_Element([2,3,4,3,5,7,1,2,3,5],10,2) == 2",
        "expected_answer": "def first_Element(arr,n,k): \n    count_map = {}; \n    for i in range(0, n): \n        if(arr[i] in count_map.keys()): \n            count_map[arr[i]] += 1\n        else: \n            count_map[arr[i]] = 1\n        i += 1\n    for i in range(0, n):  \n        if (count_map[arr[i]] == k): \n            return arr[i] \n        i += 1 \n    return -1",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_352",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef unique_Characters(str):\n    \"\"\" Write a python function to check whether all the characters in a given string are unique. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert unique_Characters('aba') == False\n    assert unique_Characters('abc') == True\n    assert unique_Characters('abab') == False",
        "expected_answer": "def unique_Characters(str):\n    for i in range(len(str)):\n        for j in range(i + 1,len(str)): \n            if (str[i] == str[j]):\n                return False;\n    return True;",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_353",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef remove_column(list1, n):\n    \"\"\" Write a function to remove a specified column from a given nested list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n    assert remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[[1, 2], [-2, 4], [1, -1]]\n    assert remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[[3], [7], [3], [15, 17], [7], [11]]",
        "expected_answer": "def remove_column(list1, n):\n   for i in list1: \n    del i[n] \n   return list1",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_354",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef tn_ap(a,n,d):\n    \"\"\" Write a function to find t-nth term of arithemetic progression. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert tn_ap(1,5,2)==9\n    assert tn_ap(2,6,4)==22\n    assert tn_ap(1,4,5)==16",
        "expected_answer": "def tn_ap(a,n,d):\n  tn = a + (n - 1) * d\n  return tn",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_355",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef count_Rectangles(radius):\n    \"\"\" Write a python function to count the number of rectangles in a circle of radius r. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert count_Rectangles(2) == 8\n    assert count_Rectangles(1) == 1\n    assert count_Rectangles(0) == 0",
        "expected_answer": "def count_Rectangles(radius):  \n    rectangles = 0 \n    diameter = 2 * radius \n    diameterSquare = diameter * diameter \n    for a in range(1, 2 * radius):  \n        for b in range(1, 2 * radius): \n            diagnalLengthSquare = (a * a +  b * b)  \n            if (diagnalLengthSquare <= diameterSquare) : \n                rectangles += 1\n    return rectangles",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_356",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef find_angle(a,b):\n    \"\"\" Write a function to find the third angle of a triangle using two angles. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find_angle(47,89)==44\n    assert find_angle(45,95)==40\n    assert find_angle(50,40)==90",
        "expected_answer": "def find_angle(a,b):\n c = 180 - (a + b)\n return c",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_357",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef find_max(test_list):\n    \"\"\" Write a function to find the maximum element of all the given tuple records. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n    assert find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]) == 11\n    assert find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]) == 12",
        "expected_answer": "def find_max(test_list):\n  res = max(int(j) for i in test_list for j in i)\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_358",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef moddiv_list(nums1,nums2):\n    \"\"\" Write a function to find modulo division of two lists using map and lambda function. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n    assert moddiv_list([3,2],[1,4])==[0, 2]\n    assert moddiv_list([90,120],[50,70])==[40, 50]",
        "expected_answer": "def moddiv_list(nums1,nums2):\n  result = map(lambda x, y: x % y, nums1, nums2)\n  return list(result)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_359",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef Check_Solution(a,b,c):\n    \"\"\" Write a python function to check whether one root of the quadratic equation is twice of the other or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert Check_Solution(1,3,2) == \"Yes\"\n    assert Check_Solution(1,2,3) == \"No\"\n    assert Check_Solution(1,-5,6) == \"No\"",
        "expected_answer": "def Check_Solution(a,b,c): \n    if (2*b*b == 9*a*c): \n        return (\"Yes\"); \n    else: \n        return (\"No\");",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_360",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef get_carol(n):\n    \"\"\" Write a function to find the n\u2019th carol number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert get_carol(2) == 7\n    assert get_carol(4) == 223\n    assert get_carol(5) == 959",
        "expected_answer": "def get_carol(n): \n\tresult = (2**n) - 1\n\treturn result * result - 2",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_361",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef remove_empty(list1):\n    \"\"\" Write a function to remove empty lists from a given list of lists. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n    assert remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])==[ 'Green', [1, 2], 'Blue']\n    assert remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])==['Python', 'programming', 'language']",
        "expected_answer": "def remove_empty(list1):\n  remove_empty = [x for x in list1 if x]\n  return remove_empty",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_362",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef max_occurrences(nums):\n    \"\"\" Write a python function to find the item with maximum occurrences in a given list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n    assert max_occurrences([1,2,6,7,0,1,0,1,0]) == 1,0\n    assert max_occurrences([1,2,3,1,2,4,1]) == 1",
        "expected_answer": "def max_occurrences(nums):\n    max_val = 0\n    result = nums[0] \n    for i in nums:\n        occu = nums.count(i)\n        if occu > max_val:\n            max_val = occu\n            result = i \n    return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_363",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef add_K_element(test_list, K):\n    \"\"\" Write a function to add the k elements to each element in the tuple. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n    assert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]\n    assert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]",
        "expected_answer": "def add_K_element(test_list, K):\n  res = [tuple(j + K for j in sub ) for sub in test_list]\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_364",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef make_flip(ch):\n    \"\"\" Write a function to find the number of flips required to make the given binary string a sequence of alternate characters. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert min_flip_to_make_string_alternate(\"0001010111\") == 2\n    assert min_flip_to_make_string_alternate(\"001\") == 1\n    assert min_flip_to_make_string_alternate(\"010111011\") == 2 ",
        "expected_answer": "def make_flip(ch): \n\treturn '1' if (ch == '0') else '0'\ndef get_flip_with_starting_charcter(str, expected): \n\tflip_count = 0\n\tfor i in range(len( str)): \n\t\tif (str[i] != expected): \n\t\t\tflip_count += 1\n\t\texpected = make_flip(expected) \n\treturn flip_count \ndef min_flip_to_make_string_alternate(str): \n\treturn min(get_flip_with_starting_charcter(str, '0'),get_flip_with_starting_charcter(str, '1'))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_365",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef count_Digit(n):\n    \"\"\" Write a python function to count the number of digits of a given number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert count_Digit(12345) == 5\n    assert count_Digit(11223305) == 8\n    assert count_Digit(4123459) == 7",
        "expected_answer": "def count_Digit(n):\n    count = 0\n    while n != 0:\n        n //= 10\n        count += 1\n    return count",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_366",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef adjacent_num_product(list_nums):\n    \"\"\" Write a python function to find the largest product of the pair of adjacent elements from a given list of integers. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert adjacent_num_product([1,2,3,4,5,6]) == 30\n    assert adjacent_num_product([1,2,3,4,5]) == 20\n    assert adjacent_num_product([2,3]) == 6",
        "expected_answer": "def adjacent_num_product(list_nums):\n    return max(a*b for a, b in zip(list_nums, list_nums[1:]))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_367",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef __init__(self, data):\n    \"\"\" Write a function to check if a binary tree is balanced or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert is_tree_balanced(root) == False\n    assert is_tree_balanced(root1) == True\n    assert is_tree_balanced(root2) == False ",
        "expected_answer": "class Node: \n\tdef __init__(self, data): \n\t\tself.data = data \n\t\tself.left = None\n\t\tself.right = None\ndef get_height(root): \n\tif root is None: \n\t\treturn 0\n\treturn max(get_height(root.left), get_height(root.right)) + 1\ndef is_tree_balanced(root): \n\tif root is None: \n\t\treturn True\n\tlh = get_height(root.left) \n\trh = get_height(root.right) \n\tif (abs(lh - rh) <= 1) and is_tree_balanced( \n\troot.left) is True and is_tree_balanced( root.right) is True: \n\t\treturn True\n\treturn False",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_368",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef repeat_tuples(test_tup, N):\n    \"\"\" Write a function to repeat the given tuple n times. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n    assert repeat_tuples((1, 2), 3) == ((1, 2), (1, 2), (1, 2))\n    assert repeat_tuples((3, 4), 5) == ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))",
        "expected_answer": "def repeat_tuples(test_tup, N):\n  res = ((test_tup, ) * N)\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_369",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef lateralsurface_cuboid(l,w,h):\n    \"\"\" Write a function to find the lateral surface area of cuboid \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert lateralsurface_cuboid(8,5,6)==156\n    assert lateralsurface_cuboid(7,9,10)==320\n    assert lateralsurface_cuboid(10,20,30)==1800",
        "expected_answer": "def lateralsurface_cuboid(l,w,h):\n  LSA = 2*h*(l+w)\n  return LSA",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_370",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef float_sort(price):\n    \"\"\" Write a function to sort a tuple by its float element. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n    assert float_sort([('item1', '15'), ('item2', '10'), ('item3', '20')])==[('item3', '20'), ('item1', '15'), ('item2', '10')] \n    assert float_sort([('item1', '5'), ('item2', '10'), ('item3', '14')])==[('item3', '14'), ('item2', '10'), ('item1', '5')] ",
        "expected_answer": "def float_sort(price):\n  float_sort=sorted(price, key=lambda x: float(x[1]), reverse=True)\n  return float_sort",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_371",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef smallest_missing(A, left_element, right_element):\n    \"\"\" Write a function to find the smallest missing element in a sorted array. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n    assert smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3\n    assert smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0",
        "expected_answer": "def smallest_missing(A, left_element, right_element):\n    if left_element > right_element:\n        return left_element\n    mid = left_element + (right_element - left_element) // 2\n    if A[mid] == mid:\n        return smallest_missing(A, mid + 1, right_element)\n    else:\n        return smallest_missing(A, left_element, mid - 1)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_372",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef heap_assending(nums):\n    \"\"\" Write a function to sort a given list of elements in ascending order using heap queue algorithm. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n    assert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\n    assert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "expected_answer": "import heapq as hq\ndef heap_assending(nums):\n  hq.heapify(nums)\n  s_result = [hq.heappop(nums) for i in range(len(nums))]\n  return s_result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_373",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef volume_cuboid(l,w,h):\n    \"\"\" Write a function to find the volume of a cuboid. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert volume_cuboid(1,2,3)==6\n    assert volume_cuboid(5,7,9)==315\n    assert volume_cuboid(10,15,21)==3150",
        "expected_answer": "def volume_cuboid(l,w,h):\n  volume=l*w*h\n  return volume",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_374",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef permute_string(str):\n    \"\"\" Write a function to print all permutations of a given string including duplicates. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert permute_string('ab')==['ab', 'ba']\n    assert permute_string('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']\n    assert permute_string('abcd')==['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']",
        "expected_answer": "def permute_string(str):\n    if len(str) == 0:\n        return ['']\n    prev_list = permute_string(str[1:len(str)])\n    next_list = []\n    for i in range(0,len(prev_list)):\n        for j in range(0,len(str)):\n            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]\n            if new_str not in next_list:\n                next_list.append(new_str)\n    return next_list",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_375",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef round_num(n,m):\n    \"\"\" Write a function to round the given number to the nearest multiple of a specific number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert round_num(4722,10)==4720\n    assert round_num(1111,5)==1110\n    assert round_num(219,2)==218",
        "expected_answer": "def round_num(n,m):\n    a = (n //m) * m\n    b = a + m\n    return (b if n - a > b - n else a)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_376",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef remove_replica(test_tup):\n    \"\"\" Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n    assert remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)) == (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')\n    assert remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7)) == (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')",
        "expected_answer": "def remove_replica(test_tup):\n  temp = set()\n  res = tuple(ele if ele not in temp and not temp.add(ele) \n\t\t\t\telse 'MSP' for ele in test_tup)\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_377",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef remove_Char(s,c) :\n    \"\"\" Write a python function to remove all occurrences of a character in a given string. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert remove_Char(\"aba\",'a') == \"b\"\n    assert remove_Char(\"toggle\",'g') == \"tole\"\n    assert remove_Char(\"aabbc\",'b') == \"aac\"",
        "expected_answer": "def remove_Char(s,c) :  \n    counts = s.count(c) \n    s = list(s) \n    while counts :  \n        s.remove(c) \n        counts -= 1 \n    s = '' . join(s)   \n    return (s)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_378",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef move_first(test_list):\n    \"\"\" Write a python function to shift last element to first position in the given list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert move_first([1,2,3,4]) == [4,1,2,3]\n    assert move_first([0,1,2,3]) == [3,0,1,2]\n    assert move_first([9,8,7,1]) == [1,9,8,7]",
        "expected_answer": "def move_first(test_list):\n  test_list = test_list[-1:] + test_list[:-1]  \n  return test_list",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_379",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef surfacearea_cuboid(l,w,h):\n    \"\"\" Write a function to find the surface area of a cuboid. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert surfacearea_cuboid(1,2,3)==22\n    assert surfacearea_cuboid(5,7,9)==286\n    assert surfacearea_cuboid(10,15,21)==1350",
        "expected_answer": "def surfacearea_cuboid(l,w,h):\n  SA = 2*(l*w + l * h + w * h)\n  return SA",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_380",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef multi_list(rownum,colnum):\n    \"\"\" Write a function to generate a two-dimensional array. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n    assert multi_list(5,7)==[[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]\n    assert multi_list(10,15)==[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]",
        "expected_answer": "def multi_list(rownum,colnum):\n  multi_list = [[0 for col in range(colnum)] for row in range(rownum)]\n  for row in range(rownum):\n    for col in range(colnum):\n        multi_list[row][col]= row*col\n  return multi_list",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_381",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef index_on_inner_list(list_data, index_no):\n    \"\"\" Write a function to sort a list of lists by a given index of the inner list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n    assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]\n    assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]",
        "expected_answer": "from operator import itemgetter\ndef index_on_inner_list(list_data, index_no):\n    result = sorted(list_data, key=itemgetter(index_no))\n    return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_382",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef find_rotation_count(A):\n    \"\"\" Write a function to find the number of rotations in a circularly sorted array. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n    assert find_rotation_count([8, 9, 10,2, 5, 6]) == 3\n    assert find_rotation_count([2, 5, 6, 8, 9, 10]) == 0",
        "expected_answer": "def find_rotation_count(A):\n    (left, right) = (0, len(A) - 1)\n    while left <= right:\n        if A[left] <= A[right]:\n            return left\n        mid = (left + right) // 2\n        next = (mid + 1) % len(A)\n        prev = (mid - 1 + len(A)) % len(A)\n        if A[mid] <= A[next] and A[mid] <= A[prev]:\n            return mid\n        elif A[mid] <= A[right]:\n            right = mid - 1\n        elif A[mid] >= A[left]:\n            left = mid + 1\n    return -1",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_383",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef even_bit_toggle_number(n) :\n    \"\"\" Write a python function to toggle all odd bits of a given number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert even_bit_toggle_number(10) == 15\n    assert even_bit_toggle_number(20) == 1\n    assert even_bit_toggle_number(30) == 11",
        "expected_answer": "def even_bit_toggle_number(n) : \n    res = 0; count = 0; temp = n    \n    while(temp > 0 ) : \n        if (count % 2 == 0) : \n            res = res | (1 << count)      \n        count = count + 1\n        temp >>= 1 \n    return n ^ res",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_384",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef frequency_Of_Smallest(n,arr):\n    \"\"\" Write a python function to find the frequency of the smallest value in a given array. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n    assert frequency_Of_Smallest(7,[3,1,2,5,6,2,3]) == 1\n    assert frequency_Of_Smallest(7,[3,3,6,3,7,4,9]) == 3",
        "expected_answer": "def frequency_Of_Smallest(n,arr): \n    mn = arr[0] \n    freq = 1\n    for i in range(1,n): \n        if (arr[i] < mn): \n            mn = arr[i] \n            freq = 1\n        elif (arr[i] == mn): \n            freq += 1\n    return freq",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_385",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef get_perrin(n):\n    \"\"\" Write a function to find the n'th perrin number using recursion. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert get_perrin(9) == 12\n    assert get_perrin(4) == 2\n    assert get_perrin(6) == 5",
        "expected_answer": "def get_perrin(n):\n  if (n == 0):\n    return 3\n  if (n == 1):\n    return 0\n  if (n == 2):\n    return 2 \n  return get_perrin(n - 2) + get_perrin(n - 3)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_386",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef swap_count(s):\n    \"\"\" Write a function to find out the minimum no of swaps required for bracket balancing in the given string. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert swap_count(\"[]][][\") == 2\n    assert swap_count(\"[[][]]\") == 0\n    assert swap_count(\"[[][]]][\") == 1",
        "expected_answer": "def swap_count(s):\n\tchars = s\n\tcount_left = 0\n\tcount_right = 0\n\tswap = 0\n\timbalance = 0; \n\tfor i in range(len(chars)):\n\t\tif chars[i] == '[':\n\t\t\tcount_left += 1\n\t\t\tif imbalance > 0:\n\t\t\t\tswap += imbalance\n\t\t\t\timbalance -= 1\n\t\telif chars[i] == ']':\n\t\t\tcount_right += 1\n\t\t\timbalance = (count_right - count_left) \n\treturn swap",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_387",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef even_or_odd(N):\n    \"\"\" Write a python function to check whether the hexadecimal number is even or odd. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert even_or_odd(\"AB3454D\") ==\"Odd\"\n    assert even_or_odd(\"ABC\") == \"Even\"\n    assert even_or_odd(\"AAD\") == \"Odd\"",
        "expected_answer": "def even_or_odd(N): \n    l = len(N) \n    if (N[l-1] =='0'or N[l-1] =='2'or \n        N[l-1] =='4'or N[l-1] =='6'or \n        N[l-1] =='8'or N[l-1] =='A'or \n        N[l-1] =='C'or N[l-1] =='E'): \n        return (\"Even\") \n    else: \n        return (\"Odd\")",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_388",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef highest_Power_of_2(n):\n    \"\"\" Write a python function to find the highest power of 2 that is less than or equal to n. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert highest_Power_of_2(10) == 8\n    assert highest_Power_of_2(19) == 16\n    assert highest_Power_of_2(32) == 32",
        "expected_answer": "def highest_Power_of_2(n): \n    res = 0; \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i; \n            break; \n    return res;",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_389",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef find_lucas(n):\n    \"\"\" Write a function to find the n'th lucas number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find_lucas(9) == 76\n    assert find_lucas(4) == 7\n    assert find_lucas(3) == 4",
        "expected_answer": "def find_lucas(n): \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_390",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef add_string(list,string):\n    \"\"\" Write a function to insert a given string at the beginning of all items in a list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n    assert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']\n    assert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']",
        "expected_answer": "def add_string(list,string):\n add_string=[string.format(i) for i in  list]\n return add_string",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_391",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef convert_list_dictionary(l1, l2, l3):\n    \"\"\" Write a function to convert more than one list to nested dictionary. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n    assert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]\n    assert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]",
        "expected_answer": "def convert_list_dictionary(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_392",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef get_max_sum (n):\n    \"\"\" Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n). \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert get_max_sum(60) == 106\n    assert get_max_sum(10) == 12\n    assert get_max_sum(2) == 2",
        "expected_answer": "def get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_393",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef max_length_list(input_list):\n    \"\"\" Write a function to find the list with maximum length using lambda function. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n    assert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])\n    assert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])",
        "expected_answer": "def max_length_list(input_list):\n    max_length = max(len(x) for x in input_list )   \n    max_list = max(input_list, key = lambda i: len(i))    \n    return(max_length, max_list)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_394",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef check_distinct(test_tup):\n    \"\"\" Write a function to check if given tuple is distinct or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert check_distinct((1, 4, 5, 6, 1, 4)) == False\n    assert check_distinct((1, 4, 5, 6)) == True\n    assert check_distinct((2, 3, 4, 5, 6)) == True",
        "expected_answer": "def check_distinct(test_tup):\n  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n      res = False\n      break\n    temp.add(ele)\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_395",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef first_non_repeating_character(str1):\n    \"\"\" Write a python function to find the first non-repeated character in a given string. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert first_non_repeating_character(\"abcabc\") == None\n    assert first_non_repeating_character(\"abc\") == \"a\"\n    assert first_non_repeating_character(\"ababc\") == \"c\"",
        "expected_answer": "def first_non_repeating_character(str1):\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n      ctr[c] = 1 \n      char_order.append(c)\n  for c in char_order:\n    if ctr[c] == 1:\n      return c\n  return None",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_396",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef check_char(string):\n    \"\"\" Write a function to check whether the given string starts and ends with the same character or not using regex. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert check_char(\"abba\") == \"Valid\"\n    assert check_char(\"a\") == \"Valid\"\n    assert check_char(\"abcd\") == \"Invalid\"",
        "expected_answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\"",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_397",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef median_numbers(a,b,c):\n    \"\"\" Write a function to find the median of three specific numbers. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert median_numbers(25,55,65)==55.0\n    assert median_numbers(20,10,30)==20.0\n    assert median_numbers(15,45,75)==45.0",
        "expected_answer": "def median_numbers(a,b,c):\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n else:\n    if a > c:\n        median = a\n    elif b < c:\n        median = b\n    else:\n        median = c\n return median",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_398",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef sum_of_digits(nums):\n    \"\"\" Write a function to compute the sum of digits of each number of a given list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert sum_of_digits([10,2,56])==14\n    assert sum_of_digits([[10,20,4,5,'b',70,'a']])==19\n    assert sum_of_digits([10,20,-4,5,-70])==19",
        "expected_answer": "def sum_of_digits(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_399",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef bitwise_xor(test_tup1, test_tup2):\n    \"\"\" Write a function to perform the mathematical bitwise xor operation across the given tuples. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n    assert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)\n    assert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)",
        "expected_answer": "def bitwise_xor(test_tup1, test_tup2):\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_400",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef extract_freq(test_list):\n    \"\"\" Write a function to extract the frequency of unique tuples in the given list order irrespective. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n    assert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4\n    assert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4",
        "expected_answer": "def extract_freq(test_list):\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_401",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef add_nested_tuples(test_tup1, test_tup2):\n    \"\"\" Write a function to perform index wise addition of tuple elements in the given two nested tuples. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))",
        "expected_answer": "def add_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_402",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef ncr_modp(n, r, p):\n    \"\"\" Write a function to compute the value of ncr%p. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert ncr_modp(10,2,13)==6\n    assert ncr_modp(15,12,43)==25\n    assert ncr_modp(17,9,18)==10",
        "expected_answer": "def ncr_modp(n, r, p): \n    C = [0 for i in range(r+1)]   \n    C[0] = 1\n    for i in range(1, n+1): \n        for j in range(min(i, r), 0, -1): \n            C[j] = (C[j] + C[j-1]) % p   \n    return C[r]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_403",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef is_valid_URL(str):\n    \"\"\" Write a function to check if a url is valid or not using regex. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert is_valid_URL(\"https://www.google.com\") == True\n    assert is_valid_URL(\"https:/www.gmail.com\") == False\n    assert is_valid_URL(\"https:// www.redit.com\") == False",
        "expected_answer": "import re\ndef is_valid_URL(str):\n\tregex = (\"((http|https)://)(www.)?\" +\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\n\t\t\t\"{2,256}\\\\.[a-z]\" +\n\t\t\t\"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\n\t\t\t\"._\\\\+~#?&//=]*)\")\n\tp = re.compile(regex)\n\tif (str == None):\n\t\treturn False\n\tif(re.search(p, str)):\n\t\treturn True\n\telse:\n\t\treturn False",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_404",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef minimum(a,b):\n    \"\"\" Write a python function to find the minimum of two numbers. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert minimum(1,2) == 1\n    assert minimum(-5,-4) == -5\n    assert minimum(0,0) == 0",
        "expected_answer": "def minimum(a,b):   \n    if a <= b: \n        return a \n    else: \n        return b",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_405",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef check_tuplex(tuplex,tuple1):\n    \"\"\" Write a function to check whether an element exists within a tuple. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n    assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False\n    assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True",
        "expected_answer": "def check_tuplex(tuplex,tuple1): \n  if tuple1 in tuplex:\n    return True\n  else:\n     return False",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_406",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef find_Parity(x):\n    \"\"\" Write a python function to find the parity of a given number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find_Parity(12) == \"Even Parity\"\n    assert find_Parity(7) == \"Odd Parity\"\n    assert find_Parity(10) == \"Even Parity\"",
        "expected_answer": "def find_Parity(x): \n    y = x ^ (x >> 1); \n    y = y ^ (y >> 2); \n    y = y ^ (y >> 4); \n    y = y ^ (y >> 8); \n    y = y ^ (y >> 16); \n    if (y & 1): \n        return (\"Odd Parity\"); \n    return (\"Even Parity\");",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_407",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef rearrange_bigger(n):\n    \"\"\" Write a function to create the next bigger number by rearranging the digits of a given number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert rearrange_bigger(12)==21\n    assert rearrange_bigger(10)==False\n    assert rearrange_bigger(102)==120",
        "expected_answer": "def rearrange_bigger(n):\n    nums = list(str(n))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            z.remove(y)\n            z.sort()\n            nums[i:] = [y] + z\n            return int(\"\".join(nums))\n    return False",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_408",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\" Write a function to find k number of pairs which consist of one element from the first array and one element from the second array. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n    assert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]\n    assert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]",
        "expected_answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n   queue = []\n   def push(i, j):\n       if i < len(nums1) and j < len(nums2):\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n   push(0, 0)\n   pairs = []\n   while queue and len(pairs) < k:\n       _, i, j = heapq.heappop(queue)\n       pairs.append([nums1[i], nums2[j]])\n       push(i, j + 1)\n       if j == 0:\n           push(i + 1, 0)\n   return pairs",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_409",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef min_product_tuple(list1):\n    \"\"\" Write a function to find the minimum product from the pairs of tuples within a given list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n    assert min_product_tuple([(10,20), (15,2), (5,10)] )==30\n    assert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100",
        "expected_answer": "def min_product_tuple(list1):\n    result_min = min([abs(x * y) for x, y in list1] )\n    return result_min",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_410",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef min_val(listval):\n    \"\"\" Write a function to find the minimum value in a given heterogeneous list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n    assert min_val(['Python', 15, 20, 25])==15\n    assert min_val(['Python', 30, 20, 40, 50, 'version'])==20",
        "expected_answer": "def min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_411",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef snake_to_camel(word):\n    \"\"\" Write a function to convert the given snake case string to camel case string by using regex. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert snake_to_camel('android_tv') == 'AndroidTv'\n    assert snake_to_camel('google_pixel') == 'GooglePixel'\n    assert snake_to_camel('apple_watch') == 'AppleWatch'",
        "expected_answer": "import re\ndef snake_to_camel(word):\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_412",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef remove_odd(l):\n    \"\"\" Write a python function to remove odd numbers from a given list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert remove_odd([1,2,3]) == [2]\n    assert remove_odd([2,4,6]) == [2,4,6]\n    assert remove_odd([10,20,3]) == [10,20]",
        "expected_answer": "def remove_odd(l):\n    for i in l:\n        if i % 2 != 0:\n            l.remove(i)\n    return l",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_413",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef extract_nth_element(list1, n):\n    \"\"\" Write a function to extract the nth element from a given list of tuples. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n    assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]\n    assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]",
        "expected_answer": "def extract_nth_element(list1, n):\n    result = [x[n] for x in list1]\n    return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_414",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef overlapping(list1,list2):\n    \"\"\" Write a python function to check whether the value exists in a sequence or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n    assert overlapping([1,2,3],[4,5,6]) == False\n    assert overlapping([1,4,5],[1,4,5]) == True",
        "expected_answer": "def overlapping(list1,list2):  \n    c=0\n    d=0\n    for i in list1: \n        c+=1\n    for i in list2: \n        d+=1\n    for i in range(0,c): \n        for j in range(0,d): \n            if(list1[i]==list2[j]): \n                return 1\n    return 0",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_415",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef max_Product(arr):\n    \"\"\" Write a python function to find a pair with highest product from a given array of integers. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n    assert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)\n    assert max_Product([1,2,3]) == (2,3)",
        "expected_answer": "def max_Product(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_416",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef breakSum(n):\n    \"\"\" Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert breakSum(12) == 13\n    assert breakSum(24) == 27\n    assert breakSum(23) == 23",
        "expected_answer": "MAX = 1000000\ndef breakSum(n): \n\tdp = [0]*(n+1) \n\tdp[0] = 0\n\tdp[1] = 1\n\tfor i in range(2, n+1): \n\t\tdp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); \n\treturn dp[n]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_417",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef group_tuples(Input):\n    \"\"\" Write a function to find common first element in given list of tuple. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n    assert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]\n    assert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]",
        "expected_answer": "def group_tuples(Input): \n\tout = {} \n\tfor elem in Input: \n\t\ttry: \n\t\t\tout[elem[0]].extend(elem[1:]) \n\t\texcept KeyError: \n\t\t\tout[elem[0]] = list(elem) \n\treturn [tuple(values) for values in out.values()]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_418",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef Find_Max(lst):\n    \"\"\" Write a python function to find the sublist having maximum length. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n    assert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]\n    assert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]",
        "expected_answer": "def Find_Max(lst): \n    maxList = max((x) for x in lst) \n    return maxList",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_419",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef round_and_sum(list1):\n    \"\"\" Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n    assert round_and_sum([5,2,9,24.3,29])==345\n    assert round_and_sum([25.0,56.7,89.2])==513",
        "expected_answer": "def round_and_sum(list1):\n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_420",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef cube_Sum(n):\n    \"\"\" Write a python function to find the cube sum of first n even natural numbers. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert cube_Sum(2) == 72\n    assert cube_Sum(3) == 288\n    assert cube_Sum(4) == 800",
        "expected_answer": "def cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_421",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef concatenate_tuple(test_tup):\n    \"\"\" Write a function to concatenate each element of tuple by the delimiter. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n    assert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'\n    assert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'",
        "expected_answer": "def concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_422",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef find_Average_Of_Cube(n):\n    \"\"\" Write a python function to find the average of cubes of first n natural numbers. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find_Average_Of_Cube(2) == 4.5\n    assert find_Average_Of_Cube(3) == 12\n    assert find_Average_Of_Cube(1) == 1",
        "expected_answer": "def find_Average_Of_Cube(n):  \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_423",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef get_maxgold(gold, m, n):\n    \"\"\" Write a function to solve gold mine problem. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n    assert get_maxgold([[10,20],[30,40]],2,2)==70\n    assert get_maxgold([[4,9],[3,7]],2,2)==13",
        "expected_answer": "def get_maxgold(gold, m, n): \n    goldTable = [[0 for i in range(n)] \n                        for j in range(m)]   \n    for col in range(n-1, -1, -1): \n        for row in range(m):  \n            if (col == n-1): \n                right = 0\n            else: \n                right = goldTable[row][col+1] \n            if (row == 0 or col == n-1): \n                right_up = 0\n            else: \n                right_up = goldTable[row-1][col+1] \n            if (row == m-1 or col == n-1): \n                right_down = 0\n            else: \n                right_down = goldTable[row+1][col+1] \n            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down) \n    res = goldTable[0][0] \n    for i in range(1, m): \n        res = max(res, goldTable[i][0])  \n    return res",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_424",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef extract_rear(test_tuple):\n    \"\"\" Write a function to extract only the rear index element of each string in the given tuple. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n    assert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']\n    assert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']",
        "expected_answer": "def extract_rear(test_tuple):\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_425",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef count_element_in_list(list1, x):\n    \"\"\" Write a function to count the number of sublists containing a particular element. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n    assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3\n    assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1",
        "expected_answer": "def count_element_in_list(list1, x): \n    ctr = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            ctr+= 1          \n    return ctr",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_426",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef filter_oddnumbers(nums):\n    \"\"\" Write a function to filter odd numbers using lambda function. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n    assert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]\n    assert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]",
        "expected_answer": "def filter_oddnumbers(nums):\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_427",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef change_date_format(dt):\n    \"\"\" Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert change_date_format(\"2026-01-02\") == '02-01-2026'\n    assert change_date_format(\"2020-11-13\") == '13-11-2020'\n    assert change_date_format(\"2021-04-26\") == '26-04-2021'",
        "expected_answer": "import re\ndef change_date_format(dt):\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_428",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef shell_sort(my_list):\n    \"\"\" Write a function to sort the given array by using shell sort. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n    assert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]\n    assert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]",
        "expected_answer": "def shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n\n    return my_list",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_429",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef and_tuples(test_tup1, test_tup2):\n    \"\"\" Write a function to extract the elementwise and tuples from the given two tuples. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n    assert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)\n    assert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)",
        "expected_answer": "def and_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_430",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef parabola_directrix(a, b, c):\n    \"\"\" Write a function to find the directrix of a parabola. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert parabola_directrix(5,3,2)==-198\n    assert parabola_directrix(9,8,4)==-2336\n    assert parabola_directrix(2,4,6)==-130",
        "expected_answer": "def parabola_directrix(a, b, c): \n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  return directrix",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_431",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef common_element(list1, list2):\n    \"\"\" Write a function that takes two lists and returns true if they have at least one common element. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n    assert common_element([1,2,3,4,5], [6,7,8,9])==None\n    assert common_element(['a','b','c'], ['d','b','e'])==True",
        "expected_answer": "def common_element(list1, list2):\n     result = False\n     for x in list1:\n         for y in list2:\n             if x == y:\n                 result = True\n                 return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_432",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef median_trapezium(base1,base2,height):\n    \"\"\" Write a function to find the median of a trapezium. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert median_trapezium(15,25,35)==20\n    assert median_trapezium(10,20,30)==15\n    assert median_trapezium(6,9,4)==7.5",
        "expected_answer": "def median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_433",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef check_greater(arr, number):\n    \"\"\" Write a function to check whether the entered number is greater than the elements of the given array. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n    assert check_greater([2, 3, 4, 5, 6], 8) == 'Yes, the entered number is greater than those in the array'\n    assert check_greater([9, 7, 4, 8, 6, 1], 11) == 'Yes, the entered number is greater than those in the array'",
        "expected_answer": "def check_greater(arr, number):\n  arr.sort()\n  if number > arr[-1]:\n    return ('Yes, the entered number is greater than those in the array')\n  else:\n    return ('No, entered number is less than those in the array')",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_434",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef text_match_one(text):\n    \"\"\" Write a function that matches a string that has an a followed by one or more b's. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert text_match_one(\"ac\")==('Not matched!')\n    assert text_match_one(\"dc\")==('Not matched!')\n    assert text_match_one(\"abba\")==('Found a match!')",
        "expected_answer": "import re\ndef text_match_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_435",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef last_Digit(n) :\n    \"\"\" Write a python function to find the last digit of a given number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert last_Digit(123) == 3\n    assert last_Digit(25) == 5\n    assert last_Digit(30) == 0",
        "expected_answer": "def last_Digit(n) :\n    return (n % 10)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_436",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef neg_nos(list1):\n    \"\"\" Write a python function to print negative numbers in a list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert neg_nos([-1,4,5,-6]) == -1,-6\n    assert neg_nos([-1,-2,3,4]) == -1,-2\n    assert neg_nos([-7,-6,8,9]) == -7,-6",
        "expected_answer": "def neg_nos(list1):\n  for num in list1: \n    if num < 0: \n       return num",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_437",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef remove_odd(str1):\n    \"\"\" Write a function to remove odd characters in a string. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert remove_odd(\"python\")==(\"yhn\")\n    assert remove_odd(\"program\")==(\"rga\")\n    assert remove_odd(\"language\")==(\"agae\")",
        "expected_answer": "def remove_odd(str1):\n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 == 0):\n        str2 = str2 + str1[i - 1]\n return str2",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_438",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef count_bidirectional(test_list):\n    \"\"\" Write a function to count bidirectional tuple pairs. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n    assert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '2'\n    assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == '4'",
        "expected_answer": "def count_bidirectional(test_list):\n  res = 0\n  for idx in range(0, len(test_list)):\n    for iidx in range(idx + 1, len(test_list)):\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\n        res += 1\n  return (str(res))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_439",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef multiple_to_single(L):\n    \"\"\" Write a function to convert a list of multiple integers into a single integer. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert multiple_to_single([11, 33, 50])==113350\n    assert multiple_to_single([-1,2,3,4,5,6])==-123456\n    assert multiple_to_single([10,15,20,25])==10152025",
        "expected_answer": "def multiple_to_single(L):\n  x = int(\"\".join(map(str, L)))\n  return x",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_440",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef find_adverb_position(text):\n    \"\"\" Write a function to find all adverbs and their positions in a given sentence. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n    assert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')\n    assert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')",
        "expected_answer": "import re\ndef find_adverb_position(text):\n for m in re.finditer(r\"\\w+ly\", text):\n    return (m.start(), m.end(), m.group(0))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_441",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef surfacearea_cube(l):\n    \"\"\" Write a function to find the surface area of a cube. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert surfacearea_cube(5)==150\n    assert surfacearea_cube(3)==54\n    assert surfacearea_cube(10)==600",
        "expected_answer": "def surfacearea_cube(l):\n  surfacearea= 6*l*l\n  return surfacearea",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_442",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef positive_count(nums):\n    \"\"\" Write a function to find the ration of positive numbers in an array of integers. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n    assert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69\n    assert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56",
        "expected_answer": "from array import array\ndef positive_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x > 0:\n            n1 += 1\n        else:\n          None\n    return round(n1/n,2)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_443",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef largest_neg(list1):\n    \"\"\" Write a python function to find the largest negative number from the given list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert largest_neg([1,2,3,-4,-6]) == -6\n    assert largest_neg([1,2,3,-8,-9]) == -9\n    assert largest_neg([1,2,3,4,-1]) == -1",
        "expected_answer": "def largest_neg(list1): \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_444",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef trim_tuple(test_list, K):\n    \"\"\" Write a function to trim each tuple by k in the given tuple list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n    assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'\n    assert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'",
        "expected_answer": "def trim_tuple(test_list, K):\n  res = []\n  for ele in test_list:\n    N = len(ele)\n    res.append(tuple(list(ele)[K: N - K]))\n  return (str(res))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_445",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef index_multiplication(test_tup1, test_tup2):\n    \"\"\" Write a function to perform index wise multiplication of tuple elements in the given two tuples. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n    assert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))\n    assert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))",
        "expected_answer": "def index_multiplication(test_tup1, test_tup2):\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_446",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef count_Occurrence(tup, lst):\n    \"\"\" Write a python function to count the occurence of all elements of list in a tuple. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n    assert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6\n    assert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2",
        "expected_answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_447",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef cube_nums(nums):\n    \"\"\" Write a function to find cubes of individual elements in a list using lambda function. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n    assert cube_nums([10,20,30])==([1000, 8000, 27000])\n    assert cube_nums([12,15])==([1728, 3375])",
        "expected_answer": "def cube_nums(nums):\n cube_nums = list(map(lambda x: x ** 3, nums))\n return cube_nums",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_448",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef cal_sum(n):\n    \"\"\" Write a function to calculate the sum of perrin numbers. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert cal_sum(9) == 49\n    assert cal_sum(10) == 66\n    assert cal_sum(11) == 88",
        "expected_answer": "def cal_sum(n): \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n-1\n\treturn sum",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_449",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef check_Triangle(x1,y1,x2,y2,x3,y3):\n    \"\"\" Write a python function to check whether the triangle is valid or not if 3 points are given. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert check_Triangle(1,5,2,5,4,6) == 'Yes'\n    assert check_Triangle(1,1,1,4,1,5) == 'No'\n    assert check_Triangle(1,1,1,1,1,1) == 'No'",
        "expected_answer": "def check_Triangle(x1,y1,x2,y2,x3,y3): \n    a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))   \n    if a == 0: \n        return ('No') \n    else: \n        return ('Yes')",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_450",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef extract_string(str, l):\n    \"\"\" Write a function to extract specified size of strings from a give list of string values. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n    assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']\n    assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']",
        "expected_answer": "def extract_string(str, l):\n    result = [e for e in str if len(e) == l] \n    return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_451",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef remove_whitespaces(text1):\n    \"\"\" Write a function to remove all whitespaces from the given string using regex. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n    assert remove_whitespaces(' Google    Dart ') == 'GoogleDart'\n    assert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'",
        "expected_answer": "import re\ndef remove_whitespaces(text1):\n  return (re.sub(r'\\s+', '',text1))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_452",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef loss_amount(actual_cost,sale_amount):\n    \"\"\" Write a function that gives loss amount if the given amount has loss else return none. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert loss_amount(1500,1200)==None\n    assert loss_amount(100,200)==100\n    assert loss_amount(2000,5000)==3000",
        "expected_answer": "def loss_amount(actual_cost,sale_amount): \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return None",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_453",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef sumofFactors(n) :\n    \"\"\" Write a python function to find the sum of even factors of a number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert sumofFactors(18) == 26\n    assert sumofFactors(30) == 48\n    assert sumofFactors(6) == 8",
        "expected_answer": "import math \ndef sumofFactors(n) : \n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_454",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef text_match_wordz(text):\n    \"\"\" Write a function that matches a word containing 'z'. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert text_match_wordz(\"pythonz.\")==('Found a match!')\n    assert text_match_wordz(\"xyz.\")==('Found a match!')\n    assert text_match_wordz(\"  lang  .\")==('Not matched!')",
        "expected_answer": "import re\ndef text_match_wordz(text):\n        patterns = '\\w*z.\\w*'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_455",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef check_monthnumb_number(monthnum2):\n    \"\"\" Write a function to check whether the given month number contains 31 days or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert check_monthnumb_number(5)==True\n    assert check_monthnumb_number(2)==False\n    assert check_monthnumb_number(6)==False",
        "expected_answer": "def check_monthnumb_number(monthnum2):\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n  else:\n    return False",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_456",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef reverse_string_list(stringlist):\n    \"\"\" Write a function to reverse strings in a given list of string values. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n    assert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']\n    assert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']",
        "expected_answer": "def reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_457",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef Find_Min(lst):\n    \"\"\" Write a python function to find the sublist having minimum length. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n    assert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]\n    assert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']",
        "expected_answer": "def Find_Min(lst): \n    minList = min((x) for x in lst) \n    return minList",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_458",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef rectangle_area(l,b):\n    \"\"\" Write a function to find the area of a rectangle. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert rectangle_area(10,20)==200\n    assert rectangle_area(10,5)==50\n    assert rectangle_area(4,2)==8",
        "expected_answer": "def rectangle_area(l,b):\n  area=l*b\n  return area",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_459",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef remove_uppercase(str1):\n    \"\"\" Write a function to remove uppercase substrings from a given string by using regex. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n    assert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'\n    assert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'",
        "expected_answer": "import re\ndef remove_uppercase(str1):\n  remove_upper = lambda text: re.sub('[A-Z]', '', text)\n  result =  remove_upper(str1)\n  return (result)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_460",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef Extract(lst):\n    \"\"\" Write a python function to get the first element of each sublist. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n    assert Extract([[1,2,3],[4, 5]]) == [1,4]\n    assert Extract([[9,8,1],[1,2]]) == [9,1]",
        "expected_answer": "def Extract(lst): \n    return [item[0] for item in lst]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_461",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef upper_ctr(str):\n    \"\"\" Write a python function to count the upper case characters in a given string. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert upper_ctr('PYthon') == 1\n    assert upper_ctr('BigData') == 1\n    assert upper_ctr('program') == 0",
        "expected_answer": "def upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_462",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef combinations_list(list1):\n    \"\"\" Write a function to find all possible combinations of the elements of a given list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n    assert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]\n    assert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]",
        "expected_answer": "def combinations_list(list1):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_463",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef max_subarray_product(arr):\n    \"\"\" Write a function to find the maximum product subarray of the given array. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n    assert max_subarray_product([6, -3, -10, 0, 2]) == 180 \n    assert max_subarray_product([-2, -40, 0, -2, -3]) == 80",
        "expected_answer": "def max_subarray_product(arr):\n\tn = len(arr)\n\tmax_ending_here = 1\n\tmin_ending_here = 1\n\tmax_so_far = 0\n\tflag = 0\n\tfor i in range(0, n):\n\t\tif arr[i] > 0:\n\t\t\tmax_ending_here = max_ending_here * arr[i]\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\n\t\t\tflag = 1\n\t\telif arr[i] == 0:\n\t\t\tmax_ending_here = 1\n\t\t\tmin_ending_here = 1\n\t\telse:\n\t\t\ttemp = max_ending_here\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\n\t\t\tmin_ending_here = temp * arr[i]\n\t\tif (max_so_far < max_ending_here):\n\t\t\tmax_so_far = max_ending_here\n\tif flag == 0 and max_so_far == 0:\n\t\treturn 0\n\treturn max_so_far",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_464",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef check_value(dict, n):\n    \"\"\" Write a function to check if all values are same in a dictionary. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n    assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True\n    assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False",
        "expected_answer": "def check_value(dict, n):\n    result = all(x == n for x in dict.values()) \n    return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_465",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef drop_empty(dict1):\n    \"\"\" Write a function to drop empty items from a given dictionary. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n    assert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}\n    assert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}",
        "expected_answer": "def drop_empty(dict1):\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_466",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef find_peak_util(arr, low, high, n):\n    \"\"\" Write a function to find the peak element in the given array. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n    assert find_peak([2, 3, 4, 5, 6], 5) == 4\n    assert find_peak([8, 9, 11, 12, 14, 15], 6) == 5 ",
        "expected_answer": "def find_peak_util(arr, low, high, n): \n\tmid = low + (high - low)/2\n\tmid = int(mid) \n\tif ((mid == 0 or arr[mid - 1] <= arr[mid]) and\n\t\t(mid == n - 1 or arr[mid + 1] <= arr[mid])): \n\t\treturn mid \n\telif (mid > 0 and arr[mid - 1] > arr[mid]): \n\t\treturn find_peak_util(arr, low, (mid - 1), n) \n\telse: \n\t\treturn find_peak_util(arr, (mid + 1), high, n) \ndef find_peak(arr, n): \n\treturn find_peak_util(arr, 0, n - 1, n)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_467",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef decimal_to_Octal(deciNum):\n    \"\"\" Write a python function to convert decimal number to octal number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert decimal_to_Octal(10) == 12\n    assert decimal_to_Octal(2) == 2\n    assert decimal_to_Octal(33) == 41",
        "expected_answer": "def decimal_to_Octal(deciNum):\n    octalNum = 0\n    countval = 1;\n    dNo = deciNum;\n    while (deciNum!= 0):\n        remainder= deciNum % 8;\n        octalNum+= remainder*countval;\n        countval= countval*10;\n        deciNum //= 8; \n    return (octalNum)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_468",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef max_product(arr, n ):\n    \"\"\" Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n    assert max_product([4, 42, 55, 68, 80], 5) == 50265600\n    assert max_product([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000 ",
        "expected_answer": "def max_product(arr, n ): \n\tmpis =[0] * (n) \n\tfor i in range(n): \n\t\tmpis[i] = arr[i] \n\tfor i in range(1, n): \n\t\tfor j in range(i): \n\t\t\tif (arr[i] > arr[j] and\n\t\t\t\t\tmpis[i] < (mpis[j] * arr[i])): \n\t\t\t\t\t\tmpis[i] = mpis[j] * arr[i] \n\treturn max(mpis)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_469",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef max_profit(price, k):\n    \"\"\" Write a function to find the maximum profit earned from a maximum of k stock transactions \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n    assert max_profit([2, 4, 7, 5, 4, 3, 5], 2) == 7\n    assert max_profit([10, 6, 8, 4, 2], 2) == 2",
        "expected_answer": "def max_profit(price, k):\n    n = len(price)\n    final_profit = [[None for x in range(n)] for y in range(k + 1)]\n    for i in range(k + 1):\n        for j in range(n):\n            if i == 0 or j == 0:\n                final_profit[i][j] = 0\n            else:\n                max_so_far = 0\n                for x in range(j):\n                    curr_price = price[j] - price[x] + final_profit[i-1][x]\n                    if max_so_far < curr_price:\n                        max_so_far = curr_price\n                final_profit[i][j] = max(final_profit[i][j-1], max_so_far)\n    return final_profit[k][n-1]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_470",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef add_pairwise(test_tup):\n    \"\"\" Write a function to find the pairwise addition of the elements of the given tuples. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n    assert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)\n    assert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)",
        "expected_answer": "def add_pairwise(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_471",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef find_remainder(arr, lens, n):\n    \"\"\" Write a python function to find remainder of array multiplication divided by n. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n    assert find_remainder([1,1,1],3,1) == 0\n    assert find_remainder([1,2,1],3,2) == 0",
        "expected_answer": "def find_remainder(arr, lens, n): \n    mul = 1\n    for i in range(lens):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_472",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef check_Consecutive(l):\n    \"\"\" Write a python function to check whether the given list contains consecutive numbers or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert check_Consecutive([1,2,3,4,5]) == True\n    assert check_Consecutive([1,2,3,5,6]) == False\n    assert check_Consecutive([1,2,1]) == False",
        "expected_answer": "def check_Consecutive(l): \n    return sorted(l) == list(range(min(l),max(l)+1))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_473",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef tuple_intersection(test_list1, test_list2):\n    \"\"\" Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n    assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}\n    assert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}",
        "expected_answer": "def tuple_intersection(test_list1, test_list2):\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_474",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef replace_char(str1,ch,newch):\n    \"\"\" Write a function to replace characters in a string. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n    assert replace_char(\"character\",'c','a')==(\"aharaater\")\n    assert replace_char(\"python\",'l','a')==(\"python\")",
        "expected_answer": "def replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n return str2",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_475",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef sort_counter(dict1):\n    \"\"\" Write a function to sort counter by value. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n    assert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]\n    assert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]",
        "expected_answer": "from collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_476",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef big_sum(nums):\n    \"\"\" Write a python function to find the sum of the largest and smallest value in a given array. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert big_sum([1,2,3]) == 4\n    assert big_sum([-1,2,3,4]) == 3\n    assert big_sum([2,3,6]) == 8",
        "expected_answer": "def big_sum(nums):\n      sum= max(nums)+min(nums)\n      return sum",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_477",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef is_lower(string):\n    \"\"\" Write a python function to convert the given string to lower case. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert is_lower(\"InValid\") == \"invalid\"\n    assert is_lower(\"TruE\") == \"true\"\n    assert is_lower(\"SenTenCE\") == \"sentence\"",
        "expected_answer": "def is_lower(string):\n  return (string.lower())",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_478",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef remove_lowercase(str1):\n    \"\"\" Write a function to remove lowercase substrings from a given string. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert remove_lowercase(\"PYTHon\")==('PYTH')\n    assert remove_lowercase(\"FInD\")==('FID')\n    assert remove_lowercase(\"STRinG\")==('STRG')",
        "expected_answer": "import re\ndef remove_lowercase(str1):\n remove_lower = lambda text: re.sub('[a-z]', '', text)\n result =  remove_lower(str1)\n return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_479",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef first_Digit(n) :\n    \"\"\" Write a python function to find the first digit of a given number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert first_Digit(123) == 1\n    assert first_Digit(456) == 4\n    assert first_Digit(12) == 1",
        "expected_answer": "def first_Digit(n) :  \n    while n >= 10:  \n        n = n / 10; \n    return int(n)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_480",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef get_max_occuring_char(str1):\n    \"\"\" Write a python function to find the maximum occurring character in a given string. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert get_max_occuring_char(\"data\") == \"a\"\n    assert get_max_occuring_char(\"create\") == \"e\"\n    assert get_max_occuring_char(\"brilliant girl\") == \"i\"",
        "expected_answer": "def get_max_occuring_char(str1):\n  ASCII_SIZE = 256\n  ctr = [0] * ASCII_SIZE\n  max = -1\n  ch = ''\n  for i in str1:\n    ctr[ord(i)]+=1;\n  for i in str1:\n    if max < ctr[ord(i)]:\n      max = ctr[ord(i)]\n      ch = i\n  return ch",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_481",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef is_subset_sum(set, n, sum):\n    \"\"\" Write a function to determine if there is a subset of the given set with sum equal to the given sum. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n    assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30) == False\n    assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) == True",
        "expected_answer": "def is_subset_sum(set, n, sum):\n\tif (sum == 0):\n\t\treturn True\n\tif (n == 0):\n\t\treturn False\n\tif (set[n - 1] > sum):\n\t\treturn is_subset_sum(set, n - 1, sum)\n\treturn is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_482",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef match(text):\n    \"\"\" Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert match(\"Geeks\") == 'Yes'\n    assert match(\"geeksforGeeks\") == 'Yes'\n    assert match(\"geeks\") == 'No'",
        "expected_answer": "import re \ndef match(text): \n\t\tpattern = '[A-Z]+[a-z]+$'\n\t\tif re.search(pattern, text): \n\t\t\t\treturn('Yes') \n\t\telse: \n\t\t\t\treturn('No')",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_483",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef first_Factorial_Divisible_Number(x):\n    \"\"\" Write a python function to find the first natural number whose factorial is divisible by x. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert first_Factorial_Divisible_Number(10) == 5\n    assert first_Factorial_Divisible_Number(15) == 5\n    assert first_Factorial_Divisible_Number(5) == 4",
        "expected_answer": "def first_Factorial_Divisible_Number(x): \n    i = 1;\n    fact = 1; \n    for i in range(1,x): \n        fact = fact * i \n        if (fact % x == 0): \n            break\n    return i",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_484",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef remove_matching_tuple(test_list1, test_list2):\n    \"\"\" Write a function to remove the matching tuples from the given two tuples. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n    assert remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]\n    assert remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]",
        "expected_answer": "def remove_matching_tuple(test_list1, test_list2):\n  res = [sub for sub in test_list1 if sub not in test_list2]\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_485",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef is_palindrome(n) :\n    \"\"\" Write a function to find the largest palindromic number in the given array. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n    assert largest_palindrome([1, 2, 3, 4, 5, 50], 6) == 5\n    assert largest_palindrome([1, 3, 7, 9, 45], 5)  == 9",
        "expected_answer": "def is_palindrome(n) : \n\tdivisor = 1\n\twhile (n / divisor >= 10) : \n\t\tdivisor *= 10\n\twhile (n != 0) : \n\t\tleading = n // divisor \n\t\ttrailing = n % 10\n\t\tif (leading != trailing) : \n\t\t\treturn False\n\t\tn = (n % divisor) // 10\n\t\tdivisor = divisor // 100\n\treturn True\ndef largest_palindrome(A, n) : \n\tA.sort() \n\tfor i in range(n - 1, -1, -1) : \n\t\tif (is_palindrome(A[i])) : \n\t\t\treturn A[i] \n\treturn -1",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_486",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef nCr(n, r):\n    \"\"\" Write a function to compute binomial probability for the given number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n    assert binomial_probability(11, 6, 2.0/4) == 0.2255859375\n    assert binomial_probability(12, 7, 3.0/5) == 0.227030335488",
        "expected_answer": "def nCr(n, r): \n\tif (r > n / 2): \n\t\tr = n - r \n\tanswer = 1 \n\tfor i in range(1, r + 1): \n\t\tanswer *= (n - r + i) \n\t\tanswer /= i \n\treturn answer \ndef binomial_probability(n, k, p): \n\treturn (nCr(n, k) * pow(p, k) *\tpow(1 - p, n - k))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_487",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef sort_tuple(tup):\n    \"\"\" Write a function to sort a list of tuples in increasing order by the last element in each tuple. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n    assert sort_tuple([(2, 4), (3, 3), (1, 1)] ) == [(1, 1), (3, 3), (2, 4)]\n    assert sort_tuple([(3, 9), (6, 7), (4, 3)] ) == [(4, 3), (6, 7), (3, 9)]",
        "expected_answer": "def sort_tuple(tup): \n\tlst = len(tup) \n\tfor i in range(0, lst): \n\t\tfor j in range(0, lst-i-1): \n\t\t\tif (tup[j][-1] > tup[j + 1][-1]): \n\t\t\t\ttemp = tup[j] \n\t\t\t\ttup[j]= tup[j + 1] \n\t\t\t\ttup[j + 1]= temp \n\treturn tup",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_488",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef area_pentagon(a):\n    \"\"\" Write a function to find the area of a pentagon. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert area_pentagon(5)==43.01193501472417\n    assert area_pentagon(10)==172.0477400588967\n    assert area_pentagon(15)==387.10741513251753",
        "expected_answer": "import math\ndef area_pentagon(a):\n  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0\n  return area",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_489",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef frequency_Of_Largest(n,arr):\n    \"\"\" Write a python function to find the frequency of the largest value in a given array. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n    assert frequency_Of_Largest(3,[5,6,5]) == 1\n    assert frequency_Of_Largest(4,[2,7,7,7]) == 3",
        "expected_answer": "def frequency_Of_Largest(n,arr): \n    mn = arr[0] \n    freq = 1\n    for i in range(1,n): \n        if (arr[i] >mn): \n            mn = arr[i] \n            freq = 1\n        elif (arr[i] == mn): \n            freq += 1\n    return freq",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_490",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef extract_symmetric(test_list):\n    \"\"\" Write a function to extract all the pairs which are symmetric in the given tuple list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n    assert extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}\n    assert extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}",
        "expected_answer": "def extract_symmetric(test_list):\n  temp = set(test_list) & {(b, a) for a, b in test_list}\n  res = {(a, b) for a, b in temp if a < b}\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_491",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef sum_gp(a,n,r):\n    \"\"\" Write a function to find the sum of geometric progression series. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert sum_gp(1,5,2)==31\n    assert sum_gp(1,5,4)==341\n    assert sum_gp(2,6,3)==728",
        "expected_answer": "import math\ndef sum_gp(a,n,r):\n total = (a * (1 - math.pow(r, n ))) / (1- r)\n return total",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_492",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef binary_search(item_list,item):\n    \"\"\" Write a function to search an element in the given array by using binary search. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert binary_search([1,2,3,5,8], 6) == False\n    assert binary_search([7, 8, 9, 10, 13], 10) == True\n    assert binary_search([11, 13, 14, 19, 22, 36], 23) == False",
        "expected_answer": "def binary_search(item_list,item):\n\tfirst = 0\n\tlast = len(item_list)-1\n\tfound = False\n\twhile( first<=last and not found):\n\t\tmid = (first + last)//2\n\t\tif item_list[mid] == item :\n\t\t\tfound = True\n\t\telse:\n\t\t\tif item < item_list[mid]:\n\t\t\t\tlast = mid - 1\n\t\t\telse:\n\t\t\t\tfirst = mid + 1\t\n\treturn found",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_493",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef calculate_polygons(startx, starty, endx, endy, radius):\n    \"\"\" Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n    assert calculate_polygons(5,4,7,9,8)==[[(-11.0, -9.856406460551018), (-11.0, -0.6188021535170058), (-3.0, 4.0), (5.0, -0.6188021535170058), (5.0, -9.856406460551018), (-3.0, -14.475208614068023), (-11.0, -9.856406460551018)], [(5.0, -9.856406460551018), (5.0, -0.6188021535170058), (13.0, 4.0), (21.0, -0.6188021535170058), (21.0, -9.856406460551018), (13.0, -14.475208614068023), (5.0, -9.856406460551018)], [(21.0, -9.856406460551018), (21.0, -0.6188021535170058), (29.0, 4.0), (37.0, -0.6188021535170058), (37.0, -9.856406460551018), (29.0, -14.475208614068023), (21.0, -9.856406460551018)], [(-3.0, 4.0), (-3.0, 13.237604307034012), (5.0, 17.856406460551018), (13.0, 13.237604307034012), (13.0, 4.0), (5.0, -0.6188021535170058), (-3.0, 4.0)], [(13.0, 4.0), (13.0, 13.237604307034012), (21.0, 17.856406460551018), (29.0, 13.237604307034012), (29.0, 4.0), (21.0, -0.6188021535170058), (13.0, 4.0)], [(-11.0, 17.856406460551018), (-11.0, 27.09401076758503), (-3.0, 31.712812921102035), (5.0, 27.09401076758503), (5.0, 17.856406460551018), (-3.0, 13.237604307034012), (-11.0, 17.856406460551018)], [(5.0, 17.856406460551018), (5.0, 27.09401076758503), (13.0, 31.712812921102035), (21.0, 27.09401076758503), (21.0, 17.856406460551018), (13.0, 13.237604307034012), (5.0, 17.856406460551018)], [(21.0, 17.856406460551018), (21.0, 27.09401076758503), (29.0, 31.712812921102035), (37.0, 27.09401076758503), (37.0, 17.856406460551018), (29.0, 13.237604307034012), (21.0, 17.856406460551018)], [(-3.0, 31.712812921102035), (-3.0, 40.95041722813605), (5.0, 45.569219381653056), (13.0, 40.95041722813605), (13.0, 31.712812921102035), (5.0, 27.09401076758503), (-3.0, 31.712812921102035)], [(13.0, 31.712812921102035), (13.0, 40.95041722813605), (21.0, 45.569219381653056), (29.0, 40.95041722813605), (29.0, 31.712812921102035), (21.0, 27.09401076758503), (13.0, 31.712812921102035)]]\n    assert calculate_polygons(9,6,4,3,2)==[[(5.0, 2.5358983848622456), (5.0, 4.8452994616207485), (7.0, 6.0), (9.0, 4.8452994616207485), (9.0, 2.5358983848622456), (7.0, 1.3811978464829942), (5.0, 2.5358983848622456)], [(7.0, 6.0), (7.0, 8.309401076758503), (9.0, 9.464101615137753), (11.0, 8.309401076758503), (11.0, 6.0), (9.0, 4.8452994616207485), (7.0, 6.0)]]",
        "expected_answer": "import math\ndef calculate_polygons(startx, starty, endx, endy, radius):\n    sl = (2 * radius) * math.tan(math.pi / 6)\n    p = sl * 0.5\n    b = sl * math.cos(math.radians(30))\n    w = b * 2\n    h = 2 * sl   \n    startx = startx - w\n    starty = starty - h\n    endx = endx + w\n    endy = endy + h\n    origx = startx\n    origy = starty\n    xoffset = b\n    yoffset = 3 * p\n    polygons = []\n    row = 1\n    counter = 0\n    while starty < endy:\n        if row % 2 == 0:\n            startx = origx + xoffset\n        else:\n            startx = origx\n        while startx < endx:\n            p1x = startx\n            p1y = starty + p\n            p2x = startx\n            p2y = starty + (3 * p)\n            p3x = startx + b\n            p3y = starty + h\n            p4x = startx + w\n            p4y = starty + (3 * p)\n            p5x = startx + w\n            p5y = starty + p\n            p6x = startx + b\n            p6y = starty\n            poly = [\n                (p1x, p1y),\n                (p2x, p2y),\n                (p3x, p3y),\n                (p4x, p4y),\n                (p5x, p5y),\n                (p6x, p6y),\n                (p1x, p1y)]\n            polygons.append(poly)\n            counter += 1\n            startx += w\n        starty += yoffset\n        row += 1\n    return polygons",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_494",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef binary_to_integer(test_tup):\n    \"\"\" Write a function to convert the given binary tuple to integer. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n    assert binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)) == '101'\n    assert binary_to_integer((1, 1, 0, 1, 0, 1)) == '53'",
        "expected_answer": "def binary_to_integer(test_tup):\n  res = int(\"\".join(str(ele) for ele in test_tup), 2)\n  return (str(res))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_495",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef remove_lowercase(str1):\n    \"\"\" Write a function to remove lowercase substrings from a given string by using regex. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n    assert remove_lowercase('ProducTnamEstreAmIngMediAplAYer') == 'PTEAIMAAY'\n    assert remove_lowercase('maNufacTuredbYSheZenTechNolOGIes') == 'NTYSZTNOGI'",
        "expected_answer": "import re\ndef remove_lowercase(str1):\n  remove_lower = lambda text: re.sub('[a-z]', '', text)\n  result =  remove_lower(str1)\n  return (result)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_496",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef heap_queue_smallest(nums,n):\n    \"\"\" Write a function to find the smallest integers from a given list of numbers using heap queue algorithm. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n    assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],2)==[14, 22]\n    assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[14, 22, 22, 25, 35]",
        "expected_answer": "import heapq as hq\ndef heap_queue_smallest(nums,n):\n  smallest_nums = hq.nsmallest(n, nums)\n  return smallest_nums",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_497",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef surfacearea_cone(r,h):\n    \"\"\" Write a function to find the surface area of a cone. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert surfacearea_cone(5,12)==282.7433388230814\n    assert surfacearea_cone(10,15)==880.5179353159282\n    assert surfacearea_cone(19,17)==2655.923961165254",
        "expected_answer": "import math\ndef surfacearea_cone(r,h):\n  l = math.sqrt(r * r + h * h)\n  SA = math.pi * r * (r + l)\n  return SA",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_498",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef gcd(x, y):\n    \"\"\" Write a python function to find gcd of two positive integers. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert gcd(12, 17) == 1\n    assert gcd(4,6) == 2\n    assert gcd(2,9) == 1",
        "expected_answer": "def gcd(x, y):\n    gcd = 1\n    if x % y == 0:\n        return y\n    for k in range(int(y / 2), 0, -1):\n        if x % k == 0 and y % k == 0:\n            gcd = k\n            break  \n    return gcd",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_499",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef diameter_circle(r):\n    \"\"\" Write a function to find the diameter of a circle. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert diameter_circle(10)==20\n    assert diameter_circle(40)==80\n    assert diameter_circle(15)==30",
        "expected_answer": "def diameter_circle(r):\n  diameter=2*r\n  return diameter",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_500",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef concatenate_elements(list):\n    \"\"\" Write a function to concatenate all elements of the given list into a string. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n    assert concatenate_elements([ 'Hi', 'there', 'How','are', 'you'] ) == '  Hi there How are you'\n    assert concatenate_elements([ 'Part', 'of', 'the','journey', 'is', 'end'] ) == '  Part of the journey is end'",
        "expected_answer": "def concatenate_elements(list):\n  ans = ' '\n  for i in list:\n    ans = ans+ ' '+i\n  return (ans)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_501",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef ngcd(x,y):\n    \"\"\" Write a python function to find common divisor between two numbers in a given pair. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert num_comm_div(2,4) == 2\n    assert num_comm_div(2,8) == 2\n    assert num_comm_div(12,24) == 6",
        "expected_answer": "def ngcd(x,y):\n    i=1\n    while(i<=x and i<=y):\n        if(x%i==0 and y%i == 0):\n            gcd=i;\n        i+=1\n    return gcd;\ndef num_comm_div(x,y):\n  n = ngcd(x,y)\n  result = 0\n  z = int(n**0.5)\n  i = 1\n  while(i <= z):\n    if(n % i == 0):\n      result += 2 \n      if(i == n/i):\n        result-=1\n    i+=1\n  return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_502",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef find(n,m):\n    \"\"\" Write a python function to find remainder of two numbers. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find(3,3) == 0\n    assert find(10,3) == 1\n    assert find(16,5) == 1",
        "expected_answer": "def find(n,m):\n  r = n%m\n  return (r)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_503",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef add_consecutive_nums(nums):\n    \"\"\" Write a function to add consecutive numbers of a given list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n    assert add_consecutive_nums([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]\n    assert add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19]",
        "expected_answer": "def add_consecutive_nums(nums):\n    result = [b+a for a, b in zip(nums[:-1], nums[1:])]\n    return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_504",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef sum_Of_Series(n):\n    \"\"\" Write a python function to find the cube sum of first n natural numbers. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert sum_Of_Series(5) == 225\n    assert sum_Of_Series(2) == 9\n    assert sum_Of_Series(3) == 36",
        "expected_answer": "def sum_Of_Series(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += i * i*i       \n    return sum",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_505",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef re_order(A):\n    \"\"\" Write a function to move all zeroes to the end of the given array. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n    assert re_order([4, 0, 2, 7, 0, 9, 0, 12, 0]) == [4, 2, 7, 9, 12, 0, 0, 0, 0]\n    assert re_order([3, 11, 0, 74, 14, 0, 1, 0, 2]) == [3, 11, 74, 14, 1, 2, 0, 0, 0]",
        "expected_answer": "def re_order(A):\n    k = 0\n    for i in A:\n        if i:\n            A[k] = i\n            k = k + 1\n    for i in range(k, len(A)):\n        A[i] = 0\n    return A",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_506",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef permutation_coefficient(n, k):\n    \"\"\" Write a function to calculate the permutation coefficient of given p(n, k). \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert permutation_coefficient(10, 2) == 90\n    assert permutation_coefficient(10, 3) == 720\n    assert permutation_coefficient(10, 1) == 10",
        "expected_answer": "def permutation_coefficient(n, k): \n\tP = [[0 for i in range(k + 1)] \n\t\t\tfor j in range(n + 1)] \n\tfor i in range(n + 1): \n\t\tfor j in range(min(i, k) + 1): \n\t\t\tif (j == 0): \n\t\t\t\tP[i][j] = 1\n\t\t\telse: \n\t\t\t\tP[i][j] = P[i - 1][j] + ( \n\t\t\t\t\t\tj * P[i - 1][j - 1]) \n\t\t\tif (j < k): \n\t\t\t\tP[i][j + 1] = 0\n\treturn P[n][k]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_507",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef remove_words(list1, removewords):\n    \"\"\" Write a function to remove specific words from a given list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n    assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['black', 'orange'])==['red', 'green', 'blue', 'white']\n    assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['blue', 'white'])==['red', 'green', 'black', 'orange']",
        "expected_answer": "def remove_words(list1, removewords):\n    for word in list(list1):\n        if word in removewords:\n            list1.remove(word)\n    return list1",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_508",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef same_order(l1, l2):\n    \"\"\" Write a function to check if the common elements between two given lists are in the same order or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n    assert same_order([\"red\",\"pink\",\"green\",\"white\",\"black\"],[\"white\",\"orange\",\"pink\",\"black\"])==False\n    assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True",
        "expected_answer": "def same_order(l1, l2):\n    common_elements = set(l1) & set(l2)\n    l1 = [e for e in l1 if e in common_elements]\n    l2 = [e for e in l2 if e in common_elements]\n    return l1 == l2",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_509",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef average_Odd(n) :\n    \"\"\" Write a python function to find the average of odd numbers till a given odd number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert average_Odd(9) == 5\n    assert average_Odd(5) == 3\n    assert average_Odd(11) == 6",
        "expected_answer": "def average_Odd(n) : \n    if (n%2==0) : \n        return (\"Invalid Input\") \n        return -1 \n    sm =0\n    count =0\n    while (n>=1) : \n        count=count+1\n        sm = sm + n \n        n = n-2\n    return sm//count",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_510",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef no_of_subsequences(arr, k):\n    \"\"\" Write a function to find the number of subsequences having product smaller than k for the given non negative array. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert no_of_subsequences([1,2,3,4], 10) == 11\n    assert no_of_subsequences([4,8,7,2], 50) == 9\n    assert no_of_subsequences([5,6,7,8], 15) == 4",
        "expected_answer": "def no_of_subsequences(arr, k): \n\tn = len(arr) \n\tdp = [[0 for i in range(n + 1)] \n\t\t\tfor j in range(k + 1)] \n\tfor i in range(1, k + 1): \n\t\tfor j in range(1, n + 1): \n\t\t\tdp[i][j] = dp[i][j - 1] \n\t\t\tif arr[j - 1] <= i and arr[j - 1] > 0: \n\t\t\t\tdp[i][j] += dp[i // arr[j - 1]][j - 1] + 1\n\treturn dp[k][n]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_511",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef find_Min_Sum(num):\n    \"\"\" Write a python function to find minimum sum of factors of a given number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find_Min_Sum(12) == 7\n    assert find_Min_Sum(105) == 15\n    assert find_Min_Sum(2) == 2",
        "expected_answer": "def find_Min_Sum(num): \n    sum = 0\n    i = 2\n    while(i * i <= num): \n        while(num % i == 0): \n            sum += i \n            num /= i \n        i += 1\n    sum += num \n    return sum",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_512",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef flatten(test_tuple):\n    \"\"\" Write a function to count the element frequency in the mixed nested tuple. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert count_element_freq((5, 6, (5, 6), 7, (8, 9), 9) ) == {5: 2, 6: 2, 7: 1, 8: 1, 9: 2}\n    assert count_element_freq((6, 7, (6, 7), 8, (9, 10), 10) ) == {6: 2, 7: 2, 8: 1, 9: 1, 10: 2}\n    assert count_element_freq((7, 8, (7, 8), 9, (10, 11), 11) ) == {7: 2, 8: 2, 9: 1, 10: 1, 11: 2}",
        "expected_answer": "def flatten(test_tuple): \n\tfor tup in test_tuple: \n\t\tif isinstance(tup, tuple): \n\t\t\tyield from flatten(tup) \n\t\telse: \n\t\t\tyield tup \ndef count_element_freq(test_tuple):\n  res = {}\n  for ele in flatten(test_tuple):\n    if ele not in res:\n      res[ele] = 0\n    res[ele] += 1\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_513",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef add_str(test_tup, K):\n    \"\"\" Write a function to convert tuple into list by adding the given string after every element. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert add_str((5, 6, 7, 4, 9) , \"FDF\") == [5, 'FDF', 6, 'FDF', 7, 'FDF', 4, 'FDF', 9, 'FDF']\n    assert add_str((7, 8, 9, 10) , \"PF\") == [7, 'PF', 8, 'PF', 9, 'PF', 10, 'PF']\n    assert add_str((11, 14, 12, 1, 4) , \"JH\") == [11, 'JH', 14, 'JH', 12, 'JH', 1, 'JH', 4, 'JH']",
        "expected_answer": "def add_str(test_tup, K):\n  res = [ele for sub in test_tup for ele in (sub, K)]\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_514",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef sum_elements(test_tup):\n    \"\"\" Write a function to find the summation of tuple elements in the given tuple list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert sum_elements((7, 8, 9, 1, 10, 7)) == 42\n    assert sum_elements((1, 2, 3, 4, 5, 6)) == 21\n    assert sum_elements((11, 12 ,13 ,45, 14)) == 95",
        "expected_answer": "def sum_elements(test_tup):\n  res = sum(list(test_tup))\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_515",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef modular_sum(arr, n, m):\n    \"\"\" Write a function to check if there is a subset with sum divisible by m. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert modular_sum([3, 1, 7, 5], 4, 6) == True\n    assert modular_sum([1, 7], 2, 5) == False\n    assert modular_sum([1, 6], 2, 5) == False",
        "expected_answer": "def modular_sum(arr, n, m): \n\tif (n > m): \n\t\treturn True\n\tDP = [False for i in range(m)] \n\tfor i in range(n): \n\t\tif (DP[0]): \n\t\t\treturn True\n\t\ttemp = [False for i in range(m)] \n\t\tfor j in range(m): \n\t\t\tif (DP[j] == True): \n\t\t\t\tif (DP[(j + arr[i]) % m] == False): \n\t\t\t\t\ttemp[(j + arr[i]) % m] = True\n\t\tfor j in range(m): \n\t\t\tif (temp[j]): \n\t\t\t\tDP[j] = True\n\t\tDP[arr[i] % m] = True\n\treturn DP[0]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_516",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef radix_sort(nums):\n    \"\"\" Write a function to sort a list of elements using radix sort. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert radix_sort([15, 79, 25, 68, 37]) == [15, 25, 37, 68, 79]\n    assert radix_sort([9, 11, 8, 7, 3, 2]) == [2, 3, 7, 8, 9, 11]\n    assert radix_sort([36, 12, 24, 26, 29]) == [12, 24, 26, 29, 36]",
        "expected_answer": "def radix_sort(nums):\n    RADIX = 10\n    placement = 1\n    max_digit = max(nums)\n\n    while placement < max_digit:\n      buckets = [list() for _ in range( RADIX )]\n      for i in nums:\n        tmp = int((i / placement) % RADIX)\n        buckets[tmp].append(i)\n      a = 0\n      for b in range( RADIX ):\n        buck = buckets[b]\n        for i in buck:\n          nums[a] = i\n          a += 1\n      placement *= RADIX\n    return nums",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_517",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef largest_pos(list1):\n    \"\"\" Write a python function to find the largest postive number from the given list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert largest_pos([1,2,3,4,-1]) == 4\n    assert largest_pos([0,1,2,-5,-1,6]) == 6\n    assert largest_pos([0,0,1,0]) == 1",
        "expected_answer": "def largest_pos(list1): \n    max = list1[0] \n    for x in list1: \n        if x > max : \n             max = x  \n    return max",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_518",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef sqrt_root(num):\n    \"\"\" Write a function to find the square root of a perfect number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert sqrt_root(4)==2\n    assert sqrt_root(16)==4\n    assert sqrt_root(400)==20",
        "expected_answer": "import math\ndef sqrt_root(num):\n sqrt_root = math.pow(num, 0.5)\n return sqrt_root",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_519",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef volume_tetrahedron(num):\n    \"\"\" Write a function to calculate volume of a tetrahedron. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert volume_tetrahedron(10)==117.85\n    assert volume_tetrahedron(15)==397.75\n    assert volume_tetrahedron(20)==942.81",
        "expected_answer": "import math\ndef volume_tetrahedron(num):\n\tvolume = (num ** 3 / (6 * math.sqrt(2)))\t\n\treturn round(volume, 2)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_520",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef find_lcm(num1, num2):\n    \"\"\" Write a function to find the lcm of the given array elements. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert get_lcm([2, 7, 3, 9, 4]) == 252\n    assert get_lcm([1, 2, 8, 3]) == 24\n    assert get_lcm([3, 8, 4, 10, 5]) == 120",
        "expected_answer": "def find_lcm(num1, num2): \n\tif(num1>num2): \n\t\tnum = num1 \n\t\tden = num2 \n\telse: \n\t\tnum = num2 \n\t\tden = num1 \n\trem = num % den \n\twhile (rem != 0): \n\t\tnum = den \n\t\tden = rem \n\t\trem = num % den \n\tgcd = den \n\tlcm = int(int(num1 * num2)/int(gcd)) \n\treturn lcm \ndef get_lcm(l):\n  num1 = l[0]\n  num2 = l[1]\n  lcm = find_lcm(num1, num2)\n  for i in range(2, len(l)):\n    lcm = find_lcm(lcm, l[i])\n  return lcm",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_521",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef check_isosceles(x,y,z):\n    \"\"\" Write a function to print check if the triangle is scalene or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert check_isosceles(6,8,12)==True\n    assert check_isosceles(6,6,12)==False\n    assert check_isosceles(6,15,20)==True",
        "expected_answer": "def check_isosceles(x,y,z):\n  if x!=y & y!=z & z!=x:\n\t   return True\n  else:\n     return False",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_522",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef lbs(arr):\n    \"\"\" Write a function to find the longest bitonic subsequence for the given array. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert lbs([0 , 8 , 4, 12, 2, 10 , 6 , 14 , 1 , 9 , 5 , 13, 3, 11 , 7 , 15]) == 7\n    assert lbs([1, 11, 2, 10, 4, 5, 2, 1]) == 6\n    assert lbs([80, 60, 30, 40, 20, 10]) == 5",
        "expected_answer": "def lbs(arr): \n\tn = len(arr) \n\tlis = [1 for i in range(n+1)] \n\tfor i in range(1 , n): \n\t\tfor j in range(0 , i): \n\t\t\tif ((arr[i] > arr[j]) and (lis[i] < lis[j] +1)): \n\t\t\t\tlis[i] = lis[j] + 1\n\tlds = [1 for i in range(n+1)] \n\tfor i in reversed(range(n-1)): \n\t\tfor j in reversed(range(i-1 ,n)): \n\t\t\tif(arr[i] > arr[j] and lds[i] < lds[j] + 1): \n\t\t\t\tlds[i] = lds[j] + 1\n\tmaximum = lis[0] + lds[0] - 1\n\tfor i in range(1 , n): \n\t\tmaximum = max((lis[i] + lds[i]-1), maximum) \n\treturn maximum",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_523",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef check_string(str1):\n    \"\"\" Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert check_string('python')==['String must have 1 upper case character.', 'String must have 1 number.', 'String length should be atleast 8.']\n    assert check_string('123python')==['String must have 1 upper case character.']\n    assert check_string('123Python')==['Valid string.']",
        "expected_answer": "def check_string(str1):\n    messg = [\n    lambda str1: any(x.isupper() for x in str1) or 'String must have 1 upper case character.',\n    lambda str1: any(x.islower() for x in str1) or 'String must have 1 lower case character.',\n    lambda str1: any(x.isdigit() for x in str1) or 'String must have 1 number.',\n    lambda str1: len(str1) >= 7                 or 'String length should be atleast 8.',]\n    result = [x for x in [i(str1) for i in messg] if x != True]\n    if not result:\n        result.append('Valid string.')\n    return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_524",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef max_sum_increasing_subsequence(arr, n):\n    \"\"\" Write a function to find the sum of maximum increasing subsequence of the given array. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5], 7) == 106\n    assert max_sum_increasing_subsequence([3, 4, 5, 10], 4) == 22\n    assert max_sum_increasing_subsequence([10, 5, 4, 3], 4) == 10",
        "expected_answer": "def max_sum_increasing_subsequence(arr, n): \n\tmax = 0\n\tmsis = [0 for x in range(n)] \n\tfor i in range(n): \n\t\tmsis[i] = arr[i] \n\tfor i in range(1, n): \n\t\tfor j in range(i): \n\t\t\tif (arr[i] > arr[j] and\n\t\t\t\tmsis[i] < msis[j] + arr[i]): \n\t\t\t\tmsis[i] = msis[j] + arr[i] \n\tfor i in range(n): \n\t\tif max < msis[i]: \n\t\t\tmax = msis[i] \n\treturn max",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_525",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef parallel_lines(line1, line2):\n    \"\"\" Write a python function to check whether two given lines are parallel or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert parallel_lines([2,3,4], [2,3,8]) == True\n    assert parallel_lines([2,3,4], [4,-3,8]) == False\n    assert parallel_lines([3,3],[5,5]) == True",
        "expected_answer": "def parallel_lines(line1, line2):\n  return line1[0]/line1[1] == line2[0]/line2[1]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_526",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef capitalize_first_last_letters(str1):\n    \"\"\" Write a python function to capitalize first and last letters of each word of a given string. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert capitalize_first_last_letters(\"python\") == \"PythoN\"\n    assert capitalize_first_last_letters(\"bigdata\") == \"BigdatA\"\n    assert capitalize_first_last_letters(\"Hadoop\") == \"HadooP\"",
        "expected_answer": "def capitalize_first_last_letters(str1):\n     str1 = result = str1.title()\n     result =  \"\"\n     for word in str1.split():\n        result += word[:-1] + word[-1].upper() + \" \"\n     return result[:-1]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_527",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef get_pairs_count(arr, n, sum):\n    \"\"\" Write a function to find all pairs in an integer array whose sum is equal to a given number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert get_pairs_count([1, 5, 7, -1, 5], 5, 6) == 3\n    assert get_pairs_count([1, 5, 7, -1], 4, 6) == 2\n    assert get_pairs_count([1, 1, 1, 1], 4, 2) == 6",
        "expected_answer": "def get_pairs_count(arr, n, sum):\n    count = 0 \n    for i in range(0, n):\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_528",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef min_length(list1):\n    \"\"\" Write a function to find the list of lists with minimum length. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert min_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n    assert min_length([[1], [5, 7], [10, 12, 14,15]])==(1, [1])\n    assert min_length([[5], [15,20,25]])==(1, [5])",
        "expected_answer": "def min_length(list1):\n   min_length = min(len(x) for x in  list1 )  \n   min_list = min((x) for x in   list1)\n   return(min_length, min_list)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_529",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef jacobsthal_lucas(n):\n    \"\"\" Write a function to find the nth jacobsthal-lucas number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert jacobsthal_lucas(5) == 31\n    assert jacobsthal_lucas(2) == 5\n    assert jacobsthal_lucas(4) == 17",
        "expected_answer": "def jacobsthal_lucas(n): \n\tdp=[0] * (n + 1) \n\tdp[0] = 2\n\tdp[1] = 1\n\tfor i in range(2, n+1): \n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2]; \n\treturn dp[n]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_530",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef negative_count(nums):\n    \"\"\" Write a function to find the ration of negative numbers in an array of integers. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert negative_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.31\n    assert negative_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.31\n    assert negative_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.44",
        "expected_answer": "from array import array\ndef negative_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x < 0:\n            n1 += 1\n        else:\n          None\n    return round(n1/n,2)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_531",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef min_coins(coins, m, V):\n    \"\"\" Write a function to find minimum number of coins that make a given value. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert min_coins([9, 6, 5, 1] ,4,11)==2\n    assert min_coins([4,5,6,7,8,9],6,9)==1\n    assert min_coins([1, 2, 3],3,4)==2",
        "expected_answer": "import sys \ndef min_coins(coins, m, V): \n    if (V == 0): \n        return 0\n    res = sys.maxsize \n    for i in range(0, m): \n        if (coins[i] <= V): \n            sub_res = min_coins(coins, m, V-coins[i]) \n            if (sub_res != sys.maxsize and sub_res + 1 < res): \n                res = sub_res + 1  \n    return res",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_532",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef check_permutation(str1, str2):\n    \"\"\" Write a function to check if the two given strings are permutations of each other. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert check_permutation(\"abc\", \"cba\") == True\n    assert check_permutation(\"test\", \"ttew\") == False\n    assert check_permutation(\"xxyz\", \"yxzx\") == True",
        "expected_answer": "def check_permutation(str1, str2):\n  n1=len(str1)\n  n2=len(str2)\n  if(n1!=n2):\n    return False\n  a=sorted(str1)\n  str1=\" \".join(a)\n  b=sorted(str2)\n  str2=\" \".join(b)\n  for i in range(0, n1, 1):\n    if(str1[i] != str2[i]):\n      return False\n  return True",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_533",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef remove_datatype(test_tuple, data_type):\n    \"\"\" Write a function to remove particular data type elements from the given tuple. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert remove_datatype((4, 5, 4, 7.7, 1.2), int) == [7.7, 1.2]\n    assert remove_datatype((7, 8, 9, \"SR\"), str) == [7, 8, 9]\n    assert remove_datatype((7, 1.1, 2, 2.2), float) == [7, 2]",
        "expected_answer": "def remove_datatype(test_tuple, data_type):\n  res = []\n  for ele in test_tuple:\n    if not isinstance(ele, data_type):\n      res.append(ele)\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_534",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef search_literal(pattern,text):\n    \"\"\" Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert search_literal('python','python programming language')==(0,6)\n    assert search_literal('programming','python programming language')==(7,18)\n    assert search_literal('language','python programming language')==(19,27)",
        "expected_answer": "import re\ndef search_literal(pattern,text):\n match = re.search(pattern, text)\n s = match.start()\n e = match.end()\n return (s, e)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_535",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef topbottom_surfacearea(r):\n    \"\"\" Write a function to find the top or bottom surface area of a cylinder. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert topbottom_surfacearea(10)==314.15000000000003\n    assert topbottom_surfacearea(5)==78.53750000000001\n    assert topbottom_surfacearea(4)==50.264",
        "expected_answer": "def topbottom_surfacearea(r):\n  toporbottomarea=3.1415*r*r\n  return toporbottomarea",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_536",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef nth_items(list,n):\n    \"\"\" Write a function to select the nth items of a list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9],2)==[1, 3, 5, 7, 9] \n    assert nth_items([10,15,19,17,16,18],3)==[10,17] \n    assert nth_items([14,16,19,15,17],4)==[14,17]",
        "expected_answer": "def nth_items(list,n):\n return list[::n]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_537",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef first_repeated_word(str1):\n    \"\"\" Write a python function to find the first repeated word in a given string. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert first_repeated_word(\"ab ca bc ab\") == \"ab\"\n    assert first_repeated_word(\"ab ca bc\") == 'None'\n    assert first_repeated_word(\"ab ca bc ca ab bc\") == \"ca\"",
        "expected_answer": "def first_repeated_word(str1):\n  temp = set()\n  for word in str1.split():\n    if word in temp:\n      return word;\n    else:\n      temp.add(word)\n  return 'None'",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_538",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef string_list_to_tuple(str1):\n    \"\"\" Write a python function to convert a given string list to a tuple. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert string_list_to_tuple((\"python 3.0\")) == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n    assert string_list_to_tuple((\"bigdata\")) == ('b', 'i', 'g', 'd', 'a', 't', 'a')\n    assert string_list_to_tuple((\"language\")) == ('l', 'a', 'n', 'g', 'u', 'a', 'g','e')",
        "expected_answer": "def string_list_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_539",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef basesnum_coresspondingnum(bases_num,index):\n    \"\"\" Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert basesnum_coresspondingnum([10, 20, 30, 40, 50, 60, 70, 80, 90, 100],[1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[10, 400, 27000, 2560000, 312500000, 46656000000, 8235430000000, 1677721600000000, 387420489000000000, 100000000000000000000]\n    assert basesnum_coresspondingnum([1, 2, 3, 4, 5, 6, 7],[10, 20, 30, 40, 50, 60, 70])==[1, 1048576, 205891132094649, 1208925819614629174706176, 88817841970012523233890533447265625, 48873677980689257489322752273774603865660850176, 143503601609868434285603076356671071740077383739246066639249]\n    assert basesnum_coresspondingnum([4, 8, 12, 16, 20, 24, 28],[3, 6, 9, 12, 15, 18, 21])==[64, 262144, 5159780352, 281474976710656, 32768000000000000000, 6979147079584381377970176, 2456510688823056210273111113728]",
        "expected_answer": "def basesnum_coresspondingnum(bases_num,index):\n  result = list(map(pow, bases_num, index))\n  return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_540",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef find_Diff(arr,n):\n    \"\"\" Write a python function to find the difference between highest and least frequencies in a given array. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find_Diff([1,1,2,2,7,8,4,5,1,4],10) == 2\n    assert find_Diff([1,7,9,2,3,3,1,3,3],9) == 3\n    assert find_Diff([1,2,1,2],4) == 0",
        "expected_answer": "def find_Diff(arr,n): \n    arr.sort()  \n    count = 0; max_count = 0; min_count = n \n    for i in range(0,(n-1)): \n        if arr[i] == arr[i + 1]: \n            count += 1\n            continue\n        else: \n            max_count = max(max_count,count) \n            min_count = min(min_count,count) \n            count = 0\n    return max_count - min_count",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_541",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef get_sum(n):\n    \"\"\" Write a function to find if the given number is abundant or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert check_abundant(12) == True\n    assert check_abundant(15) == False\n    assert check_abundant(18) == True",
        "expected_answer": "import math \ndef get_sum(n): \n\tsum = 0\n\ti = 1\n\twhile i <= (math.sqrt(n)): \n\t\tif n%i == 0: \n\t\t\tif n/i == i : \n\t\t\t\tsum = sum + i \n\t\t\telse: \n\t\t\t\tsum = sum + i \n\t\t\t\tsum = sum + (n / i ) \n\t\ti = i + 1\n\tsum = sum - n \n\treturn sum\ndef check_abundant(n): \n\tif (get_sum(n) > n): \n\t\treturn True\n\telse: \n\t\treturn False",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_542",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef fill_spaces(text):\n    \"\"\" Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert fill_spaces('Boult Curve Wireless Neckband') == 'Boult:Curve:Wireless:Neckband'\n    assert fill_spaces('Stereo Sound Sweatproof') == 'Stereo:Sound:Sweatproof'\n    assert fill_spaces('Probass Curve Audio') == 'Probass:Curve:Audio'",
        "expected_answer": "import re\ndef fill_spaces(text):\n  return (re.sub(\"[ ,.]\", \":\", text))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_543",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef count_digits(num1,num2):\n    \"\"\" Write a function to add two numbers and print number of digits of sum. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert count_digits(9875,10)==(4)\n    assert count_digits(98759853034,100)==(11)\n    assert count_digits(1234567,500)==(7)",
        "expected_answer": "def count_digits(num1,num2):\n    number=num1+num2\n    count = 0\n    while(number > 0):\n        number = number // 10\n        count = count + 1\n    return count",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_544",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef flatten_tuple(test_list):\n    \"\"\" Write a function to flatten the tuple list to a string. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert flatten_tuple([('1', '4', '6'), ('5', '8'), ('2', '9'), ('1', '10')]) == '1 4 6 5 8 2 9 1 10'\n    assert flatten_tuple([('2', '3', '4'), ('6', '9'), ('3', '2'), ('2', '11')]) == '2 3 4 6 9 3 2 2 11'\n    assert flatten_tuple([('14', '21', '9'), ('24', '19'), ('12', '29'), ('23', '17')]) == '14 21 9 24 19 12 29 23 17'",
        "expected_answer": "def flatten_tuple(test_list):\n  res = ' '.join([idx for tup in test_list for idx in tup])\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_545",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef take_L_and_F_set_bits(n) :\n    \"\"\" Write a python function to toggle only first and last bits of a given number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert toggle_F_and_L_bits(10) == 3\n    assert toggle_F_and_L_bits(15) == 6\n    assert toggle_F_and_L_bits(20) == 5",
        "expected_answer": "def take_L_and_F_set_bits(n) : \n    n = n | n >> 1\n    n = n | n >> 2\n    n = n | n >> 4\n    n = n | n >> 8\n    n = n | n >> 16 \n    return ((n + 1) >> 1) + 1      \ndef toggle_F_and_L_bits(n) :  \n    if (n == 1) : \n        return 0 \n    return n ^ take_L_and_F_set_bits(n)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_546",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef last_occurence_char(string,char):\n    \"\"\" Write a function to find the last occurrence of a character in a string. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert last_occurence_char(\"hello world\",'l')==10\n    assert last_occurence_char(\"language\",'g')==7\n    assert last_occurence_char(\"little\",'y')==None",
        "expected_answer": "def last_occurence_char(string,char):\n flag = -1\n for i in range(len(string)):\n     if(string[i] == char):\n         flag = i\n if(flag == -1):\n    return None\n else:\n    return flag + 1",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_547",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef Total_Hamming_Distance(n):\n    \"\"\" Write a python function to find the sum of hamming distances of all consecutive numbers from o to n. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert Total_Hamming_Distance(4) == 7\n    assert Total_Hamming_Distance(2) == 3\n    assert Total_Hamming_Distance(5) == 8",
        "expected_answer": "def Total_Hamming_Distance(n):   \n    i = 1\n    sum = 0\n    while (n // i > 0):  \n        sum = sum + n // i  \n        i = i * 2     \n    return sum",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_548",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef longest_increasing_subsequence(arr):\n    \"\"\" Write a function to find the length of the longest increasing subsequence of the given sequence. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60]) == 5\n    assert longest_increasing_subsequence([3, 10, 2, 1, 20]) == 3\n    assert longest_increasing_subsequence([50, 3, 10, 7, 40, 80]) == 4 ",
        "expected_answer": "def longest_increasing_subsequence(arr): \n\tn = len(arr) \n\tlongest_increasing_subsequence = [1]*n \n\tfor i in range (1 , n): \n\t\tfor j in range(0 , i): \n\t\t\tif arr[i] > arr[j] and longest_increasing_subsequence[i]< longest_increasing_subsequence[j] + 1 : \n\t\t\t\tlongest_increasing_subsequence[i] = longest_increasing_subsequence[j]+1\n\tmaximum = 0\n\tfor i in range(n): \n\t\tmaximum = max(maximum , longest_increasing_subsequence[i]) \n\treturn maximum",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_549",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef odd_Num_Sum(n) :\n    \"\"\" Write a python function to find the sum of fifth power of first n odd natural numbers. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert odd_Num_Sum(1) == 1\n    assert odd_Num_Sum(2) == 244\n    assert odd_Num_Sum(3) == 3369",
        "expected_answer": "def odd_Num_Sum(n) : \n    j = 0\n    sm = 0\n    for i in range(1,n+1) : \n        j = (2*i-1) \n        sm = sm + (j*j*j*j*j)     \n    return sm",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_550",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef find_Max(arr,low,high):\n    \"\"\" Write a python function to find the maximum element in a sorted and rotated array. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find_Max([2,3,5,6,9],0,4) == 9\n    assert find_Max([3,4,5,2,1],0,4) == 5\n    assert find_Max([1,2,3],0,2) == 3",
        "expected_answer": "def find_Max(arr,low,high): \n    if (high < low): \n        return arr[0] \n    if (high == low): \n        return arr[low] \n    mid = low + (high - low) // 2 \n    if (mid < high and arr[mid + 1] < arr[mid]): \n        return arr[mid] \n    if (mid > low and arr[mid] < arr[mid - 1]): \n        return arr[mid - 1]  \n    if (arr[low] > arr[mid]): \n        return find_Max(arr,low,mid - 1) \n    else: \n        return find_Max(arr,mid + 1,high)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_551",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef extract_column(list1, n):\n    \"\"\" Write a function to extract a specified column from a given nested list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert extract_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[1, 2, 1]\n    assert extract_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[3, -5, 1]\n    assert extract_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[1, 5, 1, 13, 5, 9]",
        "expected_answer": "def extract_column(list1, n):\n   result = [i.pop(n) for i in list1]\n   return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_552",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef Seq_Linear(seq_nums):\n    \"\"\" Write a python function to check whether a given sequence is linear or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert Seq_Linear([0,2,4,6,8,10]) == \"Linear Sequence\"\n    assert Seq_Linear([1,2,3]) == \"Linear Sequence\"\n    assert Seq_Linear([1,5,2]) == \"Non Linear Sequence\"",
        "expected_answer": "def Seq_Linear(seq_nums):\n  seq_nums = [seq_nums[x] - seq_nums[x-1] for x in range(1, len(seq_nums))]\n  if len(set(seq_nums)) == 1: \n    return \"Linear Sequence\"\n  else:\n    return \"Non Linear Sequence\"",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_553",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef tuple_to_float(test_tup):\n    \"\"\" Write a function to convert the given tuple to a floating-point number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert tuple_to_float((4, 56)) == 4.56\n    assert tuple_to_float((7, 256)) == 7.256\n    assert tuple_to_float((8, 123)) == 8.123",
        "expected_answer": "def tuple_to_float(test_tup):\n  res = float('.'.join(str(ele) for ele in test_tup))\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_554",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef Split(list):\n    \"\"\" Write a python function to find odd numbers from a mixed list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert Split([1,2,3,4,5,6]) == [1,3,5]\n    assert Split([10,11,12,13]) == [11,13]\n    assert Split([7,8,9,1]) == [7,9,1]",
        "expected_answer": "def Split(list): \n    od_li = [] \n    for i in list: \n        if (i % 2 != 0): \n            od_li.append(i)  \n    return od_li",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_555",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef difference(n) :\n    \"\"\" Write a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert difference(3) == 30\n    assert difference(5) == 210\n    assert difference(2) == 6",
        "expected_answer": "def difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_556",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef find_Odd_Pair(A,N) :\n    \"\"\" Write a python function to count the pairs with xor as an odd number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find_Odd_Pair([5,4,7,2,1],5) == 6\n    assert find_Odd_Pair([7,2,8,1,0,5,11],7) == 12\n    assert find_Odd_Pair([1,2,3],3) == 2",
        "expected_answer": "def find_Odd_Pair(A,N) : \n    oddPair = 0\n    for i in range(0,N) :  \n        for j in range(i+1,N) :  \n            if ((A[i] ^ A[j]) % 2 != 0):  \n                oddPair+=1  \n    return oddPair",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_557",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef toggle_string(string):\n    \"\"\" Write a function to toggle characters case in a string. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert toggle_string(\"Python\")==(\"pYTHON\")\n    assert toggle_string(\"Pangram\")==(\"pANGRAM\")\n    assert toggle_string(\"LIttLE\")==(\"liTTle\")",
        "expected_answer": "def toggle_string(string):\n string1 = string.swapcase()\n return string1",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_558",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef digit_distance_nums(n1, n2):\n    \"\"\" Write a python function to find the digit distance between two integers. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert digit_distance_nums(1,2) == 1\n    assert digit_distance_nums(23,56) == 6\n    assert digit_distance_nums(123,256) == 7",
        "expected_answer": "def digit_distance_nums(n1, n2):\n         return sum(map(int,str(abs(n1-n2))))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_559",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef max_sub_array_sum(a, size):\n    \"\"\" Write a function to find the largest sum of contiguous subarray in the given array. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\n    assert max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8\n    assert max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10",
        "expected_answer": "def max_sub_array_sum(a, size):\n  max_so_far = 0\n  max_ending_here = 0\n  for i in range(0, size):\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0:\n      max_ending_here = 0\n    elif (max_so_far < max_ending_here):\n      max_so_far = max_ending_here\n  return max_so_far",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_560",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef union_elements(test_tup1, test_tup2):\n    \"\"\" Write a function to find the union of elements of the given tuples. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\n    assert union_elements((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6)\n    assert union_elements((11, 12, 13, 14),(13, 15, 16, 17) ) == (11, 12, 13, 14, 15, 16, 17)",
        "expected_answer": "def union_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1 + test_tup2))\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_561",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef assign_elements(test_list):\n    \"\"\" Write a function to assign with each element, its pair elements from other similar pairs in the given tuple. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert assign_elements([(5, 3), (7, 5), (2, 7), (3, 8), (8, 4)] ) == {3: [8], 5: [3], 7: [5], 2: [7], 8: [4], 4: []}\n    assert assign_elements([(6, 4), (9, 4), (3, 8), (4, 9), (9, 5)] ) == {4: [9], 6: [4], 9: [4, 5], 8: [], 3: [8], 5: []}\n    assert assign_elements([(6, 2), (6, 8), (4, 9), (4, 9), (3, 7)] ) == {2: [], 6: [2, 8], 8: [], 9: [], 4: [9, 9], 7: [], 3: [7]}",
        "expected_answer": "def assign_elements(test_list):\n  res = dict()\n  for key, val in test_list:\n    res.setdefault(val, [])\n    res.setdefault(key, []).append(val)\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_562",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef Find_Max_Length(lst):\n    \"\"\" Write a python function to find the maximum length of sublist. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\n    assert Find_Max_Length([[0,1],[2,2,],[3,2,1]]) == 3\n    assert Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5",
        "expected_answer": "def Find_Max_Length(lst):  \n    maxLength = max(len(x) for x in lst )\n    return maxLength",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_563",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef extract_values(text):\n    \"\"\" Write a function to extract values between quotation marks of a string. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\n    assert extract_values('\"python\",\"program\",\"language\"')==['python','program','language']\n    assert extract_values('\"red\",\"blue\",\"green\",\"yellow\"')==['red','blue','green','yellow']",
        "expected_answer": "import re\ndef extract_values(text):\n return (re.findall(r'\"(.*?)\"', text))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_564",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef count_Pairs(arr,n):\n    \"\"\" Write a python function to count unequal element pairs from the given array. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert count_Pairs([1,2,1],3) == 2\n    assert count_Pairs([1,1,1,1],4) == 0\n    assert count_Pairs([1,2,3,4,5],5) == 10",
        "expected_answer": "def count_Pairs(arr,n): \n    cnt = 0; \n    for i in range(n): \n        for j in range(i + 1,n): \n            if (arr[i] != arr[j]): \n                cnt += 1; \n    return cnt;",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_565",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef split(word):\n    \"\"\" Write a python function to split a string into characters. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert split('python') == ['p','y','t','h','o','n']\n    assert split('Name') == ['N','a','m','e']\n    assert split('program') == ['p','r','o','g','r','a','m']",
        "expected_answer": "def split(word): \n    return [char for char in word]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_566",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef sum_digits(n):\n    \"\"\" Write a function to get the sum of a non-negative integer. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert sum_digits(345)==12\n    assert sum_digits(12)==3\n    assert sum_digits(97)==16",
        "expected_answer": "def sum_digits(n):\n  if n == 0:\n    return 0\n  else:\n    return n % 10 + sum_digits(int(n / 10))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_567",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef issort_list(list1):\n    \"\"\" Write a function to check whether a specified list is sorted or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert issort_list([1,2,4,6,8,10,12,14,16,17])==True\n    assert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False\n    assert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False",
        "expected_answer": "def issort_list(list1):\n    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\n    return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_568",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef empty_list(length):\n    \"\"\" Write a function to create a list of empty dictionaries. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert empty_list(5)==[{},{},{},{},{}]\n    assert empty_list(6)==[{},{},{},{},{},{}]\n    assert empty_list(7)==[{},{},{},{},{},{},{}]",
        "expected_answer": "def empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_569",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef sort_sublists(list1):\n    \"\"\" Write a function to sort each sublist of strings in a given list of lists. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]\n    assert sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]",
        "expected_answer": "def sort_sublists(list1):\n    result = list(map(sorted,list1)) \n    return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_570",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef remove_words(list1, charlist):\n    \"\"\" Write a function to remove words from a given list of strings containing a character or string. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert remove_words(['Red color', 'Orange#', 'Green', 'Orange @', \"White\"],['#', 'color', '@'])==['Red', '', 'Green', 'Orange', 'White']\n    assert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['&', '+', '@'])==['Red', '', 'Green', 'Orange', 'White']\n    assert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['@'])==['Red &', 'Orange+', 'Green', 'Orange', 'White']",
        "expected_answer": "def remove_words(list1, charlist):\n    new_list = []\n    for line in list1:\n        new_words = ' '.join([word for word in line.split() if not any([phrase in word for phrase in charlist])])\n        new_list.append(new_words)\n    return new_list",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_571",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef max_sum_pair_diff_lessthan_K(arr, N, K):\n    \"\"\" Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert max_sum_pair_diff_lessthan_K([3, 5, 10, 15, 17, 12, 9], 7, 4) == 62\n    assert max_sum_pair_diff_lessthan_K([5, 15, 10, 300], 4, 12) == 25\n    assert max_sum_pair_diff_lessthan_K([1, 2, 3, 4, 5, 6], 6, 6) == 21",
        "expected_answer": "def max_sum_pair_diff_lessthan_K(arr, N, K): \n\tarr.sort() \n\tdp = [0] * N \n\tdp[0] = 0\n\tfor i in range(1, N): \n\t\tdp[i] = dp[i-1] \n\t\tif (arr[i] - arr[i-1] < K): \n\t\t\tif (i >= 2): \n\t\t\t\tdp[i] = max(dp[i], dp[i-2] + arr[i] + arr[i-1]); \n\t\t\telse: \n\t\t\t\tdp[i] = max(dp[i], arr[i] + arr[i-1]); \n\treturn dp[N - 1]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_572",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef two_unique_nums(nums):\n    \"\"\" Write a python function to remove two duplicate numbers from a given number of lists. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\n    assert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]\n    assert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]",
        "expected_answer": "def two_unique_nums(nums):\n  return [i for i in nums if nums.count(i)==1]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_573",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef unique_product(list_data):\n    \"\"\" Write a python function to calculate the product of the unique numbers of a given list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000\n    assert unique_product([1, 2, 3, 1,]) == 6\n    assert unique_product([7, 8, 9, 0, 1, 1]) == 0",
        "expected_answer": "def unique_product(list_data):\n    temp = list(set(list_data))\n    p = 1\n    for i in temp:\n        p *= i\n    return p",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_574",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef surfacearea_cylinder(r,h):\n    \"\"\" Write a function to find the surface area of a cylinder. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert surfacearea_cylinder(10,5)==942.45\n    assert surfacearea_cylinder(4,5)==226.18800000000002\n    assert surfacearea_cylinder(4,10)==351.848",
        "expected_answer": "def surfacearea_cylinder(r,h):\n  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\n  return surfacearea",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_575",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef count_no (A,N,L,R):\n    \"\"\" Write a python function to find nth number in a sequence which is not a multiple of a given number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert count_no(2,3,1,10) == 5\n    assert count_no(3,6,4,20) == 11\n    assert count_no(5,10,4,20) == 16",
        "expected_answer": "def count_no (A,N,L,R): \n    count = 0\n    for i in range (L,R + 1): \n        if (i % A != 0): \n            count += 1\n        if (count == N): \n            break\n    return (i)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_576",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef is_Sub_Array(A,B,n,m):\n    \"\"\" Write a python function to check whether an array is subarray of another or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert is_Sub_Array([1,4,3,5],[1,2],4,2) == False\n    assert is_Sub_Array([1,2,1],[1,2,1],3,3) == True\n    assert is_Sub_Array([1,0,2,2],[2,2,0],4,3) ==False",
        "expected_answer": "def is_Sub_Array(A,B,n,m): \n    i = 0; j = 0; \n    while (i < n and j < m):  \n        if (A[i] == B[j]): \n            i += 1; \n            j += 1; \n            if (j == m): \n                return True;  \n        else: \n            i = i - j + 1; \n            j = 0;       \n    return False;",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_577",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef last_Digit_Factorial(n):\n    \"\"\" Write a python function to find the last digit in factorial of a given number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert last_Digit_Factorial(4) == 4\n    assert last_Digit_Factorial(21) == 0\n    assert last_Digit_Factorial(30) == 0",
        "expected_answer": "def last_Digit_Factorial(n): \n    if (n == 0): return 1\n    elif (n <= 2): return n  \n    elif (n == 3): return 6\n    elif (n == 4): return 4 \n    else: \n      return 0",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_578",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef interleave_lists(list1,list2,list3):\n    \"\"\" Write a function to interleave lists of the same length. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\n    assert interleave_lists([10,20],[15,2],[5,10])==[10,15,5,20,2,10]\n    assert interleave_lists([11,44], [10,15], [20,5])==[11,10,20,44,15,5]",
        "expected_answer": "def interleave_lists(list1,list2,list3):\n    result = [el for pair in zip(list1, list2, list3) for el in pair]\n    return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_579",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef find_dissimilar(test_tup1, test_tup2):\n    \"\"\" Write a function to find the dissimilar elements in the given two tuples. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\n    assert find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)\n    assert find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)",
        "expected_answer": "def find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_580",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef even_ele(test_tuple, even_fnc):\n    \"\"\" Write a function to extract the even elements in the nested mixed tuple. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\n    assert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))\n    assert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)",
        "expected_answer": "def even_ele(test_tuple, even_fnc): \n\tres = tuple() \n\tfor ele in test_tuple: \n\t\tif isinstance(ele, tuple): \n\t\t\tres += (even_ele(ele, even_fnc), ) \n\t\telif even_fnc(ele): \n\t\t\tres += (ele, ) \n\treturn res \ndef extract_even(test_tuple):\n  res = even_ele(test_tuple, lambda x: x % 2 == 0)\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_581",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef surface_Area(b,s):\n    \"\"\" Write a python function to find the surface area of the square pyramid. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert surface_Area(3,4) == 33\n    assert surface_Area(4,5) == 56\n    assert surface_Area(1,2) == 5",
        "expected_answer": "def surface_Area(b,s): \n    return 2 * b * s + pow(b,2)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_582",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef my_dict(dict1):\n    \"\"\" Write a function to check if a dictionary is empty or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert my_dict({10})==False\n    assert my_dict({11})==False\n    assert my_dict({})==True",
        "expected_answer": "def my_dict(dict1):\n  if bool(dict1):\n     return False\n  else:\n     return True",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_583",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef catalan_number(num):\n    \"\"\" Write a function for nth catalan number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert catalan_number(10)==16796\n    assert catalan_number(9)==4862\n    assert catalan_number(7)==429",
        "expected_answer": "def catalan_number(num):\n    if num <=1:\n         return 1   \n    res_num = 0\n    for i in range(num):\n        res_num += catalan_number(i) * catalan_number(num-i-1)\n    return res_num",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_584",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef find_adverbs(text):\n    \"\"\" Write a function to find all adverbs and their positions in a given sentence by using regex. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find_adverbs(\"Clearly, he has no excuse for such behavior.\") == '0-7: Clearly'\n    assert find_adverbs(\"Please handle the situation carefuly\") == '28-36: carefuly'\n    assert find_adverbs(\"Complete the task quickly\") == '18-25: quickly'",
        "expected_answer": "import re\ndef find_adverbs(text):\n  for m in re.finditer(r\"\\w+ly\", text):\n    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_585",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef expensive_items(items,n):\n    \"\"\" Write a function to find the n - expensive price items from a given dataset using heap queue algorithm. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]\n    assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]\n    assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-2', 'price': 555.22}]",
        "expected_answer": "import heapq\ndef expensive_items(items,n):\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\n  return expensive_items",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_586",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef split_Arr(a,n,k):\n    \"\"\" Write a python function to split the array and add the first part to the end. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert split_Arr([12,10,5,6,52,36],6,2) == [5,6,52,36,12,10]\n    assert split_Arr([1,2,3,4],4,1) == [2,3,4,1]\n    assert split_Arr([0,1,2,3,4,5,6,7],8,3) == [3,4,5,6,7,0,1,2]",
        "expected_answer": "def split_Arr(a,n,k):  \n   b = a[:k] \n   return (a[k::]+b[::])",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_587",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef list_tuple(listx):\n    \"\"\" Write a function to convert a list to a tuple. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\n    assert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)\n    assert list_tuple([58,44,56])==(58,44,56)",
        "expected_answer": "def list_tuple(listx):\n  tuplex = tuple(listx)\n  return tuplex",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_588",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef big_diff(nums):\n    \"\"\" Write a python function to find the difference between largest and smallest value in a given array. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert big_diff([1,2,3,4]) == 3\n    assert big_diff([4,5,12]) == 8\n    assert big_diff([9,2,3]) == 7",
        "expected_answer": "def big_diff(nums):\n     diff= max(nums)-min(nums)\n     return diff",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_589",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef perfect_squares(a, b):\n    \"\"\" Write a function to find perfect squares between two given numbers. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert perfect_squares(1,30)==[1, 4, 9, 16, 25]\n    assert perfect_squares(50,100)==[64, 81, 100]\n    assert perfect_squares(100,200)==[100, 121, 144, 169, 196]",
        "expected_answer": "def perfect_squares(a, b):\n    lists=[]\n    for i in range (a,b+1):\n        j = 1;\n        while j*j <= i:\n            if j*j == i:\n                 lists.append(i)  \n            j = j+1\n        i = i+1\n    return lists",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_590",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef polar_rect(x,y):\n    \"\"\" Write a function to convert polar coordinates to rectangular coordinates. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n    assert polar_rect(4,7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))\n    assert polar_rect(15,17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))",
        "expected_answer": "import cmath\ndef polar_rect(x,y):\n cn = complex(x,y)\n cn=cmath.polar(cn)\n cn1 = cmath.rect(2, cmath.pi)\n return (cn,cn1)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_591",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef swap_List(newList):\n    \"\"\" Write a python function to interchange the first and last elements in a list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\n    assert swap_List([1, 2, 3]) == [3, 2, 1]\n    assert swap_List([4, 5, 6]) == [6, 5, 4]",
        "expected_answer": "def swap_List(newList): \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp  \n    return newList",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_592",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef binomial_Coeff(n,k):\n    \"\"\" Write a python function to find sum of product of binomial co-efficients. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert sum_Of_product(3) == 15\n    assert sum_Of_product(4) == 56\n    assert sum_Of_product(1) == 1",
        "expected_answer": "def binomial_Coeff(n,k): \n    C = [0] * (k + 1); \n    C[0] = 1; # nC0 is 1 \n    for i in range(1,n + 1):  \n        for j in range(min(i, k),0,-1): \n            C[j] = C[j] + C[j - 1]; \n    return C[k]; \ndef sum_Of_product(n): \n    return binomial_Coeff(2 * n,n - 1);",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_593",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef removezero_ip(ip):\n    \"\"\" Write a function to remove leading zeroes from an ip address. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert removezero_ip(\"216.08.094.196\")==('216.8.94.196') \n    assert removezero_ip(\"12.01.024\")==('12.1.24') \n    assert removezero_ip(\"216.08.094.0196\")==('216.8.94.196') ",
        "expected_answer": "import re\ndef removezero_ip(ip):\n string = re.sub('\\.[0]*', '.', ip)\n return string",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_594",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef diff_even_odd(list1):\n    \"\"\" Write a function to find the difference of first even and odd number of a given list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert diff_even_odd([1,3,5,7,4,1,6,8])==3\n    assert diff_even_odd([1,2,3,4,5,6,7,8,9,10])==1\n    assert diff_even_odd([1,5,7,9,10])==9",
        "expected_answer": "def diff_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even-first_odd)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_595",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef min_Swaps(str1,str2) :\n    \"\"\" Write a python function to count minimum number of swaps required to convert one binary string to another. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert min_Swaps(\"1101\",\"1110\") == 1\n    assert min_Swaps(\"111\",\"000\") == \"Not Possible\"\n    assert min_Swaps(\"111\",\"110\") == \"Not Possible\"",
        "expected_answer": "def min_Swaps(str1,str2) : \n    count = 0\n    for i in range(len(str1)) :  \n        if str1[i] != str2[i] : \n            count += 1\n    if count % 2 == 0 : \n        return (count // 2) \n    else : \n        return (\"Not Possible\")",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_596",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef tuple_size(tuple_list):\n    \"\"\" Write a function to find the size of the given tuple. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\n    assert tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\") ) == sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))\n    assert tuple_size(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))  ) == sys.getsizeof(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))",
        "expected_answer": "import sys \ndef tuple_size(tuple_list):\n  return (sys.getsizeof(tuple_list))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_597",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef find_kth(arr1, arr2, m, n, k):\n    \"\"\" Write a function to find kth element from the given two sorted arrays. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5) == 6\n    assert find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 5, 7, 7) == 256\n    assert find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 5, 4, 6) == 8",
        "expected_answer": "def find_kth(arr1, arr2, m, n, k):\n\tsorted1 = [0] * (m + n)\n\ti = 0\n\tj = 0\n\td = 0\n\twhile (i < m and j < n):\n\t\tif (arr1[i] < arr2[j]):\n\t\t\tsorted1[d] = arr1[i]\n\t\t\ti += 1\n\t\telse:\n\t\t\tsorted1[d] = arr2[j]\n\t\t\tj += 1\n\t\td += 1\n\twhile (i < m):\n\t\tsorted1[d] = arr1[i]\n\t\td += 1\n\t\ti += 1\n\twhile (j < n):\n\t\tsorted1[d] = arr2[j]\n\t\td += 1\n\t\tj += 1\n\treturn sorted1[k - 1]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_598",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef armstrong_number(number):\n    \"\"\" Write a function to check whether the given number is armstrong or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert armstrong_number(153)==True\n    assert armstrong_number(259)==False\n    assert armstrong_number(4458)==False",
        "expected_answer": "def armstrong_number(number):\n sum = 0\n times = 0\n temp = number\n while temp > 0:\n           times = times + 1\n           temp = temp // 10\n temp = number\n while temp > 0:\n           reminder = temp % 10\n           sum = sum + (reminder ** times)\n           temp //= 10\n if number == sum:\n           return True\n else:\n           return False",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_599",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef sum_average(number):\n    \"\"\" Write a function to find sum and average of first n natural numbers. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert sum_average(10)==(55, 5.5)\n    assert sum_average(15)==(120, 8.0)\n    assert sum_average(20)==(210, 10.5)",
        "expected_answer": "def sum_average(number):\n total = 0\n for value in range(1, number + 1):\n    total = total + value\n average = total / number\n return (total,average)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_600",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef is_Even(n) :\n    \"\"\" Write a python function to check whether the given number is even or not using bitwise operator. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert is_Even(1) == False\n    assert is_Even(2) == True\n    assert is_Even(3) == False",
        "expected_answer": "def is_Even(n) : \n    if (n^1 == n+1) :\n        return True; \n    else :\n        return False;",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_601",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef __init__(self, a, b):\n    \"\"\" Write a function to find the longest chain which can be formed from the given set of pairs. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert max_chain_length([Pair(5, 24), Pair(15, 25),Pair(27, 40), Pair(50, 60)], 4) == 3\n    assert max_chain_length([Pair(1, 2), Pair(3, 4),Pair(5, 6), Pair(7, 8)], 4) == 4\n    assert max_chain_length([Pair(19, 10), Pair(11, 12),Pair(13, 14), Pair(15, 16), Pair(31, 54)], 5) == 5",
        "expected_answer": "class Pair(object): \n\tdef __init__(self, a, b): \n\t\tself.a = a \n\t\tself.b = b \ndef max_chain_length(arr, n): \n\tmax = 0\n\tmcl = [1 for i in range(n)] \n\tfor i in range(1, n): \n\t\tfor j in range(0, i): \n\t\t\tif (arr[i].a > arr[j].b and\n\t\t\t\tmcl[i] < mcl[j] + 1): \n\t\t\t\tmcl[i] = mcl[j] + 1\n\tfor i in range(n): \n\t\tif (max < mcl[i]): \n\t\t\tmax = mcl[i] \n\treturn max",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_602",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef first_repeated_char(str1):\n    \"\"\" Write a python function to find the first repeated character in a given string. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert first_repeated_char(\"abcabc\") == \"a\"\n    assert first_repeated_char(\"abc\") == \"None\"\n    assert first_repeated_char(\"123123\") == \"1\"",
        "expected_answer": "def first_repeated_char(str1):\n  for index,c in enumerate(str1):\n    if str1[:index+1].count(c) > 1:\n      return c \n  return \"None\"",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_603",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef get_ludic(n):\n    \"\"\" Write a function to get a lucid number smaller than or equal to n. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert get_ludic(10) == [1, 2, 3, 5, 7]\n    assert get_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]\n    assert get_ludic(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]",
        "expected_answer": "def get_ludic(n):\n\tludics = []\n\tfor i in range(1, n + 1):\n\t\tludics.append(i)\n\tindex = 1\n\twhile(index != len(ludics)):\n\t\tfirst_ludic = ludics[index]\n\t\tremove_index = index + first_ludic\n\t\twhile(remove_index < len(ludics)):\n\t\t\tludics.remove(ludics[remove_index])\n\t\t\tremove_index = remove_index + first_ludic - 1\n\t\tindex += 1\n\treturn ludics",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_604",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef reverse_words(s):\n    \"\"\" Write a function to reverse words in a given string. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert reverse_words(\"python program\")==(\"program python\")\n    assert reverse_words(\"java language\")==(\"language java\")\n    assert reverse_words(\"indian man\")==(\"man indian\")",
        "expected_answer": "def reverse_words(s):\n        return ' '.join(reversed(s.split()))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_605",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef prime_num(num):\n    \"\"\" Write a function to check if the given integer is a prime number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert prime_num(13)==True\n    assert prime_num(7)==True\n    assert prime_num(-1010)==False",
        "expected_answer": "def prime_num(num):\n  if num >=1:\n   for i in range(2, num//2):\n     if (num % i) == 0:\n                return False\n     else:\n                return True\n  else:\n          return False",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_606",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef radian_degree(degree):\n    \"\"\" Write a function to convert degrees to radians. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert radian_degree(90)==1.5707963267948966\n    assert radian_degree(60)==1.0471975511965976\n    assert radian_degree(120)==2.0943951023931953",
        "expected_answer": "import math\ndef radian_degree(degree):\n radian = degree*(math.pi/180)\n return radian",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_607",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef find_literals(text, pattern):\n    \"\"\" Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\n    assert find_literals('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)\n    assert find_literals('Hardest choices required strongest will', 'will') == ('will', 35, 39)",
        "expected_answer": "import re\npattern = 'fox'\ntext = 'The quick brown fox jumps over the lazy dog.'\ndef find_literals(text, pattern):\n  match = re.search(pattern, text)\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_608",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef bell_Number(n):\n    \"\"\" Write a python function to find nth bell number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert bell_Number(2) == 2\n    assert bell_Number(3) == 5\n    assert bell_Number(4) == 15",
        "expected_answer": "def bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_609",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef floor_Min(A,B,N):\n    \"\"\" Write a python function to find minimum possible value for the given periodic function. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert floor_Min(10,20,30) == 15\n    assert floor_Min(1,2,1) == 0\n    assert floor_Min(11,10,9) == 9",
        "expected_answer": "def floor_Min(A,B,N):\n    x = max(B - 1,N)\n    return (A*x) // B",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_610",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef remove_kth_element(list1, L):\n    \"\"\" Write a python function to remove the k'th element from a given list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\n    assert remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]\n    assert remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10]",
        "expected_answer": "def remove_kth_element(list1, L):\n    return  list1[:L-1] + list1[L:]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_611",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef max_of_nth(test_list, N):\n    \"\"\" Write a function to find the maximum of nth column from the given tuple list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert max_of_nth([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 19\n    assert max_of_nth([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 10\n    assert max_of_nth([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 1) == 11",
        "expected_answer": "def max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_612",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef merge(lst):\n    \"\"\" Write a python function to merge the first and last elements separately in a list of lists. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\n    assert merge([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]\n    assert merge([['x', 'y','z' ], ['a', 'b','c'], ['m', 'n','o']]) == [['x', 'a', 'm'], ['y', 'b', 'n'],['z', 'c','o']]",
        "expected_answer": "def merge(lst):  \n    return [list(ele) for ele in list(zip(*lst))]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_613",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef maximum_value(test_list):\n    \"\"\" Write a function to find the maximum value in record list as tuple attribute in the given tuple list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert maximum_value([('key1', [3, 4, 5]), ('key2', [1, 4, 2]), ('key3', [9, 3])]) == [('key1', 5), ('key2', 4), ('key3', 9)]\n    assert maximum_value([('key1', [4, 5, 6]), ('key2', [2, 5, 3]), ('key3', [10, 4])]) == [('key1', 6), ('key2', 5), ('key3', 10)]\n    assert maximum_value([('key1', [5, 6, 7]), ('key2', [3, 6, 4]), ('key3', [11, 5])]) == [('key1', 7), ('key2', 6), ('key3', 11)]",
        "expected_answer": "def maximum_value(test_list):\n  res = [(key, max(lst)) for key, lst in test_list]\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_614",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef cummulative_sum(test_list):\n    \"\"\" Write a function to find the cumulative sum of all the values that are present in the given tuple list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\n    assert cummulative_sum([(2, 4), (6, 7, 8), (3, 7)]) == 37\n    assert cummulative_sum([(3, 5), (7, 8, 9), (4, 8)]) == 44",
        "expected_answer": "def cummulative_sum(test_list):\n  res = sum(map(sum, test_list))\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_615",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef average_tuple(nums):\n    \"\"\" Write a function to find average value of the numbers in a given tuple of tuples. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\n    assert average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75]\n    assert average_tuple( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))==[305.0, 342.5, 270.0, 232.5]",
        "expected_answer": "def average_tuple(nums):\n    result = [sum(x) / len(x) for x in zip(*nums)]\n    return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_616",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef tuple_modulo(test_tup1, test_tup2):\n    \"\"\" Write a function to perfom the modulo of tuple elements in the given two tuples. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\n    assert tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)\n    assert tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)",
        "expected_answer": "def tuple_modulo(test_tup1, test_tup2):\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_617",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef min_Jumps(a, b, d):\n    \"\"\" Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert min_Jumps(3,4,11)==3.5\n    assert min_Jumps(3,4,0)==0\n    assert min_Jumps(11,14,11)==1",
        "expected_answer": "def min_Jumps(a, b, d): \n    temp = a \n    a = min(a, b) \n    b = max(temp, b) \n    if (d >= b): \n        return (d + b - 1) / b \n    if (d == 0): \n        return 0\n    if (d == a): \n        return 1\n    else:\n        return 2",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_618",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef div_list(nums1,nums2):\n    \"\"\" Write a function to divide two lists using map and lambda function. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]\n    assert div_list([3,2],[1,4])==[3.0, 0.5]\n    assert div_list([90,120],[50,70])==[1.8, 1.7142857142857142]",
        "expected_answer": "def div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_619",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef move_num(test_str):\n    \"\"\" Write a function to move all the numbers in it to the given string. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert move_num('Avengers124Assemble') == 'AvengersAssemble124'\n    assert move_num('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'",
        "expected_answer": "def move_num(test_str):\n  res = ''\n  dig = ''\n  for ele in test_str:\n    if ele.isdigit():\n      dig += ele\n    else:\n      res += ele\n  res += dig\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_620",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef largest_subset(a, n):\n    \"\"\" Write a function to find the largest subset where each pair is divisible. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert largest_subset([ 1, 3, 6, 13, 17, 18 ], 6) == 4\n    assert largest_subset([10, 5, 3, 15, 20], 5) == 3\n    assert largest_subset([18, 1, 3, 6, 13, 17], 6) == 4",
        "expected_answer": "def largest_subset(a, n):\n\tdp = [0 for i in range(n)]\n\tdp[n - 1] = 1; \n\tfor i in range(n - 2, -1, -1):\n\t\tmxm = 0;\n\t\tfor j in range(i + 1, n):\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\n\t\t\t\tmxm = max(mxm, dp[j])\n\t\tdp[i] = 1 + mxm\n\treturn max(dp)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_621",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef increment_numerics(test_list, K):\n    \"\"\" Write a function to increment the numeric values in the given strings by k. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert increment_numerics([\"MSM\", \"234\", \"is\", \"98\", \"123\", \"best\", \"4\"] , 6) == ['MSM', '240', 'is', '104', '129', 'best', '10']\n    assert increment_numerics([\"Dart\", \"356\", \"is\", \"88\", \"169\", \"Super\", \"6\"] , 12) == ['Dart', '368', 'is', '100', '181', 'Super', '18']\n    assert increment_numerics([\"Flutter\", \"451\", \"is\", \"44\", \"96\", \"Magnificent\", \"12\"] , 33) == ['Flutter', '484', 'is', '77', '129', 'Magnificent', '45']",
        "expected_answer": "def increment_numerics(test_list, K):\n  res = [str(int(ele) + K) if ele.isdigit() else ele for ele in test_list]\n  return res",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_622",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef get_median(arr1, arr2, n):\n    \"\"\" Write a function to find the median of two sorted arrays of same size. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0",
        "expected_answer": "def get_median(arr1, arr2, n):\n  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1:\n    count += 1\n    if i == n:\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elif j == n:\n      m1 = m2\n      m2 = arr1[0]\n      break\n    if arr1[i] <= arr2[j]:\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else:\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n  return (m1 + m2)/2",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_623",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef nth_nums(nums,n):\n    \"\"\" Write a function to find the n-th power of individual elements in a list using lambda function. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n    assert nth_nums([10,20,30],3)==([1000, 8000, 27000])\n    assert nth_nums([12,15],5)==([248832, 759375])",
        "expected_answer": "def nth_nums(nums,n):\n nth_nums = list(map(lambda x: x ** n, nums))\n return nth_nums",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_624",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef is_upper(string):\n    \"\"\" Write a python function to convert the given string to upper case. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert is_upper(\"person\") ==\"PERSON\"\n    assert is_upper(\"final\") == \"FINAL\"\n    assert is_upper(\"Valid\") == \"VALID\"",
        "expected_answer": "def is_upper(string):\n  return (string.upper())",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_625",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef swap_List(newList):\n    \"\"\" Write a python function to interchange first and last elements in a given list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert swap_List([1,2,3]) == [3,2,1]\n    assert swap_List([1,2,3,4,4]) == [4,2,3,4,1]\n    assert swap_List([4,5,6]) == [6,5,4]",
        "expected_answer": "def swap_List(newList): \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp   \n    return newList",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_626",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef triangle_area(r) :\n    \"\"\" Write a python function to find the largest triangle that can be inscribed in the semicircle. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert triangle_area(0) == 0\n    assert triangle_area(-1) == -1\n    assert triangle_area(2) == 4",
        "expected_answer": "def triangle_area(r) :  \n    if r < 0 : \n        return -1\n    return r * r",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_627",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef find_First_Missing(array,start,end):\n    \"\"\" Write a python function to find the smallest missing number from the given array. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find_First_Missing([0,1,2,3],0,3) == 4\n    assert find_First_Missing([0,1,2,6,9],0,4) == 3\n    assert find_First_Missing([2,3,5,8,9],0,4) == 0",
        "expected_answer": "def find_First_Missing(array,start,end): \n    if (start > end): \n        return end + 1\n    if (start != array[start]): \n        return start; \n    mid = int((start + end) / 2) \n    if (array[mid] == mid): \n        return find_First_Missing(array,mid+1,end) \n    return find_First_Missing(array,start,mid)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_628",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef replace_spaces(string):\n    \"\"\" Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\n    assert replace_spaces(\"I am a Programmer\") == 'I%20am%20a%20Programmer'\n    assert replace_spaces(\"I love Coding\") == 'I%20love%20Coding'",
        "expected_answer": "MAX=1000;\ndef replace_spaces(string):\n  string=string.strip()\n  i=len(string)\n  space_count=string.count(' ')\n  new_length = i + space_count*2\n  if new_length > MAX:\n    return -1\n  index = new_length-1\n  string=list(string)\n  for f in range(i-2, new_length-2):\n    string.append('0')\n  for j in range(i-1, 0, -1):\n    if string[j] == ' ':\n      string[index] = '0'\n      string[index-1] = '2'\n      string[index-2] = '%'\n      index=index-3\n    else:\n      string[index] = string[j]\n      index -= 1\n  return ''.join(string)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_629",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef Split(list):\n    \"\"\" Write a python function to find even numbers from a mixed list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert Split([1,2,3,4,5]) == [2,4]\n    assert Split([4,5,6,7,8,0,1]) == [4,6,8,0]\n    assert Split ([8,12,15,19]) == [8,12]",
        "expected_answer": "def Split(list): \n    ev_li = [] \n    for i in list: \n        if (i % 2 == 0): \n            ev_li.append(i)  \n    return ev_li",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_630",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef adjac(ele, sub = []):\n    \"\"\" Write a function to extract all the adjacent coordinates of the given coordinate tuple. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\n    assert get_coordinates((4, 5)) ==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]\n    assert get_coordinates((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]",
        "expected_answer": "def adjac(ele, sub = []): \n  if not ele: \n     yield sub \n  else: \n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \n                for idx in adjac(ele[1:], sub + [j])] \ndef get_coordinates(test_tup):\n  res = list(adjac(test_tup))\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_631",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef replace_spaces(text):\n    \"\"\" Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\n    assert replace_spaces('The Avengers') == 'The_Avengers'\n    assert replace_spaces('Fast and Furious') == 'Fast_and_Furious'",
        "expected_answer": "import re\ntext = 'Python Exercises'\ndef replace_spaces(text):\n  text =text.replace (\" \", \"_\")\n  return (text)\n  text =text.replace (\"_\", \" \")\n  return (text)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_632",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef move_zero(num_list):\n    \"\"\" Write a python function to move all zeroes to the end of the given list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\n    assert move_zero([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]\n    assert move_zero([0,1,0,1,1]) == [1,1,1,0,0]",
        "expected_answer": "def move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return (x)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_633",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef pair_OR_Sum(arr,n) :\n    \"\"\" Write a python function to find the sum of xor of all pairs of numbers in the given array. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert pair_OR_Sum([5,9,7,6],4) == 47\n    assert pair_OR_Sum([7,3,5],3) == 12\n    assert pair_OR_Sum([7,3],2) == 4",
        "expected_answer": "def pair_OR_Sum(arr,n) : \n    ans = 0 \n    for i in range(0,n) :    \n        for j in range(i + 1,n) :   \n            ans = ans + (arr[i] ^ arr[j])          \n    return ans",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_634",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef even_Power_Sum(n):\n    \"\"\" Write a python function to find the sum of fourth power of first n even natural numbers. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert even_Power_Sum(2) == 272\n    assert even_Power_Sum(3) == 1568\n    assert even_Power_Sum(4) == 5664",
        "expected_answer": "def even_Power_Sum(n): \n    sum = 0; \n    for i in range(1,n + 1): \n        j = 2*i; \n        sum = sum + (j*j*j*j); \n    return sum;",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_635",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef heap_sort(iterable):\n    \"\"\" Write a function to push all values into a heap and then pop off the smallest values one at a time. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    assert heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\n    assert heap_sort( [7, 1, 9, 5])==[1,5,7,9]",
        "expected_answer": "import heapq as hq\ndef heap_sort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_636",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef Check_Solution(a,b,c):\n    \"\"\" Write a python function to check if roots of a quadratic equation are reciprocal of each other or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert Check_Solution(2,0,2) == \"Yes\"\n    assert Check_Solution(2,-5,2) == \"Yes\"\n    assert Check_Solution(1,2,3) == \"No\"",
        "expected_answer": "def Check_Solution(a,b,c): \n    if (a == c): \n        return (\"Yes\"); \n    else: \n        return (\"No\");",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_637",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef noprofit_noloss(actual_cost,sale_amount):\n    \"\"\" Write a function to check whether the given amount has no profit and no loss \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert noprofit_noloss(1500,1200)==False\n    assert noprofit_noloss(100,100)==True\n    assert noprofit_noloss(2000,5000)==False",
        "expected_answer": "def noprofit_noloss(actual_cost,sale_amount): \n  if(sale_amount == actual_cost):\n    return True\n  else:\n    return False",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_638",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef wind_chill(v,t):\n    \"\"\" Write a function to calculate wind chill index. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert wind_chill(120,35)==40\n    assert wind_chill(40,70)==86\n    assert wind_chill(10,100)==116",
        "expected_answer": "import math\ndef wind_chill(v,t):\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\n return int(round(windchill, 0))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_639",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef sample_nam(sample_names):\n    \"\"\" Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\n    assert sample_nam([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==10\n    assert sample_nam([\"abcd\", \"Python\", \"abba\", \"aba\"])==6",
        "expected_answer": "def sample_nam(sample_names):\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\n  return len(''.join(sample_names))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_640",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef remove_parenthesis(items):\n    \"\"\" Write a function to remove the parenthesis area in a string. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert remove_parenthesis([\"python (chrome)\"])==(\"python\")\n    assert remove_parenthesis([\"string(.abc)\"])==(\"string\")\n    assert remove_parenthesis([\"alpha(num)\"])==(\"alpha\")",
        "expected_answer": "import re\ndef remove_parenthesis(items):\n for item in items:\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_641",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef is_nonagonal(n):\n    \"\"\" Write a function to find the nth nonagonal number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert is_nonagonal(10) == 325\n    assert is_nonagonal(15) == 750\n    assert is_nonagonal(18) == 1089",
        "expected_answer": "def is_nonagonal(n): \n\treturn int(n * (7 * n - 5) / 2)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_642",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef remove_similar_row(test_list):\n    \"\"\" Write a function to remove similar rows from the given tuple matrix. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert remove_similar_row([[(4, 5), (3, 2)], [(2, 2), (4, 6)], [(3, 2), (4, 5)]] ) == {((2, 2), (4, 6)), ((3, 2), (4, 5))}\n    assert remove_similar_row([[(5, 6), (4, 3)], [(3, 3), (5, 7)], [(4, 3), (5, 6)]] ) == {((4, 3), (5, 6)), ((3, 3), (5, 7))}\n    assert remove_similar_row([[(6, 7), (5, 4)], [(4, 4), (6, 8)], [(5, 4), (6, 7)]] ) =={((4, 4), (6, 8)), ((5, 4), (6, 7))}",
        "expected_answer": "def remove_similar_row(test_list):\n  res = set(sorted([tuple(sorted(set(sub))) for sub in test_list]))\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_643",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef text_match_wordz_middle(text):\n    \"\"\" Write a function that matches a word containing 'z', not at the start or end of the word. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert text_match_wordz_middle(\"pythonzabc.\")==('Found a match!')\n    assert text_match_wordz_middle(\"xyzabc.\")==('Found a match!')\n    assert text_match_wordz_middle(\"  lang  .\")==('Not matched!')",
        "expected_answer": "import re\ndef text_match_wordz_middle(text):\n        patterns = '\\Bz\\B'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_644",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef reverse_Array_Upto_K(input, k):\n    \"\"\" Write a python function to reverse an array upto a given position. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]\n    assert reverse_Array_Upto_K([4, 5, 6, 7], 2) == [5, 4, 6, 7]\n    assert reverse_Array_Upto_K([9, 8, 7, 6, 5],3) == [7, 8, 9, 6, 5]",
        "expected_answer": "def reverse_Array_Upto_K(input, k): \n  return (input[k-1::-1] + input[k:])",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_645",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef get_product(val) :\n    \"\"\" Write a function to find the product of it\u2019s kth index in the given tuples. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665\n    assert find_k_product([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 280\n    assert find_k_product([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 0) == 210",
        "expected_answer": "def get_product(val) : \n\tres = 1\n\tfor ele in val: \n\t\tres *= ele \n\treturn res \ndef find_k_product(test_list, K):\n  res = get_product([sub[K] for sub in test_list])\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_646",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef No_of_cubes(N,K):\n    \"\"\" Write a python function to count number of cubes of size k in a cube of size n. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert No_of_cubes(2,1) == 8\n    assert No_of_cubes(5,2) == 64\n    assert No_of_cubes(1,1) == 1",
        "expected_answer": "def No_of_cubes(N,K):\n    No = 0\n    No = (N - K + 1)\n    No = pow(No, 3)\n    return No",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_647",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef split_upperstring(text):\n    \"\"\" Write a function to split a string at uppercase letters. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert split_upperstring(\"PythonProgramLanguage\")==['Python','Program','Language']\n    assert split_upperstring(\"PythonProgram\")==['Python','Program']\n    assert split_upperstring(\"ProgrammingLanguage\")==['Programming','Language']",
        "expected_answer": "import re\ndef split_upperstring(text):\n return (re.findall('[A-Z][^A-Z]*', text))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_648",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef exchange_elements(lst):\n    \"\"\" Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert exchange_elements([0,1,2,3,4,5])==[1, 0, 3, 2, 5, 4] \n    assert exchange_elements([5,6,7,8,9,10])==[6,5,8,7,10,9] \n    assert exchange_elements([25,35,45,55,75,95])==[35,25,55,45,95,75] ",
        "expected_answer": "from itertools import zip_longest, chain, tee\ndef exchange_elements(lst):\n    lst1, lst2 = tee(iter(lst), 2)\n    return list(chain.from_iterable(zip_longest(lst[1::2], lst[::2])))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_649",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef sum_Range_list(nums, m, n):\n    \"\"\" Write a python function to calculate the sum of the numbers in a list between the indices of a specified range. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert sum_Range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12],8,10) == 29\n    assert sum_Range_list([1,2,3,4,5],1,2) == 5\n    assert sum_Range_list([1,0,1,2,5,6],4,5) == 11",
        "expected_answer": "def sum_Range_list(nums, m, n):                                                                                                                                                                                                \n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += nums[i]                                                                                                                                                                                                  \n    return sum_range",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_650",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef are_Equal(arr1,arr2,n,m):\n    \"\"\" Write a python function to check whether the given two arrays are equal or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert are_Equal([1,2,3],[3,2,1],3,3) == True\n    assert are_Equal([1,1,1],[2,2,2],3,3) == False\n    assert are_Equal([8,9],[4,5,6],2,3) == False",
        "expected_answer": "def are_Equal(arr1,arr2,n,m):\n    if (n != m):\n        return False\n    arr1.sort()\n    arr2.sort()\n    for i in range(0,n - 1):\n        if (arr1[i] != arr2[i]):\n            return False\n    return True",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_651",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef check_subset(test_tup1, test_tup2):\n    \"\"\" Write a function to check if one tuple is a subset of another tuple. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert check_subset((10, 4, 5, 6), (5, 10)) == True\n    assert check_subset((1, 2, 3, 4), (5, 6)) == False\n    assert check_subset((7, 8, 9, 10), (10, 8)) == True",
        "expected_answer": "def check_subset(test_tup1, test_tup2):\n  res = set(test_tup2).issubset(test_tup1)\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_652",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef matrix_to_list(test_list):\n    \"\"\" Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert matrix_to_list([[(4, 5), (7, 8)], [(10, 13), (18, 17)], [(0, 4), (10, 1)]]) == '[(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)]'\n    assert matrix_to_list([[(5, 6), (8, 9)], [(11, 14), (19, 18)], [(1, 5), (11, 2)]]) == '[(5, 8, 11, 19, 1, 11), (6, 9, 14, 18, 5, 2)]'\n    assert matrix_to_list([[(6, 7), (9, 10)], [(12, 15), (20, 21)], [(23, 7), (15, 8)]]) == '[(6, 9, 12, 20, 23, 15), (7, 10, 15, 21, 7, 8)]'",
        "expected_answer": "def matrix_to_list(test_list):\n  temp = [ele for sub in test_list for ele in sub]\n  res = list(zip(*temp))\n  return (str(res))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_653",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef grouping_dictionary(l):\n    \"\"\" Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert grouping_dictionary([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])== ({'yellow': [1, 3], 'blue': [2, 4], 'red': [1]})\n    assert grouping_dictionary([('yellow', 10), ('blue', 20), ('yellow', 30), ('blue', 40), ('red', 10)])== ({'yellow': [10, 30], 'blue': [20, 40], 'red': [10]})\n    assert grouping_dictionary([('yellow', 15), ('blue', 25), ('yellow', 35), ('blue', 45), ('red', 15)])== ({'yellow': [15, 35], 'blue': [25, 45], 'red': [15]})",
        "expected_answer": "from collections import defaultdict\ndef grouping_dictionary(l):\n    d = defaultdict(list)\n    for k, v in l:\n        d[k].append(v)\n    return d",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_654",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef rectangle_perimeter(l,b):\n    \"\"\" Write a function to find the perimeter of a rectangle. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert rectangle_perimeter(10,20)==60\n    assert rectangle_perimeter(10,5)==30\n    assert rectangle_perimeter(4,2)==12",
        "expected_answer": "def rectangle_perimeter(l,b):\n  perimeter=2*(l+b)\n  return perimeter",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_655",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef fifth_Power_Sum(n) :\n    \"\"\" Write a python function to find the sum of fifth power of n natural numbers. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert fifth_Power_Sum(2) == 33\n    assert fifth_Power_Sum(4) == 1300\n    assert fifth_Power_Sum(3) == 276",
        "expected_answer": "def fifth_Power_Sum(n) : \n    sm = 0 \n    for i in range(1,n+1) : \n        sm = sm + (i*i*i*i*i) \n    return sm",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_656",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef find_Min_Sum(a,b,n):\n    \"\"\" Write a python function to find the minimum sum of absolute differences of two arrays. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find_Min_Sum([3,2,1],[2,1,3],3) == 0\n    assert find_Min_Sum([1,2,3],[4,5,6],3) == 9\n    assert find_Min_Sum([4,1,8,7],[2,3,6,5],4) == 6",
        "expected_answer": "def find_Min_Sum(a,b,n): \n    a.sort() \n    b.sort() \n    sum = 0  \n    for i in range(n): \n        sum = sum + abs(a[i] - b[i]) \n    return sum",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_657",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef first_Digit(n) :\n    \"\"\" Write a python function to find the first digit in factorial of a given number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert first_Digit(5) == 1\n    assert first_Digit(10) == 3\n    assert first_Digit(7) == 5",
        "expected_answer": "import math \ndef first_Digit(n) : \n    fact = 1\n    for i in range(2,n + 1) : \n        fact = fact * i \n        while (fact % 10 == 0) :  \n            fact = int(fact / 10) \n    while (fact >= 10) : \n        fact = int(fact / 10) \n    return math.floor(fact)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_658",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef max_occurrences(list1):\n    \"\"\" Write a function to find the item with maximum occurrences in a given list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2])==2\n    assert max_occurrences([1, 3,5, 7,1, 3,13, 15, 17,5, 7,9,1, 11])==1\n    assert max_occurrences([1, 2, 3,2, 4, 5,1, 1, 1])==1",
        "expected_answer": "def max_occurrences(list1):\n    max_val = 0\n    result = list1[0] \n    for i in list1:\n        occu = list1.count(i)\n        if occu > max_val:\n            max_val = occu\n            result = i \n    return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_659",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef Repeat(x):\n    \"\"\" Write a python function to print duplicants from a list of integers. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert Repeat([10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20]) == [20, 30, -20, 60]\n    assert Repeat([-1, 1, -1, 8]) == [-1]\n    assert Repeat([1, 2, 3, 1, 2,]) == [1, 2]",
        "expected_answer": "def Repeat(x): \n    _size = len(x) \n    repeated = [] \n    for i in range(_size): \n        k = i + 1\n        for j in range(k, _size): \n            if x[i] == x[j] and x[i] not in repeated: \n                repeated.append(x[i]) \n    return repeated",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_660",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef find_Points(l1,r1,l2,r2):\n    \"\"\" Write a python function to choose points from two ranges such that no point lies in both the ranges. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find_Points(5,10,1,5) == (1,10)\n    assert find_Points(3,5,7,9) == (3,9)\n    assert find_Points(1,5,2,8) == (1,8)",
        "expected_answer": "def find_Points(l1,r1,l2,r2): \n    x = min(l1,l2) if (l1 != l2) else -1\n    y = max(r1,r2) if (r1 != r2) else -1\n    return (x,y)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_661",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef max_sum_of_three_consecutive(arr, n):\n    \"\"\" Write a function to find the maximum sum that can be formed which has no three consecutive elements present. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert max_sum_of_three_consecutive([100, 1000, 100, 1000, 1], 5) == 2101\n    assert max_sum_of_three_consecutive([3000, 2000, 1000, 3, 10], 5) == 5013\n    assert max_sum_of_three_consecutive([1, 2, 3, 4, 5, 6, 7, 8], 8) == 27",
        "expected_answer": "def max_sum_of_three_consecutive(arr, n): \n\tsum = [0 for k in range(n)] \n\tif n >= 1: \n\t\tsum[0] = arr[0] \n\tif n >= 2: \n\t\tsum[1] = arr[0] + arr[1] \n\tif n > 2: \n\t\tsum[2] = max(sum[1], max(arr[1] + arr[2], arr[0] + arr[2])) \n\tfor i in range(3, n): \n\t\tsum[i] = max(max(sum[i-1], sum[i-2] + arr[i]), arr[i] + arr[i-1] + sum[i-3]) \n\treturn sum[n-1]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_662",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef sorted_dict(dict1):\n    \"\"\" Write a function to sort a list in a dictionary. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert sorted_dict({'n1': [2, 3, 1], 'n2': [5, 1, 2], 'n3': [3, 2, 4]})=={'n1': [1, 2, 3], 'n2': [1, 2, 5], 'n3': [2, 3, 4]}\n    assert sorted_dict({'n1': [25,37,41], 'n2': [41,54,63], 'n3': [29,38,93]})=={'n1': [25, 37, 41], 'n2': [41, 54, 63], 'n3': [29, 38, 93]}\n    assert sorted_dict({'n1': [58,44,56], 'n2': [91,34,58], 'n3': [100,200,300]})=={'n1': [44, 56, 58], 'n2': [34, 58, 91], 'n3': [100, 200, 300]}",
        "expected_answer": "def sorted_dict(dict1):\n  sorted_dict = {x: sorted(y) for x, y in dict1.items()}\n  return sorted_dict",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_663",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef find_max_val(n, x, y):\n    \"\"\" Write a function to find the largest possible value of k such that k modulo x is y. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find_max_val(15, 10, 5) == 15\n    assert find_max_val(187, 10, 5) == 185\n    assert find_max_val(16, 11, 1) == 12",
        "expected_answer": "import sys \ndef find_max_val(n, x, y): \n\tans = -sys.maxsize \n\tfor k in range(n + 1): \n\t\tif (k % x == y): \n\t\t\tans = max(ans, k) \n\treturn (ans if (ans >= 0 and\n\t\t\t\t\tans <= n) else -1)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_664",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef average_Even(n) :\n    \"\"\" Write a python function to find the average of even numbers till a given even number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert average_Even(2) == 2\n    assert average_Even(4) == 3\n    assert average_Even(100) == 51",
        "expected_answer": "def average_Even(n) : \n    if (n% 2!= 0) : \n        return (\"Invalid Input\") \n        return -1  \n    sm = 0\n    count = 0\n    while (n>= 2) : \n        count = count+1\n        sm = sm+n \n        n = n-2\n    return sm // count",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_665",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef move_last(num_list):\n    \"\"\" Write a python function to shift first element to the end of given list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert move_last([1,2,3,4]) == [2,3,4,1]\n    assert move_last([2,3,4,1,5,0]) == [3,4,1,5,0,2]\n    assert move_last([5,4,3,2,1]) == [4,3,2,1,5]",
        "expected_answer": "def move_last(num_list):\n    a = [num_list[0] for i in range(num_list.count(num_list[0]))]\n    x = [ i for i in num_list if i != num_list[0]]\n    x.extend(a)\n    return (x)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_666",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef count_char(string,char):\n    \"\"\" Write a function to count occurrence of a character in a string. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert count_char(\"Python\",'o')==1\n    assert count_char(\"little\",'t')==2\n    assert count_char(\"assert\",'s')==2",
        "expected_answer": "def count_char(string,char):\n count = 0\n for i in range(len(string)):\n    if(string[i] == char):\n        count = count + 1\n return count",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_667",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef Check_Vow(string, vowels):\n    \"\"\" Write a python function to count number of vowels in the string. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert Check_Vow('corner','AaEeIiOoUu') == 2\n    assert Check_Vow('valid','AaEeIiOoUu') == 2\n    assert Check_Vow('true','AaEeIiOoUu') ==2",
        "expected_answer": "def Check_Vow(string, vowels): \n    final = [each for each in string if each in vowels] \n    return(len(final))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_668",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef replace(string, char):\n    \"\"\" Write a python function to replace multiple occurence of character by single. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert replace('peep','e') == 'pep'\n    assert replace('Greek','e') == 'Grek'\n    assert replace('Moon','o') == 'Mon'",
        "expected_answer": "import re \ndef replace(string, char): \n    pattern = char + '{2,}'\n    string = re.sub(pattern, char, string) \n    return string",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_669",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef check_IP(Ip):\n    \"\"\" Write a function to check whether the given ip address is valid or not using regex. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert check_IP(\"192.168.0.1\") == 'Valid IP address'\n    assert check_IP(\"110.234.52.124\") == 'Valid IP address'\n    assert check_IP(\"366.1.2.2\") == 'Invalid IP address'",
        "expected_answer": "import re \nregex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'''\ndef check_IP(Ip): \n\tif(re.search(regex, Ip)): \n\t\treturn (\"Valid IP address\") \n\telse: \n\t\treturn (\"Invalid IP address\")",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_670",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef decreasing_trend(nums):\n    \"\"\" Write a python function to check whether a sequence of numbers has a decreasing trend or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert decreasing_trend([-4,-3,-2,-1]) == True\n    assert decreasing_trend([1,2,3]) == True\n    assert decreasing_trend([3,2,1]) == False",
        "expected_answer": "def decreasing_trend(nums):\n    if (sorted(nums)== nums):\n        return True\n    else:\n        return False",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_671",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef get_Pos_Of_Right_most_Set_Bit(n):\n    \"\"\" Write a python function to set the right most unset bit. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert set_Right_most_Unset_Bit(21) == 23\n    assert set_Right_most_Unset_Bit(11) == 15\n    assert set_Right_most_Unset_Bit(15) == 15",
        "expected_answer": "import math \ndef get_Pos_Of_Right_most_Set_Bit(n): \n    return int(math.log2(n&-n)+1)   \ndef set_Right_most_Unset_Bit(n): \n    if (n == 0): \n        return 1\n    if ((n & (n + 1)) == 0):     \n        return n \n    pos = get_Pos_Of_Right_most_Set_Bit(~n)      \n    return ((1 << (pos - 1)) | n)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_672",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef max_of_three(num1,num2,num3):\n    \"\"\" Write a function to find maximum of three numbers. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert max_of_three(10,20,30)==30\n    assert max_of_three(55,47,39)==55\n    assert max_of_three(10,49,30)==49",
        "expected_answer": "def max_of_three(num1,num2,num3): \n    if (num1 >= num2) and (num1 >= num3):\n       lnum = num1\n    elif (num2 >= num1) and (num2 >= num3):\n       lnum = num2\n    else:\n       lnum = num3\n    return lnum",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_673",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef convert(list):\n    \"\"\" Write a python function to convert a list of multiple integers into a single integer. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert convert([1,2,3]) == 123\n    assert convert([4,5,6]) == 456\n    assert convert([7,8,9]) == 789",
        "expected_answer": "def convert(list): \n    s = [str(i) for i in list] \n    res = int(\"\".join(s))  \n    return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_674",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef remove_duplicate(string):\n    \"\"\" Write a function to remove duplicate words from a given string using collections module. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert remove_duplicate(\"Python Exercises Practice Solution Exercises\")==(\"Python Exercises Practice Solution\")\n    assert remove_duplicate(\"Python Exercises Practice Solution Python\")==(\"Python Exercises Practice Solution\")\n    assert remove_duplicate(\"Python Exercises Practice Solution Practice\")==(\"Python Exercises Practice Solution\")",
        "expected_answer": "from collections import OrderedDict\ndef remove_duplicate(string):\n  result = ' '.join(OrderedDict((w,w) for w in string.split()).keys())\n  return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_675",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef sum_nums(x, y,m,n):\n    \"\"\" Write a function to add two integers. however, if the sum is between the given range it will return 20. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert sum_nums(2,10,11,20)==20\n    assert sum_nums(15,17,1,10)==32\n    assert sum_nums(10,15,5,30)==20",
        "expected_answer": "def sum_nums(x, y,m,n):\n    sum_nums= x + y\n    if sum_nums in range(m, n):\n        return 20\n    else:\n        return sum_nums",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_676",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef remove_extra_char(text1):\n    \"\"\" Write a function to remove everything except alphanumeric characters from the given string by using regex. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert remove_extra_char('**//Google Android// - 12. ') == 'GoogleAndroid12'\n    assert remove_extra_char('****//Google Flutter//*** - 36. ') == 'GoogleFlutter36'\n    assert remove_extra_char('**//Google Firebase// - 478. ') == 'GoogleFirebase478'",
        "expected_answer": "import re\ndef remove_extra_char(text1):\n  pattern = re.compile('[\\W_]+')\n  return (pattern.sub('', text1))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_677",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef validity_triangle(a,b,c):\n    \"\"\" Write a function to check if the triangle is valid or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert validity_triangle(60,50,90)==False\n    assert validity_triangle(45,75,60)==True\n    assert validity_triangle(30,50,100)==True",
        "expected_answer": "def validity_triangle(a,b,c):\n total = a + b + c\n if total == 180:\n    return True\n else:\n    return False",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_678",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef remove_spaces(str1):\n    \"\"\" Write a python function to remove spaces from a given string. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert remove_spaces(\"a b c\") == \"abc\"\n    assert remove_spaces(\"1 2 3\") == \"123\"\n    assert remove_spaces(\" b c\") == \"bc\"",
        "expected_answer": "def remove_spaces(str1):\n  str1 = str1.replace(' ','')\n  return str1",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_679",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef access_key(ditionary,key):\n    \"\"\" Write a function to access dictionary key\u2019s element by index. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert access_key({'physics': 80, 'math': 90, 'chemistry': 86},0)== 'physics'\n    assert access_key({'python':10, 'java': 20, 'C++':30},2)== 'C++'\n    assert access_key({'program':15,'computer':45},1)== 'computer'",
        "expected_answer": "def access_key(ditionary,key):\n  return list(ditionary)[key]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_680",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef increasing_trend(nums):\n    \"\"\" Write a python function to check whether a sequence of numbers has an increasing trend or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert increasing_trend([1,2,3,4]) == True\n    assert increasing_trend([4,3,2,1]) == False\n    assert increasing_trend([0,1,4,9]) == True",
        "expected_answer": "def increasing_trend(nums):\n    if (sorted(nums)== nums):\n        return True\n    else:\n        return False",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_681",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef smallest_Divisor(n):\n    \"\"\" Write a python function to find the smallest prime divisor of a number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert smallest_Divisor(10) == 2\n    assert smallest_Divisor(25) == 5\n    assert smallest_Divisor(31) == 31",
        "expected_answer": "def smallest_Divisor(n): \n    if (n % 2 == 0): \n        return 2; \n    i = 3;  \n    while (i*i <= n): \n        if (n % i == 0): \n            return i; \n        i += 2; \n    return n;",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_682",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef mul_list(nums1,nums2):\n    \"\"\" Write a function to multiply two lists using map and lambda function. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert mul_list([1, 2, 3],[4,5,6])==[4,10,18]\n    assert mul_list([1,2],[3,4])==[3,8]\n    assert mul_list([90,120],[50,70])==[4500,8400]",
        "expected_answer": "def mul_list(nums1,nums2):\n  result = map(lambda x, y: x * y, nums1, nums2)\n  return list(result)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_683",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef sum_Square(n) :\n    \"\"\" Write a python function to check whether the given number can be represented by sum of two squares or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert sum_Square(25) == True\n    assert sum_Square(24) == False\n    assert sum_Square(17) == True",
        "expected_answer": "def sum_Square(n) : \n    i = 1 \n    while i*i <= n : \n        j = 1\n        while (j*j <= n) : \n            if (i*i+j*j == n) : \n                return True\n            j = j+1\n        i = i+1     \n    return False",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_684",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef count_Char(str,x):\n    \"\"\" Write a python function to count occurences of a character in a repeated string. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert count_Char(\"abcac\",'a') == 4\n    assert count_Char(\"abca\",'c') == 2\n    assert count_Char(\"aba\",'a') == 7",
        "expected_answer": "def count_Char(str,x): \n    count = 0\n    for i in range(len(str)):  \n        if (str[i] == x) : \n            count += 1\n    n = 10\n    repititions = n // len(str)  \n    count = count * repititions  \n    l = n % len(str)  \n    for i in range(l): \n        if (str[i] == x):  \n            count += 1\n    return count",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_685",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef sum_Of_Primes(n):\n    \"\"\" Write a python function to find sum of prime numbers between 1 to n. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert sum_Of_Primes(10) == 17\n    assert sum_Of_Primes(20) == 77\n    assert sum_Of_Primes(5) == 10",
        "expected_answer": "def sum_Of_Primes(n): \n    prime = [True] * (n + 1)  \n    p = 2\n    while p * p <= n: \n        if prime[p] == True:  \n            i = p * 2\n            while i <= n: \n                prime[i] = False\n                i += p \n        p += 1    \n    sum = 0\n    for i in range (2,n + 1): \n        if(prime[i]): \n            sum += i \n    return sum",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_686",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef freq_element(test_tup):\n    \"\"\" Write a function to find the frequency of each element in the given list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert freq_element((4, 5, 4, 5, 6, 6, 5, 5, 4) ) == '{4: 3, 5: 4, 6: 2}'\n    assert freq_element((7, 8, 8, 9, 4, 7, 6, 5, 4) ) == '{7: 2, 8: 2, 9: 1, 4: 2, 6: 1, 5: 1}'\n    assert freq_element((1, 4, 3, 1, 4, 5, 2, 6, 2, 7) ) == '{1: 2, 4: 2, 3: 1, 5: 1, 2: 2, 6: 1, 7: 1}'",
        "expected_answer": "from collections import defaultdict \ndef freq_element(test_tup):\n  res = defaultdict(int)\n  for ele in test_tup:\n    res[ele] += 1\n  return (str(dict(res)))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_687",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef recur_gcd(a, b):\n    \"\"\" Write a function to find the greatest common divisor (gcd) of two integers by using recursion. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert recur_gcd(12,14) == 2\n    assert recur_gcd(13,17) == 1\n    assert recur_gcd(9, 3) == 3",
        "expected_answer": "def recur_gcd(a, b):\n\tlow = min(a, b)\n\thigh = max(a, b)\n\tif low == 0:\n\t\treturn high\n\telif low == 1:\n\t\treturn 1\n\telse:\n\t\treturn recur_gcd(low, high%low)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_688",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef len_complex(a,b):\n    \"\"\" Write a function to get the length of a complex number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert len_complex(3,4)==5.0\n    assert len_complex(9,10)==13.45362404707371\n    assert len_complex(7,9)==11.40175425099138",
        "expected_answer": "import cmath\ndef len_complex(a,b):\n  cn=complex(a,b)\n  length=abs(cn)\n  return length",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_689",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef min_jumps(arr, n):\n    \"\"\" ## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert min_jumps([1, 3, 6, 1, 0, 9], 6) == 3\n    assert min_jumps([1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9], 11) == 3\n    assert min_jumps([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 11) == 10",
        "expected_answer": "def min_jumps(arr, n):\n\tjumps = [0 for i in range(n)]\n\tif (n == 0) or (arr[0] == 0):\n\t\treturn float('inf')\n\tjumps[0] = 0\n\tfor i in range(1, n):\n\t\tjumps[i] = float('inf')\n\t\tfor j in range(i):\n\t\t\tif (i <= j + arr[j]) and (jumps[j] != float('inf')):\n\t\t\t\tjumps[i] = min(jumps[i], jumps[j] + 1)\n\t\t\t\tbreak\n\treturn jumps[n-1]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_690",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef mul_consecutive_nums(nums):\n    \"\"\" Write a function to multiply consecutive numbers of a given list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert mul_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[1, 3, 12, 16, 20, 30, 42]\n    assert mul_consecutive_nums([4, 5, 8, 9, 6, 10])==[20, 40, 72, 54, 60]\n    assert mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 6, 12, 20, 30, 42, 56, 72, 90]",
        "expected_answer": "def mul_consecutive_nums(nums):\n    result = [b*a for a, b in zip(nums[:-1], nums[1:])]\n    return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_691",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef group_element(test_list):\n    \"\"\" Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert group_element([(6, 5), (2, 7), (2, 5), (8, 7), (9, 8), (3, 7)]) == {5: [6, 2], 7: [2, 8, 3], 8: [9]}\n    assert group_element([(7, 6), (3, 8), (3, 6), (9, 8), (10, 9), (4, 8)]) == {6: [7, 3], 8: [3, 9, 4], 9: [10]}\n    assert group_element([(8, 7), (4, 9), (4, 7), (10, 9), (11, 10), (5, 9)]) == {7: [8, 4], 9: [4, 10, 5], 10: [11]}",
        "expected_answer": "from itertools import groupby \ndef group_element(test_list):\n  res = dict()\n  for key, val in groupby(sorted(test_list, key = lambda ele: ele[1]), key = lambda ele: ele[1]):\n    res[key] = [ele[0] for ele in val] \n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_692",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef last_Two_Digits(N):\n    \"\"\" Write a python function to find the last two digits in factorial of a given number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert last_Two_Digits(7) == 40\n    assert last_Two_Digits(5) == 20\n    assert last_Two_Digits(2) == 2",
        "expected_answer": "def last_Two_Digits(N): \n    if (N >= 10): \n        return\n    fac = 1\n    for i in range(1,N + 1): \n        fac = (fac * i) % 100\n    return (fac)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_693",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef remove_multiple_spaces(text1):\n    \"\"\" Write a function to remove multiple spaces in a string by using regex. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert remove_multiple_spaces('Google      Assistant') == 'Google Assistant'\n    assert remove_multiple_spaces('Quad      Core') == 'Quad Core'\n    assert remove_multiple_spaces('ChromeCast      Built-in') == 'ChromeCast Built-in'",
        "expected_answer": "import re\ndef remove_multiple_spaces(text1):\n  return (re.sub(' +',' ',text1))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_694",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef extract_unique(test_dict):\n    \"\"\" Write a function to extract unique values from the given dictionary values. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert extract_unique({'msm' : [5, 6, 7, 8],'is' : [10, 11, 7, 5],'best' : [6, 12, 10, 8],'for' : [1, 2, 5]} ) == [1, 2, 5, 6, 7, 8, 10, 11, 12]\n    assert extract_unique({'Built' : [7, 1, 9, 4],'for' : [11, 21, 36, 14, 9],'ISP' : [4, 1, 21, 39, 47],'TV' : [1, 32, 38]} ) == [1, 4, 7, 9, 11, 14, 21, 32, 36, 38, 39, 47]\n    assert extract_unique({'F' : [11, 13, 14, 17],'A' : [12, 11, 15, 18],'N' : [19, 21, 15, 36],'G' : [37, 36, 35]}) == [11, 12, 13, 14, 15, 17, 18, 19, 21, 35, 36, 37]",
        "expected_answer": "def extract_unique(test_dict):\n  res = list(sorted({ele for val in test_dict.values() for ele in val}))\n  return res",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_695",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef check_greater(test_tup1, test_tup2):\n    \"\"\" Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert check_greater((10, 4, 5), (13, 5, 18)) == True\n    assert check_greater((1, 2, 3), (2, 1, 4)) == False\n    assert check_greater((4, 5, 6), (5, 6, 7)) == True",
        "expected_answer": "def check_greater(test_tup1, test_tup2):\n  res = all(x < y for x, y in zip(test_tup1, test_tup2))\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_696",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef zip_list(list1,list2):\n    \"\"\" Write a function to zip two given lists of lists. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert zip_list([[1, 3], [5, 7], [9, 11]] ,[[2, 4], [6, 8], [10, 12, 14]] )==[[1, 3, 2, 4], [5, 7, 6, 8], [9, 11, 10, 12, 14]]\n    assert zip_list([[1, 2], [3, 4], [5, 6]] ,[[7, 8], [9, 10], [11, 12]] )==[[1, 2, 7, 8], [3, 4, 9, 10], [5, 6, 11, 12]]\n    assert zip_list([['a','b'],['c','d']] , [['e','f'],['g','h']] )==[['a','b','e','f'],['c','d','g','h']]",
        "expected_answer": "def zip_list(list1,list2):  \n result = list(map(list.__add__, list1, list2)) \n return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_697",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef count_even(array_nums):\n    \"\"\" Write a function to find number of even elements in the given list using lambda function. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert count_even([1, 2, 3, 5, 7, 8, 9, 10])==3\n    assert count_even([10,15,14,13,-18,12,-20])==5\n    assert count_even([1, 2, 4, 8, 9])==3",
        "expected_answer": "def count_even(array_nums):\n   count_even = len(list(filter(lambda x: (x%2 == 0) , array_nums)))\n   return count_even",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_698",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef sort_dict_item(test_dict):\n    \"\"\" Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert sort_dict_item({(5, 6) : 3, (2, 3) : 9, (8, 4): 10, (6, 4): 12} ) == {(2, 3): 9, (6, 4): 12, (5, 6): 3, (8, 4): 10}\n    assert sort_dict_item({(6, 7) : 4, (3, 4) : 10, (9, 5): 11, (7, 5): 13} ) == {(3, 4): 10, (7, 5): 13, (6, 7): 4, (9, 5): 11}\n    assert sort_dict_item({(7, 8) : 5, (4, 5) : 11, (10, 6): 12, (8, 6): 14} ) == {(4, 5): 11, (8, 6): 14, (7, 8): 5, (10, 6): 12}",
        "expected_answer": "def sort_dict_item(test_dict):\n  res = {key: test_dict[key] for key in sorted(test_dict.keys(), key = lambda ele: ele[1] * ele[0])}\n  return  (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_699",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef min_Swaps(str1,str2) :\n    \"\"\" Write a python function to find the minimum number of swaps required to convert one binary string to another. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert min_Swaps(\"1101\",\"1110\") == 1\n    assert min_Swaps(\"1111\",\"0100\") == \"Not Possible\"\n    assert min_Swaps(\"1110000\",\"0001101\") == 3",
        "expected_answer": "def min_Swaps(str1,str2) : \n    count = 0\n    for i in range(len(str1)) : \n        if str1[i] != str2[i] : \n            count += 1\n    if count % 2 == 0 : \n        return (count // 2) \n    else : \n        return (\"Not Possible\")",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_700",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef count_range_in_list(li, min, max):\n    \"\"\" Write a function to count the number of elements in a list which are within a specific range. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert count_range_in_list([10,20,30,40,40,40,70,80,99],40,100)==6\n    assert count_range_in_list(['a','b','c','d','e','f'],'a','e')==5\n    assert count_range_in_list([7,8,9,15,17,19,45],15,20)==3",
        "expected_answer": "def count_range_in_list(li, min, max):\n\tctr = 0\n\tfor x in li:\n\t\tif min <= x <= max:\n\t\t\tctr += 1\n\treturn ctr",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_701",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef equilibrium_index(arr):\n    \"\"\" Write a function to find the equilibrium index of the given array. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert equilibrium_index([1, 2, 3, 4, 1, 2, 3]) == 3\n    assert equilibrium_index([-7, 1, 5, 2, -4, 3, 0]) == 3\n    assert equilibrium_index([1, 2, 3]) == -1",
        "expected_answer": "def equilibrium_index(arr):\n  total_sum = sum(arr)\n  left_sum=0\n  for i, num in enumerate(arr):\n    total_sum -= num\n    if left_sum == total_sum:\n      return i\n    left_sum += num\n  return -1",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_702",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef find_ind(key, i, n,\n    \"\"\" Write a function to find the minimum number of elements that should be removed such that amax-amin<=k. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert removals([1, 3, 4, 9, 10,11, 12, 17, 20], 9, 4) == 5\n    assert removals([1, 5, 6, 2, 8], 5, 2) == 3\n    assert removals([1, 2, 3 ,4, 5, 6], 6, 3) == 2",
        "expected_answer": "def find_ind(key, i, n, \n\t\t\tk, arr):\n\tind = -1\n\tstart = i + 1\n\tend = n - 1;\n\twhile (start < end):\n\t\tmid = int(start +\n\t\t\t\t(end - start) / 2)\n\t\tif (arr[mid] - key <= k):\n\t\t\tind = mid\n\t\t\tstart = mid + 1\n\t\telse:\n\t\t\tend = mid\n\treturn ind\ndef removals(arr, n, k):\n\tans = n - 1\n\tarr.sort()\n\tfor i in range(0, n):\n\t\tj = find_ind(arr[i], i, \n\t\t\t\t\tn, k, arr)\n\t\tif (j != -1):\n\t\t\tans = min(ans, n -\n\t\t\t\t\t\t(j - i + 1))\n\treturn ans",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_703",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef is_key_present(d,x):\n    \"\"\" Write a function to check whether the given key is present in the dictionary or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},5)==True\n    assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},6)==True\n    assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},10)==False",
        "expected_answer": "def is_key_present(d,x):\n  if x in d:\n    return True\n  else:\n     return False",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_704",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef harmonic_sum(n):\n    \"\"\" Write a function to calculate the harmonic sum of n-1. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert harmonic_sum(10)==2.9289682539682538\n    assert harmonic_sum(4)==2.083333333333333\n    assert harmonic_sum(7)==2.5928571428571425 ",
        "expected_answer": "def harmonic_sum(n):\n  if n < 2:\n    return 1\n  else:\n    return 1 / n + (harmonic_sum(n - 1))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_705",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef sort_sublists(list1):\n    \"\"\" Write a function to sort a list of lists by length and value. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert sort_sublists([[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]])==[[0], [2], [0, 7], [1, 3], [9, 11], [13, 15, 17]]\n    assert sort_sublists([[1], [2, 3], [4, 5, 6], [7], [10, 11]])==[[1], [7], [2, 3], [10, 11], [4, 5, 6]]\n    assert sort_sublists([[\"python\"],[\"java\",\"C\",\"C++\"],[\"DBMS\"],[\"SQL\",\"HTML\"]])==[['DBMS'], ['python'], ['SQL', 'HTML'], ['java', 'C', 'C++']]",
        "expected_answer": "def sort_sublists(list1):\n      list1.sort()  \n      list1.sort(key=len)\n      return  list1",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_706",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef is_subset(arr1, m, arr2, n):\n    \"\"\" Write a function to find whether an array is subset of another array. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert is_subset([11, 1, 13, 21, 3, 7], 6, [11, 3, 7, 1], 4) == True\n    assert is_subset([1, 2, 3, 4, 5, 6], 6, [1, 2, 4], 3) == True\n    assert is_subset([10, 5, 2, 23, 19], 5, [19, 5, 3], 3) == False",
        "expected_answer": "def is_subset(arr1, m, arr2, n): \n\thashset = set() \n\tfor i in range(0, m): \n\t\thashset.add(arr1[i]) \n\tfor i in range(0, n): \n\t\tif arr2[i] in hashset: \n\t\t\tcontinue\n\t\telse: \n\t\t\treturn False\n\treturn True",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_707",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef count_Set_Bits(n) :\n    \"\"\" Write a python function to count the total set bits from 1 to n. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert count_Set_Bits(16) == 33\n    assert count_Set_Bits(2) == 2\n    assert count_Set_Bits(14) == 28",
        "expected_answer": "def count_Set_Bits(n) :  \n    n += 1; \n    powerOf2 = 2;   \n    cnt = n // 2;  \n    while (powerOf2 <= n) : \n        totalPairs = n // powerOf2;  \n        cnt += (totalPairs // 2) * powerOf2;  \n        if (totalPairs & 1) : \n            cnt += (n % powerOf2) \n        else : \n            cnt += 0\n        powerOf2 <<= 1;    \n    return cnt;",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_708",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef Convert(string):\n    \"\"\" Write a python function to convert a string to a list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert Convert('python program') == ['python','program']\n    assert Convert('Data Analysis') ==['Data','Analysis']\n    assert Convert('Hadoop Training') == ['Hadoop','Training']",
        "expected_answer": "def Convert(string): \n    li = list(string.split(\" \")) \n    return li",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_709",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef get_unique(test_list):\n    \"\"\" Write a function to count unique keys for each value present in the tuple. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert get_unique([(3, 4), (1, 2), (2, 4), (8, 2), (7, 2), (8, 1), (9, 1), (8, 4), (10, 4)] ) == '{4: 4, 2: 3, 1: 2}'\n    assert get_unique([(4, 5), (2, 3), (3, 5), (9, 3), (8, 3), (9, 2), (10, 2), (9, 5), (11, 5)] ) == '{5: 4, 3: 3, 2: 2}'\n    assert get_unique([(6, 5), (3, 4), (2, 6), (11, 1), (8, 22), (8, 11), (4, 3), (14, 3), (11, 6)] ) == '{5: 1, 4: 1, 6: 2, 1: 1, 22: 1, 11: 1, 3: 2}'",
        "expected_answer": "from collections import defaultdict \ndef get_unique(test_list):\n  res = defaultdict(list)\n  for sub in test_list:\n    res[sub[1]].append(sub[0])\n  res = dict(res)\n  res_dict = dict()\n  for key in res:\n    res_dict[key] = len(list(set(res[key])))\n  return (str(res_dict))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_710",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef front_and_rear(test_tup):\n    \"\"\" Write a function to access the initial and last data of the given tuple record. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert front_and_rear((10, 4, 5, 6, 7)) == (10, 7)\n    assert front_and_rear((1, 2, 3, 4, 5)) == (1, 5)\n    assert front_and_rear((6, 7, 8, 9, 10)) == (6, 10)",
        "expected_answer": "def front_and_rear(test_tup):\n  res = (test_tup[0], test_tup[-1])\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_711",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef product_Equal(n):\n    \"\"\" Write a python function to check whether the product of digits of a number at even and odd places is equal or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert product_Equal(2841) == True\n    assert product_Equal(1234) == False\n    assert product_Equal(1212) == False",
        "expected_answer": "def product_Equal(n): \n    if n < 10: \n        return False\n    prodOdd = 1; prodEven = 1\n    while n > 0: \n        digit = n % 10\n        prodOdd *= digit \n        n = n//10\n        if n == 0: \n            break; \n        digit = n % 10\n        prodEven *= digit \n        n = n//10\n    if prodOdd == prodEven: \n        return True\n    return False",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_712",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef remove_duplicate(list1):\n    \"\"\" Write a function to remove duplicates from a list of lists. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert remove_duplicate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[[10, 20], [30, 56, 25], [33], [40]] \n    assert remove_duplicate([\"a\", \"b\", \"a\", \"c\", \"c\"] )==[\"a\", \"b\", \"c\"]\n    assert remove_duplicate([1, 3, 5, 6, 3, 5, 6, 1] )==[1, 3, 5, 6]",
        "expected_answer": "import itertools\ndef remove_duplicate(list1):\n list.sort(list1)\n remove_duplicate = list(list1 for list1,_ in itertools.groupby(list1))\n return remove_duplicate",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_713",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef check_valid(test_tup):\n    \"\"\" Write a function to check if the given tuple contains all valid values or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert check_valid((True, True, True, True) ) == True\n    assert check_valid((True, False, True, True) ) == False\n    assert check_valid((True, True, True, True) ) == True",
        "expected_answer": "def check_valid(test_tup):\n  res = not any(map(lambda ele: not ele, test_tup))\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_714",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef count_Fac(n):\n    \"\"\" Write a python function to count the number of distinct power of prime factor of given number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert count_Fac(24) == 3\n    assert count_Fac(12) == 2\n    assert count_Fac(4) == 1",
        "expected_answer": "def count_Fac(n):  \n    m = n \n    count = 0\n    i = 2\n    while((i * i) <= m): \n        total = 0\n        while (n % i == 0): \n            n /= i \n            total += 1 \n        temp = 0\n        j = 1\n        while((temp + j) <= total): \n            temp += j \n            count += 1\n            j += 1 \n        i += 1\n    if (n != 1): \n        count += 1 \n    return count",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_715",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef str_to_tuple(test_str):\n    \"\"\" Write a function to convert the given string of integers into a tuple. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert str_to_tuple(\"1, -5, 4, 6, 7\") == (1, -5, 4, 6, 7)\n    assert str_to_tuple(\"1, 2, 3, 4, 5\") == (1, 2, 3, 4, 5)\n    assert str_to_tuple(\"4, 6, 9, 11, 13, 14\") == (4, 6, 9, 11, 13, 14)",
        "expected_answer": "def str_to_tuple(test_str):\n  res = tuple(map(int, test_str.split(', ')))\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_716",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef rombus_perimeter(a):\n    \"\"\" Write a function to find the perimeter of a rombus. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert rombus_perimeter(10)==40\n    assert rombus_perimeter(5)==20\n    assert rombus_perimeter(4)==16",
        "expected_answer": "def rombus_perimeter(a):\n  perimeter=4*a\n  return perimeter",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_717",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef sd_calc(data):\n    \"\"\" Write a function to calculate the standard deviation. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert sd_calc([4, 2, 5, 8, 6])== 2.23606797749979\n    assert sd_calc([1,2,3,4,5,6,7])==2.160246899469287\n    assert sd_calc([5,9,10,15,6,4])==4.070217029430577",
        "expected_answer": "import math\nimport sys\ndef sd_calc(data):\n    n = len(data)\n    if n <= 1:\n        return 0.0\n    mean, sd = avg_calc(data), 0.0\n    for el in data:\n        sd += (float(el) - mean)**2\n    sd = math.sqrt(sd / float(n-1))\n    return sd\ndef avg_calc(ls):\n    n, mean = len(ls), 0.0\n    if n <= 1:\n        return ls[0]\n    for el in ls:\n        mean = mean + float(el)\n    mean = mean / float(n)\n    return mean",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_718",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef alternate_elements(list1):\n    \"\"\" Write a function to create a list taking alternate elements from another given list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert alternate_elements([\"red\", \"black\", \"white\", \"green\", \"orange\"])==['red', 'white', 'orange']\n    assert alternate_elements([2, 0, 3, 4, 0, 2, 8, 3, 4, 2])==[2, 3, 0, 8, 4]\n    assert alternate_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]",
        "expected_answer": "def alternate_elements(list1):\n    result=[]\n    for item in list1[::2]:\n        result.append(item)\n    return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_719",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef text_match(text):\n    \"\"\" Write a function that matches a string that has an a followed by zero or more b's. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert text_match(\"ac\")==('Found a match!')\n    assert text_match(\"dc\")==('Not matched!')\n    assert text_match(\"abba\")==('Found a match!')",
        "expected_answer": "import re\ndef text_match(text):\n        patterns = 'ab*?'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_720",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef add_dict_to_tuple(test_tup, test_dict):\n    \"\"\" Write a function to add a dictionary to the tuple. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\n    assert add_dict_to_tuple((1, 2, 3), {\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4} ) == (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})\n    assert add_dict_to_tuple((8, 9, 10), {\"POS\" : 3, \"is\" : 4, \"Okay\" : 5} ) == (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})",
        "expected_answer": "def add_dict_to_tuple(test_tup, test_dict):\n  test_tup = list(test_tup)\n  test_tup.append(test_dict)\n  test_tup = tuple(test_tup)\n  return (test_tup)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_721",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef maxAverageOfPath(cost, N):\n    \"\"\" Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]], 3) == 5.2\n    assert maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]], 3) == 6.2\n    assert maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]], 3) == 7.2 ",
        "expected_answer": "M = 100\ndef maxAverageOfPath(cost, N): \n\tdp = [[0 for i in range(N + 1)] for j in range(N + 1)] \n\tdp[0][0] = cost[0][0] \n\tfor i in range(1, N): \n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0] \n\tfor j in range(1, N): \n\t\tdp[0][j] = dp[0][j - 1] + cost[0][j] \n\tfor i in range(1, N): \n\t\tfor j in range(1, N): \n\t\t\tdp[i][j] = max(dp[i - 1][j], \n\t\t\t\t\t\tdp[i][j - 1]) + cost[i][j] \n\treturn dp[N - 1][N - 1] / (2 * N - 1)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_722",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef filter_data(students,h,w):\n    \"\"\" Write a function to filter the height and width of students which are stored in a dictionary. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}\n    assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67)=={'Cierra Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)}\n    assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.7,64)=={'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra Gentry': (6.0, 68),'Pierre Cox': (5.8, 66)}",
        "expected_answer": "def filter_data(students,h,w):\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\n    return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_723",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef count_same_pair(nums1, nums2):\n    \"\"\" Write a function to count the same pair in two given lists using map function. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\n    assert count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11\n    assert count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==1",
        "expected_answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    result = sum(map(eq, nums1, nums2))\n    return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_724",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef power_base_sum(base, power):\n    \"\"\" Write a function to calculate the sum of all digits of the base to the specified power. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert power_base_sum(2,100)==115\n    assert power_base_sum(8,10)==37\n    assert power_base_sum(8,15)==62",
        "expected_answer": "def power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_725",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef extract_quotation(text1):\n    \"\"\" Write a function to extract values between quotation marks of the given string by using regex. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\n    assert extract_quotation('Cast your \"favorite\" entertainment \"apps\"') == ['favorite', 'apps']\n    assert extract_quotation('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support') == ['4k Ultra HD', 'HDR 10']",
        "expected_answer": "import re\ndef extract_quotation(text1):\n  return (re.findall(r'\"(.*?)\"', text1))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_726",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef multiply_elements(test_tup):\n    \"\"\" Write a function to multiply the adjacent elements of the given tuple. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\n    assert multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)\n    assert multiply_elements((12, 13, 14, 9, 15)) == (156, 182, 126, 135)",
        "expected_answer": "def multiply_elements(test_tup):\n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_727",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef remove_char(S):\n    \"\"\" Write a function to remove all characters except letters and numbers using regex \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert remove_char(\"123abcjw:, .@! eiw\") == '123abcjweiw'\n    assert remove_char(\"Hello1234:, ! Howare33u\") == 'Hello1234Howare33u'\n    assert remove_char(\"Cool543Triks@:, Make@987Trips\") == 'Cool543TriksMake987Trips' ",
        "expected_answer": "import re \ndef remove_char(S):\n  result = re.sub('[\\W_]+', '', S) \n  return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_728",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef sum_list(lst1,lst2):\n    \"\"\" Write a function to sum elements in two lists. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert sum_list([10,20,30],[15,25,35])==[25,45,65]\n    assert sum_list([1,2,3],[5,6,7])==[6,8,10]\n    assert sum_list([15,20,30],[15,45,75])==[30,65,105]",
        "expected_answer": "def sum_list(lst1,lst2):\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \n  return res_list",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_729",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef add_list(nums1,nums2):\n    \"\"\" Write a function to add two lists using map and lambda function. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert add_list([1, 2, 3],[4,5,6])==[5, 7, 9]\n    assert add_list([1,2],[3,4])==[4,6]\n    assert add_list([10,20],[50,70])==[60,90]",
        "expected_answer": "def add_list(nums1,nums2):\n  result = map(lambda x, y: x + y, nums1, nums2)\n  return list(result)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_730",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef consecutive_duplicates(nums):\n    \"\"\" Write a function to remove consecutive duplicates of a given list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\n    assert consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]\n    assert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==['a', 'b', 'c', 'd']",
        "expected_answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    return [key for key, group in groupby(nums)]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_731",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef lateralsurface_cone(r,h):\n    \"\"\" Write a function to find the lateral surface area of a cone. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert lateralsurface_cone(5,12)==204.20352248333654\n    assert lateralsurface_cone(10,15)==566.3586699569488\n    assert lateralsurface_cone(19,17)==1521.8090132193388",
        "expected_answer": "import math\ndef lateralsurface_cone(r,h):\n  l = math.sqrt(r * r + h * h)\n  LSA = math.pi * r  * l\n  return LSA",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_732",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef replace_specialchar(text):\n    \"\"\" Write a function to replace all occurrences of spaces, commas, or dots with a colon. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')\n    assert replace_specialchar('a b c,d e f')==('a:b:c:d:e:f')\n    assert replace_specialchar('ram reshma,ram rahim')==('ram:reshma:ram:rahim')",
        "expected_answer": "import re\ndef replace_specialchar(text):\n return (re.sub(\"[ ,.]\", \":\", text))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_733",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef find_first_occurrence(A, x):\n    \"\"\" Write a function to find the index of the first occurrence of a given number in a sorted array. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n    assert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2\n    assert find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4",
        "expected_answer": "def find_first_occurrence(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            right = mid - 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_734",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef sum_Of_Subarray_Prod(arr,n):\n    \"\"\" Write a python function to find sum of products of all possible subarrays. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert sum_Of_Subarray_Prod([1,2,3],3) == 20\n    assert sum_Of_Subarray_Prod([1,2],2) == 5\n    assert sum_Of_Subarray_Prod([1,2,3,4],4) == 84",
        "expected_answer": "def sum_Of_Subarray_Prod(arr,n):\n    ans = 0\n    res = 0\n    i = n - 1\n    while (i >= 0):\n        incr = arr[i]*(1 + res)\n        ans += incr\n        res = incr\n        i -= 1\n    return (ans)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_735",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef set_middle_bits(n):\n    \"\"\" Write a python function to toggle bits of the number except the first and the last bit. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert toggle_middle_bits(9) == 15\n    assert toggle_middle_bits(10) == 12\n    assert toggle_middle_bits(11) == 13",
        "expected_answer": "def set_middle_bits(n):  \n    n |= n >> 1; \n    n |= n >> 2; \n    n |= n >> 4; \n    n |= n >> 8; \n    n |= n >> 16;  \n    return (n >> 1) ^ 1\ndef toggle_middle_bits(n): \n    if (n == 1): \n        return 1\n    return n ^ set_middle_bits(n)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_736",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef left_insertion(a, x):\n    \"\"\" Write a function to locate the left insertion point for a specified value in sorted order. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert left_insertion([1,2,4,5],6)==4\n    assert left_insertion([1,2,4,5],3)==2\n    assert left_insertion([1,2,4,5],7)==4",
        "expected_answer": "import bisect\ndef left_insertion(a, x):\n    i = bisect.bisect_left(a, x)\n    return i",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_737",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef check_str(string):\n    \"\"\" Write a function to check whether the given string is starting with a vowel or not using regex. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert check_str(\"annie\") == 'Valid'\n    assert check_str(\"dawood\") == 'Invalid'\n    assert check_str(\"Else\") == 'Valid'",
        "expected_answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n\tif(re.search(regex, string)): \n\t\treturn (\"Valid\") \n\telse: \n\t\treturn (\"Invalid\")",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_738",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef geometric_sum(n):\n    \"\"\" Write a function to calculate the geometric sum of n-1. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert geometric_sum(7) == 1.9921875\n    assert geometric_sum(4) == 1.9375\n    assert geometric_sum(8) == 1.99609375",
        "expected_answer": "def geometric_sum(n):\n  if n < 0:\n    return 0\n  else:\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_739",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef find_Index(n):\n    \"\"\" Write a python function to find the index of smallest triangular number with n digits. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find_Index(2) == 4\n    assert find_Index(3) == 14\n    assert find_Index(4) == 45",
        "expected_answer": "import math \ndef find_Index(n): \n    x = math.sqrt(2 * math.pow(10,(n - 1))); \n    return round(x);",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_740",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef tuple_to_dict(test_tup):\n    \"\"\" Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\n    assert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}\n    assert tuple_to_dict((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}",
        "expected_answer": "def tuple_to_dict(test_tup):\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_741",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef all_Characters_Same(s) :\n    \"\"\" Write a python function to check whether all the characters are same or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert all_Characters_Same(\"python\") == False\n    assert all_Characters_Same(\"aaa\") == True\n    assert all_Characters_Same(\"data\") == False",
        "expected_answer": "def all_Characters_Same(s) :\n    n = len(s)\n    for i in range(1,n) :\n        if s[i] != s[0] :\n            return False\n    return True",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_742",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef area_tetrahedron(side):\n    \"\"\" Write a function to caluclate the area of a tetrahedron. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert area_tetrahedron(3)==15.588457268119894\n    assert area_tetrahedron(20)==692.8203230275509\n    assert area_tetrahedron(10)==173.20508075688772",
        "expected_answer": "import math\ndef area_tetrahedron(side):\n  area = math.sqrt(3)*(side*side)\n  return area",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_743",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef rotate_right(list1,m,n):\n    \"\"\" Write a function to rotate a given list by specified number of items to the right direction. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[8, 9, 10, 1, 2, 3, 4, 5, 6]\n    assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\n    assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8]",
        "expected_answer": "def rotate_right(list1,m,n):\n  result =  list1[-(m):]+list1[:-(n)]\n  return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_744",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef check_none(test_tup):\n    \"\"\" Write a function to check if the given tuple has any none value or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert check_none((10, 4, 5, 6, None)) == True\n    assert check_none((7, 8, 9, 11, 14)) == False\n    assert check_none((1, 2, 3, 4, None)) == True",
        "expected_answer": "def check_none(test_tup):\n  res = any(map(lambda ele: ele is None, test_tup))\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_745",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef divisible_by_digits(startnum, endnum):\n    \"\"\" Write a function to find numbers within a given range where every number is divisible by every digit it contains. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n    assert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n    assert divisible_by_digits(20,25)==[22, 24]",
        "expected_answer": "def divisible_by_digits(startnum, endnum):\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_746",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef sector_area(r,a):\n    \"\"\" Write a function to find area of a sector. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert sector_area(4,45)==6.285714285714286\n    assert sector_area(9,45)==31.82142857142857\n    assert sector_area(9,360)==None",
        "expected_answer": "def sector_area(r,a):\n    pi=22/7\n    if a >= 360:\n        return None\n    sectorarea = (pi*r**2) * (a/360)\n    return sectorarea",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_747",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef lcs_of_three(X, Y, Z, m, n, o):\n    \"\"\" Write a function to find the longest common subsequence for the given three string sequence. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert lcs_of_three('AGGT12', '12TXAYB', '12XBA', 6, 7, 5) == 2\n    assert lcs_of_three('Reels', 'Reelsfor', 'ReelsforReels', 5, 8, 13) == 5 \n    assert lcs_of_three('abcd1e2', 'bc12ea', 'bd1ea', 7, 6, 5) == 3",
        "expected_answer": "def lcs_of_three(X, Y, Z, m, n, o): \n\tL = [[[0 for i in range(o+1)] for j in range(n+1)] \n\t\tfor k in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tfor k in range(o+1): \n\t\t\t\tif (i == 0 or j == 0 or k == 0): \n\t\t\t\t\tL[i][j][k] = 0\n\t\t\t\telif (X[i-1] == Y[j-1] and\n\t\t\t\t\tX[i-1] == Z[k-1]): \n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1\n\t\t\t\telse: \n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], \n\t\t\t\t\tL[i][j-1][k]), \n\t\t\t\t\t\t\t\t\tL[i][j][k-1]) \n\treturn L[m][n][o]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_748",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef capital_words_spaces(str1):\n    \"\"\" Write a function to put spaces between words starting with capital letters in a given string by using regex. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert capital_words_spaces(\"Python\") == 'Python'\n    assert capital_words_spaces(\"PythonProgrammingExamples\") == 'Python Programming Examples'\n    assert capital_words_spaces(\"GetReadyToBeCodingFreak\") == 'Get Ready To Be Coding Freak'",
        "expected_answer": "import re\ndef capital_words_spaces(str1):\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_749",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef sort_numeric_strings(nums_str):\n    \"\"\" Write a function to sort a given list of strings of numbers numerically. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\n    assert sort_numeric_strings(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])==[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]\n    assert sort_numeric_strings(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11'])==[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]",
        "expected_answer": "def sort_numeric_strings(nums_str):\n    result = [int(x) for x in nums_str]\n    result.sort()\n    return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_750",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef add_tuple(test_list, test_tup):\n    \"\"\" Write a function to add the given tuple to the given list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\n    assert add_tuple([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]\n    assert add_tuple([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]",
        "expected_answer": "def add_tuple(test_list, test_tup):\n  test_list += test_tup\n  return (test_list)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_751",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef check_min_heap(arr, i):\n    \"\"\" Write a function to check if the given array represents min heap or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert check_min_heap([1, 2, 3, 4, 5, 6], 0) == True\n    assert check_min_heap([2, 3, 4, 5, 10, 15], 0) == True\n    assert check_min_heap([2, 10, 4, 5, 3, 15], 0) == False",
        "expected_answer": "def check_min_heap(arr, i):\n    if 2 * i + 2 > len(arr):\n        return True\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \n                                      and check_min_heap(arr, 2 * i + 2))\n    return left_child and right_child",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_752",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef jacobsthal_num(n):\n    \"\"\" Write a function to find the nth jacobsthal number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert jacobsthal_num(5) == 11\n    assert jacobsthal_num(2) == 1\n    assert jacobsthal_num(4) == 5",
        "expected_answer": "def jacobsthal_num(n): \n\tdp = [0] * (n + 1) \n\tdp[0] = 0\n\tdp[1] = 1\n\tfor i in range(2, n+1): \n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \n\treturn dp[n]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_753",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef min_k(test_list, K):\n    \"\"\" Write a function to find minimum k records from tuple list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\n    assert min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]\n    assert min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]",
        "expected_answer": "def min_k(test_list, K):\n  res = sorted(test_list, key = lambda x: x[1])[:K]\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_754",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef extract_index_list(l1, l2, l3):\n    \"\"\" Write a function to find common index elements from three lists. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\n    assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]\n    assert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]",
        "expected_answer": "def extract_index_list(l1, l2, l3):\n    result = []\n    for m, n, o in zip(l1, l2, l3):\n        if (m == n == o):\n            result.append(m)\n    return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_755",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef second_smallest(numbers):\n    \"\"\" Write a function to find the second smallest number in a list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert second_smallest([1, 2, -8, -2, 0, -2])==-2\n    assert second_smallest([1, 1, -0.5, 0, 2, -2, -2])==-0.5\n    assert second_smallest([2,2])==None",
        "expected_answer": "def second_smallest(numbers):\n  if (len(numbers)<2):\n    return\n  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):\n    return\n  dup_items = set()\n  uniq_items = []\n  for x in numbers:\n    if x not in dup_items:\n      uniq_items.append(x)\n      dup_items.add(x)\n  uniq_items.sort()    \n  return  uniq_items[1]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_756",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef text_match_zero_one(text):\n    \"\"\" Write a function that matches a string that has an a followed by zero or one 'b'. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert text_match_zero_one(\"ac\")==('Found a match!')\n    assert text_match_zero_one(\"dc\")==('Not matched!')\n    assert text_match_zero_one(\"abbbba\")==('Found a match!')",
        "expected_answer": "import re\ndef text_match_zero_one(text):\n        patterns = 'ab?'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_757",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef count_reverse_pairs(test_list):\n    \"\"\" Write a function to count the pairs of reverse strings in the given string list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== '2'\n    assert count_reverse_pairs([\"geeks\", \"best\", \"for\", \"skeeg\"]) == '1'\n    assert count_reverse_pairs([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == '2' ",
        "expected_answer": "def count_reverse_pairs(test_list):\n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \n  return str(res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_758",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef unique_sublists(list1):\n    \"\"\" Write a function to count number of unique lists within a list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n    assert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\n    assert unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])=={(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}",
        "expected_answer": "def unique_sublists(list1):\n    result ={}\n    for l in  list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_759",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef is_decimal(num):\n    \"\"\" Write a function to check a decimal with a precision of 2. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert is_decimal('123.11')==True\n    assert is_decimal('e666.86')==False\n    assert is_decimal('3.124587')==False",
        "expected_answer": "def is_decimal(num):\n    import re\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n    result = dnumre.search(num)\n    return bool(result)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_760",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef unique_Element(arr,n):\n    \"\"\" Write a python function to check whether an array contains only one distinct element or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert unique_Element([1,1,1],3) == 'YES'\n    assert unique_Element([1,2,1,2],4) == 'NO'\n    assert unique_Element([1,2,3,4,5],5) == 'NO'",
        "expected_answer": "def unique_Element(arr,n):\n    s = set(arr)\n    if (len(s) == 1):\n        return ('YES')\n    else:\n        return ('NO')",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_761",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef arc_length(d,a):\n    \"\"\" Write a function to caluclate arc length of an angle. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert arc_length(9,45)==3.5357142857142856\n    assert arc_length(9,480)==None\n    assert arc_length(5,270)==11.785714285714285",
        "expected_answer": "def arc_length(d,a):\n    pi=22/7\n    if a >= 360:\n        return None\n    arclength = (pi*d) * (a/360)\n    return arclength",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_762",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef check_monthnumber_number(monthnum3):\n    \"\"\" Write a function to check whether the given month number contains 30 days or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert check_monthnumber_number(6)==True\n    assert check_monthnumber_number(2)==False\n    assert check_monthnumber_number(12)==False",
        "expected_answer": "def check_monthnumber_number(monthnum3):\n  if(monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11):\n    return True\n  else:\n    return False",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_763",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef find_Min_Diff(arr,n):\n    \"\"\" Write a python function to find the minimum difference between any two elements in a given array. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find_Min_Diff((1,5,3,19,18,25),6) == 1\n    assert find_Min_Diff((4,3,2,6),4) == 1\n    assert find_Min_Diff((30,5,20,9),4) == 4",
        "expected_answer": "def find_Min_Diff(arr,n): \n    arr = sorted(arr) \n    diff = 10**20 \n    for i in range(n-1): \n        if arr[i+1] - arr[i] < diff: \n            diff = arr[i+1] - arr[i]  \n    return diff",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_764",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef number_ctr(str):\n    \"\"\" Write a python function to count numeric values in a given string. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert number_ctr('program2bedone') == 1\n    assert number_ctr('3wonders') ==1\n    assert number_ctr('123') == 3",
        "expected_answer": "def number_ctr(str):\n      number_ctr= 0\n      for i in range(len(str)):\n          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     \n      return  number_ctr",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_765",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef is_polite(n):\n    \"\"\" Write a function to find nth polite number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert is_polite(7) == 11\n    assert is_polite(4) == 7\n    assert is_polite(9) == 13",
        "expected_answer": "import math \ndef is_polite(n): \n\tn = n + 1\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2)))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_766",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef pair_wise(l1):\n    \"\"\" Write a function to iterate over all pairs of consecutive items in a given list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n    assert pair_wise([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]\n    assert pair_wise([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]",
        "expected_answer": "def pair_wise(l1):\n    temp = []\n    for i in range(len(l1) - 1):\n        current_element, next_element = l1[i], l1[i + 1]\n        x = (current_element, next_element)\n        temp.append(x)\n    return temp",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_767",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef get_Pairs_Count(arr,n,sum):\n    \"\"\" Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert get_Pairs_Count([1,1,1,1],4,2) == 6\n    assert get_Pairs_Count([1,5,7,-1,5],5,6) == 3\n    assert get_Pairs_Count([1,-2,3],3,1) == 1",
        "expected_answer": "def get_Pairs_Count(arr,n,sum):\n    count = 0  \n    for i in range(0,n):\n        for j in range(i + 1,n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_768",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef check_Odd_Parity(x):\n    \"\"\" Write a python function to check for odd parity of a given number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert check_Odd_Parity(13) == True\n    assert check_Odd_Parity(21) == True\n    assert check_Odd_Parity(18) == False",
        "expected_answer": "def check_Odd_Parity(x): \n    parity = 0\n    while (x != 0): \n        x = x & (x - 1) \n        parity += 1\n    if (parity % 2 == 1): \n        return True\n    else: \n        return False",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_769",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef Diff(li1,li2):\n    \"\"\" Write a python function to get the difference between two lists. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]\n    assert (Diff([1,2,3,4,5], [6,7,1])) == [2,3,4,5,6,7]\n    assert (Diff([1,2,3], [6,7,1])) == [2,3,6,7]",
        "expected_answer": "def Diff(li1,li2):\n    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_770",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef odd_Num_Sum(n) :\n    \"\"\" Write a python function to find the sum of fourth power of first n odd natural numbers. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert odd_Num_Sum(2) == 82\n    assert odd_Num_Sum(3) == 707\n    assert odd_Num_Sum(4) == 3108",
        "expected_answer": "def odd_Num_Sum(n) : \n    j = 0\n    sm = 0\n    for i in range(1,n + 1) : \n        j = (2*i-1) \n        sm = sm + (j*j*j*j)   \n    return sm",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_771",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef check_expression(exp):\n    \"\"\" Write a function to check if the given expression is balanced or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert check_expression(\"{()}[{}]\") == True\n    assert check_expression(\"{()}[{]\") == False\n    assert check_expression(\"{()}[{}][]({})\") == True",
        "expected_answer": "from collections import deque\ndef check_expression(exp):\n    if len(exp) & 1:\n        return False\n    stack = deque()\n    for ch in exp:\n        if ch == '(' or ch == '{' or ch == '[':\n            stack.append(ch)\n        if ch == ')' or ch == '}' or ch == ']':\n            if not stack:\n                return False\n            top = stack.pop()\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\n                return False\n    return not stack",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_772",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef remove_length(test_str, K):\n    \"\"\" Write a function to remove all the words with k length in the given string. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert remove_length('The person is most value tet', 3) == 'person is most value'\n    assert remove_length('If you told me about this ok', 4) == 'If you me about ok'\n    assert remove_length('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'",
        "expected_answer": "def remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele) != K]\n  res = ' '.join(res)\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_773",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef occurance_substring(text,pattern):\n    \"\"\" Write a function to find the occurrence and position of the substrings within a string. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert occurance_substring('python programming, python language','python')==('python', 0, 6)\n    assert occurance_substring('python programming,programming language','programming')==('programming', 7, 18)\n    assert occurance_substring('python programming,programming language','language')==('language', 31, 39)",
        "expected_answer": "import re\ndef occurance_substring(text,pattern):\n for match in re.finditer(pattern, text):\n    s = match.start()\n    e = match.end()\n    return (text[s:e], s, e)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_774",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef check_email(email):\n    \"\"\" Write a function to check if the string is a valid email address or not using regex. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert check_email(\"ankitrai326@gmail.com\") == 'Valid Email'\n    assert check_email(\"my.ownsite@ourearth.org\") == 'Valid Email'\n    assert check_email(\"ankitaoie326.com\") == 'Invalid Email'",
        "expected_answer": "import re \nregex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\ndef check_email(email): \n\tif(re.search(regex,email)): \n\t\treturn (\"Valid Email\") \n\telse: \n\t\treturn (\"Invalid Email\")",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_775",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef odd_position(nums):\n    \"\"\" Write a python function to check whether every odd index contains odd numbers of a given list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert odd_position([2,1,4,3,6,7,6,3]) == True\n    assert odd_position([4,1,2]) == True\n    assert odd_position([1,2,3]) == False",
        "expected_answer": "def odd_position(nums):\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_776",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef count_vowels(test_str):\n    \"\"\" Write a function to count those characters which have vowels as their neighbors in the given string. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert count_vowels('bestinstareels') == 7\n    assert count_vowels('partofthejourneyistheend') == 12\n    assert count_vowels('amazonprime') == 5",
        "expected_answer": "def count_vowels(test_str):\n  res = 0\n  vow_list = ['a', 'e', 'i', 'o', 'u']\n  for idx in range(1, len(test_str) - 1):\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\n      res += 1\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\n    res += 1\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\n    res += 1\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_777",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef find_Sum(arr,n):\n    \"\"\" Write a python function to find the sum of non-repeated elements in a given array. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find_Sum([1,2,3,1,1,4,5,6],8) == 21\n    assert find_Sum([1,10,9,4,2,10,10,45,4],9) == 71\n    assert find_Sum([12,10,9,45,2,10,10,45,10],9) == 78",
        "expected_answer": "def find_Sum(arr,n): \n    arr.sort() \n    sum = arr[0] \n    for i in range(0,n-1): \n        if (arr[i] != arr[i+1]): \n            sum = sum + arr[i+1]   \n    return sum",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_778",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef pack_consecutive_duplicates(list1):\n    \"\"\" Write a function to pack consecutive duplicates of a given list elements into sublists. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==[['a', 'a'], ['b'], ['c'], ['d', 'd']]",
        "expected_answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    return [list(group) for key, group in groupby(list1)]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_779",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef unique_sublists(list1):\n    \"\"\" Write a function to count the number of unique lists within a list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n    assert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\n    assert unique_sublists([[1, 2], [3, 4], [4, 5], [6, 7]])=={(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1}",
        "expected_answer": "def unique_sublists(list1):\n    result ={}\n    for l in list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_780",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef find_combinations(test_list):\n    \"\"\" Write a function to find the combinations of sums with tuples in the given tuple list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\n    assert find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]\n    assert find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]",
        "expected_answer": "from itertools import combinations \ndef find_combinations(test_list):\n  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_781",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef count_Divisors(n) :\n    \"\"\" Write a python function to check whether the count of divisors is even or odd. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert count_Divisors(10) == \"Even\"\n    assert count_Divisors(100) == \"Odd\"\n    assert count_Divisors(125) == \"Even\"",
        "expected_answer": "import math \ndef count_Divisors(n) : \n    count = 0\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \n        if (n % i == 0) : \n            if( n // i == i) : \n                count = count + 1\n            else : \n                count = count + 2\n    if (count % 2 == 0) : \n        return (\"Even\") \n    else : \n        return (\"Odd\")",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_782",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef Odd_Length_Sum(arr):\n    \"\"\" Write a python function to find the sum of all odd length subarrays. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert Odd_Length_Sum([1,2,4]) == 14\n    assert Odd_Length_Sum([1,2,1,2]) == 15\n    assert Odd_Length_Sum([1,7]) == 8",
        "expected_answer": "def Odd_Length_Sum(arr):\n    Sum = 0\n    l = len(arr)\n    for i in range(l):\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\n    return Sum",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_783",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef rgb_to_hsv(r, g, b):\n    \"\"\" Write a function to convert rgb color to hsv color. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)\n    assert rgb_to_hsv(0, 215, 0)==(120.0, 100.0, 84.31372549019608)\n    assert rgb_to_hsv(10, 215, 110)==(149.26829268292684, 95.34883720930233, 84.31372549019608)",
        "expected_answer": "def rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_784",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef mul_even_odd(list1):\n    \"\"\" Write a function to find the product of first even and odd number of a given list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert mul_even_odd([1,3,5,7,4,1,6,8])==4\n    assert mul_even_odd([1,2,3,4,5,6,7,8,9,10])==2\n    assert mul_even_odd([1,5,7,9,10])==10",
        "expected_answer": "def mul_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even*first_odd)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_785",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef tuple_str_int(test_str):\n    \"\"\" Write a function to convert tuple string to integer tuple. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\n    assert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)\n    assert tuple_str_int(\"(4, 5, 6)\") == (4, 5, 6)",
        "expected_answer": "def tuple_str_int(test_str):\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_786",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef right_insertion(a, x):\n    \"\"\" Write a function to locate the right insertion point for a specified value in sorted order. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert right_insertion([1,2,4,5],6)==4\n    assert right_insertion([1,2,4,5],3)==2\n    assert right_insertion([1,2,4,5],7)==4",
        "expected_answer": "import bisect\ndef right_insertion(a, x):\n    i = bisect.bisect_right(a, x)\n    return i",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_787",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef text_match_three(text):\n    \"\"\" Write a function that matches a string that has an a followed by three 'b'. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert text_match_three(\"ac\")==('Not matched!')\n    assert text_match_three(\"dc\")==('Not matched!')\n    assert text_match_three(\"abbbba\")==('Found a match!')",
        "expected_answer": "import re\ndef text_match_three(text):\n        patterns = 'ab{3}?'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_788",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef new_tuple(test_list, test_str):\n    \"\"\" Write a function to create a new tuple from the given string and list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\n    assert new_tuple([\"We\", \"are\"], \"Developers\") == ('We', 'are', 'Developers')\n    assert new_tuple([\"Part\", \"is\"], \"Wrong\") == ('Part', 'is', 'Wrong')",
        "expected_answer": "def new_tuple(test_list, test_str):\n  res = tuple(test_list + [test_str])\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_789",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef perimeter_polygon(s,l):\n    \"\"\" Write a function to calculate the perimeter of a regular polygon. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert perimeter_polygon(4,20)==80\n    assert perimeter_polygon(10,15)==150\n    assert perimeter_polygon(9,7)==63",
        "expected_answer": "from math import tan, pi\ndef perimeter_polygon(s,l):\n  perimeter = s*l\n  return perimeter",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_790",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef even_position(nums):\n    \"\"\" Write a python function to check whether every even index contains even numbers of a given list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert even_position([3,2,1]) == False\n    assert even_position([1,2,3]) == False\n    assert even_position([2,1,4]) == True",
        "expected_answer": "def even_position(nums):\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_791",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef remove_nested(test_tup):\n    \"\"\" Write a function to remove the nested record from the given tuple. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\n    assert remove_nested((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)\n    assert remove_nested((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)",
        "expected_answer": "def remove_nested(test_tup):\n  res = tuple()\n  for count, ele in enumerate(test_tup):\n    if not isinstance(ele, tuple):\n      res = res + (ele, )\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_792",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef count_list(input_list):\n    \"\"\" Write a python function to count the number of lists in a given number of lists. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\n    assert count_list([[1,2],[2,3],[4,5]]) == 3\n    assert count_list([[1,0],[2,0]]) == 2",
        "expected_answer": "def count_list(input_list): \n    return len(input_list)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_793",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef last(arr,x,n):\n    \"\"\" Write a python function to find the last position of an element in a sorted array. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert last([1,2,3],1,3) == 0\n    assert last([1,1,1,2,3,4],1,6) == 2\n    assert last([2,3,2,3,6,8,9],3,8) == 3",
        "expected_answer": "def last(arr,x,n):\n    low = 0\n    high = n - 1\n    res = -1  \n    while (low <= high):\n        mid = (low + high) // 2 \n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            res = mid\n            low = mid + 1\n    return res",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_794",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef text_starta_endb(text):\n    \"\"\" Write a function that matches a string that has an 'a' followed by anything, ending in 'b'. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert text_starta_endb(\"aabbbb\")==('Found a match!')\n    assert text_starta_endb(\"aabAbbbc\")==('Not matched!')\n    assert text_starta_endb(\"accddbbjjj\")==('Not matched!')",
        "expected_answer": "import re\ndef text_starta_endb(text):\n        patterns = 'a.*?b$'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_795",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef cheap_items(items,n):\n    \"\"\" Write a function to find the n - cheap price items from a given dataset using heap queue algorithm. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-1', 'price': 101.1}]\n    assert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],2)==[{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}]\n    assert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-4', 'price': 22.75}]",
        "expected_answer": "import heapq\ndef cheap_items(items,n):\n  cheap_items = heapq.nsmallest(n, items, key=lambda s: s['price'])\n  return cheap_items",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_796",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef return_sum(dict):\n    \"\"\" Write function to find the sum of all items in the given dictionary. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert return_sum({'a': 100, 'b':200, 'c':300}) == 600\n    assert return_sum({'a': 25, 'b':18, 'c':45}) == 88\n    assert return_sum({'a': 36, 'b':39, 'c':49}) == 124",
        "expected_answer": "def return_sum(dict):\n  sum = 0\n  for i in dict.values():\n    sum = sum + i\n  return sum",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_797",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef sum_Odd(n):\n    \"\"\" Write a python function to find the sum of all odd natural numbers within the range l and r. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert sum_in_Range(2,5) == 8\n    assert sum_in_Range(5,7) == 12\n    assert sum_in_Range(7,13) == 40",
        "expected_answer": "def sum_Odd(n): \n    terms = (n + 1)//2\n    sum1 = terms * terms \n    return sum1  \ndef sum_in_Range(l,r): \n    return sum_Odd(r) - sum_Odd(l - 1)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_798",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef _sum(arr):\n    \"\"\" Write a python function to find the sum of an array. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert _sum([1, 2, 3]) == 6\n    assert _sum([15, 12, 13, 10]) == 50\n    assert _sum([0, 1, 2]) == 3",
        "expected_answer": "def _sum(arr):  \n    sum=0\n    for i in arr: \n        sum = sum + i      \n    return(sum)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_799",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef left_Rotate(n,d):\n    \"\"\" Write a python function to left rotate the bits of a given number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert left_Rotate(16,2) == 64\n    assert left_Rotate(10,2) == 40\n    assert left_Rotate(99,3) == 792",
        "expected_answer": "INT_BITS = 32\ndef left_Rotate(n,d):   \n    return (n << d)|(n >> (INT_BITS - d))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_800",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef remove_all_spaces(text):\n    \"\"\" Write a function to remove all whitespaces from a string. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert remove_all_spaces('python  program')==('pythonprogram')\n    assert remove_all_spaces('python   programming    language')==('pythonprogramminglanguage')\n    assert remove_all_spaces('python                     program')==('pythonprogram')",
        "expected_answer": "import re\ndef remove_all_spaces(text):\n return (re.sub(r'\\s+', '',text))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_801",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef test_three_equal(x,y,z):\n    \"\"\" Write a python function to count the number of equal numbers from three given integers. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert test_three_equal(1,1,1) == 3\n    assert test_three_equal(-1,-2,-3) == 0\n    assert test_three_equal(1,2,2) == 2",
        "expected_answer": "def test_three_equal(x,y,z):\n  result= set([x,y,z])\n  if len(result)==3:\n    return 0\n  else:\n    return (4-len(result))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_802",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef count_Rotation(arr,n):\n    \"\"\" Write a python function to count the number of rotations required to generate a sorted array. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert count_Rotation([3,2,1],3) == 1\n    assert count_Rotation([4,5,1,2,3],5) == 2\n    assert count_Rotation([7,8,9,1,2,3],6) == 3",
        "expected_answer": "def count_Rotation(arr,n):   \n    for i in range (1,n): \n        if (arr[i] < arr[i - 1]): \n            return i  \n    return 0",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_803",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef is_Perfect_Square(n) :\n    \"\"\" Write a python function to check whether the given number is a perfect square or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert is_Perfect_Square(10) == False\n    assert is_Perfect_Square(36) == True\n    assert is_Perfect_Square(14) == False",
        "expected_answer": "def is_Perfect_Square(n) :\n    i = 1\n    while (i * i<= n):\n        if ((n % i == 0) and (n / i == i)):\n            return True     \n        i = i + 1\n    return False",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_804",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef is_Product_Even(arr,n):\n    \"\"\" Write a python function to check whether the product of numbers is even or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert is_Product_Even([1,2,3],3) == True\n    assert is_Product_Even([1,2,1,4],4) == True\n    assert is_Product_Even([1,1],2) == False",
        "expected_answer": "def is_Product_Even(arr,n): \n    for i in range(0,n): \n        if ((arr[i] & 1) == 0): \n            return True\n    return False",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_805",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef max_sum_list(lists):\n    \"\"\" Write a function to find the list in a list of lists whose sum of elements is the highest. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] \n    assert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10] \n    assert max_sum_list([[2,3,1]])==[2,3,1] ",
        "expected_answer": "def max_sum_list(lists):\n return max(lists, key=sum)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_806",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef max_run_uppercase(test_str):\n    \"\"\" Write a function to find maximum run of uppercase characters in the given string. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert max_run_uppercase('GeMKSForGERksISBESt') == 5\n    assert max_run_uppercase('PrECIOusMOVemENTSYT') == 6\n    assert max_run_uppercase('GooGLEFluTTER') == 4",
        "expected_answer": "def max_run_uppercase(test_str):\n  cnt = 0\n  res = 0\n  for idx in range(0, len(test_str)):\n    if test_str[idx].isupper():\n      cnt += 1\n    else:\n      res = cnt\n      cnt = 0\n  if test_str[len(test_str) - 1].isupper():\n    res = cnt\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_807",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef first_odd(nums):\n    \"\"\" Write a python function to find the first odd number in a given list of numbers. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert first_odd([1,3,5]) == 1\n    assert first_odd([2,4,1,3]) == 1\n    assert first_odd ([8,9,1]) == 9",
        "expected_answer": "def first_odd(nums):\n  first_odd = next((el for el in nums if el%2!=0),-1)\n  return first_odd",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_808",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef check_K(test_tup, K):\n    \"\"\" Write a function to check if the given tuples contain the k or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert check_K((10, 4, 5, 6, 8), 6) == True\n    assert check_K((1, 2, 3, 4, 5, 6), 7) == False\n    assert check_K((7, 8, 9, 44, 11, 12), 11) == True",
        "expected_answer": "def check_K(test_tup, K):\n  res = False\n  for ele in test_tup:\n    if ele == K:\n      res = True\n      break\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_809",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef check_smaller(test_tup1, test_tup2):\n    \"\"\" Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert check_smaller((1, 2, 3), (2, 3, 4)) == False\n    assert check_smaller((4, 5, 6), (3, 4, 5)) == True\n    assert check_smaller((11, 12, 13), (10, 11, 12)) == True",
        "expected_answer": "def check_smaller(test_tup1, test_tup2):\n  res = all(x > y for x, y in zip(test_tup1, test_tup2))\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_810",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef count_variable(a,b,c,d):\n    \"\"\" Write a function to iterate over elements repeating each as many times as its count. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert count_variable(4,2,0,-2)==['p', 'p', 'p', 'p', 'q', 'q'] \n    assert count_variable(0,1,2,3)==['q', 'r', 'r', 's', 's', 's'] \n    assert count_variable(11,15,12,23)==['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's']",
        "expected_answer": "from collections import Counter\ndef count_variable(a,b,c,d):\n  c = Counter(p=a, q=b, r=c, s=d)\n  return list(c.elements())",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_811",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef check_identical(test_list1, test_list2):\n    \"\"\" Write a function to check if two lists of tuples are identical or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert check_identical([(10, 4), (2, 5)], [(10, 4), (2, 5)]) == True\n    assert check_identical([(1, 2), (3, 7)], [(12, 14), (12, 45)]) == False\n    assert check_identical([(2, 14), (12, 25)], [(2, 14), (12, 25)]) == True",
        "expected_answer": "def check_identical(test_list1, test_list2):\n  res = test_list1 == test_list2\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_812",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef road_rd(street):\n    \"\"\" Write a function to abbreviate 'road' as 'rd.' in a given string. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert road_rd(\"ravipadu Road\")==('ravipadu Rd.')\n    assert road_rd(\"palnadu Road\")==('palnadu Rd.')\n    assert road_rd(\"eshwar enclave Road\")==('eshwar enclave Rd.')",
        "expected_answer": "import re\ndef road_rd(street):\n  return (re.sub('Road$', 'Rd.', street))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_813",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef string_length(str1):\n    \"\"\" Write a function to find length of the string. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert string_length('python')==6\n    assert string_length('program')==7\n    assert string_length('language')==8",
        "expected_answer": "def string_length(str1):\n    count = 0\n    for char in str1:\n        count += 1\n    return count",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_814",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef rombus_area(p,q):\n    \"\"\" Write a function to find the area of a rombus. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert rombus_area(10,20)==100\n    assert rombus_area(10,5)==25\n    assert rombus_area(4,2)==4",
        "expected_answer": "def rombus_area(p,q):\n  area=(p*q)/2\n  return area",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_815",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef sort_by_dnf(arr, n):\n    \"\"\" Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert sort_by_dnf([1,2,0,1,0,1,2,1,1], 9) == [0, 0, 1, 1, 1, 1, 1, 2, 2]\n    assert sort_by_dnf([1,0,0,1,2,1,2,2,1,0], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]\n    assert sort_by_dnf([2,2,1,0,0,0,1,1,2,1], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]",
        "expected_answer": "def sort_by_dnf(arr, n):\n  low=0\n  mid=0\n  high=n-1\n  while mid <= high:\n    if arr[mid] == 0:\n      arr[low], arr[mid] = arr[mid], arr[low]\n      low = low + 1\n      mid = mid + 1\n    elif arr[mid] == 1:\n      mid = mid + 1\n    else:\n      arr[mid], arr[high] = arr[high], arr[mid]\n      high = high - 1\n  return arr",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_816",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef clear_tuple(test_tup):\n    \"\"\" Write a function to clear the values of the given tuples. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert clear_tuple((1, 5, 3, 6, 8)) == ()\n    assert clear_tuple((2, 1, 4 ,5 ,6)) == ()\n    assert clear_tuple((3, 2, 5, 6, 8)) == ()",
        "expected_answer": "def clear_tuple(test_tup):\n  temp = list(test_tup)\n  temp.clear()\n  test_tup = tuple(temp)\n  return (test_tup)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_817",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef div_of_nums(nums,m,n):\n    \"\"\" Write a function to find numbers divisible by m or n from a list of numbers using lambda function. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],19,13)==[19, 65, 57, 39, 152, 190]\n    assert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[2, 5, 8, 10]\n    assert div_of_nums([10,15,14,13,18,12,20],10,5)==[10, 15, 20]",
        "expected_answer": "def div_of_nums(nums,m,n):\n result = list(filter(lambda x: (x % m == 0 or x % n == 0), nums)) \n return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_818",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef lower_ctr(str):\n    \"\"\" Write a python function to count lower case letters in a given string. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert lower_ctr('abc') == 3\n    assert lower_ctr('string') == 6\n    assert lower_ctr('Python') == 5",
        "expected_answer": "def lower_ctr(str):\n      lower_ctr= 0\n      for i in range(len(str)):\n          if str[i] >= 'a' and str[i] <= 'z': lower_ctr += 1     \n      return  lower_ctr",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_819",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef count_duplic(lists):\n    \"\"\" Write a function to count the frequency of consecutive duplicate elements in a given list of numbers. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert count_duplic([1,2,2,2,4,4,4,5,5,5,5])==([1, 2, 4, 5], [1, 3, 3, 4])\n    assert count_duplic([2,2,3,1,2,6,7,9])==([2, 3, 1, 2, 6, 7, 9], [2, 1, 1, 1, 1, 1, 1])\n    assert count_duplic([2,1,5,6,8,3,4,9,10,11,8,12])==([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "expected_answer": "def count_duplic(lists):\n    element = []\n    frequency = []\n    if not lists:\n        return element\n    running_count = 1\n    for i in range(len(lists)-1):\n        if lists[i] == lists[i+1]:\n            running_count += 1\n        else:\n            frequency.append(running_count)\n            element.append(lists[i])\n            running_count = 1\n    frequency.append(running_count)\n    element.append(lists[i+1])\n    return element,frequency",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_820",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef check_monthnum_number(monthnum1):\n    \"\"\" Write a function to check whether the given month number contains 28 days or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert check_monthnum_number(2)==True\n    assert check_monthnum_number(1)==False\n    assert check_monthnum_number(3)==False",
        "expected_answer": "def check_monthnum_number(monthnum1):\n  if monthnum1 == 2:\n    return True\n  else:\n    return False",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_821",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef merge_dictionaries(dict1,dict2):\n    \"\"\" Write a function to merge two dictionaries into a single expression. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White'}\n    assert merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'O': 'Orange', 'P': 'Pink', 'B': 'Black', 'W': 'White', 'R': 'Red'}\n    assert merge_dictionaries({ \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'W': 'White', 'O': 'Orange', 'G': 'Green', 'B': 'Black'}",
        "expected_answer": "import collections as ct\ndef merge_dictionaries(dict1,dict2):\n    merged_dict = dict(ct.ChainMap({}, dict1, dict2))\n    return merged_dict",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_822",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef pass_validity(p):\n    \"\"\" Write a function to return true if the password is valid. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert pass_validity(\"password\")==False\n    assert pass_validity(\"Password@10\")==True\n    assert pass_validity(\"password@10\")==False",
        "expected_answer": "import re\ndef pass_validity(p):\n x = True\n while x:  \n    if (len(p)<6 or len(p)>12):\n        break\n    elif not re.search(\"[a-z]\",p):\n        break\n    elif not re.search(\"[0-9]\",p):\n        break\n    elif not re.search(\"[A-Z]\",p):\n        break\n    elif not re.search(\"[$#@]\",p):\n        break\n    elif re.search(\"\\s\",p):\n        break\n    else:\n        return True\n        x=False\n        break\n\n if x:\n    return False",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_823",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef check_substring(string, sample) :\n    \"\"\" Write a function to check if the given string starts with a substring using regex. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert check_substring(\"dreams for dreams makes life fun\", \"makes\") == 'string doesnt start with the given substring'\n    assert check_substring(\"Hi there how are you Hi alex\", \"Hi\") == 'string starts with the given substring'\n    assert check_substring(\"Its been a long day\", \"been\") == 'string doesnt start with the given substring'",
        "expected_answer": "import re \ndef check_substring(string, sample) : \n  if (sample in string): \n      y = \"\\A\" + sample \n      x = re.search(y, string) \n      if x : \n          return (\"string starts with the given substring\") \n      else : \n          return (\"string doesnt start with the given substring\") \n  else : \n      return (\"entered string isnt a substring\")",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_824",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef remove_even(l):\n    \"\"\" Write a python function to remove even numbers from a given list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert remove_even([1,3,5,2]) == [1,3,5]\n    assert remove_even([5,6,7]) == [5,7]\n    assert remove_even([1,2,3,4]) == [1,3]",
        "expected_answer": "def remove_even(l):\n    for i in l:\n        if i % 2 == 0:\n            l.remove(i)\n    return l",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_825",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef access_elements(nums, list_index):\n    \"\"\" Write a python function to access multiple elements of specified index from a given list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert access_elements([2,3,8,4,7,9],[0,3,5]) == [2, 4, 9]\n    assert access_elements([1, 2, 3, 4, 5],[1,2]) == [2,3]\n    assert access_elements([1,0,2,3],[0,1]) == [1,0]",
        "expected_answer": "def access_elements(nums, list_index):\n    result = [nums[i] for i in list_index]\n    return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_826",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef check_Type_Of_Triangle(a,b,c):\n    \"\"\" Write a python function to find the type of triangle from the given sides. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert check_Type_Of_Triangle(1,2,3) == \"Obtuse-angled Triangle\"\n    assert check_Type_Of_Triangle(2,2,2) == \"Acute-angled Triangle\"\n    assert check_Type_Of_Triangle(1,0,1) == \"Right-angled Triangle\"",
        "expected_answer": "def check_Type_Of_Triangle(a,b,c): \n    sqa = pow(a,2) \n    sqb = pow(b,2) \n    sqc = pow(c,2) \n    if (sqa == sqa + sqb or sqb == sqa + sqc or sqc == sqa + sqb): \n        return (\"Right-angled Triangle\") \n    elif (sqa > sqc + sqb or sqb > sqa + sqc or sqc > sqa + sqb): \n        return (\"Obtuse-angled Triangle\") \n    else: \n        return (\"Acute-angled Triangle\")",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_827",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef sum_column(list1, C):\n    \"\"\" Write a function to sum a specific column of a list in a given list of lists. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],0)==12\n    assert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],1)==15\n    assert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],3)==9",
        "expected_answer": "def sum_column(list1, C):\n    result = sum(row[C] for row in list1)\n    return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_828",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef count_alpha_dig_spl(string):\n    \"\"\" Write a function to count alphabets,digits and special charactes in a given string. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert count_alpha_dig_spl(\"abc!@#123\")==(3,3,3)\n    assert count_alpha_dig_spl(\"dgsuy@#$%&1255\")==(5,4,5)\n    assert count_alpha_dig_spl(\"fjdsif627348#%$^&\")==(6,6,5)",
        "expected_answer": "def count_alpha_dig_spl(string):\n  alphabets=digits = special = 0\n  for i in range(len(string)):\n    if(string[i].isalpha()):\n        alphabets = alphabets + 1\n    elif(string[i].isdigit()):\n        digits = digits + 1\n    else:\n        special = special + 1\n  return (alphabets,digits,special)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_829",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef second_frequent(input):\n    \"\"\" Write a function to find out the second most repeated (or frequent) string in the given sequence. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert second_frequent(['aaa','bbb','ccc','bbb','aaa','aaa']) == 'bbb'\n    assert second_frequent(['abc','bcd','abc','bcd','bcd','bcd']) == 'abc'\n    assert second_frequent(['cdma','gsm','hspa','gsm','cdma','cdma']) == 'gsm'",
        "expected_answer": "from collections import Counter \n\t\ndef second_frequent(input): \n\tdict = Counter(input) \n\tvalue = sorted(dict.values(), reverse=True)  \n\tsecond_large = value[1] \n\tfor (key, val) in dict.items(): \n\t\tif val == second_large: \n\t\t\treturn (key)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_830",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef round_up(a, digits):\n    \"\"\" Write a function to round up a number to specific digits. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert round_up(123.01247,0)==124\n    assert round_up(123.01247,1)==123.1\n    assert round_up(123.01247,2)==123.02",
        "expected_answer": "import math\ndef round_up(a, digits):\n    n = 10**-digits\n    return round(math.ceil(a / n) * n, digits)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_831",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef count_Pairs(arr,n):\n    \"\"\" Write a python function to count equal element pairs from the given array. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert count_Pairs([1,1,1,1],4) == 6\n    assert count_Pairs([1,5,1],3) == 1\n    assert count_Pairs([3,2,1,7,8,9],6) == 0",
        "expected_answer": "def count_Pairs(arr,n): \n    cnt = 0; \n    for i in range(n): \n        for j in range(i + 1,n): \n            if (arr[i] == arr[j]): \n                cnt += 1; \n    return cnt;",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_832",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef extract_max(input):\n    \"\"\" Write a function to extract the maximum numeric value from a string by using regex. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert extract_max('100klh564abc365bg') == 564\n    assert extract_max('hello300how546mer231') == 546\n    assert extract_max('its233beenalong343journey234') == 343",
        "expected_answer": "import re \ndef extract_max(input): \n\tnumbers = re.findall('\\d+',input) \n\tnumbers = map(int,numbers) \n\treturn max(numbers)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_833",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef get_key(dict):\n    \"\"\" Write a function to get dictionary keys as a list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert get_key({1:'python',2:'java'})==[1,2]\n    assert get_key({10:'red',20:'blue',30:'black'})==[10,20,30]\n    assert get_key({27:'language',39:'java',44:'little'})==[27,39,44]",
        "expected_answer": "def get_key(dict): \n    list = [] \n    for key in dict.keys(): \n        list.append(key)           \n    return list",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_834",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef generate_matrix(n):\n    \"\"\" Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert generate_matrix(3)==[[1, 2, 3], [8, 9, 4], [7, 6, 5]] \n    assert generate_matrix(2)==[[1,2],[4,3]]\n    assert generate_matrix(7)==[[1, 2, 3, 4, 5, 6, 7], [24, 25, 26, 27, 28, 29, 8], [23, 40, 41, 42, 43, 30, 9], [22, 39, 48, 49, 44, 31, 10], [21, 38, 47, 46, 45, 32, 11], [20, 37, 36, 35, 34, 33, 12], [19, 18, 17, 16, 15, 14, 13]]",
        "expected_answer": "def generate_matrix(n):\n        if n<=0:\n            return [] \n        matrix=[row[:] for row in [[0]*n]*n]        \n        row_st=0\n        row_ed=n-1        \n        col_st=0\n        col_ed=n-1\n        current=1        \n        while (True):\n            if current>n*n:\n                break\n            for c in range (col_st, col_ed+1):\n                matrix[row_st][c]=current\n                current+=1\n            row_st+=1\n            for r in range (row_st, row_ed+1):\n                matrix[r][col_ed]=current\n                current+=1\n            col_ed-=1\n            for c in range (col_ed, col_st-1, -1):\n                matrix[row_ed][c]=current\n                current+=1\n            row_ed-=1\n            for r in range (row_ed, row_st-1, -1):\n                matrix[r][col_st]=current\n                current+=1\n            col_st+=1\n        return matrix",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_835",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef slope(x1,y1,x2,y2):\n    \"\"\" Write a python function to find the slope of a line. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert slope(4,2,2,5) == -1.5\n    assert slope(2,4,4,6) == 1\n    assert slope(1,2,4,2) == 0",
        "expected_answer": "def slope(x1,y1,x2,y2): \n    return (float)(y2-y1)/(x2-x1)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_836",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef max_sub_array_sum(a,size):\n    \"\"\" Write a function to find length of the subarray having maximum sum. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3],8) == 5\n    assert max_sub_array_sum([1, -2, 1, 1, -2, 1],6) == 2\n    assert max_sub_array_sum([-1, -2, 3, 4, 5],5) == 3",
        "expected_answer": "from sys import maxsize \ndef max_sub_array_sum(a,size): \n\tmax_so_far = -maxsize - 1\n\tmax_ending_here = 0\n\tstart = 0\n\tend = 0\n\ts = 0\n\tfor i in range(0,size): \n\t\tmax_ending_here += a[i] \n\t\tif max_so_far < max_ending_here: \n\t\t\tmax_so_far = max_ending_here \n\t\t\tstart = s \n\t\t\tend = i \n\t\tif max_ending_here < 0: \n\t\t\tmax_ending_here = 0\n\t\t\ts = i+1\n\treturn (end - start + 1)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_837",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef cube_Sum(n):\n    \"\"\" Write a python function to find the cube sum of first n odd natural numbers. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert cube_Sum(2) == 28\n    assert cube_Sum(3) == 153\n    assert cube_Sum(4) == 496",
        "expected_answer": "def cube_Sum(n): \n    sum = 0   \n    for i in range(0,n) : \n        sum += (2*i+1)*(2*i+1)*(2*i+1) \n    return sum",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_838",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef min_Swaps(s1,s2) :\n    \"\"\" Write a python function to find minimum number swaps required to make two binary strings equal. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert min_Swaps(\"0011\",\"1111\") == 1\n    assert min_Swaps(\"00011\",\"01001\") == 2\n    assert min_Swaps(\"111\",\"111\") == 0",
        "expected_answer": "def min_Swaps(s1,s2) :  \n    c0 = 0; c1 = 0;  \n    for i in range(len(s1)) :  \n        if (s1[i] == '0' and s2[i] == '1') : \n            c0 += 1;    \n        elif (s1[i] == '1' and s2[i] == '0') : \n            c1 += 1;  \n    result = c0 // 2 + c1 // 2;  \n    if (c0 % 2 == 0 and c1 % 2 == 0) : \n        return result;  \n    elif ((c0 + c1) % 2 == 0) : \n        return result + 2;  \n    else : \n        return -1;",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_839",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef sort_tuple(tup):\n    \"\"\" Write a function to sort the tuples alphabetically by the first item of each tuple. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert sort_tuple([(\"Amana\", 28), (\"Zenat\", 30), (\"Abhishek\", 29),(\"Nikhil\", 21), (\"B\", \"C\")]) == [('Abhishek', 29), ('Amana', 28), ('B', 'C'), ('Nikhil', 21), ('Zenat', 30)]\n    assert sort_tuple([(\"aaaa\", 28), (\"aa\", 30), (\"bab\", 29), (\"bb\", 21), (\"csa\", \"C\")]) == [('aa', 30), ('aaaa', 28), ('bab', 29), ('bb', 21), ('csa', 'C')]\n    assert sort_tuple([(\"Sarala\", 28), (\"Ayesha\", 30), (\"Suman\", 29),(\"Sai\", 21), (\"G\", \"H\")]) == [('Ayesha', 30), ('G', 'H'), ('Sai', 21), ('Sarala', 28), ('Suman', 29)]",
        "expected_answer": "def sort_tuple(tup): \n\tn = len(tup) \n\tfor i in range(n): \n\t\tfor j in range(n-i-1): \n\t\t\tif tup[j][0] > tup[j + 1][0]: \n\t\t\t\ttup[j], tup[j + 1] = tup[j + 1], tup[j] \n\treturn tup",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_840",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef Check_Solution(a,b,c):\n    \"\"\" Write a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert Check_Solution(2,0,-1) == \"Yes\"\n    assert Check_Solution(1,-5,6) == \"No\"\n    assert Check_Solution(2,0,2) == \"Yes\"",
        "expected_answer": "def Check_Solution(a,b,c):  \n    if b == 0:  \n        return (\"Yes\")  \n    else: \n        return (\"No\")",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_841",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef get_inv_count(arr, n):\n    \"\"\" Write a function to count the number of inversions in the given array. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert get_inv_count([1, 20, 6, 4, 5], 5) == 5\n    assert get_inv_count([8, 4, 2, 1], 4) == 6\n    assert get_inv_count([3, 1, 2], 3) == 2",
        "expected_answer": "def get_inv_count(arr, n): \n\tinv_count = 0\n\tfor i in range(n): \n\t\tfor j in range(i + 1, n): \n\t\t\tif (arr[i] > arr[j]): \n\t\t\t\tinv_count += 1\n\treturn inv_count",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_842",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef get_odd_occurence(arr, arr_size):\n    \"\"\" Write a function to find the number which occurs for odd number of times in the given array. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert get_odd_occurence([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13) == 5\n    assert get_odd_occurence([1, 2, 3, 2, 3, 1, 3], 7) == 3\n    assert get_odd_occurence([5, 7, 2, 7, 5, 2, 5], 7) == 5",
        "expected_answer": "def get_odd_occurence(arr, arr_size):\n  for i in range(0, arr_size):\n    count = 0\n    for j in range(0, arr_size):\n      if arr[i] == arr[j]:\n        count += 1\n    if (count % 2 != 0):\n      return arr[i]\n  return -1",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_843",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef nth_super_ugly_number(n, primes):\n    \"\"\" Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert nth_super_ugly_number(12,[2,7,13,19])==32\n    assert nth_super_ugly_number(10,[2,7,13,19])==26\n    assert nth_super_ugly_number(100,[2,7,13,19])==5408",
        "expected_answer": "import heapq\ndef nth_super_ugly_number(n, primes):\n    uglies = [1]\n    def gen(prime):\n        for ugly in uglies:\n            yield ugly * prime\n    merged = heapq.merge(*map(gen, primes))\n    while len(uglies) < n:\n        ugly = next(merged)\n        if ugly != uglies[-1]:\n            uglies.append(ugly)\n    return uglies[-1]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_844",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef get_Number(n, k):\n    \"\"\" Write a python function to find the kth element in an array containing odd elements first and then even elements. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert get_Number(8,5) == 2\n    assert get_Number(7,2) == 3\n    assert get_Number(5,2) == 3",
        "expected_answer": "def get_Number(n, k): \n    arr = [0] * n; \n    i = 0; \n    odd = 1; \n    while (odd <= n):   \n        arr[i] = odd; \n        i += 1; \n        odd += 2;\n    even = 2; \n    while (even <= n): \n        arr[i] = even; \n        i += 1;\n        even += 2; \n    return arr[k - 1];",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_845",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef find_Digits(n):\n    \"\"\" Write a python function to count the number of digits in factorial of a given number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find_Digits(7) == 4\n    assert find_Digits(5) == 3\n    assert find_Digits(4) == 2",
        "expected_answer": "import math \ndef find_Digits(n): \n    if (n < 0): \n        return 0;\n    if (n <= 1): \n        return 1; \n    x = ((n * math.log10(n / math.e) + math.log10(2 * math.pi * n) /2.0)); \n    return math.floor(x) + 1;",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_846",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef find_platform(arr, dep, n):\n    \"\"\" Write a function to find the minimum number of platforms required for a railway/bus station. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find_platform([900, 940, 950, 1100, 1500, 1800],[910, 1200, 1120, 1130, 1900, 2000],6)==3\n    assert find_platform([100,200,300,400],[700,800,900,1000],4)==4\n    assert find_platform([5,6,7,8],[4,3,2,1],4)==1",
        "expected_answer": "def find_platform(arr, dep, n): \n    arr.sort() \n    dep.sort() \n    plat_needed = 1\n    result = 1\n    i = 1\n    j = 0\n    while (i < n and j < n): \n        if (arr[i] <= dep[j]):           \n            plat_needed+= 1\n            i+= 1\n        elif (arr[i] > dep[j]):           \n            plat_needed-= 1\n            j+= 1\n        if (plat_needed > result):  \n            result = plat_needed           \n    return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_847",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef lcopy(xs):\n    \"\"\" Write a python function to copy a list from a singleton tuple. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert lcopy([1, 2, 3]) == [1, 2, 3]\n    assert lcopy([4, 8, 2, 10, 15, 18]) == [4, 8, 2, 10, 15, 18]\n    assert lcopy([4, 5, 6]) == [4, 5, 6]\n",
        "expected_answer": "def lcopy(xs):\n  return xs[:]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_848",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef area_trapezium(base1,base2,height):\n    \"\"\" Write a function to find the area of a trapezium. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert area_trapezium(6,9,4)==30\n    assert area_trapezium(10,20,30)==450\n    assert area_trapezium(15,25,35)==700",
        "expected_answer": "def area_trapezium(base1,base2,height):\n area = 0.5 * (base1 + base2) * height\n return area",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_849",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef Sum(N):\n    \"\"\" Write a python function to find sum of all prime divisors of a given number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert Sum(60) == 10\n    assert Sum(39) == 16\n    assert Sum(40) == 7",
        "expected_answer": "def Sum(N): \n    SumOfPrimeDivisors = [0]*(N + 1)   \n    for i in range(2,N + 1) : \n        if (SumOfPrimeDivisors[i] == 0) : \n            for j in range(i,N + 1,i) : \n                SumOfPrimeDivisors[j] += i           \n    return SumOfPrimeDivisors[N]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_850",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef is_triangleexists(a,b,c):\n    \"\"\" Write a function to check if a triangle of positive area is possible with the given angles. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert is_triangleexists(50,60,70)==True\n    assert is_triangleexists(90,45,45)==True\n    assert is_triangleexists(150,30,70)==False",
        "expected_answer": "def is_triangleexists(a,b,c): \n    if(a != 0 and b != 0 and c != 0 and (a + b + c)== 180): \n        if((a + b)>= c or (b + c)>= a or (a + c)>= b): \n            return True \n        else:\n            return False\n    else:\n        return False",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_851",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef Sum_of_Inverse_Divisors(N,Sum):\n    \"\"\" Write a python function to find sum of inverse of divisors. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert Sum_of_Inverse_Divisors(6,12) == 2\n    assert Sum_of_Inverse_Divisors(9,13) == 1.44\n    assert Sum_of_Inverse_Divisors(1,4) == 4",
        "expected_answer": "def Sum_of_Inverse_Divisors(N,Sum): \n    ans = float(Sum)*1.0 /float(N);  \n    return round(ans,2);",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_852",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef remove_negs(num_list):\n    \"\"\" Write a python function to remove negative numbers from a list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert remove_negs([1,-2,3,-4]) == [1,3]\n    assert remove_negs([1,2,3,-4]) == [1,2,3]\n    assert remove_negs([4,5,-6,7,-8]) == [4,5,7]",
        "expected_answer": "def remove_negs(num_list): \n    for item in num_list: \n        if item < 0: \n           num_list.remove(item) \n    return num_list",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_853",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef sum_of_odd_Factors(n):\n    \"\"\" Write a python function to find sum of odd factors of a number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert sum_of_odd_Factors(30) == 24\n    assert sum_of_odd_Factors(18) == 13\n    assert sum_of_odd_Factors(2) == 1",
        "expected_answer": "import math\ndef sum_of_odd_Factors(n): \n    res = 1\n    while n % 2 == 0: \n        n = n // 2 \n    for i in range(3,int(math.sqrt(n) + 1)): \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while n % i == 0: \n            count+=1 \n            n = n // i \n            curr_term *= i \n            curr_sum += curr_term    \n        res *= curr_sum  \n    if n >= 2: \n        res *= (1 + n) \n    return res",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_854",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef raw_heap(rawheap):\n    \"\"\" Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert raw_heap([25, 44, 68, 21, 39, 23, 89])==[21, 25, 23, 44, 39, 68, 89]\n    assert raw_heap([25, 35, 22, 85, 14, 65, 75, 25, 58])== [14, 25, 22, 25, 35, 65, 75, 85, 58]\n    assert raw_heap([4, 5, 6, 2])==[2, 4, 6, 5]",
        "expected_answer": "import heapq as hq\ndef raw_heap(rawheap):\n  hq.heapify(rawheap)\n  return rawheap",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_855",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef check_Even_Parity(x):\n    \"\"\" Write a python function to check for even parity of a given number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert check_Even_Parity(10) == True\n    assert check_Even_Parity(11) == False\n    assert check_Even_Parity(18) == True",
        "expected_answer": "def check_Even_Parity(x): \n    parity = 0\n    while (x != 0): \n        x = x & (x - 1) \n        parity += 1\n    if (parity % 2 == 0): \n        return True\n    else: \n        return False",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_856",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef find_Min_Swaps(arr,n) :\n    \"\"\" Write a python function to find minimum adjacent swaps required to sort binary array. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find_Min_Swaps([1,0,1,0],4) == 3\n    assert find_Min_Swaps([0,1,0],3) == 1\n    assert find_Min_Swaps([0,0,1,1,0],5) == 2",
        "expected_answer": "def find_Min_Swaps(arr,n) : \n    noOfZeroes = [0] * n \n    count = 0 \n    noOfZeroes[n - 1] = 1 - arr[n - 1] \n    for i in range(n-2,-1,-1) : \n        noOfZeroes[i] = noOfZeroes[i + 1] \n        if (arr[i] == 0) : \n            noOfZeroes[i] = noOfZeroes[i] + 1\n    for i in range(0,n) : \n        if (arr[i] == 1) : \n            count = count + noOfZeroes[i] \n    return count",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_857",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef listify_list(list1):\n    \"\"\" Write a function to list out the list of given strings individually using map function. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert listify_list(['Red', 'Blue', 'Black', 'White', 'Pink'])==[['R', 'e', 'd'], ['B', 'l', 'u', 'e'], ['B', 'l', 'a', 'c', 'k'], ['W', 'h', 'i', 't', 'e'], ['P', 'i', 'n', 'k']]\n    assert listify_list(['python'])==[['p', 'y', 't', 'h', 'o', 'n']]\n    assert listify_list([' red ', 'green',' black', 'blue ',' orange', 'brown'])==[[' ', 'r', 'e', 'd', ' '], ['g', 'r', 'e', 'e', 'n'], [' ', 'b', 'l', 'a', 'c', 'k'], ['b', 'l', 'u', 'e', ' '], [' ', 'o', 'r', 'a', 'n', 'g', 'e'], ['b', 'r', 'o', 'w', 'n']]",
        "expected_answer": "def listify_list(list1):\n  result = list(map(list,list1)) \n  return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_858",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef count_list(input_list):\n    \"\"\" Write a function to count number of lists in a given list of lists and square the count. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert count_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==25\n    assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]] )==16\n    assert count_list([[2, 4], [[6,8], [4,5,8]], [10, 12, 14]])==9",
        "expected_answer": "def count_list(input_list): \n    return (len(input_list))**2",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_859",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef sub_lists(my_list):\n    \"\"\" Write a function to generate all sublists of a given list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert sub_lists([10, 20, 30, 40])==[[], [10], [20], [30], [40], [10, 20], [10, 30], [10, 40], [20, 30], [20, 40], [30, 40], [10, 20, 30], [10, 20, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]]\n    assert sub_lists(['X', 'Y', 'Z'])==[[], ['X'], ['Y'], ['Z'], ['X', 'Y'], ['X', 'Z'], ['Y', 'Z'], ['X', 'Y', 'Z']]\n    assert sub_lists([1,2,3])==[[],[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3]]",
        "expected_answer": "from itertools import combinations\ndef sub_lists(my_list):\n\tsubs = []\n\tfor i in range(0, len(my_list)+1):\n\t  temp = [list(x) for x in combinations(my_list, i)]\n\t  if len(temp)>0:\n\t    subs.extend(temp)\n\treturn subs",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_860",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef check_alphanumeric(string):\n    \"\"\" Write a function to check whether the given string is ending with only alphanumeric characters or not using regex. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert check_alphanumeric(\"dawood@\") == 'Discard'\n    assert check_alphanumeric(\"skdmsam326\") == 'Accept'\n    assert check_alphanumeric(\"cooltricks@\") == 'Discard'",
        "expected_answer": "import re \nregex = '[a-zA-z0-9]$'\ndef check_alphanumeric(string): \n\tif(re.search(regex, string)): \n\t\treturn (\"Accept\") \n\telse: \n\t\treturn (\"Discard\")",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_861",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef anagram_lambda(texts,str):\n    \"\"\" Write a function to find all anagrams of a string in a given list of strings using lambda function. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert anagram_lambda([\"bcda\", \"abce\", \"cbda\", \"cbea\", \"adcb\"],\"abcd\")==['bcda', 'cbda', 'adcb']\n    assert anagram_lambda([\"recitals\",\" python\"], \"articles\" )==[\"recitals\"]\n    assert anagram_lambda([\" keep\",\" abcdef\",\" xyz\"],\" peek\")==[\" keep\"]",
        "expected_answer": "from collections import Counter \ndef anagram_lambda(texts,str):\n  result = list(filter(lambda x: (Counter(str) == Counter(x)), texts)) \n  return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_862",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef n_common_words(text,n):\n    \"\"\" Write a function to find the occurrences of n most common words in a given text. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert n_common_words(\"python is a programming language\",1)==[('python', 1)]\n    assert n_common_words(\"python is a programming language\",1)==[('python', 1)]\n    assert n_common_words(\"python is a programming language\",5)==[('python', 1),('is', 1), ('a', 1), ('programming', 1), ('language', 1)]",
        "expected_answer": "from collections import Counter\nimport re\ndef n_common_words(text,n):\n  words = re.findall('\\w+',text)\n  n_common_words= Counter(words).most_common(n)\n  return list(n_common_words)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_863",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef find_longest_conseq_subseq(arr, n):\n    \"\"\" Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find_longest_conseq_subseq([1, 2, 2, 3], 4) == 3\n    assert find_longest_conseq_subseq([1, 9, 3, 10, 4, 20, 2], 7) == 4\n    assert find_longest_conseq_subseq([36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42], 11) == 5",
        "expected_answer": "def find_longest_conseq_subseq(arr, n): \n\tans = 0\n\tcount = 0\n\tarr.sort() \n\tv = [] \n\tv.append(arr[0]) \n\tfor i in range(1, n): \n\t\tif (arr[i] != arr[i - 1]): \n\t\t\tv.append(arr[i]) \n\tfor i in range(len(v)): \n\t\tif (i > 0 and v[i] == v[i - 1] + 1): \n\t\t\tcount += 1\n\t\telse: \n\t\t\tcount = 1\n\t\tans = max(ans, count) \n\treturn ans",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_864",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef palindrome_lambda(texts):\n    \"\"\" Write a function to find palindromes in a given list of strings using lambda function. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert palindrome_lambda([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==['php', 'aaa']\n    assert palindrome_lambda([\"abcd\", \"Python\", \"abba\", \"aba\"])==['abba', 'aba']\n    assert palindrome_lambda([\"abcd\", \"abbccbba\", \"abba\", \"aba\"])==['abbccbba', 'abba', 'aba']",
        "expected_answer": "def palindrome_lambda(texts):\n  result = list(filter(lambda x: (x == \"\".join(reversed(x))), texts))\n  return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_865",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef ntimes_list(nums,n):\n    \"\"\" Write a function to print n-times a list using map function. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert ntimes_list([1, 2, 3, 4, 5, 6, 7],3)==[3, 6, 9, 12, 15, 18, 21]\n    assert ntimes_list([1, 2, 3, 4, 5, 6, 7],4)==[4, 8, 12, 16, 20, 24, 28]\n    assert ntimes_list([1, 2, 3, 4, 5, 6, 7],10)==[10, 20, 30, 40, 50, 60, 70]",
        "expected_answer": "def ntimes_list(nums,n):\n    result = map(lambda x:n*x, nums) \n    return list(result)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_866",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef check_monthnumb(monthname2):\n    \"\"\" Write a function to check whether the given month name contains 31 days or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert check_monthnumb(\"February\")==False\n    assert check_monthnumb(\"January\")==True\n    assert check_monthnumb(\"March\")==True",
        "expected_answer": "def check_monthnumb(monthname2):\n  if(monthname2==\"January\" or monthname2==\"March\"or monthname2==\"May\" or monthname2==\"July\" or monthname2==\"Augest\" or monthname2==\"October\" or monthname2==\"December\"):\n    return True\n  else:\n    return False",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_867",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef min_Num(arr,n):\n    \"\"\" Write a python function to add a minimum number such that the sum of array becomes even. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert min_Num([1,2,3,4,5,6,7,8,9],9) == 1\n    assert min_Num([1,2,3,4,5,6,7,8],8) == 2\n    assert min_Num([1,2,3],3) == 2",
        "expected_answer": "def min_Num(arr,n):  \n    odd = 0\n    for i in range(n): \n        if (arr[i] % 2): \n            odd += 1 \n    if (odd % 2): \n        return 1\n    return 2",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_868",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef length_Of_Last_Word(a):\n    \"\"\" Write a python function to find the length of the last word in a given string. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert length_Of_Last_Word(\"python language\") == 8\n    assert length_Of_Last_Word(\"PHP\") == 3\n    assert length_Of_Last_Word(\"\") == 0",
        "expected_answer": "def length_Of_Last_Word(a): \n    l = 0\n    x = a.strip() \n    for i in range(len(x)): \n        if x[i] == \" \": \n            l = 0\n        else: \n            l += 1\n    return l",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_869",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef remove_list_range(list1, leftrange, rigthrange):\n    \"\"\" Write a function to remove sublists from a given list of lists, which are outside a given range. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],13,17)==[[13, 14, 15, 17]]\n    assert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],1,3)==[[2], [1, 2, 3]]\n    assert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],0,7)==[[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7]]",
        "expected_answer": "def remove_list_range(list1, leftrange, rigthrange):\n   result = [i for i in list1 if (min(i)>=leftrange and max(i)<=rigthrange)]\n   return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_870",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef sum_positivenum(nums):\n    \"\"\" Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert sum_positivenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==48\n    assert sum_positivenum([10,15,-14,13,-18,12,-20])==50\n    assert sum_positivenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==522",
        "expected_answer": "def sum_positivenum(nums):\n  sum_positivenum = list(filter(lambda nums:nums>0,nums))\n  return sum(sum_positivenum)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_871",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef are_Rotations(string1,string2):\n    \"\"\" Write a python function to check whether the given strings are rotations of each other or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert are_Rotations(\"abc\",\"cba\") == False\n    assert are_Rotations(\"abcd\",\"cdba\") == False\n    assert are_Rotations(\"abacd\",\"cdaba\") == True",
        "expected_answer": "def are_Rotations(string1,string2): \n    size1 = len(string1) \n    size2 = len(string2) \n    temp = '' \n    if size1 != size2: \n        return False\n    temp = string1 + string1 \n    if (temp.count(string2)> 0): \n        return True\n    else: \n        return False",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_872",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef check_subset(list1,list2):\n    \"\"\" Write a function to check if a nested list is a subset of another nested list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert check_subset([[1, 3], [5, 7], [9, 11], [13, 15, 17]] ,[[1, 3],[13,15,17]])==True\n    assert check_subset([[1, 2], [2, 3], [3, 4], [5, 6]],[[3, 4], [5, 6]])==True\n    assert check_subset([[[1, 2], [2, 3]], [[3, 4], [5, 7]]],[[[3, 4], [5, 6]]])==False",
        "expected_answer": "def check_subset(list1,list2): \n    return all(map(list1.__contains__,list2))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_873",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef fibonacci(n):\n    \"\"\" Write a function to solve the fibonacci sequence using recursion. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert fibonacci(7) == 13\n    assert fibonacci(8) == 21\n    assert fibonacci(9) == 34",
        "expected_answer": "def fibonacci(n):\n  if n == 1 or n == 2:\n    return 1\n  else:\n    return (fibonacci(n - 1) + (fibonacci(n - 2)))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_874",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef check_Concat(str1,str2):\n    \"\"\" Write a python function to check if the string is a concatenation of another string. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert check_Concat(\"abcabcabc\",\"abc\") == True\n    assert check_Concat(\"abcab\",\"abc\") == False\n    assert check_Concat(\"aba\",\"ab\") == False",
        "expected_answer": "def check_Concat(str1,str2):\n    N = len(str1)\n    M = len(str2)\n    if (N % M != 0):\n        return False\n    for i in range(N):\n        if (str1[i] != str2[i % M]):\n            return False         \n    return True",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_875",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef min_difference(test_list):\n    \"\"\" Write a function to find the minimum difference in the tuple pairs of given tuples. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert min_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 1\n    assert min_difference([(4, 6), (12, 8), (11, 4), (2, 13)]) == 2\n    assert min_difference([(5, 17), (3, 9), (12, 5), (3, 24)]) == 6",
        "expected_answer": "def min_difference(test_list):\n  temp = [abs(b - a) for a, b in test_list]\n  res = min(temp)\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_876",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef lcm(x, y):\n    \"\"\" Write a python function to find lcm of two positive integers. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert lcm(4,6) == 12\n    assert lcm(15,17) == 255\n    assert lcm(2,6) == 6",
        "expected_answer": "def lcm(x, y):\n   if x > y:\n       z = x\n   else:\n       z = y\n   while(True):\n       if((z % x == 0) and (z % y == 0)):\n           lcm = z\n           break\n       z += 1\n   return lcm",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_877",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef sort_String(str) :\n    \"\"\" Write a python function to sort the given string. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert sort_String(\"cba\") == \"abc\"\n    assert sort_String(\"data\") == \"aadt\"\n    assert sort_String(\"zxy\") == \"xyz\"",
        "expected_answer": "def sort_String(str) : \n    str = ''.join(sorted(str)) \n    return (str)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_878",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef check_tuples(test_tuple, K):\n    \"\"\" Write a function to check if the given tuple contains only k elements. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert check_tuples((3, 5, 6, 5, 3, 6),[3, 6, 5]) == True\n    assert check_tuples((4, 5, 6, 4, 6, 5),[4, 5, 6]) == True\n    assert check_tuples((9, 8, 7, 6, 8, 9),[9, 8, 1]) == False",
        "expected_answer": "def check_tuples(test_tuple, K):\n  res = all(ele in K for ele in test_tuple)\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_879",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef text_match(text):\n    \"\"\" Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert text_match(\"aabbbbd\") == 'Not matched!'\n    assert text_match(\"aabAbbbc\") == 'Not matched!'\n    assert text_match(\"accddbbjjjb\") == 'Found a match!'",
        "expected_answer": "import re\ndef text_match(text):\n  patterns = 'a.*?b$'\n  if re.search(patterns,  text):\n    return ('Found a match!')\n  else:\n    return ('Not matched!')",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_880",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef Check_Solution(a,b,c) :\n    \"\"\" Write a python function to find number of solutions in quadratic equation. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert Check_Solution(2,5,2) == \"2 solutions\"\n    assert Check_Solution(1,1,1) == \"No solutions\"\n    assert Check_Solution(1,2,1) == \"1 solution\"",
        "expected_answer": "def Check_Solution(a,b,c) : \n    if ((b*b) - (4*a*c)) > 0 : \n        return (\"2 solutions\") \n    elif ((b*b) - (4*a*c)) == 0 : \n        return (\"1 solution\") \n    else : \n        return (\"No solutions\")",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_881",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef sum_even_odd(list1):\n    \"\"\" Write a function to find the sum of first even and odd number of a given list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert sum_even_odd([1,3,5,7,4,1,6,8])==5\n    assert sum_even_odd([1,2,3,4,5,6,7,8,9,10])==3\n    assert sum_even_odd([1,5,7,9,10])==11",
        "expected_answer": "def sum_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even+first_odd)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_882",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef parallelogram_perimeter(b,h):\n    \"\"\" Write a function to caluclate perimeter of a parallelogram. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert parallelogram_perimeter(10,20)==400\n    assert parallelogram_perimeter(15,20)==600\n    assert parallelogram_perimeter(8,9)==144",
        "expected_answer": "def parallelogram_perimeter(b,h):\n  perimeter=2*(b*h)\n  return perimeter",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_883",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef div_of_nums(nums,m,n):\n    \"\"\" Write a function to find numbers divisible by m and n from a list of numbers using lambda function. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],2,4)==[ 152,44]\n    assert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[10]\n    assert div_of_nums([10,15,14,13,18,12,20],10,5)==[10,20]",
        "expected_answer": "def div_of_nums(nums,m,n):\n result = list(filter(lambda x: (x % m == 0 and x % n == 0), nums)) \n return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_884",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef all_Bits_Set_In_The_Given_Range(n,l,r):\n    \"\"\" Write a python function to check whether all the bits are within a given range or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert all_Bits_Set_In_The_Given_Range(10,2,1) == True \n    assert all_Bits_Set_In_The_Given_Range(5,2,4) == False\n    assert all_Bits_Set_In_The_Given_Range(22,2,3) == True ",
        "expected_answer": "def all_Bits_Set_In_The_Given_Range(n,l,r): \n    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1) \n    new_num = n & num \n    if (num == new_num): \n        return True\n    return False",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_885",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef is_Isomorphic(str1,str2):\n    \"\"\" Write a python function to check whether the two given strings are isomorphic to each other or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert is_Isomorphic(\"paper\",\"title\") == True\n    assert is_Isomorphic(\"ab\",\"ba\") == True\n    assert is_Isomorphic(\"ab\",\"aa\") == False",
        "expected_answer": "def is_Isomorphic(str1,str2):          \n    dict_str1 = {}\n    dict_str2 = {}\n    for i, value in enumerate(str1):\n        dict_str1[value] = dict_str1.get(value,[]) + [i]        \n    for j, value in enumerate(str2):\n        dict_str2[value] = dict_str2.get(value,[]) + [j]\n    if sorted(dict_str1.values()) == sorted(dict_str2.values()):\n        return True\n    else:\n        return False",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_886",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef sum_num(numbers):\n    \"\"\" Write a function to add all the numbers in a list and divide it with the length of the list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert sum_num((8, 2, 3, 0, 7))==4.0\n    assert sum_num((-10,-20,-30))==-20.0\n    assert sum_num((19,15,18))==17.333333333333332",
        "expected_answer": "def sum_num(numbers):\n    total = 0\n    for x in numbers:\n        total += x\n    return total/len(numbers)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_887",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef is_odd(n) :\n    \"\"\" Write a python function to check whether the given number is odd or not using bitwise operator. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert is_odd(5) == True\n    assert is_odd(6) == False\n    assert is_odd(7) == True",
        "expected_answer": "def is_odd(n) : \n    if (n^1 == n-1) :\n        return True; \n    else :\n        return False;",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_888",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef substract_elements(test_tup1, test_tup2):\n    \"\"\" Write a function to substract the elements of the given nested tuples. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert substract_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((-5, -4), (1, -4), (1, 8), (-6, 7))\n    assert substract_elements(((13, 4), (14, 6), (13, 10), (12, 11)), ((19, 8), (14, 10), (12, 2), (18, 4))) == ((-6, -4), (0, -4), (1, 8), (-6, 7))\n    assert substract_elements(((19, 5), (18, 7), (19, 11), (17, 12)), ((12, 9), (17, 11), (13, 3), (19, 5))) == ((7, -4), (1, -4), (6, 8), (-2, 7))",
        "expected_answer": "def substract_elements(test_tup1, test_tup2):\n  res = tuple(tuple(a - b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_889",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef reverse_list_lists(lists):\n    \"\"\" Write a function to reverse each list in a given list of lists. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert reverse_list_lists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])==[[4, 3, 2, 1], [8, 7, 6, 5], [12, 11, 10, 9], [16, 15, 14, 13]]\n    assert reverse_list_lists([[1,2],[2,3],[3,4]])==[[2,1],[3,2],[4,3]]\n    assert reverse_list_lists([[10,20],[30,40]])==[[20,10],[40,30]]",
        "expected_answer": "def reverse_list_lists(lists):\n    for l in lists:\n        l.sort(reverse = True)\n    return lists",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_890",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef find_Extra(arr1,arr2,n) :\n    \"\"\" Write a python function to find the index of an extra element present in one sorted array. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find_Extra([1,2,3,4],[1,2,3],3) == 3\n    assert find_Extra([2,4,6,8,10],[2,4,6,8],4) == 4\n    assert find_Extra([1,3,5,7,9,11],[1,3,5,7,9],5) == 5",
        "expected_answer": "def find_Extra(arr1,arr2,n) : \n    for i in range(0, n) : \n        if (arr1[i] != arr2[i]) : \n            return i \n    return n",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_891",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef same_Length(A,B):\n    \"\"\" Write a python function to check whether the given two numbers have same number of digits or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert same_Length(12,1) == False\n    assert same_Length(2,2) == True\n    assert same_Length(10,20) == True",
        "expected_answer": "def same_Length(A,B): \n    while (A > 0 and B > 0): \n        A = A / 10; \n        B = B / 10; \n    if (A == 0 and B == 0): \n        return True; \n    return False;",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_892",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef remove_spaces(text):\n    \"\"\" Write a function to remove multiple spaces in a string. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert remove_spaces('python  program')==('python program')\n    assert remove_spaces('python   programming    language')==('python programming language')\n    assert remove_spaces('python                     program')==('python program')",
        "expected_answer": "import re\ndef remove_spaces(text):\n return (re.sub(' +',' ',text))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_893",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef Extract(lst):\n    \"\"\" Write a python function to get the last element of each sublist. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert Extract([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [3, 5, 9]\n    assert Extract([['x', 'y', 'z'], ['m'], ['a', 'b'], ['u', 'v']]) == ['z', 'm', 'b', 'v']\n    assert Extract([[1, 2, 3], [4, 5]]) == [3, 5]",
        "expected_answer": "def Extract(lst): \n    return [item[-1] for item in lst]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_894",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef float_to_tuple(test_str):\n    \"\"\" Write a function to convert the given string of float type into tuple. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert float_to_tuple(\"1.2, 1.3, 2.3, 2.4, 6.5\") == (1.2, 1.3, 2.3, 2.4, 6.5)\n    assert float_to_tuple(\"2.3, 2.4, 5.6, 5.4, 8.9\") == (2.3, 2.4, 5.6, 5.4, 8.9)\n    assert float_to_tuple(\"0.3, 0.5, 7.8, 9.4\") == (0.3, 0.5, 7.8, 9.4)",
        "expected_answer": "def float_to_tuple(test_str):\n  res = tuple(map(float, test_str.split(', ')))\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_895",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef max_sum_subseq(A):\n    \"\"\" Write a function to find the maximum sum of subsequences of given array with no adjacent elements. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert max_sum_subseq([1, 2, 9, 4, 5, 0, 4, 11, 6]) == 26\n    assert max_sum_subseq([1, 2, 9, 5, 6, 0, 5, 12, 7]) == 28\n    assert max_sum_subseq([1, 3, 10, 5, 6, 0, 6, 14, 21]) == 44",
        "expected_answer": "def max_sum_subseq(A):\n    n = len(A)\n    if n == 1:\n        return A[0]\n    look_up = [None] * n\n    look_up[0] = A[0]\n    look_up[1] = max(A[0], A[1])\n    for i in range(2, n):\n        look_up[i] = max(look_up[i - 1], look_up[i - 2] + A[i])\n        look_up[i] = max(look_up[i], A[i])\n    return look_up[n - 1]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_896",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef last(n):\n    \"\"\" Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert sort_list_last([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)])==[(2, 1), (1, 2), (2, 3), (4, 4), (2, 5)] \n    assert sort_list_last([(9,8), (4, 7), (3,5), (7,9), (1,2)])==[(1,2), (3,5), (4,7), (9,8), (7,9)] \n    assert sort_list_last([(20,50), (10,20), (40,40)])==[(10,20),(40,40),(20,50)] ",
        "expected_answer": "def last(n):\n   return n[-1]\ndef sort_list_last(tuples):\n  return sorted(tuples, key=last)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_897",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef is_Word_Present(sentence,word):\n    \"\"\" Write a python function to check whether the word is present in a given sentence or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert is_Word_Present(\"machine learning\",\"machine\") == True\n    assert is_Word_Present(\"easy\",\"fun\") == False\n    assert is_Word_Present(\"python language\",\"code\") == False",
        "expected_answer": "def is_Word_Present(sentence,word): \n    s = sentence.split(\" \") \n    for i in s:  \n        if (i == word): \n            return True\n    return False",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_898",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef extract_elements(numbers, n):\n    \"\"\" Write a function to extract specified number of elements from a given list, which follow each other continuously. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert extract_elements([1, 1, 3, 4, 4, 5, 6, 7],2)==[1, 4]\n    assert extract_elements([0, 1, 2, 3, 4, 4, 4, 4, 5, 7],4)==[4]\n    assert extract_elements([0,0,0,0,0],5)==[0]",
        "expected_answer": "from itertools import groupby \ndef extract_elements(numbers, n):\n    result = [i for i, j in groupby(numbers) if len(list(j)) == n] \n    return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_899",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef check(arr,n):\n    \"\"\" Write a python function to check whether an array can be sorted or not by picking only the corner elements. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert check([3,2,1,2,3,4],6) == True\n    assert check([2,1,4,5,1],5) == True\n    assert check([1,2,2,1,2,3],6) == True",
        "expected_answer": "def check(arr,n): \n    g = 0 \n    for i in range(1,n): \n        if (arr[i] - arr[i - 1] > 0 and g == 1): \n            return False\n        if (arr[i] - arr[i] < 0): \n            g = 1\n    return True",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_900",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef match_num(string):\n    \"\"\" Write a function where a string will start with a specific number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert match_num('5-2345861')==True\n    assert match_num('6-2345861')==False\n    assert match_num('78910')==False",
        "expected_answer": "import re\ndef match_num(string):\n    text = re.compile(r\"^5\")\n    if text.match(string):\n        return True\n    else:\n        return False",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_901",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef smallest_multiple(n):\n    \"\"\" Write a function to find the smallest multiple of the first n numbers. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert smallest_multiple(13)==360360\n    assert smallest_multiple(2)==2\n    assert smallest_multiple(1)==1",
        "expected_answer": "def smallest_multiple(n):\n    if (n<=2):\n      return n\n    i = n * 2\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\n    while True:\n        for a in factors:\n            if i % a != 0:\n                i += n\n                break\n            if (a == factors[-1] and i % a == 0):\n                return i",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_902",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef add_dict(d1,d2):\n    \"\"\" Write a function to combine two dictionaries by adding values for common keys. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert add_dict({'a': 100, 'b': 200, 'c':300},{'a': 300, 'b': 200, 'd':400})==({'b': 400, 'd': 400, 'a': 400, 'c': 300}) \n    assert add_dict({'a': 500, 'b': 700, 'c':900},{'a': 500, 'b': 600, 'd':900})==({'b': 1300, 'd': 900, 'a': 1000, 'c': 900}) \n    assert add_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})==({'b': 1800, 'd': 1800, 'a': 1800})",
        "expected_answer": "from collections import Counter\ndef add_dict(d1,d2):\n   add_dict = Counter(d1) + Counter(d2)\n   return add_dict",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_903",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef count_Unset_Bits(n) :\n    \"\"\" Write a python function to count the total unset bits from 1 to n. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert count_Unset_Bits(2) == 1\n    assert count_Unset_Bits(5) == 4\n    assert count_Unset_Bits(14) == 17",
        "expected_answer": "def count_Unset_Bits(n) :  \n    cnt = 0;  \n    for i in range(1,n + 1) : \n        temp = i;  \n        while (temp) :  \n            if (temp % 2 == 0) : \n                cnt += 1;  \n            temp = temp // 2;  \n    return cnt;",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_904",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef even_num(x):\n    \"\"\" Write a function to return true if the given number is even else return false. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert even_num(13.5)==False\n    assert even_num(0)==True\n    assert even_num(-9)==False",
        "expected_answer": "def even_num(x):\n  if x%2==0:\n     return True\n  else:\n    return False",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_905",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef factorial(start,end):\n    \"\"\" Write a python function to find the sum of squares of binomial co-efficients. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert sum_of_square(4) == 70\n    assert sum_of_square(5) == 252\n    assert sum_of_square(2) == 6",
        "expected_answer": "def factorial(start,end): \n    res = 1 \n    for i in range(start,end + 1): \n        res *= i      \n    return res \ndef sum_of_square(n): \n   return int(factorial(n + 1, 2 * n)  /factorial(1, n))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_906",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef extract_date(url):\n    \"\"\" Write a function to extract year, month and date from a url by using regex. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert extract_date(\"https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/\") == [('2016', '09', '02')]\n    assert extract_date(\"https://www.indiatoday.in/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death-his-brother-in-law-shares-advice-for-fans-1749646/\") == [('2020', '11', '03')]\n    assert extract_date(\"https://economictimes.indiatimes.com/news/economy/2020/12/29/finance/pension-assets-under-pfrda-touch-rs-5-32-lakh-crore/articleshow/79736619.cms\") == [('2020', '12', '29')]",
        "expected_answer": "import re\ndef extract_date(url):\n        return re.findall(r'/(\\d{4})/(\\d{1,2})/(\\d{1,2})/', url)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_907",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef lucky_num(n):\n    \"\"\" Write a function to print the first n lucky numbers. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert lucky_num(10)==[1, 3, 7, 9, 13, 15, 21, 25, 31, 33] \n    assert lucky_num(5)==[1, 3, 7, 9, 13]\n    assert lucky_num(8)==[1, 3, 7, 9, 13, 15, 21, 25]",
        "expected_answer": "def lucky_num(n):\n List=range(-1,n*n+9,2)\n i=2\n while List[i:]:List=sorted(set(List)-set(List[List[i]::List[i]]));i+=1\n return List[1:n+1]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_908",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef find_fixed_point(arr, n):\n    \"\"\" Write a function to find the fixed point in the given array. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find_fixed_point([-10, -1, 0, 3, 10, 11, 30, 50, 100],9) == 3\n    assert find_fixed_point([1, 2, 3, 4, 5, 6, 7, 8],8) == -1\n    assert find_fixed_point([0, 2, 5, 8, 17],5) == 0",
        "expected_answer": "def find_fixed_point(arr, n): \n\tfor i in range(n): \n\t\tif arr[i] is i: \n\t\t\treturn i \n\treturn -1",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_909",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef previous_palindrome(num):\n    \"\"\" Write a function to find the previous palindrome of a specified number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert previous_palindrome(99)==88\n    assert previous_palindrome(1221)==1111\n    assert previous_palindrome(120)==111",
        "expected_answer": "def previous_palindrome(num):\n    for x in range(num-1,0,-1):\n        if str(x) == str(x)[::-1]:\n            return x",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_910",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef check_date(m, d, y):\n    \"\"\" Write a function to validate a gregorian date. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert check_date(11,11,2002)==True\n    assert check_date(13,11,2002)==False\n    assert check_date('11','11','2002')==True",
        "expected_answer": "import datetime\ndef check_date(m, d, y):\n    try:\n        m, d, y = map(int, (m, d, y))\n        datetime.date(y, m, d)\n        return True\n    except ValueError:\n        return False",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_911",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef maximum_product(nums):\n    \"\"\" Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert maximum_product( [12, 74, 9, 50, 61, 41])==225700\n    assert maximum_product([25, 35, 22, 85, 14, 65, 75, 25, 58])==414375\n    assert maximum_product([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==2520",
        "expected_answer": "def maximum_product(nums):\n    import heapq\n    a, b = heapq.nlargest(3, nums), heapq.nsmallest(2, nums)\n    return max(a[0] * a[1] * a[2], a[0] * b[0] * b[1])",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_912",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef binomial_coeff(n, k):\n    \"\"\" Write a function to find ln, m lobb number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert int(lobb_num(5, 3)) == 35\n    assert int(lobb_num(3, 2)) == 5\n    assert int(lobb_num(4, 2)) == 20",
        "expected_answer": "def binomial_coeff(n, k): \n\tC = [[0 for j in range(k + 1)] \n\t\t\tfor i in range(n + 1)] \n\tfor i in range(0, n + 1): \n\t\tfor j in range(0, min(i, k) + 1): \n\t\t\tif (j == 0 or j == i): \n\t\t\t\tC[i][j] = 1\n\t\t\telse: \n\t\t\t\tC[i][j] = (C[i - 1][j - 1] \n\t\t\t\t\t\t\t+ C[i - 1][j]) \n\treturn C[n][k] \ndef lobb_num(n, m): \n\treturn (((2 * m + 1) *\n\t\tbinomial_coeff(2 * n, m + n)) \n\t\t\t\t\t/ (m + n + 1))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_913",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef end_num(string):\n    \"\"\" Write a function to check for a number at the end of a string. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert end_num('abcdef')==False\n    assert end_num('abcdef7')==True\n    assert end_num('abc')==False",
        "expected_answer": "import re\ndef end_num(string):\n    text = re.compile(r\".*[0-9]$\")\n    if text.match(string):\n        return True\n    else:\n        return False",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_914",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef is_Two_Alter(s):\n    \"\"\" Write a python function to check whether the given string is made up of two alternating characters or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert is_Two_Alter(\"abab\") == True\n    assert is_Two_Alter(\"aaaa\") == False\n    assert is_Two_Alter(\"xyz\") == False",
        "expected_answer": "def is_Two_Alter(s):  \n    for i in range (len( s) - 2) : \n        if (s[i] != s[i + 2]) : \n            return False\n    if (s[0] == s[1]): \n        return False\n    return True",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_915",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef rearrange_numbs(array_nums):\n    \"\"\" Write a function to rearrange positive and negative numbers in a given array using lambda function. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert rearrange_numbs([-1, 2, -3, 5, 7, 8, 9, -10])==[2, 5, 7, 8, 9, -10, -3, -1]\n    assert rearrange_numbs([10,15,14,13,-18,12,-20])==[10, 12, 13, 14, 15, -20, -18]\n    assert rearrange_numbs([-20,20,-10,10,-30,30])==[10, 20, 30, -30, -20, -10]",
        "expected_answer": "def rearrange_numbs(array_nums):\n  result = sorted(array_nums, key = lambda i: 0 if i == 0 else -1 / i)\n  return result",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_916",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef find_triplet_array(A, arr_size, sum):\n    \"\"\" Write a function to find if there is a triplet in the array whose sum is equal to a given value. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find_triplet_array([1, 4, 45, 6, 10, 8], 6, 22) == (4, 10, 8)\n    assert find_triplet_array([12, 3, 5, 2, 6, 9], 6, 24) == (12, 3, 9)\n    assert find_triplet_array([1, 2, 3, 4, 5], 5, 9) == (1, 3, 5)",
        "expected_answer": "def find_triplet_array(A, arr_size, sum): \n\tfor i in range( 0, arr_size-2): \n\t\tfor j in range(i + 1, arr_size-1): \n\t\t\tfor k in range(j + 1, arr_size): \n\t\t\t\tif A[i] + A[j] + A[k] == sum: \n\t\t\t\t\treturn  A[i],A[j],A[k] \n\t\t\t\t\treturn True\n\treturn False",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_917",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef text_uppercase_lowercase(text):\n    \"\"\" Write a function to find the sequences of one upper case letter followed by lower case letters. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert text_uppercase_lowercase(\"AaBbGg\")==('Found a match!')\n    assert text_uppercase_lowercase(\"aA\")==('Not matched!')\n    assert text_uppercase_lowercase(\"PYTHON\")==('Not matched!')",
        "expected_answer": "import re\ndef text_uppercase_lowercase(text):\n        patterns = '[A-Z]+[a-z]+$'\n        if re.search(patterns, text):\n                return 'Found a match!'\n        else:\n                return ('Not matched!')",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_918",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef coin_change(S, m, n):\n    \"\"\" Write a function to count coin change. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert coin_change([1, 2, 3],3,4)==4\n    assert coin_change([4,5,6,7,8,9],6,9)==2\n    assert coin_change([4,5,6,7,8,9],6,4)==1",
        "expected_answer": "def coin_change(S, m, n): \n    table = [[0 for x in range(m)] for x in range(n+1)] \n    for i in range(m): \n        table[0][i] = 1\n    for i in range(1, n+1): \n        for j in range(m): \n            x = table[i - S[j]][j] if i-S[j] >= 0 else 0\n            y = table[i][j-1] if j >= 1 else 0 \n            table[i][j] = x + y   \n    return table[n][m-1]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_919",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef multiply_list(items):\n    \"\"\" Write a python function to multiply all items in the list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert multiply_list([1,-2,3]) == -6\n    assert multiply_list([1,2,3,4]) == 24\n    assert multiply_list([3,1,2,3]) == 18",
        "expected_answer": "def multiply_list(items):\n    tot = 1\n    for x in items:\n        tot *= x\n    return tot",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_920",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef remove_tuple(test_list):\n    \"\"\" Write a function to remove all tuples with all none values in the given tuple list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert remove_tuple([(None, 2), (None, None), (3, 4), (12, 3), (None, )] ) == '[(None, 2), (3, 4), (12, 3)]'\n    assert remove_tuple([(None, None), (None, None), (3, 6), (17, 3), (None,1 )] ) == '[(3, 6), (17, 3), (None, 1)]'\n    assert remove_tuple([(1, 2), (2, None), (3, None), (24, 3), (None, None )] ) == '[(1, 2), (2, None), (3, None), (24, 3)]'",
        "expected_answer": "def remove_tuple(test_list):\n  res = [sub for sub in test_list if not all(ele == None for ele in sub)]\n  return (str(res))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_921",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef chunk_tuples(test_tup, N):\n    \"\"\" Write a function to perform chunking of tuples each of size n. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert chunk_tuples((10, 4, 5, 6, 7, 6, 8, 3, 4), 3) == [(10, 4, 5), (6, 7, 6), (8, 3, 4)]\n    assert chunk_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9), 2) == [(1, 2), (3, 4), (5, 6), (7, 8), (9,)]\n    assert chunk_tuples((11, 14, 16, 17, 19, 21, 22, 25), 4) == [(11, 14, 16, 17), (19, 21, 22, 25)]",
        "expected_answer": "def chunk_tuples(test_tup, N):\n  res = [test_tup[i : i + N] for i in range(0, len(test_tup), N)]\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_922",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef max_product(arr):\n    \"\"\" Write a function to find a pair with the highest product from a given array of integers. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert max_product([1, 2, 3, 4, 7, 0, 8, 4])==(7, 8)\n    assert max_product([0, -1, -2, -4, 5, 0, -6])==(-4, -6)\n    assert max_product([1, 3, 5, 6, 8, 9])==(8,9)",
        "expected_answer": "def max_product(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return None     \n    x = arr[0]; y = arr[1]    \n    for i in range(0, arr_len): \n        for j in range(i + 1, arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_923",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef super_seq(X, Y, m, n):\n    \"\"\" Write a function to find the length of the shortest string that has both str1 and str2 as subsequences. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert super_seq(\"AGGTAB\", \"GXTXAYB\", 6, 7) == 9\n    assert super_seq(\"feek\", \"eke\", 4, 3) == 5\n    assert super_seq(\"PARRT\", \"RTA\", 5, 3) == 6",
        "expected_answer": "def super_seq(X, Y, m, n):\n\tif (not m):\n\t\treturn n\n\tif (not n):\n\t\treturn m\n\tif (X[m - 1] == Y[n - 1]):\n\t\treturn 1 + super_seq(X, Y, m - 1, n - 1)\n\treturn 1 + min(super_seq(X, Y, m - 1, n),\tsuper_seq(X, Y, m, n - 1))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_924",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef max_of_two( x, y ):\n    \"\"\" Write a function to find maximum of two numbers. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert max_of_two(10,20)==20\n    assert max_of_two(19,15)==19\n    assert max_of_two(-10,-20)==-10",
        "expected_answer": "def max_of_two( x, y ):\n    if x > y:\n        return x\n    return y",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_925",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef mutiple_tuple(nums):\n    \"\"\" Write a python function to calculate the product of all the numbers of a given tuple. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert mutiple_tuple((4, 3, 2, 2, -1, 18)) == -864\n    assert mutiple_tuple((1,2,3)) == 6\n    assert mutiple_tuple((-2,-4,-6)) == -48",
        "expected_answer": "def mutiple_tuple(nums):\n    temp = list(nums)\n    product = 1 \n    for x in temp:\n        product *= x\n    return product",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_926",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef binomial_coeffi(n, k):\n    \"\"\" Write a function to find n-th rencontres number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert rencontres_number(7, 2) == 924\n    assert rencontres_number(3, 0) == 2\n    assert rencontres_number(3, 1) == 3",
        "expected_answer": "def binomial_coeffi(n, k): \n\tif (k == 0 or k == n): \n\t\treturn 1\n\treturn (binomial_coeffi(n - 1, k - 1) \n\t\t+ binomial_coeffi(n - 1, k)) \ndef rencontres_number(n, m): \n\tif (n == 0 and m == 0): \n\t\treturn 1\n\tif (n == 1 and m == 0): \n\t\treturn 0\n\tif (m == 0): \n\t\treturn ((n - 1) * (rencontres_number(n - 1, 0)+ rencontres_number(n - 2, 0))) \n\treturn (binomial_coeffi(n, m) * rencontres_number(n - m, 0))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_927",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef __init__(self, data):\n    \"\"\" Write a function to calculate the height of the given binary tree. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert (max_height(root)) == 3\n    assert (max_height(root1)) == 5 \n    assert (max_height(root2)) == 4",
        "expected_answer": "class Node: \n\tdef __init__(self, data): \n\t\tself.data = data \n\t\tself.left = None\n\t\tself.right = None\ndef max_height(node): \n\tif node is None: \n\t\treturn 0 ; \n\telse : \n\t\tleft_height = max_height(node.left) \n\t\tright_height = max_height(node.right) \n\t\tif (left_height > right_height): \n\t\t\treturn left_height+1\n\t\telse: \n\t\t\treturn right_height+1",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_928",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef change_date_format(dt):\n    \"\"\" Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert change_date_format('2026-01-02')=='02-01-2026'\n    assert change_date_format('2021-01-04')=='04-01-2021'\n    assert change_date_format('2030-06-06')=='06-06-2030'",
        "expected_answer": "import re\ndef change_date_format(dt):\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\n        return change_date_format(dt)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_929",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef count_tuplex(tuplex,value):\n    \"\"\" Write a function to count repeated items of a tuple. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),4)==3\n    assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),2)==2\n    assert count_tuplex((2, 4, 7, 7, 7, 3, 4, 4, 7),7)==4",
        "expected_answer": "def count_tuplex(tuplex,value):  \n  count = tuplex.count(value)\n  return count",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_930",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef text_match(text):\n    \"\"\" Write a function that matches a string that has an a followed by zero or more b's by using regex. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert text_match(\"msb\") == 'Not matched!'\n    assert text_match(\"a0c\") == 'Found a match!'\n    assert text_match(\"abbc\") == 'Found a match!'",
        "expected_answer": "import re\ndef text_match(text):\n        patterns = 'ab*?'\n        if re.search(patterns,  text):\n                return ('Found a match!')\n        else:\n                return ('Not matched!')",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_931",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef sum_series(number):\n    \"\"\" Write a function to calculate the sum of series 1\u00b3+2\u00b3+3\u00b3+\u2026.+n\u00b3. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert sum_series(7)==784\n    assert sum_series(5)==225\n    assert sum_series(15)==14400",
        "expected_answer": "import math \ndef sum_series(number):\n total = 0\n total = math.pow((number * (number + 1)) /2, 2)\n return total",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_932",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef remove_duplic_list(l):\n    \"\"\" Write a function to remove duplicate words from a given list of strings. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\"])==['Python', 'Exercises', 'Practice', 'Solution']\n    assert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"Java\"])==['Python', 'Exercises', 'Practice', 'Solution', 'Java']\n    assert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"C++\",\"C\",\"C++\"])==['Python', 'Exercises', 'Practice', 'Solution','C++','C']",
        "expected_answer": "def remove_duplic_list(l):\n    temp = []\n    for x in l:\n        if x not in temp:\n            temp.append(x)\n    return temp",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_933",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef camel_to_snake(text):\n    \"\"\" Write a function to convert camel case string to snake case string by using regex. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert camel_to_snake('GoogleAssistant') == 'google_assistant'\n    assert camel_to_snake('ChromeCast') == 'chrome_cast'\n    assert camel_to_snake('QuadCore') == 'quad_core'",
        "expected_answer": "import re\ndef camel_to_snake(text):\n  str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\n  return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_934",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef dealnnoy_num(n, m):\n    \"\"\" Write a function to find the nth delannoy number. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert dealnnoy_num(3, 4) == 129\n    assert dealnnoy_num(3, 3) == 63\n    assert dealnnoy_num(4, 5) == 681",
        "expected_answer": "def dealnnoy_num(n, m): \n\tif (m == 0 or n == 0) : \n\t\treturn 1\n\treturn dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_935",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef series_sum(number):\n    \"\"\" Write a function to calculate the sum of series 1\u00b2+2\u00b2+3\u00b2+\u2026.+n\u00b2. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert series_sum(6)==91\n    assert series_sum(7)==140\n    assert series_sum(12)==650",
        "expected_answer": "def series_sum(number):\n total = 0\n total = (number * (number + 1) * (2 * number + 1)) / 6\n return total",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_936",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef re_arrange_tuples(test_list, ord_list):\n    \"\"\" Write a function to re-arrange the given tuples based on the given ordered list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert re_arrange_tuples([(4, 3), (1, 9), (2, 10), (3, 2)],  [1, 4, 2, 3]) == [(1, 9), (4, 3), (2, 10), (3, 2)]\n    assert re_arrange_tuples([(5, 4), (2, 10), (3, 11), (4, 3)],  [3, 4, 2, 3]) == [(3, 11), (4, 3), (2, 10), (3, 11)]\n    assert re_arrange_tuples([(6, 3), (3, 8), (5, 7), (2, 4)],  [2, 5, 3, 6]) == [(2, 4), (5, 7), (3, 8), (6, 3)]",
        "expected_answer": "def re_arrange_tuples(test_list, ord_list):\n  temp = dict(test_list)\n  res = [(key, temp[key]) for key in ord_list]\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_937",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef max_char(str1):\n    \"\"\" Write a function to count the most common character in a given string. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert max_char(\"hello world\")==('l')\n    assert max_char(\"hello \")==('l')\n    assert max_char(\"python pr\")==('p')",
        "expected_answer": "from collections import Counter \ndef max_char(str1):\n    temp = Counter(str1) \n    max_char = max(temp, key = temp.get)\n    return max_char",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_938",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef find_closet(A, B, C, p, q, r):\n    \"\"\" Write a function to find three closest elements from three sorted arrays. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert find_closet([1, 4, 10],[2, 15, 20],[10, 12],3,3,2) == (10, 15, 10)\n    assert find_closet([20, 24, 100],[2, 19, 22, 79, 800],[10, 12, 23, 24, 119],3,5,5) == (24, 22, 23)\n    assert find_closet([2, 5, 11],[3, 16, 21],[11, 13],3,3,2) == (11, 16, 11)",
        "expected_answer": "import sys \n\ndef find_closet(A, B, C, p, q, r): \n\tdiff = sys.maxsize \n\tres_i = 0\n\tres_j = 0\n\tres_k = 0\n\ti = 0\n\tj = 0\n\tk = 0\n\twhile(i < p and j < q and k < r): \n\t\tminimum = min(A[i], min(B[j], C[k])) \n\t\tmaximum = max(A[i], max(B[j], C[k])); \n\t\tif maximum-minimum < diff: \n\t\t\tres_i = i \n\t\t\tres_j = j \n\t\t\tres_k = k \n\t\t\tdiff = maximum - minimum; \n\t\tif diff == 0: \n\t\t\tbreak\n\t\tif A[i] == minimum: \n\t\t\ti = i+1\n\t\telif B[j] == minimum: \n\t\t\tj = j+1\n\t\telse: \n\t\t\tk = k+1\n\treturn A[res_i],B[res_j],C[res_k]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_939",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef sorted_models(models):\n    \"\"\" Write a function to sort a list of dictionaries using lambda function. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert sorted_models([{'make':'Nokia', 'model':216, 'color':'Black'}, {'make':'Mi Max', 'model':2, 'color':'Gold'}, {'make':'Samsung', 'model': 7, 'color':'Blue'}])==[{'make': 'Nokia', 'model': 216, 'color': 'Black'}, {'make': 'Samsung', 'model': 7, 'color': 'Blue'}, {'make': 'Mi Max', 'model': 2, 'color': 'Gold'}]\n    assert sorted_models([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])==([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])\n    assert sorted_models([{'make':'micromax','model':40,'color':'grey'},{'make':'poco','model':60,'color':'blue'}])==([{'make':'poco','model':60,'color':'blue'},{'make':'micromax','model':40,'color':'grey'}])",
        "expected_answer": "def sorted_models(models):\n sorted_models = sorted(models, key = lambda x: x['color'])\n return sorted_models",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_940",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef heap_sort(arr):\n    \"\"\" Write a function to sort the given array by using heap sort. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert heap_sort([12, 2, 4, 5, 2, 3]) == [2, 2, 3, 4, 5, 12]\n    assert heap_sort([32, 14, 5, 6, 7, 19]) == [5, 6, 7, 14, 19, 32]\n    assert heap_sort([21, 15, 29, 78, 65]) == [15, 21, 29, 65, 78]",
        "expected_answer": "def heap_sort(arr):\n    heapify(arr)  \n    end = len(arr) - 1\n    while end > 0:\n        arr[end], arr[0] = arr[0], arr[end]\n        shift_down(arr, 0, end - 1)\n        end -= 1\n    return arr\n\ndef heapify(arr):\n    start = len(arr) // 2\n    while start >= 0:\n        shift_down(arr, start, len(arr) - 1)\n        start -= 1\ndef shift_down(arr, start, end):\n    root = start\n    while root * 2 + 1 <= end:\n        child = root * 2 + 1\n        if child + 1 <= end and arr[child] < arr[child + 1]:\n            child += 1\n        if child <= end and arr[root] < arr[child]:\n            arr[root], arr[child] = arr[child], arr[root]\n            root = child\n        else:\n            return",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_941",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef count_elim(num):\n    \"\"\" Write a function to count the elements in a list until an element is a tuple. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert count_elim([10,20,30,(10,20),40])==3\n    assert count_elim([10,(20,30),(10,20),40])==1\n    assert count_elim([(10,(20,30,(10,20),40))])==0",
        "expected_answer": "def count_elim(num):\n  count_elim = 0\n  for n in num:\n    if isinstance(n, tuple):\n        break\n    count_elim += 1\n  return count_elim",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_942",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef check_element(test_tup, check_list):\n    \"\"\" Write a function to check if any list element is present in the given list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert check_element((4, 5, 7, 9, 3),  [6, 7, 10, 11]) == True\n    assert check_element((1, 2, 3, 4),  [4, 6, 7, 8, 9]) == True\n    assert check_element((3, 2, 1, 4, 5),  [9, 8, 7, 6]) == False",
        "expected_answer": "def check_element(test_tup, check_list):\n  res = False\n  for ele in check_list:\n    if ele in test_tup:\n      res = True\n      break\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_943",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef combine_lists(num1,num2):\n    \"\"\" Write a function to combine two given sorted lists using heapq module. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert combine_lists([1, 3, 5, 7, 9, 11],[0, 2, 4, 6, 8, 10])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    assert combine_lists([1, 3, 5, 6, 8, 9], [2, 5, 7, 11])==[1,2,3,5,5,6,7,8,9,11]\n    assert combine_lists([1,3,7],[2,4,6])==[1,2,3,4,6,7]",
        "expected_answer": "from heapq import merge\ndef combine_lists(num1,num2):\n  combine_lists=list(merge(num1, num2))\n  return combine_lists",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_944",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef num_position(text):\n    \"\"\" Write a function to separate and print the numbers and their position of a given string. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert num_position(\"there are 70 flats in this apartment\")==10\n    assert num_position(\"every adult have 32 teeth\")==17\n    assert num_position(\"isha has 79 chocolates in her bag\")==9",
        "expected_answer": "import re\ndef num_position(text):\n for m in re.finditer(\"\\d+\", text):\n    return m.start()",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_945",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef tuple_to_set(t):\n    \"\"\" Write a function to convert the given tuples into set. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert tuple_to_set(('x', 'y', 'z') ) == {'y', 'x', 'z'}\n    assert tuple_to_set(('a', 'b', 'c') ) == {'c', 'a', 'b'}\n    assert tuple_to_set(('z', 'd', 'e') ) == {'d', 'e', 'z'}",
        "expected_answer": "def tuple_to_set(t):\n  s = set(t)\n  return (s)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_946",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef most_common_elem(s,a):\n    \"\"\" Write a function to find the most common elements and their counts of a specified text. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert most_common_elem('lkseropewdssafsdfafkpwe',3)==[('s', 4), ('e', 3), ('f', 3)] \n    assert most_common_elem('lkseropewdssafsdfafkpwe',2)==[('s', 4), ('e', 3)]\n    assert most_common_elem('lkseropewdssafsdfafkpwe',7)==[('s', 4), ('e', 3), ('f', 3), ('k', 2), ('p', 2), ('w', 2), ('d', 2)]",
        "expected_answer": "from collections import Counter \ndef most_common_elem(s,a):\n  most_common_elem=Counter(s).most_common(a)\n  return most_common_elem",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_947",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef len_log(list1):\n    \"\"\" Write a python function to find the length of the shortest word. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert len_log([\"win\",\"lose\",\"great\"]) == 3\n    assert len_log([\"a\",\"ab\",\"abc\"]) == 1\n    assert len_log([\"12\",\"12\",\"1234\"]) == 2",
        "expected_answer": "def len_log(list1):\n    min=len(list1[0])\n    for i in list1:\n        if len(i)<min:\n            min=len(i)\n    return min",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_948",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef get_item(tup1,index):\n    \"\"\" Write a function to get an item of a tuple. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),3)==('e')\n    assert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-4)==('u')\n    assert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-3)==('r')",
        "expected_answer": "def get_item(tup1,index):\n  item = tup1[index]\n  return item",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_949",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef count_digs(tup):\n    \"\"\" Write a function to sort the given tuple list basis the total digits in tuple. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert sort_list([(3, 4, 6, 723), (1, 2), (12345,), (134, 234, 34)] ) == '[(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]'\n    assert sort_list([(3, 4, 8), (1, 2), (1234335,), (1345, 234, 334)] ) == '[(1, 2), (3, 4, 8), (1234335,), (1345, 234, 334)]'\n    assert sort_list([(34, 4, 61, 723), (1, 2), (145,), (134, 23)] ) == '[(1, 2), (145,), (134, 23), (34, 4, 61, 723)]'",
        "expected_answer": "def count_digs(tup):\n  return sum([len(str(ele)) for ele in tup ]) \ndef sort_list(test_list):\n  test_list.sort(key = count_digs)\n  return (str(test_list))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_950",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef chinese_zodiac(year):\n    \"\"\" Write a function to display sign of the chinese zodiac for given year. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert chinese_zodiac(1997)==('Ox')\n    assert chinese_zodiac(1998)==('Tiger')\n    assert chinese_zodiac(1994)==('Dog')",
        "expected_answer": "def chinese_zodiac(year):\n if (year - 2000) % 12 == 0:\n     sign = 'Dragon'\n elif (year - 2000) % 12 == 1:\n     sign = 'Snake'\n elif (year - 2000) % 12 == 2:\n     sign = 'Horse'\n elif (year - 2000) % 12 == 3:\n     sign = 'sheep'\n elif (year - 2000) % 12 == 4:\n     sign = 'Monkey'\n elif (year - 2000) % 12 == 5:\n     sign = 'Rooster'\n elif (year - 2000) % 12 == 6:\n     sign = 'Dog'\n elif (year - 2000) % 12 == 7:\n     sign = 'Pig'\n elif (year - 2000) % 12 == 8:\n     sign = 'Rat'\n elif (year - 2000) % 12 == 9:\n     sign = 'Ox'\n elif (year - 2000) % 12 == 10:\n     sign = 'Tiger'\n else:\n     sign = 'Hare'\n return sign",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_951",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef max_similar_indices(test_list1, test_list2):\n    \"\"\" Write a function to find the maximum of similar indices in two lists of tuples. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert max_similar_indices([(2, 4), (6, 7), (5, 1)],[(5, 4), (8, 10), (8, 14)]) == [(5, 4), (8, 10), (8, 14)]\n    assert max_similar_indices([(3, 5), (7, 8), (6, 2)],[(6, 5), (9, 11), (9, 15)]) == [(6, 5), (9, 11), (9, 15)]\n    assert max_similar_indices([(4, 6), (8, 9), (7, 3)],[(7, 6), (10, 12), (10, 16)]) == [(7, 6), (10, 12), (10, 16)]",
        "expected_answer": "def max_similar_indices(test_list1, test_list2):\n  res = [(max(x[0], y[0]), max(x[1], y[1]))\n   for x, y in zip(test_list1, test_list2)]\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_952",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef nCr_mod_p(n, r, p):\n    \"\"\" Write a function to compute the value of ncr mod p. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert nCr_mod_p(10, 2, 13) == 6\n    assert nCr_mod_p(11, 3, 14) == 11\n    assert nCr_mod_p(18, 14, 19) == 1",
        "expected_answer": "def nCr_mod_p(n, r, p): \n\tif (r > n- r): \n\t\tr = n - r \n\tC = [0 for i in range(r + 1)] \n\tC[0] = 1 \n\tfor i in range(1, n + 1): \n\t\tfor j in range(min(i, r), 0, -1): \n\t\t\tC[j] = (C[j] + C[j-1]) % p \n\treturn C[r]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_953",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef subset(ar, n):\n    \"\"\" Write a python function to find the minimun number of subsets with distinct elements. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert subset([1, 2, 3, 4],4) == 1\n    assert subset([5, 6, 9, 3, 4, 3, 4],7) == 2\n    assert subset([1, 2, 3 ],3) == 1",
        "expected_answer": "def subset(ar, n): \n    res = 0\n    ar.sort() \n    for i in range(0, n) : \n        count = 1\n        for i in range(n - 1): \n            if ar[i] == ar[i + 1]: \n                count+=1\n            else: \n                break \n        res = max(res, count)  \n    return res",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_954",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef profit_amount(actual_cost,sale_amount):\n    \"\"\" Write a function that gives profit amount if the given amount has profit else return none. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert profit_amount(1500,1200)==300\n    assert profit_amount(100,200)==None\n    assert profit_amount(2000,5000)==None",
        "expected_answer": "def profit_amount(actual_cost,sale_amount): \n if(actual_cost > sale_amount):\n    amount = actual_cost - sale_amount\n    return amount\n else:\n    return None",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_955",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef is_abundant(n):\n    \"\"\" Write a function to find out, if the given number is abundant. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert is_abundant(12)==True\n    assert is_abundant(13)==False\n    assert is_abundant(9)==False",
        "expected_answer": "def is_abundant(n):\n    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\n    return fctrsum > n",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_956",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef split_list(text):\n    \"\"\" Write a function to split the given string at uppercase letters by using regex. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert split_list(\"LearnToBuildAnythingWithGoogle\") == ['Learn', 'To', 'Build', 'Anything', 'With', 'Google']\n    assert split_list(\"ApmlifyingTheBlack+DeveloperCommunity\") == ['Apmlifying', 'The', 'Black+', 'Developer', 'Community']\n    assert split_list(\"UpdateInTheGoEcoSystem\") == ['Update', 'In', 'The', 'Go', 'Eco', 'System']",
        "expected_answer": "import re\ndef split_list(text):\n  return (re.findall('[A-Z][^A-Z]*', text))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_957",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef get_First_Set_Bit_Pos(n):\n    \"\"\" Write a python function to get the position of rightmost set bit. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert get_First_Set_Bit_Pos(12) == 3\n    assert get_First_Set_Bit_Pos(18) == 2\n    assert get_First_Set_Bit_Pos(16) == 5",
        "expected_answer": "import math\ndef get_First_Set_Bit_Pos(n):\n     return math.log2(n&-n)+1",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_958",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef int_to_roman( num):\n    \"\"\" Write a function to convert an integer into a roman numeral. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert int_to_roman(1)==(\"I\")\n    assert int_to_roman(50)==(\"L\")\n    assert int_to_roman(4)==(\"IV\")",
        "expected_answer": "def int_to_roman( num):\n        val = [1000, 900, 500, 400,100, 90, 50, 40,10, 9, 5, 4,1]\n        syb = [\"M\", \"CM\", \"D\", \"CD\",\"C\", \"XC\", \"L\", \"XL\",\"X\", \"IX\", \"V\", \"IV\",\"I\"]\n        roman_num = ''\n        i = 0\n        while  num > 0:\n            for _ in range(num // val[i]):\n                roman_num += syb[i]\n                num -= val[i]\n            i += 1\n        return roman_num",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_959",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef Average(lst):\n    \"\"\" Write a python function to find the average of a list. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert Average([15, 9, 55, 41, 35, 20, 62, 49]) == 35.75\n    assert Average([4, 5, 1, 2, 9, 7, 10, 8]) == 5.75\n    assert Average([1,2,3]) == 2",
        "expected_answer": "def Average(lst): \n    return sum(lst) / len(lst)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_960",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef get_noOfways(n):\n    \"\"\" Write a function to solve tiling problem. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert get_noOfways(4)==3\n    assert get_noOfways(3)==2\n    assert get_noOfways(5)==5",
        "expected_answer": "def get_noOfways(n):\n    if (n == 0):\n        return 0;\n    if (n == 1):\n        return 1; \n    return get_noOfways(n - 1) + get_noOfways(n - 2);",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_961",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef roman_to_int(s):\n    \"\"\" Write a function to convert a roman numeral to an integer. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert roman_to_int('MMMCMLXXXVI')==3986\n    assert roman_to_int('MMMM')==4000\n    assert roman_to_int('C')==100",
        "expected_answer": "def roman_to_int(s):\n        rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n        int_val = 0\n        for i in range(len(s)):\n            if i > 0 and rom_val[s[i]] > rom_val[s[i - 1]]:\n                int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]\n            else:\n                int_val += rom_val[s[i]]\n        return int_val",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_962",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef sum_Natural(n):\n    \"\"\" Write a python function to find the sum of all even natural numbers within the range l and r. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert sum_Even(2,5) == 6\n    assert sum_Even(3,8) == 18\n    assert sum_Even(4,6) == 10",
        "expected_answer": "def sum_Natural(n): \n    sum = (n * (n + 1)) \n    return int(sum) \ndef sum_Even(l,r): \n    return (sum_Natural(int(r / 2)) - sum_Natural(int((l - 1) / 2)))",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_963",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef discriminant_value(x,y,z):\n    \"\"\" Write a function to calculate the discriminant value. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert discriminant_value(4,8,2)==(\"Two solutions\",32)\n    assert discriminant_value(5,7,9)==(\"no real solution\",-131)\n    assert discriminant_value(0,0,9)==(\"one solution\",0)",
        "expected_answer": "def discriminant_value(x,y,z):\n    discriminant = (y**2) - (4*x*z)\n    if discriminant > 0:\n        return (\"Two solutions\",discriminant)\n    elif discriminant == 0:\n        return (\"one solution\",discriminant)\n    elif discriminant < 0:\n        return (\"no real solution\",discriminant)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_964",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef word_len(s):\n    \"\"\" Write a python function to check whether the length of the word is even or not. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert word_len(\"program\") == False\n    assert word_len(\"solution\") == True\n    assert word_len(\"data\") == True",
        "expected_answer": "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2==0: \n            return True  \n        else:\n          return False",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_965",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef camel_to_snake(text):\n    \"\"\" Write a function to convert camel case string to snake case string. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert camel_to_snake('PythonProgram')==('python_program')\n    assert camel_to_snake('pythonLanguage')==('python_language')\n    assert camel_to_snake('ProgrammingLanguage')==('programming_language')",
        "expected_answer": "def camel_to_snake(text):\n        import re\n        str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\n        return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_966",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n    \"\"\" Write a function to remove an empty tuple from a list of tuples. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert remove_empty([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')])==[('',), ('a', 'b'), ('a', 'b', 'c'), 'd']  \n    assert remove_empty([(), (), ('',), (\"python\"), (\"program\")])==[('',), (\"python\"), (\"program\")]  \n    assert remove_empty([(), (), ('',), (\"java\")])==[('',),(\"java\") ]  ",
        "expected_answer": "def remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n   tuple1 = [t for t in tuple1 if t]\n   return tuple1",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_967",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef check(string):\n    \"\"\" Write a python function to accept the strings which contains all vowels. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert check(\"SEEquoiaL\") == 'accepted'\n    assert check('program') == \"not accepted\"\n    assert check('fine') == \"not accepted\"",
        "expected_answer": "def check(string): \n  if len(set(string).intersection(\"AEIOUaeiou\"))>=5: \n    return ('accepted') \n  else: \n    return (\"not accepted\")",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_968",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef floor_Max(A,B,N):\n    \"\"\" Write a python function to find maximum possible value for the given periodic function. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert floor_Max(11,10,9) == 9\n    assert floor_Max(5,7,4) == 2\n    assert floor_Max(2,2,1) == 1",
        "expected_answer": "def floor_Max(A,B,N):\n    x = min(B - 1,N)\n    return (A*x) // B",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_969",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef join_tuples(test_list):\n    \"\"\" Write a function to join the tuples if they have similar initial elements. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert join_tuples([(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)] ) == [(5, 6, 7), (6, 8, 10), (7, 13)]\n    assert join_tuples([(6, 7), (6, 8), (7, 9), (7, 11), (8, 14)] ) == [(6, 7, 8), (7, 9, 11), (8, 14)]\n    assert join_tuples([(7, 8), (7, 9), (8, 10), (8, 12), (9, 15)] ) == [(7, 8, 9), (8, 10, 12), (9, 15)]",
        "expected_answer": "def join_tuples(test_list):\n  res = []\n  for sub in test_list:\n    if res and res[-1][0] == sub[0]:\n      res[-1].extend(sub[1:])\n    else:\n      res.append([ele for ele in sub])\n  res = list(map(tuple, res))\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_970",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef min_of_two( x, y ):\n    \"\"\" Write a function to find minimum of two numbers. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert min_of_two(10,20)==10\n    assert min_of_two(19,15)==15\n    assert min_of_two(-10,-20)==-20",
        "expected_answer": "def min_of_two( x, y ):\n    if x < y:\n        return x\n    return y",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_971",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef maximum_segments(n, a, b, c) :\n    \"\"\" Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert maximum_segments(7, 5, 2, 5) == 2\n    assert maximum_segments(17, 2, 1, 3) == 17\n    assert maximum_segments(18, 16, 3, 6) == 6",
        "expected_answer": "def maximum_segments(n, a, b, c) : \n\tdp = [-1] * (n + 10) \n\tdp[0] = 0\n\tfor i in range(0, n) : \n\t\tif (dp[i] != -1) : \n\t\t\tif(i + a <= n ): \n\t\t\t\tdp[i + a] = max(dp[i] + 1, \n\t\t\t\t\t\t\tdp[i + a]) \n\t\t\tif(i + b <= n ): \n\t\t\t\tdp[i + b] = max(dp[i] + 1, \n\t\t\t\t\t\t\tdp[i + b]) \n\t\t\tif(i + c <= n ): \n\t\t\t\tdp[i + c] = max(dp[i] + 1, \n\t\t\t\t\t\t\tdp[i + c]) \n\treturn dp[n]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_972",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef concatenate_nested(test_tup1, test_tup2):\n    \"\"\" Write a function to concatenate the given two tuples to a nested tuple. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert concatenate_nested((3, 4), (5, 6)) == (3, 4, 5, 6)\n    assert concatenate_nested((1, 2), (3, 4)) == (1, 2, 3, 4)\n    assert concatenate_nested((4, 5), (6, 8)) == (4, 5, 6, 8)",
        "expected_answer": "def concatenate_nested(test_tup1, test_tup2):\n  res = test_tup1 + test_tup2\n  return (res)",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_973",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef left_rotate(s,d):\n    \"\"\" Write a python function to left rotate the string. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert left_rotate(\"python\",2) == \"thonpy\"   \n    assert left_rotate(\"bigdata\",3 ) == \"databig\" \n    assert left_rotate(\"hadoop\",1 ) == \"adooph\" ",
        "expected_answer": "def left_rotate(s,d):\n    tmp = s[d : ] + s[0 : d]\n    return tmp",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    },
    {
        "task_id": "CODE_974",
        "domain": "Computer Science",
        "task_type": "Python Function Implementation",
        "prompt": "Write a Python function that follows the function name and signature provided below.\n\n```python\ndef min_sum_path(A):\n    \"\"\" Write a function to find the minimum total path sum in the given triangle. \"\"\"\n```\n\nTest Cases:\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert min_sum_path([[ 2 ], [3, 9 ], [1, 6, 7 ]]) == 6\n    assert min_sum_path([[ 2 ], [3, 7 ], [8, 5, 6 ]]) == 10 \n    assert min_sum_path([[ 3 ], [6, 4 ], [5, 2, 7 ]]) == 9",
        "expected_answer": "def min_sum_path(A): \n\tmemo = [None] * len(A) \n\tn = len(A) - 1\n\tfor i in range(len(A[n])): \n\t\tmemo[i] = A[n][i] \n\tfor i in range(len(A) - 2, -1,-1): \n\t\tfor j in range( len(A[i])): \n\t\t\tmemo[j] = A[i][j] + min(memo[j], \n\t\t\t\t\t\t\t\t\tmemo[j + 1]) \n\treturn memo[0]",
        "difficulty": "medium",
        "evaluation_metric": "test_case_execution"
    }
]